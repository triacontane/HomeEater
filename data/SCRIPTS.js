if(!window.$PARAMS) { window.$PARAMS = {} };Object.mixin(window.$PARAMS, {"testOffline":true,"resolution":{"width":1280,"height":720},"fontFamilies":[],"platform":{}});



//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Constants_9.js
window.$.noConflict();

window.$ = function(f, data, event) {
  return new ui.Formula(f, data || null, event || null);
};


/**
* Namespace for Visual Novel specific elements.
* @namespace vn
 */

window.vn = {};


/**
* Namespace for user interface elements.
* @namespace ui
 */

window.ui = {};


/**
* Namespace for universal elements.
* @namespace gs
 */

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQVFBLE1BQU0sQ0FBQyxDQUFDLENBQUMsVUFBVCxDQUFBOztBQUNBLE1BQU0sQ0FBQyxDQUFQLEdBQVcsU0FBQyxDQUFELEVBQUksSUFBSixFQUFVLEtBQVY7U0FBd0IsSUFBQSxFQUFFLENBQUMsT0FBSCxDQUFXLENBQVgsRUFBYyxJQUFBLElBQVEsSUFBdEIsRUFBNEIsS0FBQSxJQUFTLElBQXJDO0FBQXhCOzs7QUFFWDs7Ozs7QUFJQSxNQUFNLENBQUMsRUFBUCxHQUFZOzs7QUFFWjs7Ozs7QUFJQSxNQUFNLENBQUMsRUFBUCxHQUFZOzs7QUFFWiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogTmFtZXNwYWNlc1xuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG53aW5kb3cuJC5ub0NvbmZsaWN0KClcbndpbmRvdy4kID0gKGYsIGRhdGEsIGV2ZW50KSAtPiBuZXcgdWkuRm9ybXVsYShmLCBkYXRhIHx8IG51bGwsIGV2ZW50IHx8IG51bGwpXG5cbiMjIypcbiogTmFtZXNwYWNlIGZvciBWaXN1YWwgTm92ZWwgc3BlY2lmaWMgZWxlbWVudHMuXG4qIEBuYW1lc3BhY2Ugdm5cbiMjI1xud2luZG93LnZuID0ge31cblxuIyMjKlxuKiBOYW1lc3BhY2UgZm9yIHVzZXIgaW50ZXJmYWNlIGVsZW1lbnRzLlxuKiBAbmFtZXNwYWNlIHVpXG4jIyNcbndpbmRvdy51aSA9IHt9XG5cbiMjIypcbiogTmFtZXNwYWNlIGZvciB1bml2ZXJzYWwgZWxlbWVudHMuXG4qIEBuYW1lc3BhY2UgZ3NcbiMjI1xuIl19
//# sourceURL=Namespaces_9.js

/**
* Enumeration containing default colors.
*
* @module gs
* @class Colors
* @memberof gs
* @static
* @final
 */
var Colors;

Colors = (function() {
  function Colors() {}

  Colors.initialize = function() {

    /**
    * Transparent color.
    * @property TRANSPARENT
    * @type gs.Color
    * @static
    * @final
     */
    this.TRANSPARENT = new Color(0, 0, 0, 0);

    /**
    * White color.
    * @property WHITE
    * @type gs.Color
    * @static
    * @final
     */
    this.WHITE = new Color(255, 255, 255);

    /**
    * Black color.
    * @property BLACK
    * @type gs.Color
    * @static
    * @final
     */
    this.BLACK = new Color(0, 0, 0);

    /**
    * Color used for rain-particles (Weather-Effect).
    * @property RAIN_PARTICLE
    * @type gs.Color
    * @static
    * @final
     */
    this.RAIN_PARTICLE = new Color(245, 245, 255);

    /**
    * Color used for storm-particles (Weather-Effect).
    * @property STORM_PARTICLE
    * @type gs.Color
    * @static
    * @final
     */
    this.STORM_PARTICLE = this.RAIN_PARTICLE;

    /**
    * Color used for the face of snow-particles (Weather-Effect).
    * @property SNOW_PARTICLE_FACE
    * @type gs.Color
    * @static
    * @final
     */
    this.SNOW_PARTICLE_FACE = new Color(255, 255, 255);

    /**
    * Color used for the edges of snow-particles (Weather-Effect).
    * @property SNOW_PARTICLE_EDGE
    * @type gs.Color
    * @static
    * @final
     */
    return this.SNOW_PARTICLE_EDGE = new Color(255, 255, 255, 0.5);
  };

  return Colors;

})();

Colors.initialize();

window.Colors = Colors;

gs.Colors = Colors;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7O0FBQUEsSUFBQTs7QUFTTTs7O0VBQ0YsTUFBQyxDQUFBLFVBQUQsR0FBYSxTQUFBOztBQUNUOzs7Ozs7O0lBT0EsSUFBQyxDQUFBLFdBQUQsR0FBbUIsSUFBQSxLQUFBLENBQU0sQ0FBTixFQUFTLENBQVQsRUFBWSxDQUFaLEVBQWUsQ0FBZjs7QUFFbkI7Ozs7Ozs7SUFPQSxJQUFDLENBQUEsS0FBRCxHQUFhLElBQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCOztBQUViOzs7Ozs7O0lBT0EsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUEsQ0FBTSxDQUFOLEVBQVMsQ0FBVCxFQUFZLENBQVo7O0FBRWI7Ozs7Ozs7SUFPQSxJQUFDLENBQUEsYUFBRCxHQUFxQixJQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQjs7QUFFckI7Ozs7Ozs7SUFPQSxJQUFDLENBQUEsY0FBRCxHQUFrQixJQUFDLENBQUE7O0FBRW5COzs7Ozs7O0lBT0EsSUFBQyxDQUFBLGtCQUFELEdBQTBCLElBQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCOztBQUUxQjs7Ozs7OztXQU9BLElBQUMsQ0FBQSxrQkFBRCxHQUEwQixJQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixHQUFyQjtFQTlEakI7Ozs7OztBQWdFakIsTUFBTSxDQUFDLFVBQVAsQ0FBQTs7QUFDQSxNQUFNLENBQUMsTUFBUCxHQUFnQjs7QUFDaEIsRUFBRSxDQUFDLE1BQUgsR0FBWSIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29sb3JzXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiMjIypcbiogRW51bWVyYXRpb24gY29udGFpbmluZyBkZWZhdWx0IGNvbG9ycy5cbipcbiogQG1vZHVsZSBnc1xuKiBAY2xhc3MgQ29sb3JzXG4qIEBtZW1iZXJvZiBnc1xuKiBAc3RhdGljXG4qIEBmaW5hbFxuIyMjXG5jbGFzcyBDb2xvcnNcbiAgICBAaW5pdGlhbGl6ZTogLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRyYW5zcGFyZW50IGNvbG9yLlxuICAgICAgICAqIEBwcm9wZXJ0eSBUUkFOU1BBUkVOVFxuICAgICAgICAqIEB0eXBlIGdzLkNvbG9yXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQFRSQU5TUEFSRU5UID0gbmV3IENvbG9yKDAsIDAsIDAsIDApXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogV2hpdGUgY29sb3IuXG4gICAgICAgICogQHByb3BlcnR5IFdISVRFXG4gICAgICAgICogQHR5cGUgZ3MuQ29sb3JcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBAV0hJVEUgPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDI1NSlcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBCbGFjayBjb2xvci5cbiAgICAgICAgKiBAcHJvcGVydHkgQkxBQ0tcbiAgICAgICAgKiBAdHlwZSBncy5Db2xvclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBCTEFDSyA9IG5ldyBDb2xvcigwLCAwLCAwKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIENvbG9yIHVzZWQgZm9yIHJhaW4tcGFydGljbGVzIChXZWF0aGVyLUVmZmVjdCkuXG4gICAgICAgICogQHByb3BlcnR5IFJBSU5fUEFSVElDTEVcbiAgICAgICAgKiBAdHlwZSBncy5Db2xvclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBSQUlOX1BBUlRJQ0xFID0gbmV3IENvbG9yKDI0NSwgMjQ1LCAyNTUpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQ29sb3IgdXNlZCBmb3Igc3Rvcm0tcGFydGljbGVzIChXZWF0aGVyLUVmZmVjdCkuXG4gICAgICAgICogQHByb3BlcnR5IFNUT1JNX1BBUlRJQ0xFXG4gICAgICAgICogQHR5cGUgZ3MuQ29sb3JcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBAU1RPUk1fUEFSVElDTEUgPSBAUkFJTl9QQVJUSUNMRVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIENvbG9yIHVzZWQgZm9yIHRoZSBmYWNlIG9mIHNub3ctcGFydGljbGVzIChXZWF0aGVyLUVmZmVjdCkuXG4gICAgICAgICogQHByb3BlcnR5IFNOT1dfUEFSVElDTEVfRkFDRVxuICAgICAgICAqIEB0eXBlIGdzLkNvbG9yXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQFNOT1dfUEFSVElDTEVfRkFDRSA9IG5ldyBDb2xvcigyNTUsIDI1NSwgMjU1KVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIENvbG9yIHVzZWQgZm9yIHRoZSBlZGdlcyBvZiBzbm93LXBhcnRpY2xlcyAoV2VhdGhlci1FZmZlY3QpLlxuICAgICAgICAqIEBwcm9wZXJ0eSBTTk9XX1BBUlRJQ0xFX0VER0VcbiAgICAgICAgKiBAdHlwZSBncy5Db2xvclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBTTk9XX1BBUlRJQ0xFX0VER0UgPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDI1NSwgMC41KVxuICBcbkNvbG9ycy5pbml0aWFsaXplKCkgIFxud2luZG93LkNvbG9ycyA9IENvbG9yc1xuZ3MuQ29sb3JzID0gQ29sb3JzIl19
//# sourceURL=Colors_20.js

/**
* Enumeration containing default fonts.
*
* @module gs
* @class Fonts
* @memberof gs
* @static
* @final
 */
var Fonts;

Fonts = (function() {
  function Fonts() {}

  Fonts.initialize = function() {
    var size;
    size = Math.round(9 / 240 * Graphics.height);

    /**
    * Used as default font for text if no font is specified.
    *
    * @property TEXT
    * @type gs.Font
    * @static
    * @final
     */
    this.TEXT = ResourceManager.getFont("Verdana", size);
    this.TRANSPARENT = new Font("Verdana", size);
    return this.TRANSPARENT.color.alpha = 0;
  };

  return Fonts;

})();

gs.Fonts = Fonts;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7O0FBQUEsSUFBQTs7QUFTTTs7O0VBQ0YsS0FBQyxDQUFBLFVBQUQsR0FBYSxTQUFBO0FBQ1QsUUFBQTtJQUFBLElBQUEsR0FBTyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUEsR0FBSSxHQUFKLEdBQVUsUUFBUSxDQUFDLE1BQTlCOztBQUVQOzs7Ozs7OztJQVFBLElBQUMsQ0FBQSxJQUFELEdBQVEsZUFBZSxDQUFDLE9BQWhCLENBQXdCLFNBQXhCLEVBQW1DLElBQW5DO0lBQ1IsSUFBQyxDQUFBLFdBQUQsR0FBbUIsSUFBQSxJQUFBLENBQUssU0FBTCxFQUFnQixJQUFoQjtXQUNuQixJQUFDLENBQUEsV0FBVyxDQUFDLEtBQUssQ0FBQyxLQUFuQixHQUEyQjtFQWJsQjs7Ozs7O0FBZWpCLEVBQUUsQ0FBQyxLQUFILEdBQVciLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IEZvbnRzXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiMjIypcbiogRW51bWVyYXRpb24gY29udGFpbmluZyBkZWZhdWx0IGZvbnRzLlxuKlxuKiBAbW9kdWxlIGdzXG4qIEBjbGFzcyBGb250c1xuKiBAbWVtYmVyb2YgZ3NcbiogQHN0YXRpY1xuKiBAZmluYWxcbiMjI1xuY2xhc3MgRm9udHNcbiAgICBAaW5pdGlhbGl6ZTogLT5cbiAgICAgICAgc2l6ZSA9IE1hdGgucm91bmQoOSAvIDI0MCAqIEdyYXBoaWNzLmhlaWdodClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBVc2VkIGFzIGRlZmF1bHQgZm9udCBmb3IgdGV4dCBpZiBubyBmb250IGlzIHNwZWNpZmllZC5cbiAgICAgICAgKlxuICAgICAgICAqIEBwcm9wZXJ0eSBURVhUXG4gICAgICAgICogQHR5cGUgZ3MuRm9udFxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBURVhUID0gUmVzb3VyY2VNYW5hZ2VyLmdldEZvbnQoXCJWZXJkYW5hXCIsIHNpemUpXG4gICAgICAgIEBUUkFOU1BBUkVOVCA9IG5ldyBGb250KFwiVmVyZGFuYVwiLCBzaXplKVxuICAgICAgICBAVFJBTlNQQVJFTlQuY29sb3IuYWxwaGEgPSAwXG4gICAgIFxuZ3MuRm9udHMgPSBGb250cyJdfQ==
//# sourceURL=Fonts_33.js

/**
* Enumeration describing the different types of image-handling.
*
* @module gs
* @class ImageHandling
* @extends gs.Component
* @memberof gs
* @static
 */
var ImageHandling;

ImageHandling = (function() {
  function ImageHandling() {}

  ImageHandling.initialize = function() {

    /**
    * Uses full image-size.
    * @property IMAGE_SIZE
    * @type number
    * @static
    * @final
     */
    this.IMAGE_SIZE = 0;

    /**
    * Uses only half image-height.
    * @property HALF_IMAGE_HEIGHT
    * @type number
    * @static
    * @final
     */
    this.HALF_IMAGE_HEIGHT = 1;

    /**
    * Uses a custom defined source-rectangle.
    * @property CUSTOM_SIZE
    * @type number
    * @static
    * @final
     */
    return this.CUSTOM_SIZE = 2;
  };

  return ImageHandling;

})();

ImageHandling.initialize();

gs.ImageHandling = ImageHandling;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7O0FBQUEsSUFBQTs7QUFTTTs7O0VBQ0YsYUFBQyxDQUFBLFVBQUQsR0FBYSxTQUFBOztBQUNUOzs7Ozs7O0lBT0EsSUFBQyxDQUFBLFVBQUQsR0FBYzs7QUFFZDs7Ozs7OztJQU9BLElBQUMsQ0FBQSxpQkFBRCxHQUFxQjs7QUFFckI7Ozs7Ozs7V0FPQSxJQUFDLENBQUEsV0FBRCxHQUFlO0VBMUJOOzs7Ozs7QUE0QmpCLGFBQWEsQ0FBQyxVQUFkLENBQUE7O0FBQ0EsRUFBRSxDQUFDLGFBQUgsR0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IEltYWdlSGFuZGxpbmdcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuIyMjKlxuKiBFbnVtZXJhdGlvbiBkZXNjcmliaW5nIHRoZSBkaWZmZXJlbnQgdHlwZXMgb2YgaW1hZ2UtaGFuZGxpbmcuXG4qXG4qIEBtb2R1bGUgZ3NcbiogQGNsYXNzIEltYWdlSGFuZGxpbmdcbiogQGV4dGVuZHMgZ3MuQ29tcG9uZW50XG4qIEBtZW1iZXJvZiBnc1xuKiBAc3RhdGljXG4jIyNcbmNsYXNzIEltYWdlSGFuZGxpbmdcbiAgICBAaW5pdGlhbGl6ZTogLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFVzZXMgZnVsbCBpbWFnZS1zaXplLlxuICAgICAgICAqIEBwcm9wZXJ0eSBJTUFHRV9TSVpFXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQElNQUdFX1NJWkUgPSAwXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVXNlcyBvbmx5IGhhbGYgaW1hZ2UtaGVpZ2h0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBIQUxGX0lNQUdFX0hFSUdIVFxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBIQUxGX0lNQUdFX0hFSUdIVCA9IDFcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBVc2VzIGEgY3VzdG9tIGRlZmluZWQgc291cmNlLXJlY3RhbmdsZS5cbiAgICAgICAgKiBAcHJvcGVydHkgQ1VTVE9NX1NJWkVcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBAQ1VTVE9NX1NJWkUgPSAyXG4gICAgXG5JbWFnZUhhbmRsaW5nLmluaXRpYWxpemUoKVxuZ3MuSW1hZ2VIYW5kbGluZyA9IEltYWdlSGFuZGxpbmciXX0=
//# sourceURL=ImageHandling_49.js

/**
* An enumeration of easing types.
*
* @module gs
* @class EasingTypes
* @memberof gs
* @constructor
* @static
* @final
 */
var EasingTypes;

EasingTypes = (function() {
  function EasingTypes() {}

  EasingTypes.initialize = function() {

    /**
    * @property EASE_IN
    * @type number
    * @static
    * @final
     */
    this.EASE_IN = 1;

    /**
    * @property EASE_OUT
    * @type number
    * @static
    * @final
     */
    this.EASE_OUT = 0;

    /**
    * @property EASE_IN_OUT
    * @type number
    * @static
    * @final
     */
    this.EASE_IN_OUT = 2;

    /**
    * @property EASE_LINEAR
    * @type number
    * @static
    * @final
     */
    this.EASE_LINEAR = 0;

    /**
    * @property EASE_QUADRATIC
    * @type number
    * @static
    * @final
     */
    this.EASE_QUADRATIC = 1;

    /**
    * @property EASE_CUBIC
    * @type number
    * @static
    * @final
     */
    this.EASE_CUBIC = 2;

    /**
    * @property EASE_QUARTIC
    * @type number
    * @static
    * @final
     */
    this.EASE_QUARTIC = 3;

    /**
    * @property EASE_QUINTIC
    * @type number
    * @static
    * @final
     */
    this.EASE_QUINTIC = 4;

    /**
    * @property EASE_SINUSOIDAL
    * @type number
    * @static
    * @final
     */
    this.EASE_SINUSOIDAL = 5;

    /**
    * @property EASE_EXPONENTIAL
    * @type number
    * @static
    * @final
     */
    this.EASE_EXPONENTIAL = 6;

    /**
    * @property EASE_CIRCULAR
    * @type number
    * @static
    * @final
     */
    return this.EASE_CIRCULAR = 7;
  };

  return EasingTypes;

})();

EasingTypes.initialize();

gs.EasingTypes = EasingTypes;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBVU07OztFQUNGLFdBQUMsQ0FBQSxVQUFELEdBQWEsU0FBQTs7QUFDVDs7Ozs7O0lBTUEsSUFBQyxDQUFBLE9BQUQsR0FBVzs7QUFDWDs7Ozs7O0lBTUEsSUFBQyxDQUFBLFFBQUQsR0FBWTs7QUFDWjs7Ozs7O0lBTUEsSUFBQyxDQUFBLFdBQUQsR0FBZTs7QUFDZjs7Ozs7O0lBTUEsSUFBQyxDQUFBLFdBQUQsR0FBZTs7QUFDZjs7Ozs7O0lBTUEsSUFBQyxDQUFBLGNBQUQsR0FBa0I7O0FBQ2xCOzs7Ozs7SUFNQSxJQUFDLENBQUEsVUFBRCxHQUFjOztBQUNkOzs7Ozs7SUFNQSxJQUFDLENBQUEsWUFBRCxHQUFnQjs7QUFDaEI7Ozs7OztJQU1BLElBQUMsQ0FBQSxZQUFELEdBQWdCOztBQUNoQjs7Ozs7O0lBTUEsSUFBQyxDQUFBLGVBQUQsR0FBbUI7O0FBQ25COzs7Ozs7SUFNQSxJQUFDLENBQUEsZ0JBQUQsR0FBb0I7O0FBQ3BCOzs7Ozs7V0FNQSxJQUFDLENBQUEsYUFBRCxHQUFpQjtFQTdFUjs7Ozs7O0FBK0VqQixXQUFXLENBQUMsVUFBWixDQUFBOztBQUNBLEVBQUUsQ0FBQyxXQUFILEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBFYXNpbmdUeXBlc1xuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4jIyMqXG4qIEFuIGVudW1lcmF0aW9uIG9mIGVhc2luZyB0eXBlcy5cbipcbiogQG1vZHVsZSBnc1xuKiBAY2xhc3MgRWFzaW5nVHlwZXNcbiogQG1lbWJlcm9mIGdzXG4qIEBjb25zdHJ1Y3RvclxuKiBAc3RhdGljXG4qIEBmaW5hbFxuIyMjICBcbmNsYXNzIEVhc2luZ1R5cGVzXG4gICAgQGluaXRpYWxpemU6IC0+XG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgRUFTRV9JTlxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBFQVNFX0lOID0gMVxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IEVBU0VfT1VUXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEVBU0VfT1VUID0gMFxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IEVBU0VfSU5fT1VUXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEVBU0VfSU5fT1VUID0gMlxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IEVBU0VfTElORUFSXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEVBU0VfTElORUFSID0gMFxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IEVBU0VfUVVBRFJBVElDXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEVBU0VfUVVBRFJBVElDID0gMVxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IEVBU0VfQ1VCSUNcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBARUFTRV9DVUJJQyA9IDJcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBFQVNFX1FVQVJUSUNcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBARUFTRV9RVUFSVElDID0gM1xuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IEVBU0VfUVVJTlRJQ1xuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBFQVNFX1FVSU5USUMgPSA0XG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgRUFTRV9TSU5VU09JREFMXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEVBU0VfU0lOVVNPSURBTCA9IDVcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBFQVNFX0VYUE9ORU5USUFMXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEVBU0VfRVhQT05FTlRJQUwgPSA2XG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgRUFTRV9DSVJDVUxBUlxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBFQVNFX0NJUkNVTEFSID0gN1xuICAgIFxuRWFzaW5nVHlwZXMuaW5pdGlhbGl6ZSgpXG5ncy5FYXNpbmdUeXBlcyA9IEVhc2luZ1R5cGVzXG4gICJdfQ==
//# sourceURL=EasingTypes_61.js

/**
* Holds different easing types and helper methods.
*
* @module gs
* @class Easings
* @memberof gs
* @constructor
 */
var Easings;

Easings = (function() {
  function Easings() {}

  Easings.initialize = function() {

    /**
    * Contains all easing functions by type and in/out.
    * @property EASE_FUNCTIONS
    * @type Function[][]
    * @static
    * @final
     */
    this.EASE_FUNCTIONS = [[Math.linearTween, Math.linearTween, Math.linearTween], [Math.easeOutQuad, Math.easeInQuad, Math.easeInOutQuad], [Math.easeOutCubic, Math.easeInCubic, Math.easeInOutCubic], [Math.easeOutQuart, Math.easeInQuart, Math.easeInOutQuart], [Math.easeOutQuint, Math.easeInQuint, Math.easeInOutQuint], [Math.easeOutSine, Math.easeInSine, Math.easeInOutSine], [Math.easeOutExpo, Math.easeInExpo, Math.easeInOutExpo], [Math.easeOutCirc, Math.easeInCirc, Math.easeInOutCirc]];

    /**
    * @property BY_INDEX
    * @type number[][]
    * @static
    * @final
     */
    this.BY_INDEX = [[[0, 0], [0, 0], [0, 0]], [[1, 0], [1, 1], [1, 2]], [[2, 0], [2, 1], [2, 2]], [[3, 0], [3, 1], [3, 2]], [[4, 0], [4, 1], [4, 2]], [[5, 0], [5, 1], [5, 2]], [[6, 0], [6, 1], [6, 2]], [[7, 0], [7, 1], [7, 2]]];

    /**
    * @property BY_STRING
    * @type Object
    * @static
    * @final
     */
    this.BY_STRING = {
      "linear_in": [0, 0],
      "linear_out": [0, 0],
      "linear_inout": [0, 0],
      "quad_out": [1, 0],
      "quad_in": [1, 1],
      "quad_inout": [1, 2],
      "cubic_out": [2, 0],
      "cubic_in": [2, 1],
      "cubic_inout": [2, 2],
      "quart_out": [3, 0],
      "quart_in": [3, 1],
      "quart_inout": [3, 2],
      "quint_out": [4, 0],
      "quint_in": [4, 1],
      "quint_inout": [4, 2],
      "sine_out": [5, 0],
      "sine_in": [5, 1],
      "sine_inout": [5, 2],
      "expo_out": [6, 0],
      "expo_in": [6, 1],
      "expo_inout": [6, 2],
      "circ_out": [7, 0],
      "circ_in": [7, 1],
      "circ_inout": [7, 2]
    };

    /**
    * @property EASE_LINEAR
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_LINEAR = this.BY_INDEX[gs.EasingTypes.EASE_LINEAR];

    /**
    * @property EASE_QUADRATIC
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_QUADRATIC = this.BY_INDEX[gs.EasingTypes.EASE_QUADRATIC];

    /**
    * @property EASE_CUBIC
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_CUBIC = this.BY_INDEX[gs.EasingTypes.EASE_CUBIC];

    /**
    * @property EASE_QUARTIC
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_QUARTIC = this.BY_INDEX[gs.EasingTypes.EASE_QUARTIC];

    /**
    * @property EASE_QUINTIC
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_QUINTIC = this.BY_INDEX[gs.EasingTypes.EASE_QUINTIC];

    /**
    * @property EASE_SINUSOIDAL
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_SINUSOIDAL = this.BY_INDEX[gs.EasingTypes.EASE_SINUSOIDAL];

    /**
    * @property EASE_EXPONENTIAL
    * @type number[][]
    * @static
    * @final
     */
    this.EASE_EXPONENTIAL = this.BY_INDEX[gs.EasingTypes.EASE_EXPONENTIAL];

    /**
    * @property EASE_CIRCULAR
    * @type number[][]
    * @static
    * @final
     */
    return this.EASE_CIRCULAR = this.BY_INDEX[gs.EasingTypes.EASE_CIRCULAR];
  };


  /**
  * @method fromValues
  * @param {number} index - The index.
  * @param {number} inOut - The in-out value.
   */

  Easings.fromValues = function(index, inOut) {
    return gs.Easings.BY_INDEX[index][inOut];
  };


  /**
  * @method fromObject
  * @param {Object} obj - The easing data-object.
   */

  Easings.fromObject = function(obj, flags, defaults) {
    return gs.Easings.BY_INDEX[obj.type][obj.inOut];
  };


  /**
  * @method fromString
  * @param {String} s - The easing string like "quad_in" for example.
   */

  Easings.fromString = function(s) {
    return gs.Easings.BY_STRING[s || "linear_inout"];
  };

  return Easings;

})();

Easings.initialize();

gs.Easings = Easings;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Easings_68.js

/**
* An enumeration of different dispose behaviors for containers. A dispose
* behavior describes what should happen with objects in a container after
* they got disposed.
*
* @module gs
* @class ContainerDisposeBehavior
* @memberof gs
* @constructor
* @static
* @final
 */
var ContainerDisposeBehavior;

ContainerDisposeBehavior = (function() {
  function ContainerDisposeBehavior() {}

  ContainerDisposeBehavior.initialize = function() {

    /**
    * Removes the disposed object from the container.
    * @property REMOVE
    * @type number
    * @static
    * @final
     */
    this.REMOVE = 0;

    /**
    * Sets the object reference to <b>null</b> but doesn't removing it from the container so the
    * indices are not changed.
    * @property NULL
    * @type number
    * @static
    * @final
     */
    return this.NULL = 1;
  };

  return ContainerDisposeBehavior;

})();

ContainerDisposeBehavior.initialize();

gs.ContainerDisposeBehavior = ContainerDisposeBehavior;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7Ozs7O0FBQUEsSUFBQTs7QUFZTTs7O0VBQ0Ysd0JBQUMsQ0FBQSxVQUFELEdBQWEsU0FBQTs7QUFDVDs7Ozs7OztJQU9BLElBQUMsQ0FBQSxNQUFELEdBQVU7O0FBRVY7Ozs7Ozs7O1dBUUEsSUFBQyxDQUFBLElBQUQsR0FBUTtFQWxCQzs7Ozs7O0FBb0JqQix3QkFBd0IsQ0FBQyxVQUF6QixDQUFBOztBQUNBLEVBQUUsQ0FBQyx3QkFBSCxHQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29udGFpbmVyRGlzcG9zZUJlaGF2aW9yXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiMjIypcbiogQW4gZW51bWVyYXRpb24gb2YgZGlmZmVyZW50IGRpc3Bvc2UgYmVoYXZpb3JzIGZvciBjb250YWluZXJzLiBBIGRpc3Bvc2VcbiogYmVoYXZpb3IgZGVzY3JpYmVzIHdoYXQgc2hvdWxkIGhhcHBlbiB3aXRoIG9iamVjdHMgaW4gYSBjb250YWluZXIgYWZ0ZXJcbiogdGhleSBnb3QgZGlzcG9zZWQuXG4qXG4qIEBtb2R1bGUgZ3NcbiogQGNsYXNzIENvbnRhaW5lckRpc3Bvc2VCZWhhdmlvclxuKiBAbWVtYmVyb2YgZ3NcbiogQGNvbnN0cnVjdG9yXG4qIEBzdGF0aWNcbiogQGZpbmFsXG4jIyNcbmNsYXNzIENvbnRhaW5lckRpc3Bvc2VCZWhhdmlvclxuICAgIEBpbml0aWFsaXplOiAtPlxuICAgICAgICAjIyMqXG4gICAgICAgICogUmVtb3ZlcyB0aGUgZGlzcG9zZWQgb2JqZWN0IGZyb20gdGhlIGNvbnRhaW5lci5cbiAgICAgICAgKiBAcHJvcGVydHkgUkVNT1ZFXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQFJFTU9WRSA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBTZXRzIHRoZSBvYmplY3QgcmVmZXJlbmNlIHRvIDxiPm51bGw8L2I+IGJ1dCBkb2Vzbid0IHJlbW92aW5nIGl0IGZyb20gdGhlIGNvbnRhaW5lciBzbyB0aGVcbiAgICAgICAgKiBpbmRpY2VzIGFyZSBub3QgY2hhbmdlZC5cbiAgICAgICAgKiBAcHJvcGVydHkgTlVMTFxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBOVUxMID0gMVxuXG5Db250YWluZXJEaXNwb3NlQmVoYXZpb3IuaW5pdGlhbGl6ZSgpICAgIFxuZ3MuQ29udGFpbmVyRGlzcG9zZUJlaGF2aW9yID0gQ29udGFpbmVyRGlzcG9zZUJlaGF2aW9yIl19
//# sourceURL=ContainerDisposeBehavior_80.js

/**
* An enumeration of command field flags.
*
* @module gs
* @class CommandFieldFlags
* @memberof gs
* @constructor
* @static
* @final
 */
var CommandFieldFlags;

CommandFieldFlags = (function() {
  function CommandFieldFlags() {}

  CommandFieldFlags.initialize = function() {

    /**
    * Indicates if the field is locked and should not be changed.
    * @property LOCKED
    * @type number
    * @static
    * @final
     */
    return this.LOCKED = 1;
  };


  /**
  * Checks if a command field is locked.
  * @method isLocked
  * @static
  * @param {number} flags - Field flags to check.
   */

  CommandFieldFlags.isLocked = function(flags) {
    return flags & CommandFieldFlags.LOCKED;
  };

  return CommandFieldFlags;

})();

CommandFieldFlags.initialize();

gs.CommandFieldFlags = CommandFieldFlags;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBVU07OztFQUNGLGlCQUFDLENBQUEsVUFBRCxHQUFhLFNBQUE7O0FBQ1Q7Ozs7Ozs7V0FPQSxJQUFDLENBQUEsTUFBRCxHQUFVO0VBUkQ7OztBQVViOzs7Ozs7O0VBTUEsaUJBQUMsQ0FBQSxRQUFELEdBQVcsU0FBQyxLQUFEO1dBQVcsS0FBQSxHQUFRLGlCQUFpQixDQUFDO0VBQXJDOzs7Ozs7QUFFZixpQkFBaUIsQ0FBQyxVQUFsQixDQUFBOztBQUNBLEVBQUUsQ0FBQyxpQkFBSCxHQUF1QiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tbWFuZEZpZWxkRmxhZ3NcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cblxuIyMjKlxuKiBBbiBlbnVtZXJhdGlvbiBvZiBjb21tYW5kIGZpZWxkIGZsYWdzLlxuKlxuKiBAbW9kdWxlIGdzXG4qIEBjbGFzcyBDb21tYW5kRmllbGRGbGFnc1xuKiBAbWVtYmVyb2YgZ3NcbiogQGNvbnN0cnVjdG9yXG4qIEBzdGF0aWNcbiogQGZpbmFsXG4jIyMgIFxuY2xhc3MgQ29tbWFuZEZpZWxkRmxhZ3NcbiAgICBAaW5pdGlhbGl6ZTogLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgZmllbGQgaXMgbG9ja2VkIGFuZCBzaG91bGQgbm90IGJlIGNoYW5nZWQuXG4gICAgICAgICogQHByb3BlcnR5IExPQ0tFRFxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBMT0NLRUQgPSAxXG4gICAgXG4gICAgIyMjKlxuICAgICogQ2hlY2tzIGlmIGEgY29tbWFuZCBmaWVsZCBpcyBsb2NrZWQuXG4gICAgKiBAbWV0aG9kIGlzTG9ja2VkXG4gICAgKiBAc3RhdGljXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZmxhZ3MgLSBGaWVsZCBmbGFncyB0byBjaGVjay5cbiAgICAjIyNcbiAgICBAaXNMb2NrZWQ6IChmbGFncykgLT4gZmxhZ3MgJiBDb21tYW5kRmllbGRGbGFncy5MT0NLRURcbiBcbkNvbW1hbmRGaWVsZEZsYWdzLmluaXRpYWxpemUoKSAgIFxuZ3MuQ29tbWFuZEZpZWxkRmxhZ3MgPSBDb21tYW5kRmllbGRGbGFnc1xuICAiXX0=
//# sourceURL=CommandFieldFlags_91.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=UI_99.js

/**
* An enumeration of different UI object update behaviors.
*
* @module ui
* @class UpdateBehavior
* @memberof ui
* @constructor
* @static
* @final
 */
var UpdateBehavior;

UpdateBehavior = (function() {
  function UpdateBehavior() {}

  UpdateBehavior.initialize = function() {

    /**
    * The UI object is only updated if necessary. However, there are cases where
    * a necessary update is not detected.
    * @property NORMAL
    * @type number
    * @static
    * @final
     */
    this.NORMAL = 0;

    /**
    * The UI object is updated on every frame.
    * @property CONTINUOUS
    * @type number
    * @static
    * @final
     */
    return this.CONTINUOUS = 1;
  };

  return UpdateBehavior;

})();

UpdateBehavior.initialize();

ui.UpdateBehavior = UpdateBehavior;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7OztBQUFBLElBQUE7O0FBVU07OztFQUNGLGNBQUMsQ0FBQSxVQUFELEdBQWEsU0FBQTs7QUFDVDs7Ozs7Ozs7SUFRQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7Ozs7O1dBT0EsSUFBQyxDQUFBLFVBQUQsR0FBYztFQWxCTDs7Ozs7O0FBb0JqQixjQUFjLENBQUMsVUFBZixDQUFBOztBQUNBLEVBQUUsQ0FBQyxjQUFILEdBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBVcGRhdGVCZWhhdmlvclxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4jIyMqXG4qIEFuIGVudW1lcmF0aW9uIG9mIGRpZmZlcmVudCBVSSBvYmplY3QgdXBkYXRlIGJlaGF2aW9ycy5cbipcbiogQG1vZHVsZSB1aVxuKiBAY2xhc3MgVXBkYXRlQmVoYXZpb3JcbiogQG1lbWJlcm9mIHVpXG4qIEBjb25zdHJ1Y3RvclxuKiBAc3RhdGljXG4qIEBmaW5hbFxuIyMjXG5jbGFzcyBVcGRhdGVCZWhhdmlvclxuICAgIEBpbml0aWFsaXplOiAtPlxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCBpcyBvbmx5IHVwZGF0ZWQgaWYgbmVjZXNzYXJ5LiBIb3dldmVyLCB0aGVyZSBhcmUgY2FzZXMgd2hlcmVcbiAgICAgICAgKiBhIG5lY2Vzc2FyeSB1cGRhdGUgaXMgbm90IGRldGVjdGVkLlxuICAgICAgICAqIEBwcm9wZXJ0eSBOT1JNQUxcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBATk9STUFMID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBVSSBvYmplY3QgaXMgdXBkYXRlZCBvbiBldmVyeSBmcmFtZS5cbiAgICAgICAgKiBAcHJvcGVydHkgQ09OVElOVU9VU1xuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBDT05USU5VT1VTID0gMVxuICAgIFxuVXBkYXRlQmVoYXZpb3IuaW5pdGlhbGl6ZSgpXG51aS5VcGRhdGVCZWhhdmlvciA9IFVwZGF0ZUJlaGF2aW9yIl19
//# sourceURL=UpdateBehavior_7.js

/**
* An enumeration of different management modes describing how a layout should
* handle its sub-objects coming from a data-source.
*
* @module ui
* @class LayoutManagementMode
* @memberof ui
* @constructor
* @static
* @final
 */
var LayoutManagementMode;

LayoutManagementMode = (function() {
  function LayoutManagementMode() {}

  LayoutManagementMode.initialize = function() {

    /**
    * All sub-objects are created at setup time.
    * @property NORMAL
    * @type number
    * @static
    * @final
     */
    this.NORMAL = 0;

    /**
    * The sub-objects are created at update time and only those which are currently visible.
    * @property JUST_IN_TIME
    * @type number
    * @static
    * @final
     */
    return this.JUST_IN_TIME = 1;
  };


  /**
  * Gets the constant number value from a specified human-readable string.
  * @method fromString
  * @param {string} s - The management mode as string. Can be "normal" or "just_in_time".
  * @return {number} The constant number value.
  * @static
  * @final
   */

  LayoutManagementMode.fromString = function(s) {
    switch (s) {
      case "normal":
        return 0;
      case "just_in_time":
        return 1;
      default:
        return 0;
    }
  };

  return LayoutManagementMode;

})();

LayoutManagementMode.initialize();

ui.LayoutManagementMode = LayoutManagementMode;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7Ozs7QUFBQSxJQUFBOztBQVdNOzs7RUFDRixvQkFBQyxDQUFBLFVBQUQsR0FBYSxTQUFBOztBQUNUOzs7Ozs7O0lBT0EsSUFBQyxDQUFBLE1BQUQsR0FBVTs7QUFFVjs7Ozs7OztXQU9BLElBQUMsQ0FBQSxZQUFELEdBQWdCO0VBakJQOzs7QUFtQmI7Ozs7Ozs7OztFQVFBLG9CQUFDLENBQUEsVUFBRCxHQUFhLFNBQUMsQ0FBRDtBQUNULFlBQU8sQ0FBUDtBQUFBLFdBQ1MsUUFEVDtBQUVRLGVBQU87QUFGZixXQUdTLGNBSFQ7QUFJUSxlQUFPO0FBSmY7QUFNUSxlQUFPO0FBTmY7RUFEUzs7Ozs7O0FBU2pCLG9CQUFvQixDQUFDLFVBQXJCLENBQUE7O0FBQ0EsRUFBRSxDQUFDLG9CQUFILEdBQTBCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBMYXlvdXRNYW5hZ2VtZW50TW9kZVxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuXG4jIyMqXG4qIEFuIGVudW1lcmF0aW9uIG9mIGRpZmZlcmVudCBtYW5hZ2VtZW50IG1vZGVzIGRlc2NyaWJpbmcgaG93IGEgbGF5b3V0IHNob3VsZFxuKiBoYW5kbGUgaXRzIHN1Yi1vYmplY3RzIGNvbWluZyBmcm9tIGEgZGF0YS1zb3VyY2UuXG4qXG4qIEBtb2R1bGUgdWlcbiogQGNsYXNzIExheW91dE1hbmFnZW1lbnRNb2RlXG4qIEBtZW1iZXJvZiB1aVxuKiBAY29uc3RydWN0b3JcbiogQHN0YXRpY1xuKiBAZmluYWxcbiMjI1xuY2xhc3MgTGF5b3V0TWFuYWdlbWVudE1vZGVcbiAgICBAaW5pdGlhbGl6ZTogLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIEFsbCBzdWItb2JqZWN0cyBhcmUgY3JlYXRlZCBhdCBzZXR1cCB0aW1lLlxuICAgICAgICAqIEBwcm9wZXJ0eSBOT1JNQUxcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBATk9STUFMID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBzdWItb2JqZWN0cyBhcmUgY3JlYXRlZCBhdCB1cGRhdGUgdGltZSBhbmQgb25seSB0aG9zZSB3aGljaCBhcmUgY3VycmVudGx5IHZpc2libGUuXG4gICAgICAgICogQHByb3BlcnR5IEpVU1RfSU5fVElNRVxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBzdGF0aWNcbiAgICAgICAgKiBAZmluYWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBKVVNUX0lOX1RJTUUgPSAxXG4gICAgXG4gICAgIyMjKlxuICAgICogR2V0cyB0aGUgY29uc3RhbnQgbnVtYmVyIHZhbHVlIGZyb20gYSBzcGVjaWZpZWQgaHVtYW4tcmVhZGFibGUgc3RyaW5nLlxuICAgICogQG1ldGhvZCBmcm9tU3RyaW5nXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcyAtIFRoZSBtYW5hZ2VtZW50IG1vZGUgYXMgc3RyaW5nLiBDYW4gYmUgXCJub3JtYWxcIiBvciBcImp1c3RfaW5fdGltZVwiLlxuICAgICogQHJldHVybiB7bnVtYmVyfSBUaGUgY29uc3RhbnQgbnVtYmVyIHZhbHVlLlxuICAgICogQHN0YXRpY1xuICAgICogQGZpbmFsXG4gICAgIyMjXG4gICAgQGZyb21TdHJpbmc6IChzKSAtPlxuICAgICAgICBzd2l0Y2ggc1xuICAgICAgICAgICAgd2hlbiBcIm5vcm1hbFwiXG4gICAgICAgICAgICAgICAgcmV0dXJuIDBcbiAgICAgICAgICAgIHdoZW4gXCJqdXN0X2luX3RpbWVcIlxuICAgICAgICAgICAgICAgIHJldHVybiAxXG4gICAgICAgICAgICBlbHNlIFxuICAgICAgICAgICAgICAgIHJldHVybiAwXG4gXG5MYXlvdXRNYW5hZ2VtZW50TW9kZS5pbml0aWFsaXplKCkgICBcbnVpLkxheW91dE1hbmFnZW1lbnRNb2RlID0gTGF5b3V0TWFuYWdlbWVudE1vZGUiXX0=
//# sourceURL=LayoutManagementMode_28.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Sprites_16.js
var Sprite_Debug,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Sprite_Debug = (function(superClass) {
  extend(Sprite_Debug, superClass);


  /**
  * Sprite to display debug information on screen. <b>HINT:</b> Will be probably removed
  * before release.
  *
  * @module gs
  * @class Sprite_Debug
  * @extends gs.Sprite
  * @memberof gs
  * @static
   */

  function Sprite_Debug(viewport) {
    var size;
    Sprite_Debug.__super__.constructor.call(this, viewport);

    /**
    * @property frameTime
    * @type number|string
    * The time / time-text to display.
     */
    this.frameTime = 0;
    size = Math.round(8 / 240 * Graphics.height);
    this.bitmap = new Bitmap(180 * Graphics.scale, 28 * Graphics.scale);
    this.bitmap.font = new Font("Verdana", size);
    this.bitmap.font.color = Color.WHITE;
    this.srcRect = new Rect(0, 0, this.bitmap.width, this.bitmap.height);
    this.z = 15000;
    this.opacity = 255;
    this.visible = true;
    this.x = 0;
    this.y = 0;
  }

  Sprite_Debug.prototype.redraw = function() {
    this.bitmap.clear();
    return this.bitmap.drawText(0, 0, this.bitmap.width, this.bitmap.height, this.frameTime.toString(), 0, 0);
  };

  return Sprite_Debug;

})(Sprite);

window.Sprite_Debug = Sprite_Debug;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7OztFQVVhLHNCQUFDLFFBQUQ7QUFDVCxRQUFBO0lBQUEsOENBQU0sUUFBTjs7QUFDQTs7Ozs7SUFLQSxJQUFDLENBQUEsU0FBRCxHQUFhO0lBRWIsSUFBQSxHQUFPLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQSxHQUFJLEdBQUosR0FBVSxRQUFRLENBQUMsTUFBOUI7SUFDUCxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsTUFBQSxDQUFPLEdBQUEsR0FBSSxRQUFRLENBQUMsS0FBcEIsRUFBMkIsRUFBQSxHQUFLLFFBQVEsQ0FBQyxLQUF6QztJQUNkLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixHQUFtQixJQUFBLElBQUEsQ0FBSyxTQUFMLEVBQWdCLElBQWhCO0lBQ25CLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQWIsR0FBcUIsS0FBSyxDQUFDO0lBQzNCLElBQUMsQ0FBQSxPQUFELEdBQWUsSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQW5CLEVBQTBCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBbEM7SUFFZixJQUFDLENBQUEsQ0FBRCxHQUFLO0lBQ0wsSUFBQyxDQUFBLE9BQUQsR0FBVztJQUNYLElBQUMsQ0FBQSxPQUFELEdBQVc7SUFDWCxJQUFDLENBQUEsQ0FBRCxHQUFLO0lBQ0wsSUFBQyxDQUFBLENBQUQsR0FBSztFQW5CSTs7eUJBcUJiLE1BQUEsR0FBUSxTQUFBO0lBQ0osSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFSLENBQUE7V0FDQSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsQ0FBaUIsQ0FBakIsRUFBb0IsQ0FBcEIsRUFBdUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUEvQixFQUFzQyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQTlDLEVBQXNELElBQUMsQ0FBQSxTQUFTLENBQUMsUUFBWCxDQUFBLENBQXRELEVBQTZFLENBQTdFLEVBQWdGLENBQWhGO0VBRkk7Ozs7R0FoQ2U7O0FBcUMzQixNQUFNLENBQUMsWUFBUCxHQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogU3ByaXRlX0RlYnVnXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBTcHJpdGVfRGVidWcgZXh0ZW5kcyBTcHJpdGVcbiAgICAjIyMqXG4gICAgKiBTcHJpdGUgdG8gZGlzcGxheSBkZWJ1ZyBpbmZvcm1hdGlvbiBvbiBzY3JlZW4uIDxiPkhJTlQ6PC9iPiBXaWxsIGJlIHByb2JhYmx5IHJlbW92ZWRcbiAgICAqIGJlZm9yZSByZWxlYXNlLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBTcHJpdGVfRGVidWdcbiAgICAqIEBleHRlbmRzIGdzLlNwcml0ZVxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAc3RhdGljXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6ICh2aWV3cG9ydCkgLT5cbiAgICAgICAgc3VwZXIodmlld3BvcnQpXG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgZnJhbWVUaW1lXG4gICAgICAgICogQHR5cGUgbnVtYmVyfHN0cmluZ1xuICAgICAgICAqIFRoZSB0aW1lIC8gdGltZS10ZXh0IHRvIGRpc3BsYXkuXG4gICAgICAgICMjI1xuICAgICAgICBAZnJhbWVUaW1lID0gMFxuICAgICAgICBcbiAgICAgICAgc2l6ZSA9IE1hdGgucm91bmQoOCAvIDI0MCAqIEdyYXBoaWNzLmhlaWdodClcbiAgICAgICAgQGJpdG1hcCA9IG5ldyBCaXRtYXAoMTgwKkdyYXBoaWNzLnNjYWxlLCAyOCAqIEdyYXBoaWNzLnNjYWxlKVxuICAgICAgICBAYml0bWFwLmZvbnQgPSBuZXcgRm9udChcIlZlcmRhbmFcIiwgc2l6ZSlcbiAgICAgICAgQGJpdG1hcC5mb250LmNvbG9yID0gQ29sb3IuV0hJVEVcbiAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCBAYml0bWFwLndpZHRoLCBAYml0bWFwLmhlaWdodClcbiAgICAgICAgXG4gICAgICAgIEB6ID0gMTUwMDBcbiAgICAgICAgQG9wYWNpdHkgPSAyNTVcbiAgICAgICAgQHZpc2libGUgPSB5ZXNcbiAgICAgICAgQHggPSAwXG4gICAgICAgIEB5ID0gMFxuICAgICAgICBcbiAgICByZWRyYXc6IC0+XG4gICAgICAgIEBiaXRtYXAuY2xlYXIoKVxuICAgICAgICBAYml0bWFwLmRyYXdUZXh0KDAsIDAsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0LCBAZnJhbWVUaW1lLnRvU3RyaW5nKCksIDAsIDApXG4gICAgICAgIFxuICAgICAgICBcbndpbmRvdy5TcHJpdGVfRGVidWcgPSBTcHJpdGVfRGVidWdcblxuXG4gICAgICAgICJdfQ==
//# sourceURL=Sprite_Debug_8.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Managers_40.js
var ObjectManager;

ObjectManager = (function() {

  /**
  * Stores the current default ObjectManager.
  * @property current
  * @type gs.ObjectManager
  * @static
   */
  ObjectManager.current = null;


  /**
  * Manages game objects by updating if necessary and offering
  * methods to add or remove game objects. All game objects are sorted by
  * the order-property to give control over the update-order.
  *
  * A game object can registered under a unique ID and then easily accessed using
  * that ID. If an object gets registered, a global variable $<ID> is created
  * as well. However, that global variable is only for the use in property-bindings
  * used for In-Game UI. See ui.Component_BindingHandler.
  *
  * In addition, a game object can be assigned to a group like for example
  * a set of UI toggle-buttons can be assigned to the same group and then
  * easily accessed later using gs.ObjectManager.objectsByGroup method.
  *
  * @module gs
  * @class ObjectManager
  * @memberof gs
  * @constructor
  * @see ui.Component_BindingHandler
   */

  function ObjectManager() {

    /**
    * All game objects to manage.
    * @property objects
    * @type gs.Object_Base[]
     */
    this.objects = [];

    /**
    * All game objects by ID.
    * @property objectsById
    * @type Object
     */
    this.objectsById = {};

    /**
    * All game objects by group.
    * @property objectsByGroup_
    * @type Object
     */
    this.objectsByGroup_ = {};

    /**
    * Indicates if the ObjectManager is active. If <b>false</b> the game objects are not updated.
    * @property active
    * @type boolean
     */
    this.active = true;

    /**
    * Indicates if the ObjectManager needs to sort the game objects.
    * @property active
    * @type boolean
     */
    this.needsSort = true;
  }


  /**
  * Disposes the manager and all assigned game objects.
  *
  * @method dispose
   */

  ObjectManager.prototype.dispose = function() {
    var j, len, object, ref, results;
    ref = this.objects;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      object = ref[j];
      if (!object.disposed) {
        results.push(object.dispose());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Disposes all assigned game objects.
  *
  * @method disposeObjects
   */

  ObjectManager.prototype.disposeObjects = function() {
    var j, k, keys, len, object, results;
    keys = Object.keys(this.objectsById);
    results = [];
    for (j = 0, len = keys.length; j < len; j++) {
      k = keys[j];
      object = this.objectsById[k];
      if (object && !object.disposed) {
        results.push(object.dispose());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Registers an object.
  *
  * @method registerObject
   */

  ObjectManager.prototype.registerObject = function(object) {
    if (object.id != null) {
      this.objectsById[object.id] = object;
      return window["$" + object.id] = object;
    }
  };


  /**
  * Unregisters an object.
  *
  * @method unregisterObject
   */

  ObjectManager.prototype.unregisterObject = function(object) {
    if ((object != null ? object.id : void 0) != null) {
      delete this.objectsById[object.id];
      delete window["$" + object.id];
    }
    return null;
  };


  /**
  * Adds a game object to the manager. The game object is then automatically updated by the manager.
  *
  * @method addObject
  * @param {gs.Object_Base} object - The game object to add.
   */

  ObjectManager.prototype.addObject = function(object) {
    return this.add(object);
  };


  /**
  * Removes a game object to the manager. The game object is then no longer automatically updated or disposed by the manager.
  *
  * @method removeObject
  * @param {gs.Object_Base} object - The game object to remove.
   */

  ObjectManager.prototype.removeObject = function(object) {
    return this.remove(object);
  };


  /**
  * Adds a game object to the manager. The game object is then automatically updated by the manager.
  *
  * @method add
  * @param {gs.Object_Base} object - The game object to add.
   */

  ObjectManager.prototype.add = function(object) {
    this.objects.push(object);
    this.needsSort = true;
    this.registerObject(object);
    return this.addToGroup(object, object.group);
  };


  /**
  * Removes a game object to the manager. The game object is then no longer automatically updated or disposed by the manager.
  *
  * @method remove
  * @param {gs.Object_Base} object - The game object to remove.
   */

  ObjectManager.prototype.remove = function(object) {
    var ref;
    if (object) {
      this.objects.remove(object);
      this.unregisterObject(object);
      if (object.group != null) {
        return (ref = this.objectsByGroup[object.group]) != null ? ref.remove(object) : void 0;
      }
    }
  };


  /**
  * Gets an object by ID.
  *
  * @method objectById
  * @param {String} id - The ID of the game object to get. 
  * @return {gs.Object_Base} The game object or <b>null</b> if no game object is registered for the specified ID.
   */

  ObjectManager.prototype.objectById = function(id) {
    return this.objectsById[id];
  };


  /**
  * Gets an object by ID.
  *
  * @method byId
  * @param {String} id - The ID of the game object to get. 
  * @return {gs.Object_Base} The game object or <b>null</b> if no game object is registered for the specified ID.
   */

  ObjectManager.prototype.byId = function(id) {
    return this.objectsById[id];
  };


  /**
  * Sets the object for an ID.
  *
  * @method setObjectById
  * @param {gs.Object_Base} object - The game object to set.
  * @param {String} id - The ID for the game object.
   */

  ObjectManager.prototype.setObjectById = function(object, id) {
    object.id = id;
    this.objectsById[id] = object;
    return window["$" + id] = object;
  };


  /**
  * Adds an object to a specified object-group.
  *
  * @method addToGroup
  * @param {gs.Object_Base} object - The game object to add.
  * @param {String} group - The group to assign game object to.
   */

  ObjectManager.prototype.addToGroup = function(object, group) {
    var ref;
    if (group != null) {
      if ((ref = this.objectsByGroup_[object.group]) != null) {
        ref.remove(object);
      }
      if (!this.objectsByGroup_[group]) {
        this.objectsByGroup_[group] = [];
      }
      return this.objectsByGroup_[group].push(object);
    }
  };


  /**
  * Gets all object of a specified object-group.
  *
  * @method objectsByGroup
  * @param {String} group - The object-group.
  * @return {gs.Object_Base[]} The game objects belonging to the specified group.
   */

  ObjectManager.prototype.objectsByGroup = function(group) {
    return this.objectsByGroup_[group] || [];
  };


  /**
  * Updates the manager and all assigned game objects in the right order.
  *
  * @method update
   */

  ObjectManager.prototype.update = function() {
    var i, object;
    i = 0;
    if (this.needsSort) {
      this.objects.sort(function(a, b) {
        if (a.order < b.order) {
          return 1;
        } else if (a.order > b.order) {
          return -1;
        } else {
          return 0;
        }
      });
      this.needsSort = false;
    }
    while (i < this.objects.length) {
      object = this.objects[i];
      if (object.disposed) {
        this.objects.splice(i, 1);
        if (object.id != null) {
          delete this.objectsById[object.id];
        }
        if (object.id != null) {
          delete window[object.id];
        }
        if (object.group != null) {
          this.objectsByGroup[object.group].remove(object);
        }
      } else {
        if (object.active) {
          object.update();
        }
        i++;
      }
    }
    return null;
  };

  return ObjectManager;

})();

gs.ObjectManager = ObjectManager;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=ObjectManager_2.js
var GameManager;

GameManager = (function() {

  /**
  * Manages all general things around the game like holding the game settings,
  * manages the save/load of a game, etc.
  *
  * @module gs
  * @class GameManager
  * @memberof gs
  * @constructor
   */
  function GameManager() {

    /**
    * The current scene data.
    * @property sceneData
    * @type Object
     */
    this.sceneData = {};

    /**
    * The list of common events.
    * @property commonEvents
    * @type gs.Object_CommonEvent[]
     */
    this.commonEvents = [];

    /**
    * Indicates if the GameManager is initialized.
    * @property commonEvents
    * @type gs.Object_CommonEvent[]
     */
    this.initialized = false;

    /**
    * Temporary game settings.
    * @property tempSettings
    * @type Object
     */
    this.tempSettings = {
      skip: false,
      skipTime: 5,
      loadMenuAccess: true,
      menuAccess: true,
      backlogAccess: true,
      saveMenuAccess: true,
      messageFading: {
        animation: {
          type: 1
        },
        duration: 15,
        easing: null
      }

      /**
      * Temporary game fields.
      * @property tempFields
      * @type Object
       */
    };
    this.tempFields = null;

    /**
    * Stores default values for backgrounds, pictures, etc.
    * @property defaults
    * @type Object
     */
    this.defaults = {
      background: {
        "duration": 30,
        "origin": 0,
        "zOrder": 0,
        "loopVertical": 0,
        "loopHorizontal": 0,
        "easing": {
          "type": 0,
          "inOut": 1
        },
        "animation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "motionBlur": {
          "enabled": 0,
          "delay": 2,
          "opacity": 100,
          "dissolveSpeed": 3
        }
      },
      picture: {
        "appearDuration": 30,
        "disappearDuration": 30,
        "origin": 0,
        "zOrder": 0,
        "appearEasing": {
          "type": 0,
          "inOut": 1
        },
        "disappearEasing": {
          "type": 0,
          "inOut": 1
        },
        "appearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "disappearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "motionBlur": {
          "enabled": 0,
          "delay": 2,
          "opacity": 100,
          "dissolveSpeed": 3
        }
      },
      character: {
        "expressionDuration": 0,
        "appearDuration": 40,
        "disappearDuration": 40,
        "origin": 0,
        "zOrder": 0,
        "appearEasing": {
          "type": 2,
          "inOut": 2
        },
        "disappearEasing": {
          "type": 1,
          "inOut": 1
        },
        "appearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "disappearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "motionBlur": {
          "enabled": 0,
          "delay": 2,
          "opacity": 100,
          "dissolveSpeed": 3
        },
        "changeAnimation": {
          "type": 1,
          "movement": 0,
          "fading": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "changeEasing": {
          "type": 2,
          "inOut": 2
        }
      },
      text: {
        "appearDuration": 30,
        "disappearDuration": 30,
        "origin": 0,
        "zOrder": 0,
        "appearEasing": {
          "type": 0,
          "inOut": 1
        },
        "disappearEasing": {
          "type": 0,
          "inOut": 1
        },
        "appearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "disappearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "motionBlur": {
          "enabled": 0,
          "delay": 2,
          "opacity": 100,
          "dissolveSpeed": 3
        }
      },
      video: {
        "appearDuration": 30,
        "disappearDuration": 30,
        "origin": 0,
        "zOrder": 0,
        "appearEasing": {
          "type": 0,
          "inOut": 1
        },
        "disappearEasing": {
          "type": 0,
          "inOut": 1
        },
        "appearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "disappearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "motionBlur": {
          "enabled": 0,
          "delay": 2,
          "opacity": 100,
          "dissolveSpeed": 3
        }
      },
      live2d: {
        "motionFadeInTime": 1000,
        "appearDuration": 30,
        "disappearDuration": 30,
        "zOrder": 0,
        "appearEasing": {
          "type": 0,
          "inOut": 1
        },
        "disappearEasing": {
          "type": 0,
          "inOut": 1
        },
        "appearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "disappearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        }
      },
      messageBox: {
        "appearDuration": 30,
        "disappearDuration": 30,
        "zOrder": 0,
        "appearEasing": {
          "type": 0,
          "inOut": 1
        },
        "disappearEasing": {
          "type": 0,
          "inOut": 1
        },
        "appearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        },
        "disappearAnimation": {
          "type": 0,
          "movement": 0,
          "mask": {
            "graphic": null,
            "vague": 30
          }
        }
      },
      audio: {
        "musicFadeInDuration": 0,
        "musicFadeOutDuration": 0,
        "musicVolume": 100,
        "musicPlaybackRate": 100,
        "soundVolume": 100,
        "soundPlaybackRate": 100,
        "voiceVolume": 100,
        "voicePlaybackRate": 100
      }
    };

    /**
    * The game's backlog.
    * @property backlog
    * @type Object[]
     */
    this.backlog = [];

    /**
    * Character parameters by character ID.
    * @property characterParams
    * @type Object[]
     */
    this.characterParams = [];

    /**
    * The game's chapter
    * @property chapters
    * @type gs.Document[]
     */
    this.chapters = [];

    /**
    * The game's current displayed messages. Especially in NVL mode the messages 
    * of the current page are stored here.
    * @property messages
    * @type Object[]
     */
    this.messages = [];

    /**
    * Count of save slots. Default is 100.
    * @property saveSlotCount
    * @type number
     */
    this.saveSlotCount = 100;

    /**
    * The index of save games. Contains the header-info for each save game slot.
    * @property saveGameSlots
    * @type Object[]
     */
    this.saveGameSlots = [];

    /**
    * Stores global data like the state of persistent game variables.
    * @property globalData
    * @type Object
     */
    this.globalData = null;

    /**
    * Indicates if the game runs in editor's live-preview.
    * @property inLivePreview
    * @type Object
     */
    this.inLivePreview = false;
  }


  /**
  * Initializes the GameManager, should be called before the actual game starts.
  *
  * @method initialize
   */

  GameManager.prototype.initialize = function() {
    var character, i, j, k, l, len, len1, param, ref, ref1, ref2;
    this.initialized = true;
    this.inLivePreview = $PARAMS.preview != null;
    this.saveSlotCount = RecordManager.system.saveSlotCount || 100;
    this.tempFields = new gs.GameTemp();
    window.$tempFields = this.tempFields;
    this.createSaveGameIndex();
    this.variableStore = new gs.VariableStore();
    this.variableStore.persistentNumbers = this.globalData.persistentNumbers || [];
    this.variableStore.persistentStrings = this.globalData.persistentStrings || [];
    this.variableStore.persistentBooleans = this.globalData.persistentBooleans || [];
    ref = RecordManager.characters;
    for (j = 0, len = ref.length; j < len; j++) {
      character = ref[j];
      if (character != null) {
        this.characterParams[character.index] = {};
        if (character.params != null) {
          ref1 = character.params;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            param = ref1[k];
            this.characterParams[character.index][param.name] = param.value;
          }
        }
      }
    }
    this.setupCommonEvents();
    for (i = l = 0, ref2 = RecordManager.characters; 0 <= ref2 ? l < ref2 : l > ref2; i = 0 <= ref2 ? ++l : --l) {
      this.settings.voicesPerCharacter[i] = 100;
    }
    this.chapters = DataManager.getDocumentsByType("vn.chapter");
    return this.chapters.sort(function(a, b) {
      if (a.items.order > b.items.order) {
        return 1;
      } else if (a.items.order < b.items.order) {
        return -1;
      } else {
        return 0;
      }
    });
  };


  /**
  * Sets up common events.
  *
  * @method setupCommonEvents
   */

  GameManager.prototype.setupCommonEvents = function() {
    var event, j, k, len, len1, object, ref, ref1, results;
    ref = this.commonEvents;
    for (j = 0, len = ref.length; j < len; j++) {
      event = ref[j];
      event.dispose();
    }
    this.commonEvents = [];
    ref1 = RecordManager.commonEvents;
    results = [];
    for (k = 0, len1 = ref1.length; k < len1; k++) {
      event = ref1[k];
      if (event.startCondition === 1 && event.autoPreload) {
        gs.ResourceLoader.loadEventCommandsGraphics(event.commands);
      }
      object = new gs.Object_CommonEvent();
      object.record = event;
      object.rid = event.index;
      results.push(this.commonEvents.push(object));
    }
    return results;
  };


  /**
  * Sets up cursor depending on system settings.
  *
  * @method setupCursor
   */

  GameManager.prototype.setupCursor = function() {
    var bitmap, ref;
    if ((ref = RecordManager.system.cursor) != null ? ref.name : void 0) {
      bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.cursor.name);
      return Graphics.setCursorBitmap(bitmap, RecordManager.system.cursor.hx, RecordManager.system.cursor.hy);
    } else {
      return Graphics.setCursorBitmap(null);
    }
  };


  /**
  * Disposes the GameManager. Should be called before quit the game.
  *
  * @method dispose
   */

  GameManager.prototype.dispose = function() {};


  /**
  * Quits the game. The implementation depends on the platform. So for example on mobile
  * devices this method has no effect.
  *
  * @method exit
   */

  GameManager.prototype.exit = function() {
    return Application.exit();
  };


  /**
  * Resets the GameManager by disposing and re-initializing it.
  *
  * @method reset
   */

  GameManager.prototype.reset = function() {
    this.initialized = false;
    this.interpreter = null;
    this.dispose();
    return this.initialize();
  };


  /**
  * Resets the GameManager for a new game.
  *
  * @method newGame
   */

  GameManager.prototype.newGame = function() {
    this.messages = [];
    this.variableStore.clearGlobals();
    this.tempSettings.skip = false;
    this.tempFields.clear();
    this.setupCommonEvents();
    this.tempSettings.menuAccess = true;
    this.tempSettings.saveMenuAccess = true;
    this.tempSettings.loadMenuAccess = true;
    return this.tempSettings.backlogAccess = true;
  };


  /**
  * Updates the GameManager. Should be called once per frame.
  *
  * @method update
   */

  GameManager.prototype.update = function() {};


  /**
  * Creates the index of all save-games. Should be called whenever a new save game
  * is created.
  *
  * @method createSaveGameIndex
  * @protected
   */

  GameManager.prototype.createSaveGameIndex = function() {
    var chaper, chapter, header, i, image, j, ref, scene;
    this.saveGameSlots = [];
    for (i = j = 0, ref = this.saveSlotCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      if (GameStorage.exists("SaveGame_" + i + "_Header")) {
        header = GameStorage.getObject("SaveGame_" + i + "_Header");
        chapter = DataManager.getDocument(header.chapterUid);
        scene = DataManager.getDocumentSummary(header.sceneUid);
        image = header.image;
      } else {
        header = null;
        chaper = null;
        scene = null;
      }
      if ((chapter != null) && (scene != null) && !this.inLivePreview) {
        this.saveGameSlots.push({
          date: header.date,
          chapter: chapter.items.name || "DELETED",
          scene: scene.items.name || "DELETED",
          image: image
        });
      } else {
        this.saveGameSlots.push({
          "date": "",
          "chapter": "",
          "scene": "",
          "image": null
        });
      }
    }
    return this.saveGameSlots;
  };


  /**
  * Resets the game's settings to its default values.
  *
  * @method resetSettings
   */

  GameManager.prototype.resetSettings = function() {
    var i, j, ref;
    this.settings = {
      version: 337,
      renderer: 0,
      filter: 1,
      confirmation: true,
      adjustAspectRatio: false,
      allowSkip: true,
      allowSkipUnreadMessages: true,
      allowVideoSkip: true,
      skipVoiceOnAction: true,
      allowChoiceSkip: false,
      voicesByCharacter: [],
      timeMessageToVoice: true,
      "autoMessage": {
        enabled: false,
        time: 0,
        waitForVoice: true,
        stopOnAction: false
      },
      "voiceEnabled": true,
      "bgmEnabled": true,
      "soundEnabled": true,
      "voiceVolume": 100,
      "bgmVolume": 100,
      "seVolume": 100,
      "messageSpeed": 4,
      "fullScreen": false,
      "aspectRatio": 0
    };
    this.saveGameSlots = [];
    for (i = j = 0, ref = this.saveSlotCount; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      GameStorage.remove("SaveGame_" + i + "_Header");
      GameStorage.remove("SaveGame_" + i);
      this.saveGameSlots.push({
        "date": "",
        "chapter": "",
        "scene": "",
        "thumb": ""
      });
    }
    GameStorage.setObject("settings", this.settings);
    this.globalData = {
      messages: {},
      cgGallery: []
    };
    return GameStorage.setObject("globalData", this.globalData);
  };


  /**
  * Saves current game settings.
  *
  * @method saveSettings
   */

  GameManager.prototype.saveSettings = function() {
    return GameStorage.setObject("settings", this.settings);
  };


  /**
  * Saves current global data.
  *
  * @method saveGlobalData
   */

  GameManager.prototype.saveGlobalData = function() {
    this.globalData.persistentNumbers = this.variableStore.persistentNumbers;
    this.globalData.persistentStrings = this.variableStore.persistentStrings;
    this.globalData.persistentBooleans = this.variableStore.persistentBooleans;
    return GameStorage.setObject("globalData", this.globalData);
  };


  /**
  * Resets current global data. All stored data about read messages, persistent variables and
  * CG gallery will be deleted.
  *
  * @method resetGlobalData
   */

  GameManager.prototype.resetGlobalData = function() {
    var cg, i, j, len, ref;
    this.globalData = {
      messages: {},
      cgGallery: []
    };
    ref = RecordManager.cgGallery;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      cg = ref[i];
      if (cg != null) {
        this.globalData.cgGallery[i] = {
          unlocked: false
        };
      }
    }
    return GameStorage.setObject("globalData", this.globalData);
  };

  GameManager.prototype.readSaveGame = function(saveGame) {};

  GameManager.prototype.writeSaveGame = function(saveGame) {};

  GameManager.prototype.prepareSaveGame = function(snapshot) {
    var context, message, messageBox, saveGame, sceneData;
    if (snapshot) {
      snapshot = ResourceManager.getCustomBitmap("$snapshot");
      if (snapshot != null) {
        snapshot.dispose();
      }
      ResourceManager.setCustomBitmap("$snapshot", Graphics.snapshot());
    }
    context = new gs.ObjectCodecContext();
    context.decodedObjectStore.push(Graphics.viewport);
    context.decodedObjectStore.push(this.scene);
    context.decodedObjectStore.push(this.scene.behavior);
    messageBox = this.scene.behavior.objectManager.objectById("messageBox");
    message = this.scene.behavior.objectManager.objectById("gameMessage_message");
    sceneData = {};
    saveGame = {};
    saveGame.encodedObjectStore = null;
    saveGame.sceneUid = this.scene.sceneDocument.uid;
    saveGame.data = {
      currentCharacter: this.scene.currentCharacter,
      frameCount: Graphics.frameCount,
      tempFields: this.tempFields,
      viewport: this.scene.viewport,
      characters: this.scene.characters,
      backgrounds: this.scene.backgrounds,
      pictures: this.scene.pictures,
      texts: this.scene.texts,
      videos: this.scene.videos,
      commonEvents: this.scene.commonEventContainer.subObjects,
      hotspots: this.scene.hotspots,
      imageMap: this.scene.imageMap,
      interpreter: this.scene.interpreter,
      messageBox: {
        visible: messageBox.visible,
        message: message
      },
      backlog: this.backlog,
      variableStore: this.variableStore,
      defaults: this.defaults,
      transitionData: SceneManager.transitionData,
      audio: {
        audioBuffers: AudioManager.audioBuffers,
        audioBuffersByLayer: AudioManager.audioBuffersByLayer,
        audioLayers: AudioManager.audioLayers,
        soundReferences: AudioManager.soundReferences
      },
      messageAreas: this.scene.messageAreas.select(function(f) {
        if (f) {
          return {
            message: f.message,
            layout: {
              dstRect: gs.Rect.fromObject(f.layout.dstRect)
            }
          };
        } else {
          return null;
        }
      })
    };
    saveGame.data = gs.ObjectCodec.encode(saveGame.data, context);
    saveGame.encodedObjectStore = context.encodedObjectStore;
    return this.saveGame = saveGame;
  };

  GameManager.prototype.createSaveGameSlot = function(header) {
    var slot;
    slot = {
      "date": new Date().toDateString(),
      "chapter": this.scene.chapter.items.name,
      "scene": this.scene.sceneDocument.items.name,
      "image": header.image
    };
    return slot;
  };

  GameManager.prototype.createSaveGameHeader = function() {
    var header, thumbImage;
    thumbImage = this.createSaveGameThumbImage();
    header = {
      "date": new Date().toDateString(),
      "chapterUid": this.scene.chapter.uid,
      "sceneUid": this.scene.sceneDocument.uid,
      "image": thumbImage != null ? thumbImage.image.toDataURL() : void 0
    };
    if (thumbImage != null) {
      thumbImage.dispose();
    }
    return header;
  };

  GameManager.prototype.createSaveGameThumbImage = function() {
    var snapshot, thumbImage;
    snapshot = ResourceManager.getBitmap("$snapshot");
    thumbImage = null;
    if (snapshot) {
      thumbImage = new Bitmap(Graphics.width / 8, Graphics.height / 8);
      thumbImage.stretchBlt(new Rect(0, 0, thumbImage.width, thumbImage.height), snapshot, new Rect(0, 0, snapshot.width, snapshot.height));
    }
    return thumbImage;
  };

  GameManager.prototype.storeSaveGame = function(name, saveGame, header) {
    if (header) {
      GameStorage.setData(name + "_Header", JSON.stringify(header));
    }
    return GameStorage.setData(name, JSON.stringify(saveGame));
  };


  /**
  * Saves the current game at the specified slot.
  *
  * @method save
  * @param {number} slot - The slot where the game should be saved at.
   */

  GameManager.prototype.save = function(slot) {
    var header;
    if (this.saveGame) {
      header = this.createSaveGameHeader();
      this.saveGameSlots[slot] = this.createSaveGameSlot(header);
      this.storeSaveGame("SaveGame_" + slot, this.saveGame, header);
      this.sceneData = {};
      return this.saveGame;
    }
  };

  GameManager.prototype.restore = function(saveGame) {
    this.backlog = saveGame.data.backlog;
    this.defaults = saveGame.data.defaults;
    this.variableStore = saveGame.data.variableStore;
    this.sceneData = saveGame.data;
    this.saveGame = null;
    this.loadedSaveGame = null;
    this.tempFields = saveGame.data.tempFields;
    window.$tempFields = this.tempFields;
    return window.$dataFields.backlog = this.backlog;
  };

  GameManager.prototype.prepareLoadGame = function() {
    return AudioManager.stopAllMusic(30);
  };


  /**
  * Loads the game from the specified save game slot. This method triggers
  * a automatic scene change.
  *
  * @method load
  * @param {number} slot - The slot where the game should be loaded from.
   */

  GameManager.prototype.load = function(slot) {
    if (!this.saveGameSlots[slot] || this.saveGameSlots[slot].date.trim().length === 0) {
      return;
    }
    this.prepareLoadGame();
    this.loadedSaveGame = this.loadSaveGame("SaveGame_" + slot);
    return SceneManager.switchTo(new vn.Object_Scene());
  };

  GameManager.prototype.loadSaveGame = function(name) {
    return JSON.parse(GameStorage.getData(name));
  };


  /**
  * Gets the save game data for a specified slot.
  *
  * @method getSaveGame
  * @param {number} slot - The slot to get the save data from.
  * @return {Object} The save game data.
   */

  GameManager.prototype.getSaveGame = function(slot) {
    return JSON.parse(GameStorage.getData("SaveGame_" + slot));
  };

  return GameManager;

})();

window.GameManager = new GameManager();

gs.GameManager = window.GameManager;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=GameManager_24.js
var SceneManager,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

SceneManager = (function(superClass) {
  extend(SceneManager, superClass);


  /**
  * Manages the scenes of the game.
  *
  * @module gs
  * @class SceneManager
  * @memberof gs
  * @constructor
   */

  function SceneManager() {
    SceneManager.__super__.constructor.apply(this, arguments);

    /**
    * The current scene.
    * @property scene
    * @type gs.Object_Base
     */
    this.scene = null;

    /**
    * An array of previous scenes. Used to jump back to last scene from a menu for example.
    * @property previousScenes
    * @type gs.Object_Base
     */
    this.previousScenes = [];

    /**
    * The next scene. If set, this scene will become the current scene after next update.
    * @property nextScene
    * @type gs.Object_Base
     */
    this.nextScene = null;

    /**
    * The duration of a transition from one scene to another.
    * @property transitionDuration
    * @type number
     */
    this.transitionDuration = 15;

    /**
    * The transition-data like the graphic, vague, etc. used for a transition from one scene to another.
    * @property transitionDuration
    * @type number
     */
    this.transitionData = {
      graphic: null,
      duration: 20,
      vague: 30
    };
    this.input = true;
  }


  /**
  * Switches from the current scene to the specified one.
  *
  * @method switchTo
  * @param {gs.Object_Base} scene - The new scene.
  * @param {boolean} savePrevious - Indicates if the current scene should be pushed to previous-scene stack instead
  * of getting disposed. It is possible to switch back to that scene then using gs.SceneManager.returnToPrevious method.
  * @param {number} duration - The duration for the switch.
   */

  SceneManager.prototype.switchTo = function(scene, savePrevious, duration) {
    if (savePrevious) {
      this.previousScenes.push(this.scene);
    }
    if (this.scene != null) {
      this.removeObject(this.scene);
    }
    this.transitionDuration = duration || 5;
    this.nextScene = scene;
    return Graphics.freeze();
  };


  /**
  * Clears the stack of previous-scenes and disposes all previous-scenes. After that it is not
  * possible to go back to a previous scene using gs.SceneManager.returnToPrevious().
  *
  * @method clear
   */

  SceneManager.prototype.clear = function() {
    var i, len, ref, scene;
    ref = this.previousScenes;
    for (i = 0, len = ref.length; i < len; i++) {
      scene = ref[i];
      scene.dispose();
    }
    return this.previousScenes = [];
  };


  /**
  * Returns to the previous scene if that scene was saved before.
  *
  * @method returnToPrevious
   */

  SceneManager.prototype.returnToPrevious = function() {
    var scene;
    if (this.previousScenes.length > 0) {
      scene = this.previousScenes.pop();
      if (this.scene != null) {
        this.removeObject(this.scene);
      }
      if (scene != null) {
        this.nextScene = scene;
        return Graphics.freeze();
      }
    }
  };


  /**
  * Updates the current scene and the scene-handling. Needs to be called once
  * per frame.
  *
  * @method update
   */

  SceneManager.prototype.update = function() {
    var ref;
    if (this.nextScene !== this.scene) {
      Input.clear();
      if (this.scene != null) {
        if (this.previousScenes.indexOf(this.scene) === -1) {
          this.scene.dispose();
        } else {
          this.scene.behavior.show(false);
        }
      }
      this.scene = this.nextScene;
      if (this.scene) {
        this.addObject(this.scene);
        this.scene.loading = true;
        this.scene.loadingData = true;
        this.scene.loadingResources = true;
        if ((this.scene != null) && !this.scene.initialized) {
          this.scene.behavior.initialize();
          this.isFadeOut = true;
        } else if ((ref = this.scene) != null ? ref.initialized : void 0) {
          this.scene.behavior.show(true);
          this.scene.update();
        }
        Graphics.update();
        this.scene.behavior.transition();
      } else {
        Graphics.freeze();
        Graphics.update();
        Graphics.transition(30);
        this.isFadeOut = true;
      }
    }
    if (this.isFadeOut && Graphics.frozen) {
      Graphics.update();
      return Input.update();
    } else {
      if (this.isFadeOut) {
        AudioManager.stopAllSounds();
        this.isFadeOut = false;
        if (this.scene) {
          Graphics.freeze();
        } else {
          gs.Application.exit();
        }
      }
      DataManager.update();
      ResourceManager.update();
      if (RecordManager.initialized) {
        AudioManager.update();
      }
      if (Graphics.frozen) {
        Input.update();
      }
      return SceneManager.__super__.update.call(this);
    }
  };

  return SceneManager;

})(gs.ObjectManager);

window.SceneManager = new SceneManager();

gs.SceneManager = window.SceneManager;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=SceneManager_35.js
var LanguageManager;

LanguageManager = (function() {

  /**
  * Manages the different languages of the game.  
  *
  * @module gs
  * @class LanguageManager
  * @memberof gs
  * @constructor
   */
  function LanguageManager() {

    /**
    * The default language profile.
    * @property defaultProfile
    * @type gs.LanguageProfile
     */
    this.defaultProfile = null;

    /**
    * The current language profile.
    * @property profile
    * @type gs.LanguageProfile
     */
    this.profile = null;

    /**
    * The current strings bundle.
    * @property bundle
    * @type gs.LanguageStringsBundle
     */
    this.bundle = null;

    /**
    * The default strings bundle.
    * @property defaultBundle
    * @type gs.LanguageStringsBundle
     */
    this.defaultBundle = null;
  }


  /**
  * Initializes the language system by loading the necessary language profiles
  * and strings bundles.
  *
  * @method initialize
   */

  LanguageManager.prototype.initialize = function() {
    var document, documents, i, len;
    this.languages = [];
    DataManager.getDocumentByType("custom_strings_bundle");
    documents = DataManager.getDocumentsByType("language_profile");
    for (i = 0, len = documents.length; i < len; i++) {
      document = documents[i];
      this.languages.push({
        name: document.items.name,
        code: document.items.code,
        uid: document.uid,
        icon: document.items.icon,
        bundleUid: document.items.bundleUid
      });
      if (document.uid === "07DDA0716161F104") {
        this.language = this.languages[this.languages.length - 1];
        this.defaultLanguage = this.language;
      }
    }
    this.selectLanguage(this.language);
    if (this.language.uid !== this.defaultLanguage.uid) {
      return this.defaultProfile = DataManager.getDocument(this.defaultLanguage.uid);
    } else {
      return this.defaultProfile = this.profile;
    }
  };


  /**
  * Loads the necessary strings bundles for the current language. 
  *
  * @method loadBundles
   */

  LanguageManager.prototype.loadBundles = function() {
    var customStrings;
    customStrings = DataManager.getDocumentByType("custom_strings_bundle");
    if (this.language.uid !== this.defaultLanguage.uid) {
      this.bundle = DataManager.getDocument(this.language.bundleUid);
    }
    this.defaultBundle = {
      items: {
        localizableStrings: RecordManager.localizableStrings
      }
    };
    Object.mixin(this.defaultBundle.items.localizableStrings, customStrings.items.localizableStrings);
    return this.language.uid !== this.defaultLanguage.uid;
  };


  /**
  * Sets the specified language as current language.
  *
  * @method selectLanguage
  * @param {Object} language - The language to set.
   */

  LanguageManager.prototype.selectLanguage = function(language) {
    this.language = language;
    return this.profile = DataManager.getDocument(this.language.uid);
  };


  /**
  * Gets the string for the specified id. If the string doesn't exist for current
  * language, its taken from the default language.
  *
  * @method string
  * @param {String} id - The ID of the string to get.
  * @return {String} The string for the specified ID. If the string could not be found the result
  * is an empty string.
   */

  LanguageManager.prototype.string = function(id) {
    var result;
    result = null;
    if ((this.bundle != null) && (this.bundle.items != null)) {
      result = this.bundle.items.localizableStrings[id];
      if ((result != null ? result.t : void 0) != null) {
        result = result.t;
      }
    }
    if ((result == null) || result.length === 0) {
      result = this.stringFromDefault(id);
    }
    return result;
  };


  /**
  * Gets the string for the specified id in default language.
  *
  * @method stringFromDefault
  * @param {String} id - The ID of the string to get.
  * @return {String} The string for the specified ID. If the string could not be found the result
  * is an empty string.
   */

  LanguageManager.prototype.stringFromDefault = function(id) {
    var ref, result;
    result = null;
    if ((this.defaultBundle != null) && (this.defaultBundle.items != null)) {
      result = (ref = this.defaultBundle.items.localizableStrings[id]) != null ? ref.t : void 0;
    }
    return result;
  };

  return LanguageManager;

})();

window.LanguageManager = new LanguageManager();

gs.LanguageManager = LanguageManager;

window.lcsi = function(id) {
  if (id != null) {
    return window.LanguageManager.string(id) || "";
  } else {
    return "";
  }
};

window.lcs = function(value) {
  var ref;
  if ((value != null) && (value.lcId != null)) {
    return window.LanguageManager.string(value.lcId) || (value != null ? (ref = value.defaultText) != null ? ref.t : void 0 : void 0) || (value != null ? value.defaultText : void 0);
  } else {
    return value;
  }
};

window.lcsm = function(value) {
  return lcs(value);
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=LanguageManager_48.js
var ResourceManager;

ResourceManager = (function() {

  /**
  * Manages the resources of the game like graphics, audio, fonts, etc. It
  * offers a lot of methods to easily access game resources and automatically
  * caches them. So if an image is requested a second time it will be taken
  * from the cache instead of loading it again.
  *
  * @module gs
  * @class ResourceManager
  * @memberof gs
  * @constructor
   */
  function ResourceManager() {

    /**
    * Holds in-memory created bitmaps.
    * @property customBitmapsByKey
    * @type Object
    * @protected
     */
    this.customBitmapsByKey = {};

    /**
    * Caches resources by file path.
    * @property resourcesByPath
    * @type Object
    * @protected
     */
    this.resourcesByPath = {};

    /**
    * Caches resources by file path and HUE.
    * @property resourcesByPath
    * @type Object
    * @protected
     */
    this.resourcesByPathHue = {};

    /**
    * Stores all loaded resources.
    * @property resources
    * @type Object[]
     */
    this.resources = [];

    /**
    * Indicates if all requested resources are loaded.
    * @property resourcesLoaded
    * @type boolean
     */
    this.resourcesLoaded = true;

    /**
    * @property events
    * @type gs.EventEmitter
     */
    this.events = new gs.EventEmitter();
  }


  /**
  * Disposes all bitmap resources.
  *
  * @method disposeBitmaps
   */

  ResourceManager.prototype.disposeBitmaps = function() {
    var j, len, ref, resource, results;
    ref = this.resources;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      resource = ref[j];
      if (resource instanceof gs.Bitmap) {
        results.push(resource.dispose());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  ResourceManager.prototype.disposeVideos = function() {
    var j, len, ref, resource, results;
    ref = this.resources;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      resource = ref[j];
      if (resource instanceof gs.Video) {
        results.push(resource.dispose());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Disposes all resources.
  *
  * @method dispose
   */

  ResourceManager.prototype.dispose = function() {
    return this.disposeBitmaps();
  };


  /**
  * Loads all custom fonts in Graphics/Fonts folder.
  *
  * @method loadFonts
   */

  ResourceManager.prototype.loadFonts = function() {
    var families, parts, path, resource, resources, url;
    resource = {
      loaded: false
    };
    this.resources.push(resource);
    this.resourcesByPath["Graphics/Fonts"] = resource;
    url = "";
    families = [];
    if ($PARAMS.test != null) {
      url = '/invoke?controller=gs.ResourceController&method=loadFontsStylesheet';
      families = $PARAMS.fontFamilies;
    } else {
      url = 'resources/fonts.css';
      resources = GS.dataCache["RESOURCES"].items.resources;
      for (path in resources) {
        if (path.startsWith("Graphics/Fonts/")) {
          parts = path.split("/");
          if (resources[path] === ".woff") {
            families.push(parts[parts.length - 1]);
          } else if (resources[path] === ".fnt") {
            new Font(path.split("/").last(), 1);
          }
        }
      }
    }
    if (families.length > 0) {
      return WebFont.load({
        custom: {
          families: families,
          urls: [url]
        },
        active: (function(_this) {
          return function() {
            return _this.resourcesByPath["Graphics/Fonts"].loaded = true;
          };
        })(this),
        inactive: (function(_this) {
          return function() {
            _this.resourcesByPath["Graphics/Fonts"].loaded = true;
            return _this.resourcesByPath["Graphics/Fonts"].error = true;
          };
        })(this)
      });
    } else {
      return this.resourcesByPath["Graphics/Fonts"].loaded = true;
    }
  };


  /**
  * Gets a custom created bitmap by key.
  *
  * @method getCustomBitmap
  * @param {String} key - The key for the bitmap to get.
  * @return {gs.Bitmap} The bitmap or <b>null</b> if no bitmap exists for the specified key.
   */

  ResourceManager.prototype.getCustomBitmap = function(key) {
    return this.customBitmapsByKey[key];
  };


  /**
  * Sets a custom created bitmap for a specified key.
  *
  * @method setCustomBitmap
  * @param {String} key - The key for the bitmap to set.
  * @param {gs.Bitmap} bitmap - The bitmap to set.
   */

  ResourceManager.prototype.setCustomBitmap = function(key, bitmap) {
    this.customBitmapsByKey[key] = bitmap;
    if (bitmap.loaded == null) {
      this.resources.push(bitmap);
      return this.resourcesLoaded = false;
    }
  };


  /**
  * Gets a Live2D model.
  *
  * @method getLive2DModel
  * @param {String} filePath - Path to the Live2D model file.
  * @return {gs.Live2DModel} The Live2D model or <b>null</b> if no model exists at the specified file path.
   */

  ResourceManager.prototype.getLive2DModel = function(filePath) {
    var profile, result;
    result = this.resourcesByPath[filePath];
    if ((result == null) || result.disposed) {
      profile = LanguageManager.profile;
      result = new gs.Live2DModel(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null));
      this.resourcesByPath[filePath] = result;
      this.resources.push(result);
      this.resourcesLoaded = false;
    }
    return result;
  };


  /**
  * Gets a font.
  *
  * @method getFont
  * @param {String} name - The name of the font to get.
  * @param {number} size - The size of the font to get.
  * @return {gs.Font} The font or <b>null</b> if no font with the specified name exists.
   */

  ResourceManager.prototype.getFont = function(name, size) {
    var result;
    result = new Font(name, size);
    this.resources.push(result);
    this.resourcesLoaded = false;
    return result;
  };


  /**
  * Gets a video.
  *
  * @method getVideo
  * @param {String} filePath - Path to the video file.
  * @return {gs.Video} The video or <b>null</b> if no video exists at the specified file path.
   */

  ResourceManager.prototype.getVideo = function(filePath) {
    var profile, result;
    if (filePath.endsWith("/")) {
      return null;
    }
    result = this.resourcesByPath[filePath];
    if ((result == null) || result.disposed) {
      profile = LanguageManager.profile;
      result = new gs.Video(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null));
      this.resourcesByPath[filePath] = result;
      this.resources.push(result);
      this.resourcesLoaded = false;
    }
    return result;
  };


  /**
  * Gets a bitmap.
  *
  * @method getBitmap
  * @param {String} filePath - Path to the bitmap file.
  * @param {number} hue - The bitmap's hue. The bitmap will be loaded and then recolored.
  * @return {gs.Bitmap} The bitmap or <b>null</b> if no bitmap exists at the specified file path.
   */

  ResourceManager.prototype.getBitmap = function(filePath, hue) {
    var hueBitmap, profile, result;
    if (filePath.endsWith("/")) {
      return null;
    }
    hue = hue || 0;
    result = this.resourcesByPath[filePath] || this.customBitmapsByKey[filePath];
    if (result == null) {
      profile = LanguageManager.profile;
      result = new Bitmap(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null), false);
      result.hue = hue;
      result.filePath = filePath;
      this.resourcesByPath[filePath] = result;
      this.resources.push(result);
      this.resourcesLoaded = false;
    } else if (!result.loaded && result.hue !== hue) {
      profile = LanguageManager.profile;
      result = new Bitmap(filePath, ((profile != null) && (profile.items != null) ? profile.items.code : null));
      result.hue = hue;
      result.filePath = filePath;
      this.resources.push(result);
      this.resourcesLoaded = false;
    } else if (hue > 0) {
      hueBitmap = this.resourcesByPathHue[filePath + "@" + hue];
      if ((hueBitmap == null) && result.loaded) {
        hueBitmap = new Bitmap(result.image);
        hueBitmap.changeHue(hue);
        this.resourcesByPathHue[filePath + "@" + hue] = hueBitmap;
      }
      if (hueBitmap != null) {
        result = hueBitmap;
      }
    }
    return result;
  };


  /**
  * Gets an HTML image.
  *
  * @method getImage
  * @param {String} filePath - Path to the image file.
  * @return {HTMLImageElement} The image or <b>null</b> if no image exists at the specified file path.
   */

  ResourceManager.prototype.getImage = function(filePath) {
    var result;
    result = this.resourcesByPath[filePath];
    if (result == null) {
      if ((typeof $PARAMS !== "undefined" && $PARAMS !== null) && ($PARAMS.test != null)) {
        result = new Bitmap('/invoke?controller=gs.ResourceController&method=loadGraphicResource&' + $.param({
          data: {
            resource: {
              path: filePath
            },
            supportedFormats: ["png", "jpg"]
          }
        }));
      } else {
        result = new Bitmap("resources/" + filePath + ".png");
      }
      this.resourcesByPath[filePath] = result;
      this.resources.push(result);
      this.resourcesLoaded = false;
    }
    return result;
  };

  ResourceManager.prototype.getAudioStream = function(filePath) {
    var languageCode, profile, result;
    result = this.resourcesByPath[filePath];
    profile = LanguageManager.profile;
    languageCode = (profile != null) && (profile.items != null) ? profile.items.code : null;
    if (result == null) {
      result = new GS.AudioBufferStream(filePath);
      this.resourcesByPath[filePath] = result;
      this.resources.push(result);
      this.resourcesLoaded = false;
    }
    return result;
  };


  /**
  * Gets an audio buffer.
  *
  * @method getAudioBuffer
  * @param {String} filePath - Path to the audio file.
  * @return {gs.AudioBuffer} The audio buffer or <b>null</b> if no audio file exists at the specified file path.
   */

  ResourceManager.prototype.getAudioBuffer = function(filePath) {
    var languageCode, profile, result;
    result = this.resourcesByPath[filePath];
    profile = LanguageManager.profile;
    languageCode = (profile != null) && (profile.items != null) ? profile.items.code : null;
    if (result == null) {
      if ((typeof $PARAMS !== "undefined" && $PARAMS !== null) && ($PARAMS.test != null)) {
        result = new GS.AudioBuffer('/invoke?controller=gs.ResourceController&method=loadAudioResource&' + $.param({
          data: {
            resource: {
              path: filePath
            },
            supportedFormats: ["aac", "mp3", "ogg", "wav"],
            languageCode: languageCode
          }
        }));
      } else {
        result = new GS.AudioBuffer(filePath);
      }
      this.resourcesByPath[filePath] = result;
      this.resources.push(result);
      this.resourcesLoaded = false;
    }
    return result;
  };


  /**
  * Updates the loading process. Needs to be called once per frame to keep 
  * the ResourceManager up to date.
  *
  * @method update
   */

  ResourceManager.prototype.update = function() {
    var bitmap, i, j, ref;
    if (this.events == null) {
      this.events = new gs.EventEmitter();
    }
    if (!this.resourcesLoaded) {
      this.resourcesLoaded = true;
      for (i = j = 0, ref = this.resources.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (!this.resources[i].loaded) {
          this.resourcesLoaded = false;
          break;
        } else if ((this.resources[i].hue != null) && this.resources[i].hue > 0) {
          bitmap = new Bitmap(this.resources[i].image);
          this.resourcesByPath[this.resources[i].filePath] = bitmap;
          this.resources[i].changeHue(this.resources[i].hue);
          this.resourcesByPathHue[this.resources[i].filePath + "@" + this.resources[i].hue] = this.resources[i];
          delete this.resources[i].filePath;
          delete this.resources[i].hue;
        }
      }
      if (this.resourcesLoaded) {
        this.events.emit("loaded", this);
      }
    }
    return null;
  };

  return ResourceManager;

})();

window.ResourceManager = ResourceManager;

gs.ResourceManager = ResourceManager;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=ResourceManager_62.js
var AudioManager;

AudioManager = (function() {

  /**
  * Manages the audio playback of the game. 
  *
  * @module gs
  * @class AudioManager
  * @memberof gs
  * @constructor
   */
  function AudioManager() {

    /**
    * Stores all audio buffers.
    * @property buffers
    * @type gs.AudioBuffer[]
    * @protected
     */
    this.audioBuffers = [];

    /**
    * Stores all audio buffers by layer.
    * @property buffers
    * @type gs.AudioBuffer[]
    * @protected
     */
    this.audioBuffersByLayer = [];

    /**
    * Stores all audio buffer references for sounds.
    * @property soundReferences
    * @type gs.AudioBufferReference[]
    * @protected
     */
    this.soundReferences = {};

    /**
    * Current Music (Layer 0)
    * @property music
    * @type Object
    * @protected
     */
    this.music = null;

    /**
    * Current music volume.
    * @property musicVolume
    * @type number
    * @protected
     */
    this.musicVolume = 100;

    /**
    * Current sound volume.
    * @property soundVolume
    * @type number
    * @protected
     */
    this.soundVolume = 100;

    /**
    * Current voice volume.
    * @property voiceVolume
    * @type number
    * @protected
     */
    this.voiceVolume = 100;

    /**
    * General music volume
    * @property generalMusicVolume
    * @type number
    * @protected
     */
    this.generalMusicVolume = 100;

    /**
    * General sound volume
    * @property generalSoundVolume
    * @type number
    * @protected
     */
    this.generalSoundVolume = 100;

    /**
    * General voice volume
    * @property generalVoiceVolume
    * @type number
    * @protected
     */
    this.generalVoiceVolume = 100;

    /**
    * Stores audio layer info-data for each layer.
    * @property audioLayers
    * @type gs.AudioLayerInfo[]
    * @protected
     */
    this.audioLayers = [];
  }


  /**
  * Restores audio-playback from a specified array of audio layers.
  *
  * @method restore
  * @param {gs.AudioLayerInfo[]} layers - An array of audio layer info objects.
   */

  AudioManager.prototype.restore = function(layers) {
    var i, j, layer, len, results;
    this.audioLayers = layers;
    results = [];
    for (i = j = 0, len = layers.length; j < len; i = ++j) {
      layer = layers[i];
      if (layer && layer.playing) {
        if (layer.customData) {
          results.push(this.playMusicRandom(layer, layer.customData.fadeTime, i, layer.customData.playTime, layer.customData.playRange));
        } else {
          results.push(this.playMusic(layer, layer.fadeInTime, i));
        }
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Loads the specified music.
  *
  * @method loadMusic
  * @param {String} name - The name of the music to load.
   */

  AudioManager.prototype.loadMusic = function(name) {
    name = name != null ? name.name || name : name;
    if (name && name.length > 0) {
      return ResourceManager.getAudioStream("Audio/Music/" + name);
    }
  };


  /**
  * Loads the specified sound.
  *
  * @method loadSound
  * @param {String} name - The name of the sound to load.
   */

  AudioManager.prototype.loadSound = function(name) {
    name = name != null ? name.name || name : name;
    if (name && name.length > 0) {
      return ResourceManager.getAudioBuffer("Audio/Sounds/" + name);
    }
  };


  /**
  * Updates a randomly played audio buffer.
  *
  * @method updateRandomAudio
  * @param {gs.AudioBuffer} buffer - The audio buffer to update.
  * @protected
   */

  AudioManager.prototype.updateRandomAudio = function(buffer) {
    var currentTime, timeLeft;
    if (buffer.customData.startTimer > 0) {
      buffer.customData.startTimer--;
      if (buffer.customData.startTimer <= 0) {
        buffer.fadeInVolume = 1.0 / (buffer.customData.fadeTime || 1);
        buffer.fadeInTime = buffer.customData.fadeTime || 1;
        buffer.fadeOutTime = buffer.customData.fadeTime || 1;
        buffer.playTime = buffer.customData.playTime.min + Math.random() * (buffer.customData.playTime.max - buffer.customData.playTime.min);
        currentTime = buffer.currentTime;
        timeLeft = buffer.duration - currentTime;
        buffer.playTime = Math.min(timeLeft * 1000 / 16.6, buffer.playTime);
        return buffer.customData.startTimer = buffer.playTime + buffer.customData.playRange.start + Math.random() * (buffer.customData.playRange.end - buffer.customData.playRange.start);
      }
    }
  };


  /**
  * Updates all audio-buffers depending on the play-type.
  *
  * @method updateAudioBuffers
  * @protected
   */

  AudioManager.prototype.updateAudioBuffers = function() {
    var buffer, j, len, ref, results;
    ref = this.audioBuffers;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      buffer = ref[j];
      if (buffer != null) {
        if (buffer.customData.playType === 1) {
          this.updateRandomAudio(buffer);
        }
        if (GameManager.settings.bgmVolume !== this.generalMusicVolume) {
          buffer.volume = (this.musicVolume * GameManager.settings.bgmVolume / 100) / 100;
          this.generalMusicVolume = GameManager.settings.bgmVolume;
        }
        results.push(buffer.update());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Updates all audio-buffers depending on the play-type.
  *
  * @method updateAudioBuffers
  * @protected
   */

  AudioManager.prototype.updateGeneralVolume = function() {
    var k, reference, results;
    if (GameManager.settings.seVolume !== this.generalSoundVolume || GameManager.settings.voiceVolume !== this.generalVoiceVolume) {
      this.generalSoundVolume = GameManager.settings.seVolume;
      this.generalVoiceVolume = GameManager.settings.voiceVolume;
      results = [];
      for (k in this.soundReferences) {
        results.push((function() {
          var j, len, ref, results1;
          ref = this.soundReferences[k];
          results1 = [];
          for (j = 0, len = ref.length; j < len; j++) {
            reference = ref[j];
            if (reference.voice) {
              results1.push(reference.volume = (this.voiceVolume * GameManager.settings.voiceVolume / 100) / 100);
            } else {
              results1.push(reference.volume = (this.soundVolume * GameManager.settings.seVolume / 100) / 100);
            }
          }
          return results1;
        }).call(this));
      }
      return results;
    }
  };


  /**
  * Updates the audio-playback.
  *
  * @method update
   */

  AudioManager.prototype.update = function() {
    this.updateAudioBuffers();
    return this.updateGeneralVolume();
  };


  /**
  * Changes the current music to the specified one.
  *
  * @method changeMusic
  * @param {Object} music - The music to play. If <b>null</b> the current music will stop playing.
   */

  AudioManager.prototype.changeMusic = function(music) {
    if ((music != null) && (music.name != null)) {
      if ((this.music != null) && this.music.name !== music.name) {
        return this.playMusic(music);
      } else if (this.music == null) {
        return this.playMusic(music);
      }
    } else {
      return this.stopMusic();
    }
  };


  /**
  * Prepares. 
  *
  * @method prepare
  * @param {Object} music - The music to play. If <b>null</b> the current music will stop playing.
   */

  AudioManager.prototype.prepare = function(path, volume, rate) {
    var buffer;
    buffer = ResourceManager.getAudioBuffer(path);
    if (buffer.decoded) {
      buffer.volume = volume != null ? volume / 100 : 1.0;
      buffer.playbackRate = rate != null ? rate / 100 : 1.0;
    } else {
      buffer.onFinishDecode = (function(_this) {
        return function(source) {
          source.volume = volume != null ? volume / 100 : 1.0;
          return source.playbackRate = rate != null ? rate / 100 : 1.0;
        };
      })(this);
      buffer.decode();
    }
    return buffer;
  };


  /**
  * Plays an audio resource.
  *
  * @method play
  * @param {String} path - The path to the audio resource.
  * @param {number} volume - The volume.
  * @param {number} rate - The playback rate.
  * @param {number} fadeInTime - The fade-in time in frames.
   */

  AudioManager.prototype.play = function(path, volume, rate, fadeInTime) {
    var buffer;
    buffer = ResourceManager.getAudioStream(path);
    if (buffer.decoded) {
      buffer.volume = volume != null ? volume / 100 : 1.0;
      buffer.playbackRate = rate != null ? rate / 100 : 1.0;
      if (GameManager.settings.bgmEnabled) {
        buffer.play(fadeInTime);
      }
    } else {
      buffer.onFinishDecode = (function(_this) {
        return function(source) {
          source.volume = volume != null ? volume / 100 : 1.0;
          source.playbackRate = rate != null ? rate / 100 : 1.0;
          if (GameManager.settings.bgmEnabled) {
            return source.play(fadeInTime);
          }
        };
      })(this);
      buffer.decode();
    }
    return buffer;
  };


  /**
  * Stops all sounds.
  *
  * @method stopAllSounds
   */

  AudioManager.prototype.stopAllSounds = function() {
    var k, reference, results;
    results = [];
    for (k in this.soundReferences) {
      results.push((function() {
        var j, len, ref, results1;
        ref = this.soundReferences[k];
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          reference = ref[j];
          results1.push(reference != null ? reference.stop() : void 0);
        }
        return results1;
      }).call(this));
    }
    return results;
  };


  /**
  * Stops a sound and all references of it.
  *
  * @method stopSound
  * @param {String} name - The name of the sound to stop.
   */

  AudioManager.prototype.stopSound = function(name) {
    var j, len, ref, reference, results;
    if (this.soundReferences[name] != null) {
      ref = this.soundReferences[name];
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        reference = ref[j];
        results.push(reference.stop());
      }
      return results;
    }
  };


  /**
  * Stops a voice.
  *
  * @method stopVoice
  * @param {String} name - The name of the voice to stop.
   */

  AudioManager.prototype.stopVoice = function(name) {
    return this.stopSound(name);
  };


  /**
  * Stops all voices.
  *
  * @method stopAllVoices
   */

  AudioManager.prototype.stopAllVoices = function() {
    var k, reference, results;
    results = [];
    for (k in this.soundReferences) {
      results.push((function() {
        var j, len, ref, results1;
        ref = this.soundReferences[k];
        results1 = [];
        for (j = 0, len = ref.length; j < len; j++) {
          reference = ref[j];
          if (reference.voice) {
            results1.push(reference.stop());
          } else {
            results1.push(void 0);
          }
        }
        return results1;
      }).call(this));
    }
    return results;
  };


  /**
  * Plays a voice.
  *
  * @method playVoice
  * @param {String} name - The name of the voice to play.
  * @param {number} volume - The voice volume.
  * @param {number} rate - The voice playback rate.
   */

  AudioManager.prototype.playVoice = function(name, volume, rate) {
    var ref, voice;
    voice = null;
    if (GameManager.settings.voiceEnabled && !((ref = $PARAMS.preview) != null ? ref.settings.voiceDisabled : void 0)) {
      voice = this.playSound(name != null ? name.name : void 0, volume || GameManager.defaults.audio.voiceVolume, rate || GameManager.defaults.audio.voicePlaybackRate, false, true);
    }
    return voice;
  };


  /**
  * Plays a sound.
  *
  * @method playSound
  * @param {String} name - The name of the sound to play.
  * @param {number} volume - The sound's volume.
  * @param {number} rate - The sound's playback rate.
  * @param {boolean} musicEffect - Indicates if the sound should be played as a music effect. In that case, the current music
  * at audio-layer will be paused until the sound finishes playing.
  * @param {boolean} voice - Indicates if the sound should be handled as a voice.
   */

  AudioManager.prototype.playSound = function(name, volume, rate, musicEffect, voice) {
    var buffer, j, len, r, ref, ref1, reference;
    if ((ref = $PARAMS.preview) != null ? ref.settings.soundDisabled : void 0) {
      return;
    }
    if ((name == null) || (!voice && !GameManager.settings.soundEnabled)) {
      return;
    }
    if (name.name != null) {
      volume = name.volume;
      rate = name.playbackRate;
      name = name.name;
    }
    if (name.length === 0) {
      return;
    }
    if (musicEffect) {
      this.stopMusic();
    }
    if (this.soundReferences[name] == null) {
      this.soundReferences[name] = [];
    }
    volume = volume != null ? volume : 100;
    volume *= voice ? this.generalVoiceVolume / 100 : this.generalSoundVolume / 100;
    reference = null;
    ref1 = this.soundReferences[name];
    for (j = 0, len = ref1.length; j < len; j++) {
      r = ref1[j];
      if (!r.isPlaying) {
        reference = r;
        if (musicEffect) {
          reference.onEnd = (function(_this) {
            return function() {
              return _this.resumeMusic(40);
            };
          })(this);
        }
        reference.voice = voice;
        reference.volume = volume / 100;
        reference.playbackRate = rate / 100;
        if (voice) {
          this.voice = reference;
        }
        reference.play();
        break;
      }
    }
    if (reference == null) {
      buffer = ResourceManager.getAudioBuffer("Audio/Sounds/" + name);
      if (buffer && buffer.loaded) {
        if (buffer.decoded) {
          reference = new GS.AudioBufferReference(buffer, voice);
          if (musicEffect) {
            reference.onEnd = (function(_this) {
              return function() {
                return _this.resumeMusic(40);
              };
            })(this);
          }
          reference.volume = volume / 100;
          reference.playbackRate = rate / 100;
          reference.voice = voice;
          reference.play();
          if (voice) {
            this.voice = reference;
          }
          this.soundReferences[name].push(reference);
        } else {
          buffer.name = name;
          buffer.onDecodeFinish = (function(_this) {
            return function(source) {
              reference = new GS.AudioBufferReference(source, voice);
              if (musicEffect) {
                reference.onEnd = function() {
                  return _this.resumeMusic(40);
                };
              }
              reference.voice = voice;
              reference.volume = volume / 100;
              reference.playbackRate = rate / 100;
              if (voice) {
                _this.voice = reference;
              }
              reference.play();
              return _this.soundReferences[source.name].push(reference);
            };
          })(this);
          buffer.decode();
        }
      }
    }
    return reference;
  };


  /**
  * Plays a music as a random music. A random music will fade-in and fade-out
  * at random times. That can be combined with other audio-layers to create a
  * much better looping of an audio track.
  *
  * @method playMusicRandom
  * @param {Object} music - The music to play.
  * @param {number} fadeTime - The time for a single fade-in/out in frames.
  * @param {number} layer - The audio layer to use.
  * @param {gs.Range} playTime - Play-Time range like 10s to 30s.
  * @param {gs.Range} playRange - Play-Range.
   */

  AudioManager.prototype.playMusicRandom = function(music, fadeTime, layer, playTime, playRange) {
    var musicBuffer, ref, volume;
    if ((ref = $PARAMS.preview) != null ? ref.settings.musicDisabled : void 0) {
      return;
    }
    layer = layer != null ? layer : 0;
    volume = music.volume != null ? music.volume : 100;
    volume = volume * (this.generalMusicVolume / 100);
    this.musicVolume = volume;
    this.disposeMusic(layer);
    if ((music.name != null) && music.name.length > 0) {
      musicBuffer = this.play("Audio/Music/" + music.name, volume, music.rate);
      musicBuffer.loop = true;
      musicBuffer.volume = 0;
      musicBuffer.duration = Math.round(musicBuffer.duration * 1000 / 16.6);
      musicBuffer.customData.playType = 1;
      musicBuffer.customData.playTime = playTime;
      if (playRange.end === 0) {
        musicBuffer.customData.playRange = {
          start: playRange.start,
          end: musicBuffer.duration
        };
      } else {
        musicBuffer.customData.playRange = playRange;
      }
      musicBuffer.customData.fadeTime = fadeTime;
      musicBuffer.customData.startTimer = Math.round(musicBuffer.customData.playRange.start + Math.random() * (musicBuffer.customData.playRange.end - musicBuffer.customData.playRange.start));
      if (!this.audioBuffers.contains(musicBuffer)) {
        this.audioBuffers.push(musicBuffer);
      }
      this.audioBuffersByLayer[layer] = musicBuffer;
      return this.audioLayers[layer] = {
        name: music.name,
        time: music.currentTime,
        volume: music.volume,
        rate: music.playbackRate,
        fadeInTime: fadeTime,
        customData: musicBuffer.customData
      };
    }
  };


  /**
  * Plays a music.
  *
  * @method playMusic
  * @param {string|Object} name - The music to play. Can be just a name or a music data-object.
  * @param {number} volume - The music's volume in percent.
  * @param {number} rate - The music's playback rate in percent.
  * @param {number} fadeInTime - The fade-in time.
  * @param {number} layer - The layer to play the music on.
   */

  AudioManager.prototype.playMusic = function(name, volume, rate, fadeInTime, layer) {
    var musicBuffer, ref;
    if ((ref = $PARAMS.preview) != null ? ref.settings.musicDisabled : void 0) {
      return;
    }
    if ((name != null) && (name.name != null)) {
      layer = layer != null ? layer : rate || 0;
      fadeInTime = volume;
      volume = name.volume;
      rate = name.playbackRate;
      name = name.name;
    } else {
      layer = layer != null ? layer : 0;
    }
    this.disposeMusic(layer);
    this.audioLayers[layer] = {
      name: name,
      volume: volume,
      rate: rate,
      fadeInTime: fadeInTime,
      playing: true
    };
    volume = volume != null ? volume : 100;
    volume = volume * (this.generalMusicVolume / 100);
    this.musicVolume = volume;
    if ((name != null) && name.length > 0) {
      this.music = {
        name: name
      };
      musicBuffer = this.play("Audio/Music/" + name, volume, rate, fadeInTime);
      musicBuffer.loop = true;
      if (!this.audioBuffers.contains(musicBuffer)) {
        this.audioBuffers.push(musicBuffer);
      }
      return this.audioBuffersByLayer[layer] = musicBuffer;
    }
  };


  /**
  * Resumes a paused music.
  *
  * @method resumeMusic
  * @param {number} fadeInTime - The fade-in time in frames.
  * @param {number} layer - The audio layer to resume.
   */

  AudioManager.prototype.resumeMusic = function(fadeInTime, layer) {
    var ref;
    layer = layer != null ? layer : 0;
    if ((this.audioBuffersByLayer[layer] != null) && !this.audioBuffersByLayer[layer].isPlaying) {
      this.audioBuffersByLayer[layer].resume(fadeInTime);
      return (ref = this.audioLayers[layer]) != null ? ref.playing = true : void 0;
    }
  };


  /**
  * Stops a music.
  *
  * @method stopMusic
  * @param {number} fadeOutTime - The fade-out time in frames.
  * @param {number} layer - The audio layer to stop.
   */

  AudioManager.prototype.stopMusic = function(fadeOutTime, layer) {
    var ref, ref1, ref2;
    layer = layer != null ? layer : 0;
    if ((ref = this.audioBuffersByLayer[layer]) != null) {
      ref.stop(fadeOutTime);
    }
    if ((ref1 = this.audioBuffersByLayer[layer]) != null) {
      ref1.customData = {};
    }
    if ((ref2 = this.audioLayers[layer]) != null) {
      ref2.playing = false;
    }
    return this.music = null;
  };


  /**
  * Stops all music/audio layers.
  *
  * @method stopAllMusic
  * @param {number} fadeOutTime - The fade-out time in frames.
   */

  AudioManager.prototype.stopAllMusic = function(fadeOutTime) {
    var buffer, j, len, ref;
    ref = this.audioBuffers;
    for (j = 0, len = ref.length; j < len; j++) {
      buffer = ref[j];
      if (buffer != null) {
        buffer.stop(fadeOutTime);
        buffer.customData = {};
      }
    }
    return this.music = null;
  };


  /**
  * Disposes a music.
  *
  * @method disposeMusic
  * @param {number} layer - The audio layer of the music to dispose.
   */

  AudioManager.prototype.disposeMusic = function(layer) {
    layer = layer != null ? layer : 0;
    this.stopMusic(0, layer);
    this.audioBuffers.remove(this.audioBuffersByLayer[layer]);
    this.audioBuffersByLayer[layer] = null;
    return this.audioLayers[layer] = null;
  };

  return AudioManager;

})();

window.AudioManager = new AudioManager();

gs.AudioManager = AudioManager;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=AudioManager_69.js
var DataManager;

DataManager = (function() {

  /**
  * Manages the game's data like loading documents. Documents are stored
  * in the data folder of the game in JSON format. The UID is used as the file-name.
  * A document has the following structure:<br>
  * <br>
  * UID - Unique Identifier<br>
  * Items -> An object containing all the items/fields of the document.<br>
  * Items.Type -> The type of the document<br>
  * Items.Name -> The name of the document<br>
  * <br>
  * @module gs
  * @class DataManager
  * @memberof gs
  * @constructor
   */
  function DataManager() {

    /**
    * Stores all documents by UID.
    * @property documentsByUid
    * @type gs.Document[]
     */
    this.documentsByUid = {};

    /**
    * Stores all documents.
    * @property documents
    * @type gs.Document[]
     */
    this.documents = [];

    /**
    * Indiciates if all requested documents are loaded.
    * @property documentsLoaded
    * @type boolean
     */
    this.documentsLoaded = true;

    /**
    * @property events
    * @type gs.EventEmitter
     */
    this.events = new gs.EventEmitter();
  }


  /**
  * Gets all documents with a specified type.
  *
  * @method getDocumentsByType
  * @param {String} type - The document type.
  * @return {gs.Document[]} The documents.
   */

  DataManager.prototype.getDocumentsByType = function(type) {
    var result, summary, uid;
    result = [];
    for (uid in this.summaries.items) {
      summary = this.summaries.items[uid];
      if ((summary.items != null) && summary.items.type === type) {
        result.push(this.getDocument(uid));
      }
    }
    return result;
  };


  /**
  * Gets the first document with the specified type.
  *
  * @method getDocumentByType
  * @param {String} type - The document type.
  * @return {gs.Document} The document or <b>null</b> if a document with the specified type doesn't exist.
   */

  DataManager.prototype.getDocumentByType = function(type) {
    var result, summary, uid;
    result = null;
    for (uid in this.summaries.items) {
      summary = this.summaries.items[uid];
      if ((summary.items != null) && summary.items.type === type) {
        result = this.getDocument(uid);
        break;
      }
    }
    return result;
  };


  /**
  * Gets a document by its UID.
  *
  * @method getDocument
  * @param {String} uid - The UID of the document to get.
  * @return {gs.Document} The document or <b>null</b> if a document with the specified UID doesn't exist.
   */

  DataManager.prototype.getDocument = function(uid) {
    var onerror, request, result, summary;
    result = this.documentsByUid[uid];
    if (result == null) {
      if ($PARAMS.test != null) {
        $.post("/invoke", {
          controller: "gs.DocumentController",
          method: "loadDocument",
          data: JSON.stringify({
            uid: uid
          })
        }, (function(_this) {
          return function(data, textStatus, xhr) {
            var dataObject, r;
            dataObject = JSON.parse(data.data);
            r = _this.documentsByUid[dataObject.uid];
            r.items = dataObject.items;
            return r.loaded = true;
          };
        })(this), "json");
      } else if ($PARAMS.testOffline != null) {
        request = new XMLHttpRequest();
        request.open('GET', "./data/" + uid + ".json", true);
        request.responseType = 'arraybuffer';
        onerror = (function(_this) {
          return function(e) {
            console.log("ERROR");
            return console.log(e);
          };
        })(this);
        request.onload = (function(_this) {
          return function() {
            var buffer, reader;
            buffer = GS.DataPreparer.prepare(request.response);
            reader = new FileReader();
            reader.onload = function(e) {
              var dataObject, r;
              dataObject = JSON.parse(e.target.result);
              GS.dataCache[uid] = dataObject;
              r = _this.documentsByUid[dataObject.uid];
              r.items = dataObject.items;
              return r.loaded = true;
            };
            reader.onerror = onerror;
            return reader.readAsText(new Blob([buffer]));
          };
        })(this);
        request.onerror = onerror;
        request.send();
      } else {
        request = new XMLHttpRequest();
        request.open('GET', "data/" + uid + ".json.js", true);
        request.responseType = 'arraybuffer';
        onerror = (function(_this) {
          return function(e) {
            console.log("ERROR");
            return console.log(e);
          };
        })(this);
        request.onload = (function(_this) {
          return function() {
            var buffer, reader;
            buffer = GS.DataPreparer.prepare(request.response);
            reader = new FileReader();
            reader.onload = function(e) {
              var dataObject, r;
              eval(e.target.result);
              dataObject = GS.dataCache[uid];
              r = _this.documentsByUid[dataObject.uid];
              r.items = dataObject.items;
              return r.loaded = true;
            };
            reader.onerror = onerror;
            return reader.readAsText(new Blob([buffer]));
          };
        })(this);
        request.onerror = onerror;
        request.send();
      }
      if (this.summaries && this.summaries.items) {
        summary = this.summaries.items[uid];
        if (summary) {
          result = {
            uid: uid,
            items: summary.items,
            loaded: false
          };
        }
      } else {
        result = {
          uid: uid,
          loaded: false
        };
      }
      if (result) {
        this.documentsByUid[uid] = result;
        this.documents.push(result);
        this.documentsLoaded = false;
      }
      if (uid === "SUMMARIES") {
        this.summaries = result;
      }
    }
    return result;
  };


  /**
  * Gets a document by its UID. If the document isn't already loaded this method
  * only returned document only contains summary data.
  *
  * @method getDocumentSummary
  * @param {String} uid - The UID of the document to get.
  * @return {gs.Document} The document or <b>null</b> if a document with the specified UID doesn't exist.
   */

  DataManager.prototype.getDocumentSummary = function(uid) {
    return this.summaries.items[uid];
  };


  /**
  * Updates the loading process of documents.
  *
  * @method update
   */

  DataManager.prototype.update = function() {
    var i, j, ref;
    if (!this.documentsLoaded) {
      this.documentsLoaded = true;
      for (i = j = 0, ref = this.documents.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        if (!this.documents[i].loaded) {
          this.documentsLoaded = false;
          break;
        }
      }
      if (this.documentsLoaded) {
        this.events.emit("loaded", this);
      }
    }
    return null;
  };

  return DataManager;

})();

window.DataManager = DataManager;

gs.DataManager = DataManager;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=DataManager_78.js
var RecordManager;

RecordManager = (function() {

  /**
  * Manages the game's database and gives access to all data-records.
  *
  * @module gs
  * @class RecordManager
  * @memberof gs
  * @constructor
   */
  function RecordManager() {

    /**
    * Stores all data-record documents
    * @property documents
    * @type gs.Document[]
     */
    this.documents = null;

    /**
    * Stores all data-record documents by category > id.
    * @property collectionDocuments
    * @type gs.Document[][]
     */
    this.collectionDocuments = [];

    /**
    * Localizable strings of all data-record documents.
    * @property localizableStrings
    * @type Object
     */
    this.localizableStrings = {};

    /**
    * Indicates if all data-records are already translated.
    * @property translated
    * @type boolean
     */
    this.translated = false;

    /**
    * Indicates if all data-records are loaded and initialized.
    * @property initialized
    * @type boolean
     */
    this.initialized = false;
  }


  /**
  * Loads all data-record documents.
  *
  * @method load
   */

  RecordManager.prototype.load = function() {
    return this.documents = DataManager.getDocumentsByType("data_record");
  };


  /**
  * Prepares/Initializes RecordManager and all loaded data-record documents for use. Needs to be
  * called before RecordManager can be used.
  *
  * @method prepare
   */

  RecordManager.prototype.prepare = function() {
    var color, document, i, iconSets, j, k, len, len1, ref, ref1;
    iconSets = [];
    ref = this.documents;
    for (j = 0, len = ref.length; j < len; j++) {
      document = ref[j];
      if (this[document.items.category] == null) {
        this[document.items.category] = [];
        this[document.items.category + "Collection"] = [];
        this.collectionDocuments.push(this[document.items.category + "Collection"]);
      }
      if (document.items.id != null) {
        this[document.items.category][document.items.id] = document.items.data;
        this[document.items.category + "Collection"][document.items.id] = document;
        document.items.data.index = document.items.id;
      }
      if ((document.items.data != null) && (document.items.data.icon != null)) {
        if (iconSets.indexOf(document.items.data.icon.name) === -1) {
          iconSets.push(document.items.data.icon.name);
        }
      }
      if (document.items.localizableStrings != null) {
        Object.mixin(this.localizableStrings, document.items.localizableStrings);
      }
    }
    this.system = this.system[0];
    this.system.iconSets = iconSets;
    if (this.system.colors) {
      ref1 = this.system.colors;
      for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
        color = ref1[i];
        this.system.colors[i] = new Color(color);
      }
    }
    return this.initialized = true;
  };


  /**
  * Translates all localizable fields for each data-record.
  *
  * @method translate
   */

  RecordManager.prototype.translate = function() {
    var document, j, len, ref, results;
    if (!this.translated) {
      this.translated = true;
      ref = this.documents;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        document = ref[j];
        if ((document.items.data.name != null) && (document.items.data.name.lcId != null)) {
          document.items.data.name = lcs(document.items.data.name);
        }
        if ((document.items.data.description != null) && (document.items.data.description.lcId != null)) {
          document.items.data.description = lcs(document.items.data.description);
        }
        if ((document.items.data.removeMessage != null) && (document.items.data.removeMessage.lcId != null)) {
          document.items.data.removeMessage = lcs(document.items.data.removeMessage);
        }
        if ((document.items.data.usingMessage != null) && (document.items.data.usingMessage.lcId != null)) {
          results.push(document.items.data.usingMessage = lcs(document.items.data.usingMessage));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return RecordManager;

})();

window.RecordManager = new RecordManager();

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUE7O0FBQU07O0FBQ0Y7Ozs7Ozs7O0VBUWEsdUJBQUE7O0FBQ1Q7Ozs7O0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYTs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsbUJBQUQsR0FBdUI7O0FBRXZCOzs7OztJQUtBLElBQUMsQ0FBQSxrQkFBRCxHQUFzQjs7QUFFdEI7Ozs7O0lBS0EsSUFBQyxDQUFBLFVBQUQsR0FBYzs7QUFFZDs7Ozs7SUFLQSxJQUFDLENBQUEsV0FBRCxHQUFlO0VBbENOOzs7QUFvQ2I7Ozs7OzswQkFLQSxJQUFBLEdBQU0sU0FBQTtXQUNGLElBQUMsQ0FBQSxTQUFELEdBQWEsV0FBVyxDQUFDLGtCQUFaLENBQStCLGFBQS9CO0VBRFg7OztBQUdOOzs7Ozs7OzBCQU1BLE9BQUEsR0FBUyxTQUFBO0FBQ0wsUUFBQTtJQUFBLFFBQUEsR0FBVztBQUNYO0FBQUEsU0FBQSxxQ0FBQTs7TUFDSSxJQUFPLHFDQUFQO1FBQ0ksSUFBSyxDQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBZixDQUFMLEdBQWdDO1FBQ2hDLElBQUssQ0FBQSxRQUFRLENBQUMsS0FBSyxDQUFDLFFBQWYsR0FBMEIsWUFBMUIsQ0FBTCxHQUErQztRQUMvQyxJQUFDLENBQUEsbUJBQW1CLENBQUMsSUFBckIsQ0FBMEIsSUFBSyxDQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBZixHQUEwQixZQUExQixDQUEvQixFQUhKOztNQUlBLElBQUcseUJBQUg7UUFDSSxJQUFLLENBQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFmLENBQXlCLENBQUEsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFmLENBQTlCLEdBQW1ELFFBQVEsQ0FBQyxLQUFLLENBQUM7UUFDbEUsSUFBSyxDQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsUUFBZixHQUEwQixZQUExQixDQUF3QyxDQUFBLFFBQVEsQ0FBQyxLQUFLLENBQUMsRUFBZixDQUE3QyxHQUFrRTtRQUNsRSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFwQixHQUE0QixRQUFRLENBQUMsS0FBSyxDQUFDLEdBSC9DOztNQUlBLElBQUcsNkJBQUEsSUFBeUIsa0NBQTVCO1FBQ0ksSUFBRyxRQUFRLENBQUMsT0FBVCxDQUFpQixRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBMUMsQ0FBQSxLQUFtRCxDQUFDLENBQXZEO1VBQ0ksUUFBUSxDQUFDLElBQVQsQ0FBYyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBdkMsRUFESjtTQURKOztNQUlBLElBQUcseUNBQUg7UUFDSSxNQUFNLENBQUMsS0FBUCxDQUFhLElBQUMsQ0FBQSxrQkFBZCxFQUFrQyxRQUFRLENBQUMsS0FBSyxDQUFDLGtCQUFqRCxFQURKOztBQWJKO0lBZ0JBLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLE1BQU8sQ0FBQSxDQUFBO0lBQ2xCLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUixHQUFtQjtJQUVuQixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBWDtBQUNJO0FBQUEsV0FBQSxnREFBQTs7UUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU8sQ0FBQSxDQUFBLENBQWYsR0FBd0IsSUFBQSxLQUFBLENBQU0sS0FBTjtBQUQ1QixPQURKOztXQUtBLElBQUMsQ0FBQSxXQUFELEdBQWU7RUExQlY7OztBQTRCVDs7Ozs7OzBCQUtBLFNBQUEsR0FBVyxTQUFBO0FBQ1AsUUFBQTtJQUFBLElBQUcsQ0FBSSxJQUFDLENBQUEsVUFBUjtNQUNJLElBQUMsQ0FBQSxVQUFELEdBQWM7QUFDZDtBQUFBO1dBQUEscUNBQUE7O1FBQ0ksSUFBRyxrQ0FBQSxJQUE4Qix1Q0FBakM7VUFDSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFwQixHQUEyQixHQUFBLENBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBeEIsRUFEL0I7O1FBRUEsSUFBRyx5Q0FBQSxJQUFxQyw4Q0FBeEM7VUFDSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxXQUFwQixHQUFrQyxHQUFBLENBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsV0FBeEIsRUFEdEM7O1FBRUEsSUFBRywyQ0FBQSxJQUF1QyxnREFBMUM7VUFDSSxRQUFRLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxhQUFwQixHQUFvQyxHQUFBLENBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsYUFBeEIsRUFEeEM7O1FBRUEsSUFBRywwQ0FBQSxJQUFzQywrQ0FBekM7dUJBQ0ksUUFBUSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsWUFBcEIsR0FBbUMsR0FBQSxDQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFlBQXhCLEdBRHZDO1NBQUEsTUFBQTsrQkFBQTs7QUFQSjtxQkFGSjs7RUFETzs7Ozs7O0FBY2YsTUFBTSxDQUFDLGFBQVAsR0FBMkIsSUFBQSxhQUFBLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IFJlY29yZE1hbmFnZXJcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIFJlY29yZE1hbmFnZXJcbiAgICAjIyMqXG4gICAgKiBNYW5hZ2VzIHRoZSBnYW1lJ3MgZGF0YWJhc2UgYW5kIGdpdmVzIGFjY2VzcyB0byBhbGwgZGF0YS1yZWNvcmRzLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBSZWNvcmRNYW5hZ2VyXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICAjIyMqXG4gICAgICAgICogU3RvcmVzIGFsbCBkYXRhLXJlY29yZCBkb2N1bWVudHNcbiAgICAgICAgKiBAcHJvcGVydHkgZG9jdW1lbnRzXG4gICAgICAgICogQHR5cGUgZ3MuRG9jdW1lbnRbXVxuICAgICAgICAjIyMgXG4gICAgICAgIEBkb2N1bWVudHMgPSBudWxsXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogU3RvcmVzIGFsbCBkYXRhLXJlY29yZCBkb2N1bWVudHMgYnkgY2F0ZWdvcnkgPiBpZC5cbiAgICAgICAgKiBAcHJvcGVydHkgY29sbGVjdGlvbkRvY3VtZW50c1xuICAgICAgICAqIEB0eXBlIGdzLkRvY3VtZW50W11bXVxuICAgICAgICAjIyMgXG4gICAgICAgIEBjb2xsZWN0aW9uRG9jdW1lbnRzID0gW11cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBMb2NhbGl6YWJsZSBzdHJpbmdzIG9mIGFsbCBkYXRhLXJlY29yZCBkb2N1bWVudHMuXG4gICAgICAgICogQHByb3BlcnR5IGxvY2FsaXphYmxlU3RyaW5nc1xuICAgICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAgICAjIyMgXG4gICAgICAgIEBsb2NhbGl6YWJsZVN0cmluZ3MgPSB7fVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiBhbGwgZGF0YS1yZWNvcmRzIGFyZSBhbHJlYWR5IHRyYW5zbGF0ZWQuXG4gICAgICAgICogQHByb3BlcnR5IHRyYW5zbGF0ZWRcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICMjIyBcbiAgICAgICAgQHRyYW5zbGF0ZWQgPSBub1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiBhbGwgZGF0YS1yZWNvcmRzIGFyZSBsb2FkZWQgYW5kIGluaXRpYWxpemVkLlxuICAgICAgICAqIEBwcm9wZXJ0eSBpbml0aWFsaXplZFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjIFxuICAgICAgICBAaW5pdGlhbGl6ZWQgPSBub1xuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBMb2FkcyBhbGwgZGF0YS1yZWNvcmQgZG9jdW1lbnRzLlxuICAgICpcbiAgICAqIEBtZXRob2QgbG9hZFxuICAgICMjIyAgXG4gICAgbG9hZDogLT5cbiAgICAgICAgQGRvY3VtZW50cyA9IERhdGFNYW5hZ2VyLmdldERvY3VtZW50c0J5VHlwZShcImRhdGFfcmVjb3JkXCIpXG5cbiAgICAjIyMqXG4gICAgKiBQcmVwYXJlcy9Jbml0aWFsaXplcyBSZWNvcmRNYW5hZ2VyIGFuZCBhbGwgbG9hZGVkIGRhdGEtcmVjb3JkIGRvY3VtZW50cyBmb3IgdXNlLiBOZWVkcyB0byBiZVxuICAgICogY2FsbGVkIGJlZm9yZSBSZWNvcmRNYW5hZ2VyIGNhbiBiZSB1c2VkLlxuICAgICpcbiAgICAqIEBtZXRob2QgcHJlcGFyZVxuICAgICMjIyAgXG4gICAgcHJlcGFyZTogLT5cbiAgICAgICAgaWNvblNldHMgPSBbXVxuICAgICAgICBmb3IgZG9jdW1lbnQgaW4gQGRvY3VtZW50c1xuICAgICAgICAgICAgaWYgbm90IHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnldP1xuICAgICAgICAgICAgICAgIHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnldID0gW11cbiAgICAgICAgICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5ICsgXCJDb2xsZWN0aW9uXCJdID0gW11cbiAgICAgICAgICAgICAgICBAY29sbGVjdGlvbkRvY3VtZW50cy5wdXNoKHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnkgKyBcIkNvbGxlY3Rpb25cIl0pXG4gICAgICAgICAgICBpZiBkb2N1bWVudC5pdGVtcy5pZD9cbiAgICAgICAgICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5XVtkb2N1bWVudC5pdGVtcy5pZF0gPSBkb2N1bWVudC5pdGVtcy5kYXRhXG4gICAgICAgICAgICAgICAgdGhpc1tkb2N1bWVudC5pdGVtcy5jYXRlZ29yeSArIFwiQ29sbGVjdGlvblwiXVtkb2N1bWVudC5pdGVtcy5pZF0gPSBkb2N1bWVudFxuICAgICAgICAgICAgICAgIGRvY3VtZW50Lml0ZW1zLmRhdGEuaW5kZXggPSBkb2N1bWVudC5pdGVtcy5pZFxuICAgICAgICAgICAgaWYgZG9jdW1lbnQuaXRlbXMuZGF0YT8gYW5kIGRvY3VtZW50Lml0ZW1zLmRhdGEuaWNvbj9cbiAgICAgICAgICAgICAgICBpZiBpY29uU2V0cy5pbmRleE9mKGRvY3VtZW50Lml0ZW1zLmRhdGEuaWNvbi5uYW1lKSA9PSAtMVxuICAgICAgICAgICAgICAgICAgICBpY29uU2V0cy5wdXNoKGRvY3VtZW50Lml0ZW1zLmRhdGEuaWNvbi5uYW1lKVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIGRvY3VtZW50Lml0ZW1zLmxvY2FsaXphYmxlU3RyaW5ncz9cbiAgICAgICAgICAgICAgICBPYmplY3QubWl4aW4oQGxvY2FsaXphYmxlU3RyaW5ncywgZG9jdW1lbnQuaXRlbXMubG9jYWxpemFibGVTdHJpbmdzKVxuICAgICAgICAgICAgXG4gICAgICAgIEBzeXN0ZW0gPSBAc3lzdGVtWzBdXG4gICAgICAgIEBzeXN0ZW0uaWNvblNldHMgPSBpY29uU2V0c1xuICAgICAgICBcbiAgICAgICAgaWYgQHN5c3RlbS5jb2xvcnNcbiAgICAgICAgICAgIGZvciBjb2xvciwgaSBpbiBAc3lzdGVtLmNvbG9yc1xuICAgICAgICAgICAgICAgIEBzeXN0ZW0uY29sb3JzW2ldID0gbmV3IENvbG9yKGNvbG9yKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgIEBpbml0aWFsaXplZCA9IHllc1xuICAgIFxuICAgICMjIypcbiAgICAqIFRyYW5zbGF0ZXMgYWxsIGxvY2FsaXphYmxlIGZpZWxkcyBmb3IgZWFjaCBkYXRhLXJlY29yZC5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHRyYW5zbGF0ZVxuICAgICMjIyAgICAgIFxuICAgIHRyYW5zbGF0ZTogLT5cbiAgICAgICAgaWYgbm90IEB0cmFuc2xhdGVkXG4gICAgICAgICAgICBAdHJhbnNsYXRlZCA9IHllc1xuICAgICAgICAgICAgZm9yIGRvY3VtZW50IGluIEBkb2N1bWVudHNcbiAgICAgICAgICAgICAgICBpZiBkb2N1bWVudC5pdGVtcy5kYXRhLm5hbWU/IGFuZCBkb2N1bWVudC5pdGVtcy5kYXRhLm5hbWUubGNJZD9cbiAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuaXRlbXMuZGF0YS5uYW1lID0gbGNzKGRvY3VtZW50Lml0ZW1zLmRhdGEubmFtZSlcbiAgICAgICAgICAgICAgICBpZiBkb2N1bWVudC5pdGVtcy5kYXRhLmRlc2NyaXB0aW9uPyBhbmQgZG9jdW1lbnQuaXRlbXMuZGF0YS5kZXNjcmlwdGlvbi5sY0lkP1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5pdGVtcy5kYXRhLmRlc2NyaXB0aW9uID0gbGNzKGRvY3VtZW50Lml0ZW1zLmRhdGEuZGVzY3JpcHRpb24pXG4gICAgICAgICAgICAgICAgaWYgZG9jdW1lbnQuaXRlbXMuZGF0YS5yZW1vdmVNZXNzYWdlPyBhbmQgZG9jdW1lbnQuaXRlbXMuZGF0YS5yZW1vdmVNZXNzYWdlLmxjSWQ/XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50Lml0ZW1zLmRhdGEucmVtb3ZlTWVzc2FnZSA9IGxjcyhkb2N1bWVudC5pdGVtcy5kYXRhLnJlbW92ZU1lc3NhZ2UpXG4gICAgICAgICAgICAgICAgaWYgZG9jdW1lbnQuaXRlbXMuZGF0YS51c2luZ01lc3NhZ2U/IGFuZCBkb2N1bWVudC5pdGVtcy5kYXRhLnVzaW5nTWVzc2FnZS5sY0lkP1xuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudC5pdGVtcy5kYXRhLnVzaW5nTWVzc2FnZSA9IGxjcyhkb2N1bWVudC5pdGVtcy5kYXRhLnVzaW5nTWVzc2FnZSlcbiAgICAgIFxuXG53aW5kb3cuUmVjb3JkTWFuYWdlciA9IG5ldyBSZWNvcmRNYW5hZ2VyKCkiXX0=
//# sourceURL=RecordManager_89.js
var Formula, Space, Style, UIManager;

Formula = (function() {

  /**
  * Encapsulates a UI formula. A formula can be used in UI layouts to define
  * property-bindings or to implement a specific behavior.
  *
  * @module ui
  * @class Formula
  * @memberof ui
  * @constructor
  * @param {Function} f - The formula-function. Defines the logic of the formula.
  * @param {Object} data - An optional data-object which can be accessed inside the formula-function.
  * @param {string} event - An optional event-name to define when the formula should be executed.
   */
  function Formula(f, data, event) {

    /**
    * Indicates if its the first time the formula is called.
    * @property onInitialize
    * @type boolean
     */
    var i, j, l, ref, ref1;
    this.onInitialize = true;

    /**
    * The formula-function.
    * @property exec_
    * @type Function
     */
    this.exec_ = f;

    /**
    * An optional data-object which can bes accessed inside the formula-function.
    * @property data
    * @type Object
     */
    this.data = data;

    /**
    * An optional event-name to define when the formula should be executed.
    * @property event
    * @type string
     */
    this.event = event;

    /**
    * An array of custom number-data which can be used for different purposes. The first element
    * is also used in onChange method to store the old value and check against the new one to detect a change.
    * @property numbers
    * @type number[]
     */
    this.numbers = new Array(10);
    for (i = j = 0, ref = this.numbers.length; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
      this.numbers[i] = 0;
    }

    /**
    * An array of custom string-data which can be used for different purposes. The first element
    * is also used in onTextChange method to store the old value and check against the new one to detect a change.
    * @property strings
    * @type string[]
     */
    this.strings = new Array(10);
    for (i = l = 0, ref1 = this.strings.length; 0 <= ref1 ? l <= ref1 : l >= ref1; i = 0 <= ref1 ? ++l : --l) {
      this.strings[i] = "";
    }
  }


  /**
  * The formula-function. Its a wrapper-function before the first-time call was made.
  * @method exec
   */

  Formula.prototype.exec = function() {
    var r;
    this.exec = this.exec_;
    r = this.exec_.apply(this, arguments);
    this.onInitialize = false;
    return r;
  };


  /**
  * Checks if the specified number-value has changed since the last check. It uses
  * the first entry of the numbers-array to store the value and check against the new one.
  *
  * @method onChange
  * @param {number} numberValue - Number value to check.
   */

  Formula.prototype.onChange = function(numberValue) {
    var result;
    result = this.numbers[0] !== numberValue;
    this.numbers[0] = numberValue;
    return result;
  };


  /**
  * Checks if the specified text-value has changed since the last check. It uses
  * the first entry of the strings-array to store the value and check against the new one.
  *
  * @method onTextChange
  * @param {string} textValue - Text value to check.
   */

  Formula.prototype.onTextChange = function(textValue) {
    var result;
    result = this.strings[0] !== textValue;
    this.strings[0] = textValue;
    return result;
  };

  return Formula;

})();

ui.Formula = Formula;

Space = (function() {

  /**
  * Describes a space inside or around something like a margin or padding.
  *
  * @module ui
  * @class Space
  * @memberof ui
  * @constructor
  * @param {number} left - Space at the left in pixels.
  * @param {number} top - Space at the top in pixels.
  * @param {number} right - Space at the right in pixels.
  * @param {number} bottom - Space at the bottom in pixels.
   */
  function Space(left, top, right, bottom) {

    /**
    * Space at the left in pixels.
    * @property left
    * @type number
     */
    this.left = left;

    /**
    * Space at the top in pixels.
    * @property top
    * @type number
     */
    this.top = top;

    /**
    * Space at the right in pixels.
    * @property right
    * @type number
     */
    this.right = right;

    /**
    * Space at the bottom in pixels.
    * @property bottom
    * @type number
     */
    this.bottom = bottom;
  }


  /**
  * Sets the coordinates of the space by copying them from a specified space.
  *
  * @method setFromObject
  * @param {Object} space - A space to copy.
   */

  Space.prototype.setFromObject = function(space) {
    this.left = space.left;
    this.top = space.top;
    this.right = space.right;
    return this.bottom = space.bottom;
  };


  /**
  * Sets the coordinates of the space.
  *
  * @method set
  * @param {number} left - Space at the left in pixels.
  * @param {number} top - Space at the top in pixels.
  * @param {number} right - Space at the right in pixels.
  * @param {number} bottom - Space at the bottom in pixels.
   */

  Space.prototype.set = function(left, top, right, bottom) {
    this.left = left;
    this.top = top;
    this.right = right;
    return this.bottom = bottom;
  };


  /**
  * Creates a new space object from an array of coordinates.
  *
  * @method fromArray
  * @static
  * @param {number[]} array - An array of coordinates (left, top right, bottom).
   */

  Space.fromArray = function(array) {
    return new ui.Space(array[0], array[1], array[2], array[3]);
  };

  return Space;

})();

ui.Space = Space;

Style = (function() {

  /**
  * A UI style can applied to a UI object to modify it properties like color, image, etc. to give a certain "style" to it.
  *
  * @module ui
  * @class Style
  * @memberof ui
  * @constructor
  * @param {Object} descriptor - A style-descriptor to initialize the style from.
  * @param {number} id - A unique numeric ID to access the style through UIManager.stylesById collection.
  * @param {number} selector - A selector ID which controls under which conditions the styles will be applied.
   */
  function Style(descriptor, id, selector) {

    /**
    * ID number to quickly access this style and link to this style.
    * @property id
    * @type number
     */
    this.id = id;

    /**
    * Style-ID of target object. This style will only be applied on UI objects with that style ID which are
    * children of UI objects where this style is applied.
    * @property target
    * @type number
     */
    this.target = -1;

    /**
    * Selector-ID which controls under which conditions the style becomes active.
    * @property selector
    * @type number
     */
    this.selector = selector;

    /**
    * The font used for the text-display.
    * @default null
    * @property font
    * @type gs.Font
     */
    this.font = null;

    /**
    * The UI object's image used for visual presentation.
    * @property image
    * @type string
     */
    this.image = null;

    /**
    * The UI object's animations used for visual presentation.
    * @default null
    * @property animations
    * @type Object[]
     */
    this.animations = null;

    /**
    * The UI object's color.
    * @property color
    * @type gs.Color
     */
    this.color = null;

    /**
    * The UI object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner
    * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1
    * places the object with its lower-right corner.
    * @property anchor
    * @type gs.Point
     */
    this.anchor = null;

    /**
    * The UI object's zoom-setting for x and y axis.
    * @default new gs.Point(1.0, 1.0)
    * @property zoom
    * @type gs.Point
     */
    this.zoom = null;

    /**
    * The UI object's margin. The margin defines an extra space around the UI object. 
    * The default is { left: 0, top: 0, right: 0, bottom: 0 }.
    * @property margin
    * @type Object
     */
    this.margin = null;

    /**
    * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.
    * @property padding
    * @type Object
     */
    this.padding = null;

    /**
    * The UI object's mask for masking-effects.
    * @property mask
    * @type gs.Mask
     */
    this.mask = null;

    /**
    * The UI object's alignment.
    * @property alignment
    * @type ui.Alignment
     */
    this.alignment = -1;

    /**
    * The UI object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.
    * @property opacity
    * @type number
     */
    this.opacity = -1;

    /**
    * The object's clip-rect for visual presentation.
    * @default null
    * @property clipRect
    * @type gs.Rect
    * @protected
     */
    this.clipRect = null;

    /**
    * The corner-size of the frame.
    * @property frameCornerSize
    * @type number
     */
    this.frameCornerSize = -1;

    /**
    * The thickness of the frame.
    * @property frameThickness
    * @type number
     */
    this.frameThickness = -1;

    /**
    * The looping of the image.
    * @property looping
    * @type ui.Orientation
     */
    this.looping = null;

    /**
    * The object's z-index controls rendering-order/image-overlapping. An object with a smaller z-index is rendered
    * before an object with a larger index. For example: To make sure a game object is always on top of the screen, it
    * should have the largest z-index of all game objects.
    * @property zIndex
    * @type number
     */
    this.zIndex = -1;

    /**
    * The object's alignment on x-axis. Needs to be supported by layout.
    * @property alignmentX
    * @type number
     */
    this.alignmentX = -1;

    /**
    * The object's alignment on y-axis. Needs to be supported by layout.
    * @property alignmentY
    * @type number
     */
    this.alignmentY = -1;

    /**
    * The object's resize behavior.
    * @property resizable
    * @type boolean
     */
    this.resizable = null;

    /**
    * The original style descriptor.
    * @property descriptor
    * @type Object
     */
    this.descriptor = descriptor;
    if (descriptor) {
      this.setFromDescriptor(descriptor);
    }
  }


  /**
  * Initializes the style from a style-descriptor.
  *
  * @method setFromDescriptor
  * @param {Object} descriptor - The style-descriptor.
   */

  Style.prototype.setFromDescriptor = function(descriptor) {
    this.descriptor = descriptor;
    this.image = descriptor.image;
    if (descriptor.color) {
      this.color = gs.Color.fromArray(descriptor.color);
    }
    if (descriptor.anchor) {
      this.anchor = new gs.Point(descriptor.anchor[0], descriptor.anchor[1]);
    }
    if (descriptor.zoom) {
      this.zoom = new gs.Point(descriptor.zoom[0], descriptor.zoom[1]);
    }
    if (descriptor.font) {
      this.setupFont(descriptor);
    }
    if (descriptor.clipRect) {
      this.clipRect = gs.Rect.fromArray(descriptor.clipRect);
    }
    if (descriptor.opacity >= 0) {
      this.opacity = descriptor.opacity;
    }
    if (descriptor.alignment >= 0) {
      this.alignment = descriptor.alignment;
    }
    if (descriptor.margin) {
      this.margin = ui.Space.fromArray(descriptor.margin);
    }
    if (descriptor.padding) {
      this.padding = ui.Space.fromArray(descriptor.padding);
    }
    this.animations = descriptor.animations;
    if (descriptor.frameCornerSize) {
      this.frameCornerSize = descriptor.frameCornerSize;
    }
    if (descriptor.frameThickness) {
      this.frameThickness = descriptor.frameThickness;
    }
    if (descriptor.frame) {
      this.frame = descriptor.frame;
    }
    if (descriptor.looping) {
      this.looping = descriptor.looping;
    }
    if (descriptor.resizable != null) {
      this.resizable = descriptor.resizable;
    }
    if (descriptor.zIndex) {
      this.zIndex = descriptor.zIndex;
    }
    if (descriptor.alignmentX) {
      this.alignmentX = ui.UIManager.alignments[descriptor.alignmentX];
    }
    if (descriptor.alignmentY) {
      return this.alignmentY = ui.UIManager.alignments[descriptor.alignmentY];
    }
  };

  Style.prototype.set = function(style) {
    this.image = style.image;
    this.color.setFromObject(style.color);
    this.anchor.set(style.anchor.x, style.anchor.y);
    this.zoom.set(style.zoom.x, style.zoom.y);
    if (style.font) {
      if (!this.font) {
        this.font = new gs.Font(style.font.name, style.font.size);
      }
      this.font.set(style.font);
    }
    if (style.clipRect) {
      if (!this.clipRect) {
        this.clipRect = new gs.Rect();
      }
      this.clipRect.setFromObject(style.clipRect);
    }
    this.opacity = style.opacitz;
    this.alignment = style.alignment;
    this.margin.setFromObject(style.margin);
    return this.padding.setFromObject(style.padding);
  };


  /**
  * Initializes font-data from a style-descriptor.
  *
  * @method setupFont
  * @param {Object} descriptor - The style-descriptor.
  * @protected
   */

  Style.prototype.setupFont = function(descriptor) {
    var ref, ref1, ref10, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9;
    if (descriptor.font) {
      if (!this.font) {
        this.font = new Font(descriptor.font.name, (ref = descriptor.font.size) != null ? ref : 0);
      } else {
        this.font.name = descriptor.font.name;
        this.font.size = (ref1 = descriptor.font.size) != null ? ref1 : 0;
      }
      this.font.bold = (ref2 = descriptor.font.bold) != null ? ref2 : this.font.bold;
      this.font.italic = (ref3 = descriptor.font.italic) != null ? ref3 : this.font.italic;
      this.font.smallCaps = (ref4 = descriptor.font.smallCaps) != null ? ref4 : this.font.smallCaps;
      this.font.underline = (ref5 = descriptor.font.underline) != null ? ref5 : this.font.underline;
      this.font.strikeThrough = (ref6 = descriptor.font.strikeThrough) != null ? ref6 : this.font.strikeThrough;
      if (descriptor.font.color != null) {
        this.font.color.setFromArray(descriptor.font.color);
      }
      if (descriptor.font.border != null) {
        this.font.border = (ref7 = descriptor.font.border) != null ? ref7 : false;
        this.font.borderSize = (ref8 = descriptor.font.borderSize) != null ? ref8 : 4;
        this.font.borderColor.set(0, 0, 0, 255);
      }
      if (descriptor.font.outline != null) {
        this.font.border = (ref9 = descriptor.font.outline) != null ? ref9 : false;
        this.font.borderSize = (ref10 = descriptor.font.outline.size) != null ? ref10 : 4;
        if (descriptor.font.outline.color != null) {
          return this.font.borderColor.setFromArray(descriptor.font.outline.color);
        } else {
          return this.font.borderColor.set(0, 0, 0, 255);
        }
      }
    }
  };


  /**
  * Applies the style to a UI object.
  *
  * @method apply
  * @param {ui.Object_UIElement} object - The UI object where the style should be applied to.
   */

  Style.prototype.apply = function(object) {
    var ref;
    if (!object.activeStyles.contains(this)) {
      object.activeStyles.push(this);
      if (this.font) {
        if ((ref = object.font) != null) {
          ref.set(this.font);
        }
      }
      if (this.color) {
        object.color.set(this.color);
      }
      if (this.image) {
        object.image = this.image;
      }
      if (this.anchor) {
        object.anchor.set(this.anchor.x, this.anchor.y);
      }
      if (this.zoom) {
        object.zoom.set(this.zoom.x, this.zoom.y);
      }
      if (this.padding) {
        object.padding.setFromObject(this.padding);
      }
      if (this.margin) {
        object.margin.setFromObject(this.margin);
      }
      if (this.opacity >= 0) {
        object.opacity = this.opacity;
      }
      if (this.alignment >= 0) {
        object.alignment = this.alignment;
      }
      if (this.frameThickness >= 0) {
        object.frameThickness = this.frameThickness;
      }
      if (this.frameCornerSize >= 0) {
        object.frameCornerSize = this.frameCornerSize;
      }
      if (this.mask) {
        object.mask.set(this.mask);
      }
      if (this.zIndex >= 0) {
        object.zIndex = this.zIndex;
      }
      if (this.alignmentX >= 0) {
        object.alignmentX = this.alignmentX;
      }
      if (this.alignmentY >= 0) {
        object.alignmentY = this.alignmentY;
      }
      if (this.resizable != null) {
        object.resizable = this.resizable;
      }
      this.applyLooping(object);
      return this.applyAnimations(object);
    }
  };


  /**
  * Applies the looping-data of the style to a UI object.
  *
  * @method applyLooping
  * @param {ui.Object_UIElement} object - The UI object where the looping-data should be applied to.
  * @protected
   */

  Style.prototype.applyLooping = function(object) {
    if (this.looping) {
      if (!object.visual.looping) {
        object.visual.dispose();
        object.removeComponent(object.visual);
        object.visual = new gs.Component_TilingSprite();
        object.addComponent(object.visual);
      }
      object.visual.looping.vertical = this.looping.vertical;
      return object.visual.looping.horizontal = this.looping.horizontal;
    }
  };


  /**
  * Applies the animation-data of the style to a UI object. This automatically adds an animation-handler
  * component(ui.Component_AnimationHandler) with the id "animationHandler" to the UI object if not already exists.
  *
  * @method applyAnimations
  * @param {ui.Object_UIElement} object - The UI object where the animation-data should be applied to.
  * @protected
   */

  Style.prototype.applyAnimations = function(object) {
    if (this.animations) {
      object.animations = Object.deepCopy(this.animations);
      if (!object.findComponentById("animationHandler")) {
        return object.addComponent(new ui.Component_AnimationHandler(), "animationHandler");
      }
    }
  };


  /**
  * Reverts the changes from a UI object made by this style. However, this resets all styleable properties
  * were set by this style. So it is necessary to apply all other styles again, but that is already handles in
  * ui.Component_UIBehavior.
  *
  * @method revert
  * @param {ui.Object_UIElement} object - The UI object where the style should be reverted.
   */

  Style.prototype.revert = function(object) {
    var activeStyles, i1, j, j1, k1, l, l1, n, o, p, q, s, t, u, w, x, y, z;
    activeStyles = object.activeStyles;
    if (object.activeStyles.contains(this)) {
      object.activeStyles.remove(this);
      if (this.font) {
        object.font.set(gs.Fonts.TEXT);
        for (j = activeStyles.length - 1; j >= 0; j += -1) {
          s = activeStyles[j];
          if (s.font) {
            object.font.set(s.font);
            break;
          }
        }
      }
      if (this.color) {
        object.color.set(Color.WHITE);
        for (l = activeStyles.length - 1; l >= 0; l += -1) {
          s = activeStyles[l];
          if (s.color) {
            object.color.set(s.color);
            break;
          }
        }
      }
      if (this.image) {
        object.image = null;
        for (n = activeStyles.length - 1; n >= 0; n += -1) {
          s = activeStyles[n];
          if (s.image) {
            object.image = s.image;
            break;
          }
        }
      }
      if (this.anchor) {
        object.anchor.set(0, 0);
        for (o = activeStyles.length - 1; o >= 0; o += -1) {
          s = activeStyles[o];
          if (s.anchor) {
            object.anchor.setFromObject(s.anchor);
            break;
          }
        }
      }
      if (this.zoom) {
        object.zoom.set(1.0, 1.0);
        for (p = activeStyles.length - 1; p >= 0; p += -1) {
          s = activeStyles[p];
          if (s.zoom) {
            object.zoom.setFromObject(s.zoom);
            break;
          }
        }
      }
      if (this.padding) {
        object.padding.set(0, 0, 0, 0);
        for (q = activeStyles.length - 1; q >= 0; q += -1) {
          s = activeStyles[q];
          if (s.padding) {
            object.padding.setFromObject(s.padding);
            break;
          }
        }
      }
      if (this.margin) {
        object.margin.set(0, 0, 0, 0);
        for (t = activeStyles.length - 1; t >= 0; t += -1) {
          s = activeStyles[t];
          if (s.margin) {
            object.margin.setFromObject(s.margin);
            break;
          }
        }
      }
      if (this.opacity >= 0) {
        object.opacity = 255;
        for (u = activeStyles.length - 1; u >= 0; u += -1) {
          s = activeStyles[u];
          if (s.opacity >= 0) {
            object.opacity = s.opacity;
            break;
          }
        }
      }
      if (this.alignment >= 0) {
        object.alignment = 0;
        for (w = activeStyles.length - 1; w >= 0; w += -1) {
          s = activeStyles[w];
          if (s.alignment >= 0) {
            object.alignment = s.alignment;
            break;
          }
        }
      }
      if (this.frameCornerSize >= 0) {
        object.frameCornerSize = 16;
        for (x = activeStyles.length - 1; x >= 0; x += -1) {
          s = activeStyles[x];
          if (s.frameCornerSize >= 0) {
            object.frameCornerSize = s.frameCornerSize;
            break;
          }
        }
      }
      if (this.frameThickness >= 0) {
        object.frameThickness = 16;
        for (y = activeStyles.length - 1; y >= 0; y += -1) {
          s = activeStyles[y];
          if (s.frameThickness >= 0) {
            object.frameThickness = s.frameThickness;
            break;
          }
        }
      }
      if (this.mask) {
        object.mask.set(null);
        for (z = activeStyles.length - 1; z >= 0; z += -1) {
          s = activeStyles[z];
          if (s.mask) {
            object.mask.set(s.font);
            break;
          }
        }
      }
      if (this.zIndex >= 0) {
        object.zIndex = 0;
        for (i1 = activeStyles.length - 1; i1 >= 0; i1 += -1) {
          s = activeStyles[i1];
          if (s.zIndex >= 0) {
            object.zIndex = s.zIndex;
            break;
          }
        }
      }
      if (this.alignmentX >= 0) {
        object.alignmentX = 0;
        for (j1 = activeStyles.length - 1; j1 >= 0; j1 += -1) {
          s = activeStyles[j1];
          if (s.alignmentX >= 0) {
            object.alignmentX = s.alignmentX;
            break;
          }
        }
      }
      if (this.alignmentY >= 0) {
        object.alignmentY = 0;
        for (k1 = activeStyles.length - 1; k1 >= 0; k1 += -1) {
          s = activeStyles[k1];
          if (s.alignmentY >= 0) {
            object.alignmentY = s.alignmentY;
            break;
          }
        }
      }
      if (this.resizable != null) {
        object.resizable = false;
        for (l1 = activeStyles.length - 1; l1 >= 0; l1 += -1) {
          s = activeStyles[l1];
          if (s.resizable != null) {
            object.resizable = s.resizable;
            break;
          }
        }
      }
      this.revertAnimations(object);
      return this.revertLooping(object);
    }
  };


  /**
  * Reverts the animation-data changes applied to a UI object by this style.
  *
  * @method revertAnimations
  * @param {ui.Object_UIElement} object - The UI object where the animation-data changes should be reverted.
   */

  Style.prototype.revertAnimations = function(object) {
    var activeStyles, j, results, s;
    activeStyles = object.activeStyles;
    if (this.animations) {
      object.animations = null;
      results = [];
      for (j = activeStyles.length - 1; j >= 0; j += -1) {
        s = activeStyles[j];
        if (s.animations) {
          object.animations = Object.deepCopy(s.animations);
          if (!object.findComponentById("animationHandler")) {
            results.push(object.addComponent(new ui.Component_AnimationHandler(), "animationHandler"));
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };


  /**
  * Reverts the looping-data changes applied to a UI object by this style.
  *
  * @method revertLooping
  * @param {ui.Object_UIElement} object - The UI object where the looping-data changes should be reverted.
   */

  Style.prototype.revertLooping = function(object) {
    var activeStyles, j, results, s;
    activeStyles = object.activeStyles;
    if (this.looping) {
      object.visual.looping.vertical = false;
      object.visual.looping.horizontal = false;
      results = [];
      for (j = activeStyles.length - 1; j >= 0; j += -1) {
        s = activeStyles[j];
        if (s.looping) {
          if (!object.visual.looping) {
            object.visual.dispose();
            object.removeComponent(object.visual);
            object.visual = new gs.Component_TilingSprite();
            object.addComponent(object.visual);
          }
          object.visual.looping.vertical = s.looping.vertical;
          results.push(object.visual.looping.horizontal = s.looping.horizontal);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };

  return Style;

})();

ui.Style = Style;

UIManager = (function() {

  /**
  * Handles the creation of In Game UI elements. For more information about
  * In-Game UI see help file.
  *
  * @module ui
  * @class UIManager
  * @memberof ui
  * @constructor
   */
  function UIManager() {

    /**
    * Stores all registered UI layouts by name/id.
    * @property layouts
    * @type Object
     */
    this.layouts = {};

    /**
    * Stores all registered UI styles by name/id.
    * @property styles
    * @type Object
     */
    this.styles = {};

    /**
    * Stores all UI styles by number id.
    * @property stylesById
    * @type ui.Style[]
     */
    this.stylesById = new Array();

    /**
    * Stores all UI styles by style-name.
    * @property stylesByName
    * @type Object
     */
    this.stylesByName = {};

    /**
    * Stores all registered custom UI types/templates by name/id.
    * @property customTypes
    * @type Object
     */
    this.customTypes = {};

    /**
    * Stores all registered UI controllers by name/id.
    * @property customTypes
    * @type Object
     */
    this.controllers = {};

    /**
    * Stores all registered UI data sources by name/id.
    * @property customTypes
    * @type Object
     */
    this.dataSources = {};

    /**
    * Mapping to table to map alignment names to number values.
    * @property alignments
    * @type Object
    * @protected
     */
    this.alignments = {
      "left": 0,
      "top": 0,
      "center": 1,
      "bottom": 2,
      "right": 2,
      "0": 0,
      "1": 1,
      "2": 2
    };

    /**
    * Mapping to table to map blend-mode names to number values.
    * @property blendModes
    * @type Object
    * @protected
     */
    this.blendModes = {
      "normal": 0,
      "add": 1,
      "sub": 2
    };

    /**
    * Mapping to table to map selector names to number values.
    * @property selectors
    * @type Object
     */
    this.selectors = {
      normal: 0,
      hover: 1,
      selected: 2,
      enabled: 3,
      focused: 4
    };
    this.defaultPlaceholderParams = {};
  }


  /**
  * Sets up UI Manager, optimizes styles, etc.
  *
  * @method setup
   */

  UIManager.prototype.setup = function() {
    return this.setupStyles();
  };


  /**
  * Sets up the UI styles by wrapping them into ui.Style objects and optimizing the access.
  *
  * @method setupStyles
  * @protected
   */

  UIManager.prototype.setupStyles = function() {
    var id, k, ref, selector, selectorMap, subs;
    id = 0;
    selectorMap = this.selectors;
    for (k in this.styles) {
      subs = k.split(" ");
      selector = subs[0].split(":");
      if (selectorMap[selector[1]]) {
        this.stylesById[id] = new ui.Style(this.styles[k], id, selectorMap[selector[1]]);
      } else {
        this.stylesById[id] = new ui.Style(this.styles[k], id, 0);
      }
      if (!this.stylesByName[selector[0]]) {
        this.stylesByName[selector[0]] = [];
      }
      this.stylesByName[selector[0]].push(this.stylesById[id]);
      this.styles[k] = this.stylesById[id];
      id++;
    }
    for (k in this.styles) {
      subs = k.split(" ");
      if (subs.length > 1) {
        this.stylesByName[subs[1]].push(this.styles[k]);
        this.styles[k].target = (ref = this.styles[k.split(":")[0]]) != null ? ref.id : void 0;
      }
    }
    return null;
  };


  /**
  * Executes all placeholder formulas in the specified descriptor. The descriptor will be changed
  * and placeholder formulas are replaced with their evaluated result value.
  *
  * @method executePlaceholderFormulas
  * @param {Object} descriptor - The descriptor.
  * @param {Object} params - Object containing the placeholder params.
  * @protected
   */

  UIManager.prototype.executePlaceholderFormulas = function(descriptor, id, params) {
    var c, i, j, k, keys, l, len, len1, v;
    if (descriptor == null) {
      return;
    }
    keys = Object.keys(descriptor);
    for (j = 0, len = keys.length; j < len; j++) {
      k = keys[j];
      v = descriptor[k];
      if (v != null) {
        if (v instanceof Array) {
          for (c = l = 0, len1 = v.length; l < len1; c = ++l) {
            i = v[c];
            if (i != null) {
              if (typeof i === "object") {
                this.executePlaceholderFormulas(i, id, params);
              } else if (c !== "exec" && typeof i === "function") {
                window.p = params || this.defaultPlaceholderParams;
                window.d = descriptor;
                v[c] = i();
              }
            }
          }
        } else if (typeof v === "object") {
          this.executePlaceholderFormulas(v, id, params);
        } else if (k !== "exec_" && typeof v === "function") {
          window.p = params || this.defaultPlaceholderParams;
          window.d = descriptor;
          descriptor[k] = v();
        }
      }
    }
    return null;
  };


  /**
  * Creates a calculation for a specified expression.
  *
  * @method createCalcFunction
  * @param {String} expression - The expression to create a calculation function for.
  * @return {Function} The calculation function.
  * @protected
   */

  UIManager.prototype.createCalcFunction = function(expression) {
    expression = expression.replace(/([0-9]+)%/gm, "($1 / 100 * v)");
    return eval("(function(v){ return " + expression + "})");
  };


  /**
  * Creates an object from the specified object type. The type has the format
  * <namespace>.<typename> like vn.Component_Hotspot.
  *
  * @method createObject
  * @param {String} type - The type name.
  * @return {Object} The created object.
  * @protected
   */

  UIManager.prototype.createObject = function(type) {
    var subs;
    subs = type.split(".");
    return new window[subs[0]][subs[1]]();
  };


  /**
  * Creates an UI object from a specified UI descriptor.
  *
  * @method createFromDescriptor
  * @param {Object} descriptor - The UI object descriptor.
  * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).
  * @return {gs.Object_UIElement} The created UI object.
   */

  UIManager.prototype.createFromDescriptor = function(descriptor, parent) {
    var control, k;
    control = null;
    for (k in this.controllers) {
      if (this.controllers[k].type != null) {
        this.controllers[k] = this.createObject(this.controllers[k].type);
      }
    }
    return this._createFromDescriptor(descriptor, parent);
  };


  /**
  * Creates an image button UI object.
  *
  * @method createImageButton
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createImageButton = function(descriptor) {
    var control;
    control = new ui.Object_Hotspot(descriptor.image, descriptor.imageHandling);
    control.behavior.sound = descriptor.sound;
    control.behavior.sounds = descriptor.sounds;
    control.image = descriptor.image;
    control.images = descriptor.images;
    if (descriptor.imageFolder != null) {
      control.imageFolder = descriptor.imageFolder;
    }
    if (descriptor.looping != null) {
      control.visual.dispose();
      control.removeComponent(control.visual);
      control.visual = new gs.Component_TilingSprite();
      control.addComponent(control.visual);
      control.visual.looping.vertical = descriptor.looping.vertical;
      control.visual.looping.horizontal = descriptor.looping.horizontal;
    }
    if (descriptor.color != null) {
      control.color = Color.fromArray(descriptor.color);
    }
    return control;
  };


  /**
  * Creates an image UI object.
  *
  * @method createImage
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createImage = function(descriptor) {
    var control;
    control = new ui.Object_Image(descriptor.image, descriptor.imageHandling);
    if (descriptor.imageFolder != null) {
      control.imageFolder = descriptor.imageFolder;
    }
    if (descriptor.looping != null) {
      control.visual.dispose();
      control.removeComponent(control.visual);
      control.visual = new gs.Component_TilingSprite();
      control.addComponent(control.visual);
      control.visual.looping.vertical = descriptor.looping.vertical;
      control.visual.looping.horizontal = descriptor.looping.horizontal;
    }
    if (descriptor.color != null) {
      control.color = Color.fromArray(descriptor.color);
    }
    return control;
  };


  /**
  * Creates an image map UI object.
  *
  * @method createImageMap
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createImageMap = function(descriptor) {
    var control;
    control = new ui.Object_ImageMap();
    control.hotspots = (descriptor.hotspots || []).select(function(h) {
      return {
        x: h.rect[0],
        y: h.rect[1],
        size: {
          width: h.rect[2],
          height: h.rect[3]
        },
        data: {
          action: 3,
          actions: h.actions
        }
      };
    });
    control.images = descriptor.images;
    control.insertComponent(new ui.Component_ActionHandler(), 1, "actionHandler");
    control.target = SceneManager.scene.behavior;
    return control;
  };


  /**
  * Creates a video UI object.
  *
  * @method createVideo
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createVideo = function(descriptor) {
    var control, ref;
    control = new ui.Object_Video();
    control.video = descriptor.video;
    control.loop = (ref = descriptor.loop) != null ? ref : true;
    return control;
  };


  /**
  * Creates a panel UI object.
  *
  * @method createPanel
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createPanel = function(descriptor) {
    var control, ref;
    control = new ui.Object_Panel();
    control.modal = (ref = descriptor.modal) != null ? ref : false;
    if (descriptor.color != null) {
      control.color = Color.fromArray(descriptor.color);
    }
    return control;
  };


  /**
  * Creates a frame UI object.
  *
  * @method createFrame
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createFrame = function(descriptor) {
    var control;
    control = new ui.Object_Frame(descriptor.frameSkin);
    control.frameThickness = descriptor.frameThickness || 16;
    control.frameCornerSize = descriptor.frameCornerSize || 16;
    control.image = descriptor.image;
    control.images = descriptor.images;
    return control;
  };


  /**
  * Creates a three-part image UI object.
  *
  * @method createThreePartImage
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createThreePartImage = function(descriptor) {
    var control;
    control = new ui.Object_ThreePartImage(descriptor.frameSkin);
    control.firstPartSize = descriptor.firstPartSize || 16;
    control.middlePartSize = descriptor.middlePartSize || 1;
    control.lastPartSize = descriptor.lastPartSize || 16;
    control.image = descriptor.image;
    control.images = descriptor.images;
    return control;
  };


  /**
  * Creates a text UI object.
  *
  * @method createText
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createText = function(descriptor) {
    var control, ref;
    control = new ui.Object_Text();
    control.text = lcs(descriptor.text);
    control.sizeToFit = descriptor.sizeToFit;
    control.formatting = descriptor.formatting;
    control.wordWrap = (ref = descriptor.wordWrap) != null ? ref : true;
    control.behavior.format = descriptor.format;
    if (descriptor.resolvePlaceholders != null) {
      control.resolvePlaceholders = descriptor.resolvePlaceholders;
    }
    if (descriptor.color != null) {
      control.color = Color.fromArray(descriptor.color);
    }
    return control;
  };


  /**
  * Creates a free-layout UI object.
  *
  * @method createFreeLayout
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createFreeLayout = function(descriptor) {
    var control;
    if (descriptor.frame != null) {
      control = new ui.Object_FreeLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1);
    } else {
      control = new ui.Object_FreeLayout(0, 0, 1, 1);
    }
    control.sizeToFit = descriptor.sizeToFit;
    return control;
  };


  /**
  * Creates a stack-layout UI object.
  *
  * @method createStackLayout
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createStackLayout = function(descriptor) {
    var control;
    if (descriptor.frame != null) {
      control = new ui.Object_StackLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1, descriptor.orientation);
    } else {
      control = new ui.Object_StackLayout(0, 0, 1, 1, descriptor.orientation);
    }
    control.sizeToFit = descriptor.sizeToFit;
    return control;
  };


  /**
  * Creates a spread-layout UI object.
  *
  * @method createSpreadLayout
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createSpreadLayout = function(descriptor) {
    var control;
    if (descriptor.frame != null) {
      control = new ui.Object_SpreadLayout(descriptor.frame[0] || 0, descriptor.frame[1] || 0, descriptor.frame[2] || 1, descriptor.frame[3] || 1, descriptor.orientation);
    } else {
      control = new ui.Object_SpreadLayout(0, 0, 1, 1, descriptor.orientation);
    }
    return control;
  };


  /**
  * Creates a grid-layout UI object.
  *
  * @method createGridLayout
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createGridLayout = function(descriptor) {
    var control;
    if (descriptor.frame != null) {
      control = new ui.Object_GridLayout(descriptor.frame[0], descriptor.frame[1], descriptor.frame[2], descriptor.frame[3], descriptor.rows, descriptor.columns, descriptor.template);
    } else {
      control = new ui.Object_GridLayout(0, 0, 1, 1, descriptor.rows, descriptor.columns, descriptor.template);
    }
    control.cellSpacing = descriptor.cellSpacing || [0, 0, 0, 0];
    control.sizeToFit = descriptor.sizeToFit;
    return control;
  };


  /**
  * Creates a message UI object.
  *
  * @method createMessage
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createMessage = function(descriptor) {
    var control;
    control = new ui.Object_Message();
    return control;
  };


  /**
  * Creates a data-grid UI object.
  *
  * @method createDataGrid
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created image button UI object.
   */

  UIManager.prototype.createDataGrid = function(descriptor) {
    var control;
    control = new ui.Object_DataGrid(descriptor);
    return control;
  };


  /**
  * Creates an UI object depending on the object-type of the specified UI descriptor.
  *
  * @method createControl
  * @param {Object} descriptor - The UI object descriptor.
  * @return {gs.Object_UIElement} The created UI object.
  * @protected
   */

  UIManager.prototype.createControl = function(descriptor) {
    var control;
    control = null;
    switch (descriptor.type) {
      case "ui.ImageButton":
        control = this.createImageButton(descriptor);
        break;
      case "ui.Image":
        control = this.createImage(descriptor);
        break;
      case "ui.ImageMap":
        control = this.createImageMap(descriptor);
        break;
      case "ui.Video":
        control = this.createVideo(descriptor);
        break;
      case "ui.Panel":
        control = this.createPanel(descriptor);
        break;
      case "ui.Frame":
        control = this.createFrame(descriptor);
        break;
      case "ui.ThreePartImage":
        control = this.createThreePartImage(descriptor);
        break;
      case "ui.Text":
        control = this.createText(descriptor);
        break;
      case "ui.Message":
        control = this.createMessage(descriptor);
        break;
      case "ui.DataGrid":
        control = this.createDataGrid(descriptor);
        break;
      case "ui.FreeLayout":
        control = this.createFreeLayout(descriptor);
        break;
      case "ui.StackLayout":
        control = this.createStackLayout(descriptor);
        break;
      case "ui.SpreadLayout":
        control = this.createSpreadLayout(descriptor);
        break;
      case "ui.GridLayout":
        control = this.createGridLayout(descriptor);
    }
    return control;
  };

  UIManager.prototype.createLayoutRect = function(frame, control) {
    var ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7;
    if (!control.layoutRect) {
      control.layoutRect = new ui.LayoutRect();
    }
    control.layoutRect.set(0, 0, 0, 0);
    if (frame != null) {
      if (((ref = frame[0]) != null ? ref.length : void 0) != null) {
        control.layoutRect.x = this.createCalcFunction(frame[0]);
        control.dstRect.x = 0;
      } else {
        control.dstRect.x = (ref1 = descriptor.frame[0]) != null ? ref1 : control.dstRect.x;
      }
      if (((ref2 = frame[1]) != null ? ref2.length : void 0) != null) {
        control.layoutRect.y = this.createCalcFunction(frame[1]);
        control.dstRect.y = 0;
      } else {
        control.dstRect.y = (ref3 = frame[1]) != null ? ref3 : control.dstRect.y;
      }
      if (((ref4 = frame[2]) != null ? ref4.length : void 0) != null) {
        control.layoutRect.width = this.createCalcFunction(frame[2]);
        control.dstRect.width = 1;
      } else {
        control.dstRect.width = (ref5 = frame[2]) != null ? ref5 : control.dstRect.width;
      }
      if (((ref6 = frame[3]) != null ? ref6.length : void 0) != null) {
        control.layoutRect.height = this.createCalcFunction(frame[3]);
        return control.dstRect.height = 1;
      } else {
        return control.dstRect.height = (ref7 = frame[3]) != null ? ref7 : control.dstRect.height;
      }
    }
  };


  /**
  * Adds the styles defined in an array of style-names to the specified control.
  *
  * @method addControlStyles
  * @param {Object} control - The control to add the styles to.
  * @param {string[]} styles - Array of style-names to add.
   */

  UIManager.prototype.addControlStyles = function(control, styles) {
    var j, len, results, style, styleName;
    results = [];
    for (j = 0, len = styles.length; j < len; j++) {
      styleName = styles[j];
      if (this.stylesByName[styleName] != null) {
        results.push((function() {
          var l, len1, ref, results1;
          ref = this.stylesByName[styleName];
          results1 = [];
          for (l = 0, len1 = ref.length; l < len1; l++) {
            style = ref[l];
            control.styles.push(style);
            if (style.target === -1 && style.selector === 0) {
              results1.push(style.apply(control));
            } else {
              results1.push(void 0);
            }
          }
          return results1;
        }).call(this));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Creates an UI object from a specified UI descriptor. This method is called
  * recursively for all child-descriptors.
  *
  * @method createControlFromDescriptor
  * @param {Object} descriptor - The UI object descriptor.
  * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).
  * @param {number} index - The index.
  * @return {gs.Object_UIElement} The created UI object.
  * @protected
   */

  UIManager.prototype.createControlFromDescriptor = function(descriptor, parent, index) {
    var action, actions, bindings, c, child, childControl, component, control, controls, customFields, data, formulas, i, isNumber, item, j, l, len, len1, len2, len3, m, n, o, p, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref22, ref23, ref24, ref25, ref26, ref27, ref3, ref4, ref5, ref6, ref7, ref8, ref9, style, target, type, typeName, valid;
    control = null;
    if (descriptor.style != null) {
      descriptor.styles = [descriptor.style];
      delete descriptor.style;
    }
    descriptor = Object.deepCopy(descriptor);
    this.executePlaceholderFormulas(descriptor, descriptor.id, descriptor.params);
    control = this.createControl(descriptor);
    if (control == null) {
      type = Object.deepCopy(this.customTypes[descriptor.type]);
      this.executePlaceholderFormulas(type, descriptor.id, descriptor.params);
      typeName = type.type;
      customFields = type.customFields;
      bindings = type.bindings;
      formulas = type.formulas;
      actions = type.actions;
      if (type.style != null) {
        type.styles = [type.style];
        type.style = null;
      }
      Object.mixin(type, descriptor);
      if (customFields != null) {
        Object.mixin(type.customFields, customFields);
      }
      if ((bindings != null) && bindings !== type.bindings) {
        type.bindings = type.bindings.concat(bindings);
      }
      if ((formulas != null) && formulas !== type.formulas) {
        type.formulas = type.formulas.concat(formulas);
      }
      if ((actions != null) && actions !== type.actions) {
        type.actions = actions.concat(type.actions);
      }
      type.type = typeName;
      return this.createControlFromDescriptor(type, parent);
    } else if (parent != null) {
      parent.addObject(control);
      control.index = index;
    } else {
      gs.ObjectManager.current.addObject(control);
    }
    control.ui = new ui.Component_UIBehavior();
    control.addComponent(control.ui);
    control.params = descriptor.params;
    if (descriptor.updateBehavior === "continuous") {
      control.updateBehavior = ui.UpdateBehavior.CONTINUOUS;
    }
    if (descriptor.inheritProperties) {
      control.inheritProperties = true;
    }
    if (descriptor.font != null) {
      control.font = new Font(descriptor.font.name, descriptor.font.size);
      control.font.bold = (ref = descriptor.font.bold) != null ? ref : control.font.bold;
      control.font.italic = (ref1 = descriptor.font.italic) != null ? ref1 : control.font.italic;
      control.font.smallCaps = (ref2 = descriptor.font.smallCaps) != null ? ref2 : control.font.smallCaps;
      control.font.underline = (ref3 = descriptor.font.underline) != null ? ref3 : control.font.underline;
      control.font.strikeThrough = (ref4 = descriptor.font.strikeThrough) != null ? ref4 : control.font.strikeThrough;
      if (descriptor.font.color != null) {
        control.font.color = Color.fromArray(descriptor.font.color);
      }
      if (descriptor.font.border != null) {
        control.font.border = (ref5 = descriptor.font.border) != null ? ref5 : false;
        control.font.borderSize = (ref6 = descriptor.font.borderSize) != null ? ref6 : 4;
        control.font.borderColor = new Color(0, 0, 0);
      }
      if (descriptor.font.outline != null) {
        control.font.border = (ref7 = descriptor.font.outline) != null ? ref7 : false;
        control.font.borderSize = (ref8 = descriptor.font.outline.size) != null ? ref8 : 4;
        if (descriptor.font.outline.color != null) {
          control.font.borderColor = Color.fromArray(descriptor.font.outline.color);
        } else {
          control.font.borderColor = new Color(0, 0, 0);
        }
      }
    }
    if (descriptor.components != null) {
      ref9 = descriptor.components;
      for (j = 0, len = ref9.length; j < len; j++) {
        c = ref9[j];
        m = c.module || "gs";
        component = new window[m][c.type](c.params);
        control.addComponent(component, c.id);
        control[c.id] = component;
      }
    }
    control.focusable = (ref10 = descriptor.focusable) != null ? ref10 : control.focusable;
    if (descriptor.nextKeyObject) {
      control.ui.nextKeyObjectId = descriptor.nextKeyObject;
    }
    if (descriptor.initialFocus) {
      control.ui.focus();
    }
    actions = Object.deepCopy(descriptor.action != null ? [descriptor.action] : descriptor.actions);
    if (actions != null) {
      for (l = 0, len1 = actions.length; l < len1; l++) {
        action = actions[l];
        if (action != null) {
          action.event = (ref11 = action.event) != null ? ref11 : "onAccept";
          if (action.target == null) {
            target = this.controllers != null ? this.controllers[descriptor.target] : controller;
            action.target = target || SceneManager.scene.behavior;
          }
        }
      }
      control.actions = actions;
      if (!control.findComponentById("actionHandler")) {
        control.insertComponent(new ui.Component_ActionHandler(), 1, "actionHandler");
      }
    }
    if (descriptor.id != null) {
      control.id = descriptor.id;
      gs.ObjectManager.current.setObjectById(control, control.id);
    }
    control.descriptor = descriptor;
    control.layoutRect = new Rect();
    control.layoutRect.set(0, 0, 0, 0);
    if (descriptor.frame != null) {
      if (((ref12 = descriptor.frame[0]) != null ? ref12.length : void 0) != null) {
        control.layoutRect.x = this.createCalcFunction(descriptor.frame[0]);
        control.dstRect.x = 0;
      } else {
        control.dstRect.x = (ref13 = descriptor.frame[0]) != null ? ref13 : control.dstRect.x;
      }
      if (((ref14 = descriptor.frame[1]) != null ? ref14.length : void 0) != null) {
        control.layoutRect.y = this.createCalcFunction(descriptor.frame[1]);
        control.dstRect.y = 0;
      } else {
        control.dstRect.y = (ref15 = descriptor.frame[1]) != null ? ref15 : control.dstRect.y;
      }
      if (((ref16 = descriptor.frame[2]) != null ? ref16.length : void 0) != null) {
        control.layoutRect.width = this.createCalcFunction(descriptor.frame[2]);
        control.dstRect.width = 1;
      } else {
        control.dstRect.width = (ref17 = descriptor.frame[2]) != null ? ref17 : control.dstRect.width;
      }
      if (((ref18 = descriptor.frame[3]) != null ? ref18.length : void 0) != null) {
        control.layoutRect.height = this.createCalcFunction(descriptor.frame[3]);
        control.dstRect.height = 1;
      } else {
        control.dstRect.height = (ref19 = descriptor.frame[3]) != null ? ref19 : control.dstRect.height;
      }
    }
    if (descriptor.sizeToParent != null) {
      control.sizeToParent = descriptor.sizeToParent;
    }
    if (descriptor.blendMode != null) {
      control.blendMode = this.blendModes[descriptor.blendMode];
    }
    if (descriptor.anchor != null) {
      control.anchor.set(descriptor.anchor[0], descriptor.anchor[1]);
    }
    control.opacity = (ref20 = descriptor.opacity) != null ? ref20 : 255;
    if (descriptor.minimumSize != null) {
      control.minimumSize = {
        width: descriptor.minimumSize[0],
        height: descriptor.minimumSize[1]
      };
    }
    if (descriptor.resizable != null) {
      control.resizable = descriptor.resizable;
    }
    if (descriptor.scrollable != null) {
      control.scrollable = descriptor.scrollable;
    }
    if (descriptor.fixedSize != null) {
      control.fixedSize = descriptor.fixedSize;
    }
    if (descriptor.draggable != null) {
      control.draggable = descriptor.draggable;
      control.draggable.step = 0;
      if (control.draggable.rect != null) {
        control.draggable.rect = Rect.fromArray(control.draggable.rect);
      }
      control.addComponent(new ui.Component_Draggable());
    }
    if (descriptor.bindings != null) {
      control.bindings = descriptor.bindings;
      control.insertComponent(new ui.Component_BindingHandler(), 0);
    }
    if (descriptor.formulas != null) {
      control.formulas = descriptor.formulas;
      control.insertComponent(new ui.Component_FormulaHandler(), 0);
    }
    control.dataField = descriptor.dataField;
    control.enabled = (ref21 = descriptor.enabled) != null ? ref21 : true;
    if (descriptor.selectable != null) {
      control.selectable = descriptor.selectable;
    }
    if (descriptor.group != null) {
      control.group = descriptor.group;
      gs.ObjectManager.current.addToGroup(control, control.group);
    }
    if (descriptor.customFields != null) {
      control.customFields = Object.deepCopy(descriptor.customFields);
    }
    if (descriptor.margin != null) {
      control.margin.left = descriptor.margin[0];
      control.margin.top = descriptor.margin[1];
      control.margin.right = descriptor.margin[2];
      control.margin.bottom = descriptor.margin[3];
    }
    if (descriptor.padding != null) {
      control.padding.left = descriptor.padding[0];
      control.padding.top = descriptor.padding[1];
      control.padding.right = descriptor.padding[2];
      control.padding.bottom = descriptor.padding[3];
    }
    if (descriptor.alignment != null) {
      control.alignment = this.alignments[descriptor.alignment];
    }
    control.alignmentY = this.alignments[descriptor.alignmentY || 0];
    control.alignmentX = this.alignments[descriptor.alignmentX || 0];
    control.zIndex = descriptor.zIndex || 0;
    control.order = descriptor.order || 0;
    control.chainOrder = ((ref22 = descriptor.chainOrder) != null ? ref22 : descriptor.zOrder) + ((parent != null ? parent.chainOrder : void 0) || 0);
    if (descriptor.zoom != null) {
      control.zoom = {
        x: descriptor.zoom[0] / 100,
        y: descriptor.zoom[1] / 100
      };
    }
    if (descriptor.visible != null) {
      control.visible = descriptor.visible;
    }
    if (descriptor.clipRect) {
      control.clipRect = new Rect(control.dstRect.x, control.dstRect.y, control.dstRect.width, control.dstRect.height);
    }
    if (descriptor.styles != null) {
      this.addControlStyles(control, descriptor.styles);
    }
    if (descriptor.template != null) {
      control.behavior.managementMode = ui.LayoutManagementMode.fromString(descriptor.managementMode);
      data = ui.Component_FormulaHandler.fieldValue(control, control.dataField);
      isNumber = typeof data === "number";
      if (data != null) {
        for (i = n = 0, ref23 = (ref24 = data.length) != null ? ref24 : data; 0 <= ref23 ? n < ref23 : n > ref23; i = 0 <= ref23 ? ++n : --n) {
          if ((data[i] != null) || isNumber) {
            valid = true;
            if ((descriptor.dataFilter != null) && !isNumber) {
              valid = ui.Component_Handler.checkCondition(data[i], descriptor.dataFilter);
            }
            if (valid || isNumber) {
              child = this.createControlFromDescriptor(descriptor.template, control, i);
              if ((ref25 = data[i]) != null ? ref25.dstRect : void 0) {
                child.dstRect = ui.UIElementRectangle.fromRect(child, data[i].dstRect);
              }
              if ((child.clipRect == null) && (control.clipRect != null)) {
                child.clipRect = control.clipRect;
              }
              control.addObject(child);
              child.index = i;
              child.order = ((ref26 = data.length) != null ? ref26 : data) - i;
              control.controls.push(child);
            }
          }
        }
      }
    }
    if (descriptor.controls && descriptor.controls.exec) {
      controls = ui.Component_FormulaHandler.fieldValue(descriptor, descriptor.controls);
    } else {
      controls = descriptor.controls;
    }
    if (controls != null) {
      for (i = o = 0, len2 = controls.length; o < len2; i = ++o) {
        item = controls[i];
        childControl = this._createFromDescriptor(item, control, i);
        if ((childControl.clipRect == null) && (control.clipRect != null)) {
          childControl.clipRect = control.clipRect;
        }
        childControl.index = i;
        childControl.origin.x = control.origin.x + control.dstRect.x;
        childControl.origin.y = control.origin.y + control.dstRect.y;
        control.addObject(childControl);
        control.controls.push(childControl);
      }
    }
    if (control.styles && control.parentsByStyle) {
      parent = control.parent;
      while (parent) {
        if (parent.styles) {
          ref27 = parent.styles;
          for (p = 0, len3 = ref27.length; p < len3; p++) {
            style = ref27[p];
            if (!control.parentsByStyle[style.id]) {
              control.parentsByStyle[style.id] = [];
            }
            control.parentsByStyle[style.id].push(parent);
          }
        }
        parent = parent.parent;
      }
    }
    if (descriptor.animations != null) {
      control.animations = Object.deepCopy(descriptor.animations);
      control.addComponent(new ui.Component_AnimationHandler());
    }
    control.ui.updateStyle();
    control.setup();
    return control;
  };


  /**
  * Creates an UI object from a specified UI descriptor.
  *
  * @method _createFromDescriptor
  * @param {Object} descriptor - The UI object descriptor.
  * @param {gs.Object_UIElement} parent - The UI parent object. (A layout for example).
  * @return {gs.Object_UIElement} The created UI object.
  * @protected
   */

  UIManager.prototype._createFromDescriptor = function(descriptor, parent, index) {
    var control, controller;
    control = this.createControlFromDescriptor(descriptor, parent, index);
    if (descriptor.controller != null) {
      controller = this.controllers[descriptor.controller];
      control.controller = controller;
      control.addComponent(controller);
    }
    return control;
  };

  UIManager.prototype.createLayoutFromDescriptor = function(descriptor, parent, index) {
    return this._createFromDescriptor(descriptor, parent, index);
  };

  return UIManager;

})();

Graphics.width = $PARAMS.resolution.width;

Graphics.height = $PARAMS.resolution.height;

ui.UiFactory = new UIManager();

ui.UIManager = ui.UiFactory;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=UIManager_100.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Components_47.js
var Component;

Component = (function() {

  /**
  * The base class of all components. A component defines a certain piece of
  * game logic. 
  *
  * @module gs
  * @class Component
  * @memberof gs
  * @constructor
   */
  function Component() {

    /**
    * The associated game object. A component only be part of one game object at the same time.
    * @property object
    * @type gs.Object_Base
    * @default null
     */
    this.object = null;

    /**
    * Indicates if the component is disposed. A disposed component cannot be used anymore.
    * @property disposed
    * @type boolean
    * @default false
     */
    this.disposed = false;

    /**
    * An optional unique id. The component can be accessed through this ID using the gs.Object_Base.findComponentById method.
    * @property id
    * @type string
    * @default null
     */
    this.id = null;

    /**
    * Indicates if the component is setup.
    * @property isSetup
    * @type boolean
    * @default no
     */
    this.isSetup = false;
  }


  /**
  * Called when the component is added to a new object.
  * @method setup
   */

  Component.prototype.setup = function() {
    this.isSetup = true;
    return this.update();
  };


  /**
  * Disposes the component. The component will be removed from the game object
  * automatically.
  * @method dispose
   */

  Component.prototype.dispose = function() {
    return this.disposed = true;
  };


  /**
  * Updates the component. Needs to be implemented in derived class.
  * @method update
   */

  Component.prototype.update = function() {};

  return Component;

})();

gs.Component = Component;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUE7O0FBQU07O0FBQ0Y7Ozs7Ozs7OztFQVNhLG1CQUFBOztBQUNUOzs7Ozs7SUFNQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7Ozs7SUFNQSxJQUFDLENBQUEsUUFBRCxHQUFZOztBQUVaOzs7Ozs7SUFNQSxJQUFDLENBQUEsRUFBRCxHQUFNOztBQUVOOzs7Ozs7SUFNQSxJQUFDLENBQUEsT0FBRCxHQUFXO0VBL0JGOzs7QUFpQ2I7Ozs7O3NCQUlBLEtBQUEsR0FBTyxTQUFBO0lBQ0gsSUFBQyxDQUFBLE9BQUQsR0FBVztXQUNYLElBQUMsQ0FBQSxNQUFELENBQUE7RUFGRzs7O0FBSVA7Ozs7OztzQkFLQSxPQUFBLEdBQVMsU0FBQTtXQUFHLElBQUMsQ0FBQSxRQUFELEdBQVk7RUFBZjs7O0FBRVQ7Ozs7O3NCQUlBLE1BQUEsR0FBUSxTQUFBLEdBQUE7Ozs7OztBQUVaLEVBQUUsQ0FBQyxTQUFILEdBQWUiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50XG4gICAgIyMjKlxuICAgICogVGhlIGJhc2UgY2xhc3Mgb2YgYWxsIGNvbXBvbmVudHMuIEEgY29tcG9uZW50IGRlZmluZXMgYSBjZXJ0YWluIHBpZWNlIG9mXG4gICAgKiBnYW1lIGxvZ2ljLiBcbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgQ29tcG9uZW50XG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGFzc29jaWF0ZWQgZ2FtZSBvYmplY3QuIEEgY29tcG9uZW50IG9ubHkgYmUgcGFydCBvZiBvbmUgZ2FtZSBvYmplY3QgYXQgdGhlIHNhbWUgdGltZS5cbiAgICAgICAgKiBAcHJvcGVydHkgb2JqZWN0XG4gICAgICAgICogQHR5cGUgZ3MuT2JqZWN0X0Jhc2VcbiAgICAgICAgKiBAZGVmYXVsdCBudWxsXG4gICAgICAgICMjI1xuICAgICAgICBAb2JqZWN0ID0gbnVsbFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgY29tcG9uZW50IGlzIGRpc3Bvc2VkLiBBIGRpc3Bvc2VkIGNvbXBvbmVudCBjYW5ub3QgYmUgdXNlZCBhbnltb3JlLlxuICAgICAgICAqIEBwcm9wZXJ0eSBkaXNwb3NlZFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgKiBAZGVmYXVsdCBmYWxzZVxuICAgICAgICAjIyNcbiAgICAgICAgQGRpc3Bvc2VkID0gbm9cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBBbiBvcHRpb25hbCB1bmlxdWUgaWQuIFRoZSBjb21wb25lbnQgY2FuIGJlIGFjY2Vzc2VkIHRocm91Z2ggdGhpcyBJRCB1c2luZyB0aGUgZ3MuT2JqZWN0X0Jhc2UuZmluZENvbXBvbmVudEJ5SWQgbWV0aG9kLlxuICAgICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgIyMjXG4gICAgICAgIEBpZCA9IG51bGxcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGNvbXBvbmVudCBpcyBzZXR1cC5cbiAgICAgICAgKiBAcHJvcGVydHkgaXNTZXR1cFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgKiBAZGVmYXVsdCBub1xuICAgICAgICAjIyNcbiAgICAgICAgQGlzU2V0dXAgPSBub1xuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBDYWxsZWQgd2hlbiB0aGUgY29tcG9uZW50IGlzIGFkZGVkIHRvIGEgbmV3IG9iamVjdC5cbiAgICAqIEBtZXRob2Qgc2V0dXBcbiAgICAjIyNcbiAgICBzZXR1cDogLT4gXG4gICAgICAgIEBpc1NldHVwID0geWVzXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBEaXNwb3NlcyB0aGUgY29tcG9uZW50LiBUaGUgY29tcG9uZW50IHdpbGwgYmUgcmVtb3ZlZCBmcm9tIHRoZSBnYW1lIG9iamVjdFxuICAgICogYXV0b21hdGljYWxseS5cbiAgICAqIEBtZXRob2QgZGlzcG9zZVxuICAgICMjI1xuICAgIGRpc3Bvc2U6IC0+IEBkaXNwb3NlZCA9IHllc1xuICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudC4gTmVlZHMgdG8gYmUgaW1wbGVtZW50ZWQgaW4gZGVyaXZlZCBjbGFzcy5cbiAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgIyMjXG4gICAgdXBkYXRlOiAtPlxuICAgICAgICBcbmdzLkNvbXBvbmVudCA9IENvbXBvbmVudCJdfQ==
//# sourceURL=Component_11.js
var Component_Container,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Container = (function(superClass) {
  extend(Component_Container, superClass);


  /**
  * A container component allows an object to have sub-objects.
  * @module gs
  * @class Component_Container
  * @memberof gs
  * @constructor
   */

  function Component_Container(disposeBehavior) {
    Component_Container.__super__.constructor.apply(this, arguments);

    /**
    * The behavior how the container deals with disposed game objects.
    * @property disposeBehavior
    * @default gs.ContainerDisposeBehavior.REMOVE
     */
    this.disposeBehavior = disposeBehavior != null ? disposeBehavior : gs.ContainerDisposeBehavior.REMOVE;
  }


  /**
  * Sorts the sub-objects by order-index.
  * @method sort_
  * @param {gs.Object_Base} a Object A
  * @param {gs.Object_Base} b Object B
   */

  Component_Container.prototype.sort_ = function(a, b) {
    if (a.order > b.order) {
      return -1;
    } else if (a.order < b.order) {
      return 1;
    } else {
      return 0;
    }
  };


  /**
  * Updates all sub-objects and sorts them if necessary. It also removes
  * disposed objects from the list of sub-objects.
  * @method update
   */

  Component_Container.prototype.update = function() {
    var i, results, subObject, subObjects;
    Component_Container.__super__.update.apply(this, arguments);
    subObjects = this.object.subObjects;
    if (this.object.needsSort) {
      subObjects.sort(this.sort_);
      this.object.needsSort = false;
    }
    i = 0;
    results = [];
    while (i < subObjects.length) {
      subObject = subObjects[i];
      if (subObject != null ? subObject.active : void 0) {
        if (subObject.disposed) {
          if (this.disposeBehavior === gs.ContainerDisposeBehavior.REMOVE) {
            subObjects.remove(subObject);
            i--;
          } else {
            subObjects[i] = null;
          }
        } else {
          subObject.update();
        }
      }
      results.push(i++);
    }
    return results;
  };

  return Component_Container;

})(gs.Component);

gs.Component_Container = Component_Container;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsbUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7RUFPYSw2QkFBQyxlQUFEO0lBQ1Qsc0RBQUEsU0FBQTs7QUFFQTs7Ozs7SUFLQSxJQUFDLENBQUEsZUFBRCw2QkFBbUIsa0JBQWtCLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQztFQVJ4RDs7O0FBVWI7Ozs7Ozs7Z0NBTUEsS0FBQSxHQUFPLFNBQUMsQ0FBRCxFQUFJLENBQUo7SUFDSCxJQUFHLENBQUMsQ0FBQyxLQUFGLEdBQVUsQ0FBQyxDQUFDLEtBQWY7QUFDRSxhQUFPLENBQUMsRUFEVjtLQUFBLE1BRUssSUFBRyxDQUFDLENBQUMsS0FBRixHQUFVLENBQUMsQ0FBQyxLQUFmO0FBQ0gsYUFBTyxFQURKO0tBQUEsTUFBQTtBQUdILGFBQU8sRUFISjs7RUFIRjs7O0FBUVA7Ozs7OztnQ0FLQSxNQUFBLEdBQVEsU0FBQTtBQUNKLFFBQUE7SUFBQSxpREFBQSxTQUFBO0lBRUEsVUFBQSxHQUFhLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFDckIsSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVg7TUFDSSxVQUFVLENBQUMsSUFBWCxDQUFnQixJQUFDLENBQUEsS0FBakI7TUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVIsR0FBb0IsTUFGeEI7O0lBSUEsQ0FBQSxHQUFJO0FBQ0o7V0FBTSxDQUFBLEdBQUksVUFBVSxDQUFDLE1BQXJCO01BQ0ksU0FBQSxHQUFZLFVBQVcsQ0FBQSxDQUFBO01BQ3ZCLHdCQUFHLFNBQVMsQ0FBRSxlQUFkO1FBQ0ksSUFBRyxTQUFTLENBQUMsUUFBYjtVQUNJLElBQUcsSUFBQyxDQUFBLGVBQUQsS0FBb0IsRUFBRSxDQUFDLHdCQUF3QixDQUFDLE1BQW5EO1lBQ0ksVUFBVSxDQUFDLE1BQVgsQ0FBa0IsU0FBbEI7WUFDQSxDQUFBLEdBRko7V0FBQSxNQUFBO1lBSUksVUFBVyxDQUFBLENBQUEsQ0FBWCxHQUFnQixLQUpwQjtXQURKO1NBQUEsTUFBQTtVQU9JLFNBQVMsQ0FBQyxNQUFWLENBQUEsRUFQSjtTQURKOzttQkFTQSxDQUFBO0lBWEosQ0FBQTs7RUFUSTs7OztHQXJDc0IsRUFBRSxDQUFDOztBQTREckMsRUFBRSxDQUFDLG1CQUFILEdBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfQ29udGFpbmVyXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBDb21wb25lbnRfQ29udGFpbmVyIGV4dGVuZHMgZ3MuQ29tcG9uZW50XG4gICAgIyMjKlxuICAgICogQSBjb250YWluZXIgY29tcG9uZW50IGFsbG93cyBhbiBvYmplY3QgdG8gaGF2ZSBzdWItb2JqZWN0cy5cbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfQ29udGFpbmVyXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAoZGlzcG9zZUJlaGF2aW9yKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBiZWhhdmlvciBob3cgdGhlIGNvbnRhaW5lciBkZWFscyB3aXRoIGRpc3Bvc2VkIGdhbWUgb2JqZWN0cy5cbiAgICAgICAgKiBAcHJvcGVydHkgZGlzcG9zZUJlaGF2aW9yXG4gICAgICAgICogQGRlZmF1bHQgZ3MuQ29udGFpbmVyRGlzcG9zZUJlaGF2aW9yLlJFTU9WRVxuICAgICAgICAjIyNcbiAgICAgICAgQGRpc3Bvc2VCZWhhdmlvciA9IGRpc3Bvc2VCZWhhdmlvciA/IGdzLkNvbnRhaW5lckRpc3Bvc2VCZWhhdmlvci5SRU1PVkVcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogU29ydHMgdGhlIHN1Yi1vYmplY3RzIGJ5IG9yZGVyLWluZGV4LlxuICAgICogQG1ldGhvZCBzb3J0X1xuICAgICogQHBhcmFtIHtncy5PYmplY3RfQmFzZX0gYSBPYmplY3QgQVxuICAgICogQHBhcmFtIHtncy5PYmplY3RfQmFzZX0gYiBPYmplY3QgQlxuICAgICMjI1xuICAgIHNvcnRfOiAoYSwgYikgLT5cbiAgICAgICAgaWYgYS5vcmRlciA+IGIub3JkZXJcbiAgICAgICAgICByZXR1cm4gLTFcbiAgICAgICAgZWxzZSBpZiBhLm9yZGVyIDwgYi5vcmRlclxuICAgICAgICAgIHJldHVybiAxXG4gICAgICAgIGVsc2VcbiAgICAgICAgICByZXR1cm4gMFxuICAgICAgICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgYWxsIHN1Yi1vYmplY3RzIGFuZCBzb3J0cyB0aGVtIGlmIG5lY2Vzc2FyeS4gSXQgYWxzbyByZW1vdmVzXG4gICAgKiBkaXNwb3NlZCBvYmplY3RzIGZyb20gdGhlIGxpc3Qgb2Ygc3ViLW9iamVjdHMuXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjI1xuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIHN1Yk9iamVjdHMgPSBAb2JqZWN0LnN1Yk9iamVjdHNcbiAgICAgICAgaWYgQG9iamVjdC5uZWVkc1NvcnRcbiAgICAgICAgICAgIHN1Yk9iamVjdHMuc29ydChAc29ydF8pXG4gICAgICAgICAgICBAb2JqZWN0Lm5lZWRzU29ydCA9IG5vXG4gICAgICAgICAgXG4gICAgICAgIGkgPSAwXG4gICAgICAgIHdoaWxlIGkgPCBzdWJPYmplY3RzLmxlbmd0aFxuICAgICAgICAgICAgc3ViT2JqZWN0ID0gc3ViT2JqZWN0c1tpXVxuICAgICAgICAgICAgaWYgc3ViT2JqZWN0Py5hY3RpdmVcbiAgICAgICAgICAgICAgICBpZiBzdWJPYmplY3QuZGlzcG9zZWRcbiAgICAgICAgICAgICAgICAgICAgaWYgQGRpc3Bvc2VCZWhhdmlvciA9PSBncy5Db250YWluZXJEaXNwb3NlQmVoYXZpb3IuUkVNT1ZFXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJPYmplY3RzLnJlbW92ZShzdWJPYmplY3QpXG4gICAgICAgICAgICAgICAgICAgICAgICBpLS1cbiAgICAgICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICAgICAgc3ViT2JqZWN0c1tpXSA9IG51bGxcbiAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgIHN1Yk9iamVjdC51cGRhdGUoKVxuICAgICAgICAgICAgaSsrXG4gICAgICAgICAgICBcbiAgICAgICAgXG5ncy5Db21wb25lbnRfQ29udGFpbmVyID0gQ29tcG9uZW50X0NvbnRhaW5lciJdfQ==
//# sourceURL=Component_Container_21.js
var Component_Visual,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Visual = (function(superClass) {
  extend(Component_Visual, superClass);


  /**
  * The base class for all components displaying an object on screen.
  * @module gs
  * @class Component_Visual
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_Visual() {
    Component_Visual.__super__.constructor.apply(this, arguments);
  }


  /**
  * Updates the origin-point of the game object.
  * @method updateOrigin
   */

  Component_Visual.prototype.updateOrigin = function() {
    var ox, oy, p;
    ox = 0;
    oy = 0;
    if (this.object.parent != null) {
      p = this.object.parent;
      while ((p != null) && (p.dstRect != null)) {
        ox += p.dstRect.x + p.offset.x;
        oy += p.dstRect.y + p.offset.y;
        p = p.parent;
      }
    }
    ox += this.object.offset.x;
    oy += this.object.offset.y;
    this.object.origin.x = ox;
    return this.object.origin.y = oy;
  };


  /**
  * Updates the origin and the destination-rectangle from a layout-rectangle if present.
  * @method update
   */

  Component_Visual.prototype.update = function() {
    var ref;
    Component_Visual.__super__.update.apply(this, arguments);
    this.updateOrigin();
    if ((this.object.layoutRect != null) && (((ref = this.object.parent) != null ? ref.dstRect : void 0) != null)) {
      if (this.object.layoutRect.x) {
        this.object.dstRect.x = this.object.layoutRect.x(this.object.parent.dstRect.width);
      }
      if (this.object.layoutRect.y) {
        this.object.dstRect.y = this.object.layoutRect.y(this.object.parent.dstRect.height);
      }
      if (this.object.layoutRect.width) {
        this.object.dstRect.width = this.object.layoutRect.width(this.object.parent.dstRect.width);
      }
      if (this.object.layoutRect.height) {
        return this.object.dstRect.height = this.object.layoutRect.height(this.object.parent.dstRect.height);
      }
    }
  };

  return Component_Visual;

})(gs.Component);

gs.Component_Visual = Component_Visual;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZ0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7O0VBUWEsMEJBQUE7SUFDVCxtREFBQSxTQUFBO0VBRFM7OztBQUdiOzs7Ozs2QkFJQSxZQUFBLEdBQWMsU0FBQTtBQUNWLFFBQUE7SUFBQSxFQUFBLEdBQUs7SUFDTCxFQUFBLEdBQUs7SUFDTCxJQUFHLDBCQUFIO01BQ0ksQ0FBQSxHQUFJLElBQUMsQ0FBQSxNQUFNLENBQUM7QUFDWixhQUFNLFdBQUEsSUFBTyxtQkFBYjtRQUNJLEVBQUEsSUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQVYsR0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzdCLEVBQUEsSUFBTSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQVYsR0FBYyxDQUFDLENBQUMsTUFBTSxDQUFDO1FBQzdCLENBQUEsR0FBSSxDQUFDLENBQUM7TUFIVixDQUZKOztJQU9BLEVBQUEsSUFBTSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNyQixFQUFBLElBQU0sSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFHckIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBZixHQUFtQjtXQUNuQixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFmLEdBQW1CO0VBZlQ7OztBQWtCZDs7Ozs7NkJBSUEsTUFBQSxHQUFRLFNBQUE7QUFDSixRQUFBO0lBQUEsOENBQUEsU0FBQTtJQUNBLElBQUMsQ0FBQSxZQUFELENBQUE7SUFFQSxJQUFHLGdDQUFBLElBQXdCLHFFQUEzQjtNQUNJLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBdEI7UUFBNkIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBbkIsQ0FBcUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQTVDLEVBQWpEOztNQUNBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBdEI7UUFBNkIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsQ0FBbkIsQ0FBcUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQTVDLEVBQWpEOztNQUNBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBdEI7UUFBaUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBaEIsR0FBd0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsS0FBbkIsQ0FBeUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQWhELEVBQXpEOztNQUNBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBdEI7ZUFBa0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBaEIsR0FBeUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBbkIsQ0FBMEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWpELEVBQTNEO09BSko7O0VBSkk7Ozs7R0F0Q21CLEVBQUUsQ0FBQzs7QUFrRGxDLEVBQUUsQ0FBQyxnQkFBSCxHQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tcG9uZW50X1Zpc3VhbFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X1Zpc3VhbCBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICMjIypcbiAgICAqIFRoZSBiYXNlIGNsYXNzIGZvciBhbGwgY29tcG9uZW50cyBkaXNwbGF5aW5nIGFuIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgQ29tcG9uZW50X1Zpc3VhbFxuICAgICogQGV4dGVuZHMgZ3MuQ29tcG9uZW50XG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICBzdXBlclxuICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIG9yaWdpbi1wb2ludCBvZiB0aGUgZ2FtZSBvYmplY3QuXG4gICAgKiBAbWV0aG9kIHVwZGF0ZU9yaWdpblxuICAgICMjI1xuICAgIHVwZGF0ZU9yaWdpbjogLT5cbiAgICAgICAgb3ggPSAwXG4gICAgICAgIG95ID0gMFxuICAgICAgICBpZiBAb2JqZWN0LnBhcmVudD9cbiAgICAgICAgICAgIHAgPSBAb2JqZWN0LnBhcmVudFxuICAgICAgICAgICAgd2hpbGUgcD8gYW5kIHAuZHN0UmVjdD9cbiAgICAgICAgICAgICAgICBveCArPSBwLmRzdFJlY3QueCArIHAub2Zmc2V0LnhcbiAgICAgICAgICAgICAgICBveSArPSBwLmRzdFJlY3QueSArIHAub2Zmc2V0LnlcbiAgICAgICAgICAgICAgICBwID0gcC5wYXJlbnRcbiAgICAgICAgICBcbiAgICAgICAgb3ggKz0gQG9iamVjdC5vZmZzZXQueFxuICAgICAgICBveSArPSBAb2JqZWN0Lm9mZnNldC55XG5cbiAgICAgICAgXG4gICAgICAgIEBvYmplY3Qub3JpZ2luLnggPSBveFxuICAgICAgICBAb2JqZWN0Lm9yaWdpbi55ID0gb3lcbiAgICAgICAgXG4gICAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSBvcmlnaW4gYW5kIHRoZSBkZXN0aW5hdGlvbi1yZWN0YW5nbGUgZnJvbSBhIGxheW91dC1yZWN0YW5nbGUgaWYgcHJlc2VudC5cbiAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgIyMjXG4gICAgdXBkYXRlOiAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBAdXBkYXRlT3JpZ2luKClcbiAgICAgICAgXG4gICAgICAgIGlmIEBvYmplY3QubGF5b3V0UmVjdD8gYW5kIEBvYmplY3QucGFyZW50Py5kc3RSZWN0P1xuICAgICAgICAgICAgaWYgQG9iamVjdC5sYXlvdXRSZWN0LnggdGhlbiBAb2JqZWN0LmRzdFJlY3QueCA9IEBvYmplY3QubGF5b3V0UmVjdC54KEBvYmplY3QucGFyZW50LmRzdFJlY3Qud2lkdGgpXG4gICAgICAgICAgICBpZiBAb2JqZWN0LmxheW91dFJlY3QueSB0aGVuIEBvYmplY3QuZHN0UmVjdC55ID0gQG9iamVjdC5sYXlvdXRSZWN0LnkoQG9iamVjdC5wYXJlbnQuZHN0UmVjdC5oZWlnaHQpXG4gICAgICAgICAgICBpZiBAb2JqZWN0LmxheW91dFJlY3Qud2lkdGggdGhlbiBAb2JqZWN0LmRzdFJlY3Qud2lkdGggPSBAb2JqZWN0LmxheW91dFJlY3Qud2lkdGgoQG9iamVjdC5wYXJlbnQuZHN0UmVjdC53aWR0aClcbiAgICAgICAgICAgIGlmIEBvYmplY3QubGF5b3V0UmVjdC5oZWlnaHQgdGhlbiBAb2JqZWN0LmRzdFJlY3QuaGVpZ2h0ID0gQG9iamVjdC5sYXlvdXRSZWN0LmhlaWdodChAb2JqZWN0LnBhcmVudC5kc3RSZWN0LmhlaWdodClcblxuXG5cbmdzLkNvbXBvbmVudF9WaXN1YWwgPSBDb21wb25lbnRfVmlzdWFsIl19
//# sourceURL=Component_Visual_40.js
var AnimationTypes, Component_Sprite,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Sprite = (function(superClass) {
  extend(Component_Sprite, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_Sprite.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A sprite component to display an object on screen. It can be managed or
  * unmanaged. A managed sprite is automatically added to the graphics-system
  * and rendered every frame until it gets disposed. An unmanaged sprite needs
  * to be added and removed manually.
  *
  * @module gs
  * @class Component_Sprite
  * @extends gs.Component_Visual
  * @memberof gs
  * @constructor
  * @param {boolean} managed - Indicates if the sprite is managed by the graphics system.
   */

  function Component_Sprite(managed) {
    Component_Sprite.__super__.constructor.call(this);

    /**
    * The native sprite object to display the game object on screen.
    *
    * @property sprite
    * @type Sprite
    * @protected
     */
    this.sprite = null;

    /**
    * The name of the image to display.
    *
    * @property image
    * @type string
    * @protected
     */
    this.image = null;

    /**
    * The name of the video to display.
    *
    * @property video
    * @type string
    * @protected
     */
    this.video = null;

    /**
    * The name of the folder from where the image should be loaded.
    *
    * @property image
    * @type string
    * @protected
     */
    this.imageFolder = "Graphics/Pictures";

    /**
    * The visibility. If <b>false</b>, the sprite is not rendered.
    *
    * @property visible
    * @type boolean
    * @protected
     */
    this.visible = false;

    /**
    * Indicates if the image is loaded.
    *
    * @property imageLoaded
    * @type boolean
    * @protected
     */
    this.imageLoaded = false;
  }


  /**
  * Disposes the sprite. If the sprite is managed, it will be automatically
  * removed from the graphics system and viewport.
  * @method dispose
   */

  Component_Sprite.prototype.dispose = function() {
    var ref, ref1;
    Component_Sprite.__super__.dispose.apply(this, arguments);
    if (this.sprite) {
      this.sprite.dispose();
      if (this.sprite.video) {
        this.sprite.video.stop();
      }
      if (!this.sprite.managed) {
        if ((ref = this.sprite.viewport) != null) {
          ref.removeGraphicObject(this.sprite);
        }
        return (ref1 = Graphics.viewport) != null ? ref1.removeGraphicObject(this.sprite) : void 0;
      }
    }
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_Sprite.prototype.setupEventHandlers = function() {
    return this.sprite.onIndexChange = (function(_this) {
      return function() {
        _this.object.rIndex = _this.sprite.index;
        return _this.object.needsUpdate = true;
      };
    })(this);
  };


  /**
  * Setup the sprite.
  * @method setupSprite
   */

  Component_Sprite.prototype.setupSprite = function() {
    if (!this.sprite) {
      return this.sprite = new Sprite(Graphics.viewport, typeof managed !== "undefined" && managed !== null ? managed : true);
    }
  };


  /**
  * Setup the sprite component. This method is automatically called by the
  * system.
  * @method setup
   */

  Component_Sprite.prototype.setup = function() {
    this.isSetup = true;
    this.setupSprite();
    this.setupEventHandlers();
    return this.update();
  };


  /**
  * Updates the source- and destination-rectangle of the game object so that
  * the associated bitmap fits in. The imageHandling property controls how
  * the rectangles are resized.
  * @method updateRect
   */

  Component_Sprite.prototype.updateRect = function() {
    if (this.sprite.bitmap != null) {
      if (!this.object.imageHandling) {
        this.object.srcRect = new Rect(0, 0, this.sprite.bitmap.width, this.sprite.bitmap.height);
        if (!this.object.fixedSize) {
          this.object.dstRect.width = this.object.srcRect.width;
          return this.object.dstRect.height = this.object.srcRect.height;
        }
      } else if (this.object.imageHandling === 1) {
        this.object.srcRect = new Rect(0, 0, this.sprite.bitmap.width, this.sprite.bitmap.height / 2);
        if (!this.object.fixedSize) {
          this.object.dstRect.width = this.object.srcRect.width;
          return this.object.dstRect.height = this.object.srcRect.height;
        }
      } else if (this.object.imageHandling === 2) {
        if (!this.object.fixedSize) {
          this.object.dstRect.width = this.object.srcRect.width;
          return this.object.dstRect.height = this.object.srcRect.height;
        }
      }
    }
  };


  /**
  * Updates the bitmap object from the associated image name. The imageFolder
  * property controls from which resource-folder the image will be loaded.
  * @method updateBitmap
   */

  Component_Sprite.prototype.updateBitmap = function() {
    this.imageLoaded = false;
    this.image = this.object.image;
    if (this.object.image.startsWith("data:") || this.object.image.startsWith("$")) {
      this.sprite.bitmap = ResourceManager.getBitmap(this.object.image);
    } else {
      this.sprite.bitmap = ResourceManager.getBitmap((this.object.imageFolder || this.imageFolder) + "/" + this.object.image);
    }
    if (this.sprite.bitmap != null) {
      if (!this.imageLoaded) {
        this.imageLoaded = this.sprite.bitmap.loaded;
      } else {
        delete this.sprite.bitmap.loaded_;
      }
    }
    return this.object.bitmap = this.sprite.bitmap;
  };


  /**
  * Updates the video object from the associated video name. It also updates
  * the video-rendering process.
  * @method updateVideo
   */

  Component_Sprite.prototype.updateVideo = function() {
    var ref, ref1;
    if (this.object.video !== this.videoName) {
      this.videoName = this.object.video;
      this.sprite.video = ResourceManager.getVideo("Movies/" + this.object.video);
      if (this.sprite.video != null) {
        if ((ref = $PARAMS.preview) != null ? ref.settings.musicDisabled : void 0) {
          this.sprite.video.volume = 0;
        }
        this.sprite.video.loop = this.object.loop;
        this.sprite.video.play();
        this.object.srcRect = new Rect(0, 0, this.sprite.video.width, this.sprite.video.height);
        if (!this.object.fixedSize) {
          this.object.dstRect = new Rect(this.object.dstRect.x, this.object.dstRect.y, this.sprite.video.width, this.sprite.video.height);
        }
      }
    }
    return (ref1 = this.sprite.video) != null ? ref1.update() : void 0;
  };


  /**
  * Updates the image if the game object has the image-property set.
  * @method updateImage
   */

  Component_Sprite.prototype.updateImage = function() {
    var ref;
    if (this.object.image != null) {
      if (this.object.image !== this.image || (!this.imageLoaded && ((ref = this.sprite.bitmap) != null ? ref.loaded : void 0))) {
        this.updateBitmap();
        return this.updateRect();
      }
    } else if (this.object.bitmap != null) {
      return this.sprite.bitmap = this.object.bitmap;
    } else if ((this.object.video != null) || this.videoName !== this.object.video) {
      return this.updateVideo();
    } else {
      this.image = null;
      this.object.bitmap = null;
      return this.sprite.bitmap = null;
    }
  };


  /**
  * If the sprite is unmanaged, this method will update the visibility of the
  * sprite. If the sprite leaves the viewport, it will be removed to save 
  * performance and automatically added back to the viewport if it enters
  * the viewport.
  * @method updateVisibility
   */

  Component_Sprite.prototype.updateVisibility = function() {
    var visible;
    if (!this.sprite.managed) {
      visible = Rect.intersect(this.object.dstRect.x + this.object.origin.x, this.object.dstRect.y + this.object.origin.y, this.object.dstRect.width, this.object.dstRect.height, 0, 0, Graphics.width, Graphics.height);
      if (visible && !this.visible) {
        (this.object.viewport || Graphics.viewport).addGraphicObject(this.sprite);
        this.visible = true;
      }
      if (!visible && this.visible) {
        (this.object.viewport || Graphics.viewport).removeGraphicObject(this.sprite);
        return this.visible = false;
      }
    }
  };


  /**
  * Updates the padding.
  * @method updatePadding
   */

  Component_Sprite.prototype.updatePadding = function() {
    if (this.object.padding != null) {
      this.sprite.x += this.object.padding.left;
      this.sprite.y += this.object.padding.top;
      this.sprite.zoomX -= (this.object.padding.left + this.object.padding.right) / this.object.srcRect.width;
      return this.sprite.zoomY -= (this.object.padding.bottom + this.object.padding.bottom) / this.object.srcRect.height;
    }
  };


  /**
  * Updates the sprite properties from the game object properties.
  * @method updateProperties
   */

  Component_Sprite.prototype.updateProperties = function() {
    var ref, ref1;
    this.sprite.x = this.object.dstRect.x;
    this.sprite.y = this.object.dstRect.y;
    this.sprite.mask = (ref = this.object.mask) != null ? ref : this.mask;
    this.sprite.angle = this.object.angle || 0;
    this.sprite.opacity = (ref1 = this.object.opacity) != null ? ref1 : 255;
    this.sprite.clipRect = this.object.clipRect;
    this.sprite.srcRect = this.object.srcRect;
    this.sprite.zoomX = this.object.dstRect.width / this.object.srcRect.width;
    this.sprite.zoomY = this.object.dstRect.height / this.object.srcRect.height;
    this.sprite.blendingMode = this.object.blendMode || 0;
    this.sprite.mirror = this.object.mirror;
    this.sprite.visible = this.object.visible;
    this.sprite.ox = -this.object.origin.x;
    this.sprite.oy = -this.object.origin.y;
    return this.sprite.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);
  };


  /**
  * Updates the optional sprite properties from the game object properties.
  * @method updateOptionalProperties
   */

  Component_Sprite.prototype.updateOptionalProperties = function() {
    if (this.object.tone != null) {
      this.sprite.tone = this.object.tone;
    }
    if (this.object.color != null) {
      this.sprite.color = this.object.color;
    }
    if (this.object.viewport != null) {
      this.sprite.viewport = this.object.viewport;
    }
    if (this.object.effects != null) {
      this.sprite.wobble = this.object.effects.wobble;
    }
    if (this.object.anchor != null) {
      this.sprite.anchor.x = this.object.anchor.x;
      this.sprite.anchor.y = this.object.anchor.y;
    }
    if (this.object.zoom != null) {
      this.sprite.zoomX *= this.object.zoom.x;
      this.sprite.zoomY *= this.object.zoom.y;
    }
    if (this.object.motionBlur != null) {
      return this.sprite.motionBlur = this.object.motionBlur;
    }
  };


  /**
  * Updates the sprite component by updating its visibility, image, padding and
  * properties.
  * @method update
   */

  Component_Sprite.prototype.update = function() {
    Component_Sprite.__super__.update.apply(this, arguments);
    if (!this.isSetup) {
      this.setup();
    }
    this.updateVisibility();
    this.updateImage();
    this.updateProperties();
    this.updateOptionalProperties();
    this.updatePadding();
    this.object.rIndex = this.sprite.index;
    return this.sprite.update();
  };

  return Component_Sprite;

})(gs.Component_Visual);


/**
* Enumeration of appearance animations. 
*
* @module gs
* @class AnimationTypes
* @static
* @memberof gs
 */

AnimationTypes = (function() {
  function AnimationTypes() {}

  AnimationTypes.initialize = function() {

    /**
    * An object appears or disappears by moving into or out of the screen.
    * @property MOVEMENT
    * @type number
    * @static
    * @final
     */
    this.MOVEMENT = 0;

    /**
    * An object appears or disappears using alpha-blending.
    * @property BLENDING
    * @type number
    * @static
    * @final
     */
    this.BLENDING = 1;

    /**
    * An object appears or disappears using a mask-image.
    * @property MASKING
    * @type number
    * @static
    * @final
     */
    return this.MASKING = 2;
  };

  return AnimationTypes;

})();

AnimationTypes.initialize();

gs.AnimationTypes = AnimationTypes;

gs.Component_Sprite = Component_Sprite;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Sprite_46.js
var Component_Quad,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Quad = (function(superClass) {
  extend(Component_Quad, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_Quad.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A quad component displays rectangle on the screen using the color
  * of the game object.
  *
  * @module gs
  * @class Component_Quad
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_Quad() {
    Component_Quad.__super__.constructor.apply(this, arguments);

    /**
    * The native quad-object to display a colored rectangle on screen.
    * @property quad
    * @type gs.Quad
    * @protected
     */
    this.quad = new gs.Quad(Graphics.viewport);
  }


  /**
  * Disposes the quad.
  * @method dispose
   */

  Component_Quad.prototype.dispose = function() {
    return this.quad.dispose();
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_Quad.prototype.setupEventHandlers = function() {
    return this.quad.onIndexChange = (function(_this) {
      return function() {
        return _this.object.rIndex = _this.quad.index;
      };
    })(this);
  };


  /**
  * Sets up the quad.
  * @method setup
   */

  Component_Quad.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Updates the quad and its properties.
  * @method update
   */

  Component_Quad.prototype.update = function() {
    Component_Quad.__super__.update.apply(this, arguments);
    this.object.rIndex = this.quad.index;
    this.quad.rect.set(this.object.dstRect.x, this.object.dstRect.y, this.object.dstRect.width, this.object.dstRect.height);
    this.quad.visible = this.object.visible;
    this.quad.ox = -this.object.origin.x;
    this.quad.oy = -this.object.origin.y;
    this.quad.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);
    this.quad.color = this.object.color || Colors.TRANSPARENT;
    this.quad.opacity = this.object.opacity || 255;
    return this.quad.clipRect = this.object.clipRect;
  };

  return Component_Quad;

})(gs.Component_Visual);

gs.Component_Quad = Component_Quad;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7MkJBUUEsbUJBQUEsR0FBcUIsU0FBQyxJQUFELEVBQU8sT0FBUDtXQUNqQixJQUFDLENBQUEsa0JBQUQsQ0FBQTtFQURpQjs7O0FBR3JCOzs7Ozs7Ozs7OztFQVVhLHdCQUFBO0lBQ1QsaURBQUEsU0FBQTs7QUFFQTs7Ozs7O0lBTUEsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLEVBQUUsQ0FBQyxJQUFILENBQVEsUUFBUSxDQUFDLFFBQWpCO0VBVEg7OztBQVdiOzs7OzsyQkFJQSxPQUFBLEdBQVMsU0FBQTtXQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsT0FBTixDQUFBO0VBQUg7OztBQUVUOzs7Ozs7MkJBS0Esa0JBQUEsR0FBb0IsU0FBQTtXQUNoQixJQUFDLENBQUEsSUFBSSxDQUFDLGFBQU4sR0FBc0IsQ0FBQSxTQUFBLEtBQUE7YUFBQSxTQUFBO2VBQ2xCLEtBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixLQUFDLENBQUEsSUFBSSxDQUFDO01BREw7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBO0VBRE47OztBQUlwQjs7Ozs7MkJBSUEsS0FBQSxHQUFPLFNBQUE7V0FDSCxJQUFDLENBQUEsa0JBQUQsQ0FBQTtFQURHOzs7QUFHUDs7Ozs7MkJBSUEsTUFBQSxHQUFRLFNBQUE7SUFDSiw0Q0FBQSxTQUFBO0lBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCLElBQUMsQ0FBQSxJQUFJLENBQUM7SUFDdkIsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBWCxDQUFlLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQS9CLEVBQWtDLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQWxELEVBQXFELElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBTyxDQUFDLEtBQXJFLEVBQTRFLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQTVGO0lBQ0EsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLEdBQWdCLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFDeEIsSUFBQyxDQUFBLElBQUksQ0FBQyxFQUFOLEdBQVcsQ0FBQyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUMzQixJQUFDLENBQUEsSUFBSSxDQUFDLEVBQU4sR0FBVyxDQUFDLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQzNCLElBQUMsQ0FBQSxJQUFJLENBQUMsQ0FBTixHQUFVLENBQUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLElBQWtCLENBQW5CLENBQUEsR0FBd0IsQ0FBSSxDQUFDLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBWixHQUF3QixDQUF4QixHQUErQixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFmLElBQXlCLENBQXpEO0lBQ2xDLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixHQUFjLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixJQUFpQixNQUFNLENBQUM7SUFDdEMsSUFBQyxDQUFBLElBQUksQ0FBQyxPQUFOLEdBQWdCLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixJQUFtQjtXQUNuQyxJQUFDLENBQUEsSUFBSSxDQUFDLFFBQU4sR0FBaUIsSUFBQyxDQUFBLE1BQU0sQ0FBQztFQVhyQjs7OztHQTNEaUIsRUFBRSxDQUFDOztBQXdFaEMsRUFBRSxDQUFDLGNBQUgsR0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9RdWFkXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBDb21wb25lbnRfUXVhZCBleHRlbmRzIGdzLkNvbXBvbmVudF9WaXN1YWxcbiAgICAjIyMqXG4gICAgKiBDYWxsZWQgaWYgdGhpcyBvYmplY3QgaW5zdGFuY2UgaXMgcmVzdG9yZWQgZnJvbSBhIGRhdGEtYnVuZGxlLiBJdCBjYW4gYmUgdXNlZFxuICAgICogcmUtYXNzaWduIGV2ZW50LWhhbmRsZXIsIGFub255bW91cyBmdW5jdGlvbnMsIGV0Yy5cbiAgICAqIFxuICAgICogQG1ldGhvZCBvbkRhdGFCdW5kbGVSZXN0b3JlLlxuICAgICogQHBhcmFtIE9iamVjdCBkYXRhIC0gVGhlIGRhdGEtYnVuZGxlXG4gICAgKiBAcGFyYW0gZ3MuT2JqZWN0Q29kZWNDb250ZXh0IGNvbnRleHQgLSBUaGUgY29kZWMtY29udGV4dC5cbiAgICAjIyNcbiAgICBvbkRhdGFCdW5kbGVSZXN0b3JlOiAoZGF0YSwgY29udGV4dCkgLT5cbiAgICAgICAgQHNldHVwRXZlbnRIYW5kbGVycygpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIEEgcXVhZCBjb21wb25lbnQgZGlzcGxheXMgcmVjdGFuZ2xlIG9uIHRoZSBzY3JlZW4gdXNpbmcgdGhlIGNvbG9yXG4gICAgKiBvZiB0aGUgZ2FtZSBvYmplY3QuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9RdWFkXG4gICAgKiBAZXh0ZW5kcyBncy5Db21wb25lbnRcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG5hdGl2ZSBxdWFkLW9iamVjdCB0byBkaXNwbGF5IGEgY29sb3JlZCByZWN0YW5nbGUgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSBxdWFkXG4gICAgICAgICogQHR5cGUgZ3MuUXVhZFxuICAgICAgICAqIEBwcm90ZWN0ZWRcbiAgICAgICAgIyMjXG4gICAgICAgIEBxdWFkID0gbmV3IGdzLlF1YWQoR3JhcGhpY3Mudmlld3BvcnQpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIERpc3Bvc2VzIHRoZSBxdWFkLlxuICAgICogQG1ldGhvZCBkaXNwb3NlXG4gICAgIyMjXG4gICAgZGlzcG9zZTogLT4gQHF1YWQuZGlzcG9zZSgpXG4gICAgXG4gICAgIyMjKlxuICAgICogQWRkcyBldmVudC1oYW5kbGVycyBmb3IgbW91c2UvdG91Y2ggZXZlbnRzXG4gICAgKlxuICAgICogQG1ldGhvZCBzZXR1cEV2ZW50SGFuZGxlcnNcbiAgICAjIyMgXG4gICAgc2V0dXBFdmVudEhhbmRsZXJzOiAtPlxuICAgICAgICBAcXVhZC5vbkluZGV4Q2hhbmdlID0gPT5cbiAgICAgICAgICAgIEBvYmplY3QuckluZGV4ID0gQHF1YWQuaW5kZXhcbiAgICAgICAgICAgIFxuICAgICMjIypcbiAgICAqIFNldHMgdXAgdGhlIHF1YWQuXG4gICAgKiBAbWV0aG9kIHNldHVwXG4gICAgIyMjXG4gICAgc2V0dXA6IC0+XG4gICAgICAgIEBzZXR1cEV2ZW50SGFuZGxlcnMoKVxuICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIHF1YWQgYW5kIGl0cyBwcm9wZXJ0aWVzLlxuICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAjIyNcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICBAb2JqZWN0LnJJbmRleCA9IEBxdWFkLmluZGV4XG4gICAgICAgIEBxdWFkLnJlY3Quc2V0KEBvYmplY3QuZHN0UmVjdC54LCBAb2JqZWN0LmRzdFJlY3QueSwgQG9iamVjdC5kc3RSZWN0LndpZHRoLCBAb2JqZWN0LmRzdFJlY3QuaGVpZ2h0KVxuICAgICAgICBAcXVhZC52aXNpYmxlID0gQG9iamVjdC52aXNpYmxlXG4gICAgICAgIEBxdWFkLm94ID0gLUBvYmplY3Qub3JpZ2luLnhcbiAgICAgICAgQHF1YWQub3kgPSAtQG9iamVjdC5vcmlnaW4ueVxuICAgICAgICBAcXVhZC56ID0gKEBvYmplY3QuekluZGV4IHx8IDApICsgKGlmICFAb2JqZWN0LnBhcmVudCB0aGVuIDAgZWxzZSBAb2JqZWN0LnBhcmVudC56SW5kZXggfHwgMClcbiAgICAgICAgQHF1YWQuY29sb3IgPSBAb2JqZWN0LmNvbG9yIHx8IENvbG9ycy5UUkFOU1BBUkVOVFxuICAgICAgICBAcXVhZC5vcGFjaXR5ID0gQG9iamVjdC5vcGFjaXR5IHx8IDI1NVxuICAgICAgICBAcXVhZC5jbGlwUmVjdCA9IEBvYmplY3QuY2xpcFJlY3RcblxuZ3MuQ29tcG9uZW50X1F1YWQgPSBDb21wb25lbnRfUXVhZCJdfQ==
//# sourceURL=Component_Quad_53.js
var Component_TilingSprite,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_TilingSprite = (function(superClass) {
  extend(Component_TilingSprite, superClass);


  /**
  * A tiling sprite component tiles the image of the game object on screen. The
  * tiling can be vertical, horizontal or both. The sprite can be managed or
  * unmanaged. A managed sprite is automatically added to the graphics-system
  * and processed every frame until it gets disposed. An unmanaged sprite needs
  * to be added and removed manually.
  *
  * @module gs
  * @class Component_TilingSprite
  * @extends gs.Component_Sprite
  * @memberof gs
  * @constructor
  * @param {boolean} managed - Indicates if the sprite is managed by the graphics system.
   */

  function Component_TilingSprite(managed) {
    this.sprite = null;
    this.image = null;
    this.video = null;
    this.imageFolder = "Graphics/Pictures";
    this.visible = true;
    this.looping = {
      vertical: true,
      horizontal: true
    };
    this.scroll = {
      x: 0,
      y: 0
    };
  }


  /**
  * Creates sprite object.
  *
  * @method setupSprite
   */

  Component_TilingSprite.prototype.setupSprite = function() {
    if (!this.sprite) {
      return this.sprite = new gs.TilingSprite(Graphics.viewport, typeof managed !== "undefined" && managed !== null ? managed : true);
    }
  };


  /**
  * Updates the padding.
  *
  * @method updatePadding
   */

  Component_TilingSprite.prototype.updatePadding = function() {
    if (this.object.padding != null) {
      this.sprite.rect.x += this.object.padding.left;
      this.sprite.rect.y += this.object.padding.top;
      this.sprite.rect.width -= this.object.padding.left + this.object.padding.right;
      return this.sprite.rect.height -= this.object.padding.bottom + this.object.padding.bottom;
    }
  };


  /**
  * Updates the source- and destination-rectangle of the game object so that
  * the associated bitmap fits in. 
  *
  * @method updateRect
   */

  Component_TilingSprite.prototype.updateRect = function() {
    if (this.sprite.bitmap != null) {
      this.object.srcRect = new Rect(0, 0, this.sprite.bitmap.width, this.sprite.bitmap.height);
      this.object.dstRect.width = this.object.srcRect.width;
      return this.object.dstRect.height = this.object.srcRect.height;
    }
  };


  /**
  * Updates the sprite properties from the game object properties.
  *
  * @method updateProperties
   */

  Component_TilingSprite.prototype.updateProperties = function() {
    Component_TilingSprite.__super__.updateProperties.call(this);
    this.sprite.zoomX = this.object.zoom.x;
    this.sprite.zoomY = this.object.zoom.y;
    this.sprite.vertical = this.looping.vertical;
    this.sprite.horizontal = this.looping.horizontal;
    this.sprite.x = this.scroll.x;
    this.sprite.y = this.scroll.y;
    this.sprite.angle = this.object.angle;
    this.sprite.rect.x = this.object.dstRect.x - this.object.dstRect.width * (this.object.zoom.x - 1.0) * this.object.anchor.x;
    this.sprite.rect.y = this.object.dstRect.y - this.object.dstRect.height * (this.object.zoom.y - 1.0) * this.object.anchor.y;
    this.sprite.rect.width = this.object.dstRect.width;
    return this.sprite.rect.height = this.object.dstRect.height;
  };


  /**
  * Updates the optional sprite properties from the game object properties.
  * @method updateOptionalProperties
   */

  Component_TilingSprite.prototype.updateOptionalProperties = function() {
    Component_TilingSprite.__super__.updateOptionalProperties.apply(this, arguments);
    if (this.object.zoom != null) {
      this.sprite.zoomX = this.object.zoom.x;
      return this.sprite.zoomY = this.object.zoom.y;
    }
  };

  return Component_TilingSprite;

})(gs.Component_Sprite);

gs.Component_TilingSprite = Component_TilingSprite;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_TilingSprite_70.js
var Component_TilingPlane,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_TilingPlane = (function(superClass) {
  extend(Component_TilingPlane, superClass);


  /**
  * A tiling plane component tiles the image of the game object endless over the screen. The
  * tiling can be vertical, horizontal or both. The sprite can be managed or
  * unmanaged. A managed sprite is automatically added to the graphics-system
  * and processed every frame until it gets disposed. An unmanaged sprite needs
  * to be added and removed manually.
  *
  * @module gs
  * @class Component_TilingPlane
  * @extends gs.Component_Sprite
  * @memberof gs
  * @constructor
  * @param {boolean} managed - Indicates if the sprite is managed by the graphics system.
   */

  function Component_TilingPlane(managed) {
    this.sprite = null;
    this.tilingPlane = null;
    this.tilingSprite = this.sprite;
    this.image = null;
    this.video = null;
    this.imageFolder = "Graphics/Pictures";
    this.visible = true;
    this.looping = {
      vertical: false,
      horizontal: false
    };
  }


  /**
  * Creates sprite object.
  *
  * @method setupSprite
   */

  Component_TilingPlane.prototype.setupSprite = function() {
    if (!this.sprite) {
      return this.sprite = new gs.Sprite(Graphics.viewport, typeof managed !== "undefined" && managed !== null ? managed : true);
    }
  };


  /**
  * Updates the padding.
  *
  * @method updatePadding
   */

  Component_TilingPlane.prototype.updatePadding = function() {
    if (this.object.padding != null) {
      this.sprite.rect.x += this.object.padding.left;
      this.sprite.rect.y += this.object.padding.top;
      this.sprite.rect.width -= this.object.padding.left + this.object.padding.right;
      return this.sprite.rect.height -= this.object.padding.bottom + this.object.padding.bottom;
    }
  };


  /**
  * Updates the source- and destination-rectangle of the game object so that
  * the associated bitmap fits in. 
  *
  * @method updateRect
   */

  Component_TilingPlane.prototype.updateRect = function() {
    if (this.sprite.bitmap != null) {
      this.object.srcRect = new Rect(0, 0, this.sprite.bitmap.width, this.sprite.bitmap.height);
      this.object.dstRect.width = this.object.srcRect.width;
      return this.object.dstRect.height = this.object.srcRect.height;
    }
  };


  /**
  * Updates the sprite properties from the game object properties.
  *
  * @method updateProperties
   */

  Component_TilingPlane.prototype.updateProperties = function() {
    Component_TilingPlane.__super__.updateProperties.call(this);
    this.sprite.vertical = this.looping.vertical;
    this.sprite.horizontal = this.looping.horizontal;
    this.sprite.x = this.object.dstRect.x;
    return this.sprite.y = this.object.dstRect.y;
  };


  /**
  * Updates the optional sprite properties from the game object properties.
  * @method updateOptionalProperties
   */

  Component_TilingPlane.prototype.updateOptionalProperties = function() {
    Component_TilingPlane.__super__.updateOptionalProperties.call(this);
    this.sprite.zoomX = this.object.zoom.x;
    return this.sprite.zoomY = this.object.zoom.y;
  };


  /**
  * Updates the tiling-plane component by updating its visibility, image, padding and
  * properties. To save performance, a gs.TilingPlane is only used if looping is enabled. Otherwise
  * a regular sprite is used.
  * @method update
   */

  Component_TilingPlane.prototype.update = function() {
    if (this.tilingSprite && (this.looping.vertical || this.looping.horizontal)) {
      this.tilingSprite.dispose();
      this.tilingPlane = new gs.TilingPlane(null, this.tilingSprite.managed);
      this.tilingSprite = null;
      this.sprite = this.tilingPlane;
      this.image = null;
    }
    if (this.tilingPlane && !(this.looping.vertical || this.looping.horizontal)) {
      this.tilingPlane.dispose();
      this.tilingSprite = new gs.Sprite(null, this.tilingPlane.managed);
      this.tilingPlane = null;
      this.sprite = this.tilingSprite;
      this.image = null;
    }
    return Component_TilingPlane.__super__.update.apply(this, arguments);
  };

  return Component_TilingPlane;

})(gs.Component_Sprite);

gs.Component_TilingPlane = Component_TilingPlane;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_TilingPlane_77.js
var Component_Viewport,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Viewport = (function(superClass) {
  extend(Component_Viewport, superClass);


  /**
  * A viewport component can contain multiple graphic objects and will automatically 
  * clip them if they move out of the viewport-rectangle. The area of a viewport
  * can also be tinted or colored. So to tint the whole for example, it enough
  * to create a viewport taking the whole screen-space and then setting the
  * tone or color property.
  *
  * @module gs
  * @class Component_Viewport
  * @extends gs.Component_Visual
  * @memberof gs
  * @constructor
  * @param {Viewport} [viewport=null] - A native viewport object used by the component. If null, the component create a new one.
   */

  function Component_Viewport(viewport) {
    Component_Viewport.__super__.constructor.call(this);

    /**
    * The native viewport-object.
    * @property viewport
    * @type gs.Viewport
    * @protected
     */
    this.viewport = viewport;

    /**
    * The visibility. If <b>false</b> the viewport and associated graphic objects are not rendered.
    * @property viewport
    * @type gs.Viewport
    * @protected
     */
    this.visible = true;
    this.scroll = new gs.Point(0, 0);
  }


  /**
  * Sets up the viewport.
  * @method setup
   */

  Component_Viewport.prototype.setup = function() {
    if (!this.viewport) {
      this.viewport = new gs.Viewport(0, 0, Graphics.width, Graphics.height);
    }
    return this.isSetup = true;
  };


  /**
  * Disposes the viewport and all associated graphic objects.
  * @method dispose
   */

  Component_Viewport.prototype.dispose = function() {
    return this.viewport.dispose();
  };


  /**
  * Updates the origin-point of the game object.
  * @method updateOrigin
   */

  Component_Viewport.prototype.updateOrigin = function() {};


  /**
  * Updates the padding.
  * @method updatePadding
   */

  Component_Viewport.prototype.updatePadding = function() {
    if (this.object.padding != null) {
      this.viewport.rect.x += this.object.padding.left;
      this.viewport.rect.y += this.object.padding.top;
      this.viewport.rect.width -= this.object.padding.left + this.object.padding.right;
      return this.viewport.rect.height -= this.object.padding.bottom + this.object.padding.bottom;
    }
  };


  /**
  * Updates the sprite properties from the game object properties.
  * @method update
   */

  Component_Viewport.prototype.updateProperties = function() {
    this.viewport.rect.x = this.object.dstRect.x;
    this.viewport.rect.y = this.object.dstRect.y;
    this.viewport.rect.width = this.object.dstRect.width;
    this.viewport.rect.height = this.object.dstRect.height;
    this.viewport.ox = this.scroll.x + this.object.offset.x;
    this.viewport.oy = this.scroll.y + this.object.offset.y;
    this.viewport.anchor.x = this.object.anchor.x;
    this.viewport.anchor.y = this.object.anchor.y;
    this.viewport.zoomX = this.object.zoom.x;
    this.viewport.zoomY = this.object.zoom.x;
    this.viewport.angle = this.object.angle;
    return this.viewport.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);
  };


  /**
  * Updates the optional sprite properties from the game object properties.
  * @method updateOptionalProperties
   */

  Component_Viewport.prototype.updateOptionalProperties = function() {
    var ref, ref1;
    if (this.object.tone != null) {
      this.viewport.tone = this.object.tone;
    }
    if (this.object.color != null) {
      this.viewport.color = this.object.color;
    }
    if (this.object.effects != null) {
      this.viewport.effects.wobble = this.object.effects.wobble;
    }
    if (((ref = this.object.parent) != null ? ref.visible_ : void 0) != null) {
      return this.viewport.visible = this.object.visible;
    } else if (((ref1 = this.object.parent) != null ? ref1.visible : void 0) != null) {
      return this.viewport.visible = this.object.visible;
    } else {
      return this.viewport.visible = true;
    }
  };


  /**
  * Updates the viewport.
  * @method update
   */

  Component_Viewport.prototype.update = function() {
    Component_Viewport.__super__.update.apply(this, arguments);
    if (!this.isSetup) {
      this.setup();
    }
    this.updatePadding();
    this.updateProperties();
    return this.updateOptionalProperties();
  };

  return Component_Viewport;

})(gs.Component_Visual);

gs.Component_Viewport = Component_Viewport;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Viewport_93.js
var Component_ImageMap,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ImageMap = (function(superClass) {
  extend(Component_ImageMap, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_ImageMap.prototype.onDataBundleRestore = function(data, context) {
    var bitmap, ground, h, i, len, ref;
    this.setupEventHandlers();
    ref = this.hotspots;
    for (i = 0, len = ref.length; i < len; i++) {
      h = ref[i];
      this.object.addObject(h);
    }
    this.object.addObject(this.ground);
    bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + this.object.images[0]);
    ground = new gs.Bitmap(bitmap.width, bitmap.height);
    ground.blt(0, 0, bitmap, new Rect(0, 0, bitmap.width, bitmap.height));
    return this.ground.bitmap = ground;
  };


  /**
  * A component which turns a game object into an interactive image-map.
  *
  * @module gs
  * @class Component_ImageMap
  * @extends gs.Component_Visual
  * @memberof gs
   */

  function Component_ImageMap() {
    Component_ImageMap.__super__.constructor.apply(this, arguments);

    /**
    * The ground/base image.
    * @property ground
    * @type gs.Object_Picture
    * @default null
     */
    this.ground = null;

    /**
    * An array of different hotspots.
    * @property hotspots
    * @type gs.Object_Picture[]
    * @default null
     */
    this.hotspots = null;
  }


  /**
  * Adds event-handler for mouse/touch events to update the component only if 
  * a user-action happened.
  *
  * @method setupEventHandlers
   */

  Component_ImageMap.prototype.setupEventHandlers = function() {
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    return gs.GlobalEventManager.on("mouseUp", ((function(_this) {
      return function(e) {
        var contains, hotspot, i, len, ref, results;
        contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y);
        if (contains) {
          ref = _this.hotspots;
          results = [];
          for (i = 0, len = ref.length; i < len; i++) {
            hotspot = ref[i];
            if (_this.checkHotspotAction(hotspot)) {
              e.breakChain = true;
              hotspot.selected = !hotspot.selected;
              results.push(_this.executeHotspotAction(hotspot));
            } else {
              results.push(void 0);
            }
          }
          return results;
        }
      };
    })(this)), null, this.object);
  };


  /**
  * Initializes the image-map. Creates the background and hotspots.
  *
  * @method setup
   */

  Component_ImageMap.prototype.setup = function() {
    var bitmap, ground;
    this.setupEventHandlers();
    bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + this.object.images[0]);
    ground = new gs.Bitmap(bitmap.width, bitmap.height);
    ground.blt(0, 0, bitmap, new Rect(0, 0, bitmap.width, bitmap.height));
    this.ground = new gs.Object_Picture();
    this.ground.bitmap = ground;
    this.ground.image = null;
    this.ground.zIndex = 400;
    this.ground.imageHandling = gs.ImageHandling.CUSTOM_SIZE;
    this.object.addObject(this.ground);
    this.hotspots = this.object.hotspots.select((function(_this) {
      return function(v) {
        var picture;
        _this.ground.bitmap.clearRect(v.x, v.y, v.size.width, v.size.height);
        picture = new gs.Object_Picture();
        picture.fixedSize = true;
        picture.srcRect = new Rect(v.x, v.y, v.size.width, v.size.height);
        picture.dstRect = new Rect(v.x, v.y, v.size.width, v.size.height);
        picture.imageHandling = gs.ImageHandling.CUSTOM_SIZE;
        picture.zIndex = 401;
        picture.selected = false;
        picture.enabled = true;
        picture.actions = v.data.actions;
        picture.data = v.data;
        picture.commonEventId = v.commonEventId;
        _this.object.addObject(picture);
        return picture;
      };
    })(this));
    this.ground.srcRect.set(0, 0, ground.width, ground.height);
    this.ground.dstRect.width = ground.width;
    this.ground.dstRect.height = ground.height;
    this.ground.update();
    this.object.dstRect.width = this.ground.dstRect.width;
    return this.object.dstRect.height = this.ground.dstRect.height;
  };


  /**
  * Initializes the image-map. Frees ground image.
  *
  * @method dispose
   */

  Component_ImageMap.prototype.dispose = function() {
    Component_ImageMap.__super__.dispose.apply(this, arguments);
    return this.ground.bitmap.dispose();
  };


  /**
  * Executes a hotspot's associated action. Depending on the configuration a hotspot
  * can trigger a common-event or turn on a switch for example.
  *
  * @method executeHotspotAction
  * @param {gs.Object_Picture} hotspot - The hotspot where the image should be updated.
  * @protected
   */

  Component_ImageMap.prototype.executeHotspotAction = function(hotspot) {
    var ref, ref1, ref2, ref3;
    if (hotspot.data.bindToSwitch) {
      GameManager.variableStore.setBooleanValueTo(hotspot.data["switch"], hotspot.selected);
    }
    switch (hotspot.data.action) {
      case 1:
        if ((ref = this.object.events) != null) {
          ref.emit("jumpTo", this.object, {
            label: hotspot.data.label
          });
        }
        break;
      case 2:
        if ((ref1 = this.object.events) != null) {
          ref1.emit("callCommonEvent", this.object, {
            commonEventId: hotspot.data.commonEventId,
            finish: hotspot.data.finish
          });
        }
        break;
      case 3:
        if ((ref2 = this.object.events) != null) {
          ref2.emit("action", this.object, {
            actions: hotspot.data.actions
          });
        }
    }
    if (hotspot.data.finish) {
      return (ref3 = this.object.events) != null ? ref3.emit("finish", this.object) : void 0;
    }
  };


  /**
  * Checks if a hotspot's associated action needs to be executed. Depending on the configuration a hotspot
  * can trigger a common-event or turn on a switch for example.
  *
  * @method updateHotspotAction
  * @param {gs.Object_Picture} hotspot - The hotspot where the image should be updated.
  * @return {boolean} If <b>true</b> the hotspot's action needs to be executed. Otherwise <b>false</b>.
  * @protected
   */

  Component_ImageMap.prototype.checkHotspotAction = function(hotspot) {
    var hovered, result;
    result = false;
    hovered = hotspot.dstRect.contains(Input.Mouse.x, Input.Mouse.y);
    if (hovered && Input.Mouse.buttons[Input.Mouse.LEFT] === 2) {
      result = true;
    }
    return result;
  };


  /**
  * Updates a hotspot's image. Depending on the state the image of a hotspot can
  * change for example if the mouse hovers over a hotspot.
  *
  * @method updateHotspotImage
  * @param {gs.Object_Picture} hotspot - The hotspot where the image should be updated.
  * @param {boolean} hovered - Indicates if the hotspot is hovered by mouse/touch cursor.
  * @protected
   */

  Component_ImageMap.prototype.updateHotspotImage = function(hotspot, hovered) {
    var baseImage;
    baseImage = hotspot.enabled ? this.object.images[2] || this.object.images[0] : this.object.images[0];
    if (hovered) {
      if (hotspot.selected) {
        return hotspot.image = this.object.images[4] || this.object.images[1] || baseImage;
      } else {
        return hotspot.image = this.object.images[1] || baseImage;
      }
    } else {
      if (hotspot.selected) {
        return hotspot.image = this.object.images[3] || baseImage;
      } else {
        return hotspot.image = baseImage;
      }
    }
  };


  /**
  * Updates a hotspot.
  *
  * @method updateHotspot
  * @param {gs.Object_Picture} hotspot - The hotspot to update.
  * @protected
   */

  Component_ImageMap.prototype.updateHotspot = function(hotspot) {
    var hovered;
    hotspot.visible = this.object.visible;
    hotspot.opacity = this.object.opacity;
    if (hotspot.data.bindEnabledState) {
      hotspot.enabled = GameManager.variableStore.booleanValueOf(hotspot.data.enabledSwitch);
    }
    hotspot.origin.x = this.object.dstRect.x;
    hotspot.origin.y = this.object.dstRect.y;
    hovered = hotspot.dstRect.contains(Input.Mouse.x, Input.Mouse.y);
    this.updateHotspotImage(hotspot, hovered);
    return hotspot.update();
  };


  /**
  * Updates the ground-image.
  *
  * @method updateGround
  * @protected
   */

  Component_ImageMap.prototype.updateGround = function() {
    this.ground.visible = this.object.visible;
    this.ground.opacity = this.object.opacity;
    this.ground.origin.x = this.object.dstRect.x;
    this.ground.origin.y = this.object.dstRect.y;
    return this.ground.update();
  };


  /**
  * Updates the image-map's ground and all hotspots.
  *
  * @method update
   */

  Component_ImageMap.prototype.update = function() {
    var hotspot, i, len, ref;
    Component_ImageMap.__super__.update.call(this);
    this.updateGround();
    ref = this.hotspots;
    for (i = 0, len = ref.length; i < len; i++) {
      hotspot = ref[i];
      this.updateHotspot(hotspot);
    }
    return null;
  };

  return Component_ImageMap;

})(gs.Component_Visual);

gs.Component_ImageMap = Component_ImageMap;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_ImageMap_105.js
var Component_TextRenderer, RendererTextLine,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

RendererTextLine = (function() {

  /**
  * Stores a text line.
  * 
  * @module gs.Component_TextRenderer
  * @class TextLine
  * @memberof gs.Component_TextRenderer
  * @constructor
   */
  function RendererTextLine() {
    this.width = 0;
    this.height = 0;
    this.descent = 0;
    this.content = [];
  }

  return RendererTextLine;

})();

gs.RendererTextLine = RendererTextLine;

Component_TextRenderer = (function(superClass) {
  extend(Component_TextRenderer, superClass);


  /**
  * A text-renderer component allow to draw plain or formatted text on a
  * game object's bitmap. For formatted text, different text-codes can be
  * used to add formatting or define a placeholder.<br><br>
  * 
  * A text-code uses the following syntax:<br><br>
  * 
  * {code:value} <- Single Value<br />
  * {code:value1,value2,...} <- Multiple Values<br><br>
  * 
  * Example:<br><br>
  * 
  * "This is {Y:I}a Text{Y:N}" <- "a Text" will be italic here.<br>
  * "The value is {GN:1}" <- "{GN:1}" will be replaced for the value of the global number variable 0001.<br><br>
  * 
  * For a list of all available text-codes with examples, just take a look into the offical help-file.
  * 
  * @module gs
  * @class Component_TextRenderer
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_TextRenderer() {
    Component_TextRenderer.__super__.constructor.apply(this, arguments);

    /**
    * @property currentX
    * @type number
    * @protected
     */
    this.currentX = 0;

    /**
    * @property currentY
    * @type number
    * @protected
     */
    this.currentY = 0;

    /**
    * @property currentLineHeight
    * @type number
    * @protected
     */
    this.currentLineHeight = 0;

    /**
    * @property font
    * @type gs.Font
    * @protected
     */
    this.font = new Font("Times New Roman", 22);

    /**
    * @property spaceSize
    * @type number
    * @protected
     */
    this.spaceSize = 0;

    /**
    * @property fontSize
    * @type number
    * @protected
     */
    this.fontSize = 0;
  }


  /**
  * Creates the token-object for a list-placeholder. A list-placeholder
  * allows to insert a value from a list-variable.
  * 
  * @method createListToken
  * @param {Array} list - The list.
  * @param {Array} values - The values of the list-placeholder text-code.
  * @return {string} The token-object.
   */

  Component_TextRenderer.prototype.createListToken = function(list, values) {
    var index;
    index = 0;
    if (values[1] != null) {
      values = values[1].split(":");
      index = values[0];
      if (values[0] === "G") {
        index = GameManager.variableStore.numbers[parseInt(values[1]) - 1];
      } else if (values[0] === "P") {
        index = GameManager.variableStore.persistentNumbers[parseInt(values[1]) - 1];
      } else if (values[0] === "L") {
        index = GameManager.variableStore.numberValueOf({
          scope: 0,
          index: parseInt(values[1]) - 1
        });
      }
    }
    return "" + list[index];
  };


  /**
  * Creates a token-object for a specified text-code.
  * 
  * @method createToken
  * @param {string} code - The code/type of the text-code.
  * @param {string} value - The value of the text-code.
  * @return {Object} The token-object.
   */

  Component_TextRenderer.prototype.createToken = function(code, value) {
    var macro, pair, ref, tokenObject, values;
    tokenObject = null;
    value = isNaN(value) ? value : parseInt(value);
    switch (code) {
      case "SZ":
        tokenObject = {
          code: code,
          value: value
        };
        this.font.size = tokenObject.value || this.fontSize;
        this.spaceSize = this.font.measureTextPlain(" ");
        break;
      case "Y":
        tokenObject = {
          code: code,
          value: value
        };
        switch (value) {
          case "U":
            this.font.underline = true;
            break;
          case "S":
            this.font.strikeThrough = true;
            break;
          case "I":
            this.font.italic = true;
            break;
          case "B":
            this.font.bold = true;
            break;
          case "C":
            this.font.smallCaps = true;
            break;
          case "N":
            this.font.underline = false;
            this.font.strikeThrough = false;
            this.font.italic = false;
            this.font.bold = false;
            this.font.smallCaps = false;
        }
        this.spaceSize = this.font.measureTextPlain(" ");
        break;
      case "GN":
        values = isNaN(value) ? value.split(",") : [value];
        if (values[1]) {
          tokenObject = sprintf("%" + values[1] + "d", GameManager.variableStore.numbers[values[0] - 1] || 0);
        } else {
          tokenObject = (GameManager.variableStore.numbers[values[0] - 1] || 0).toString();
        }
        break;
      case "GT":
        tokenObject = GameManager.variableStore.strings[value - 1] || "";
        break;
      case "GS":
        tokenObject = (GameManager.variableStore.booleans[value - 1] || false).toString();
        break;
      case "GL":
        values = value.split(",");
        tokenObject = this.createListToken(GameManager.variableStore.lists[values[0] - 1] || [], values);
        break;
      case "PN":
        values = isNaN(value) ? value.split(",") : [value];
        if (values[1]) {
          tokenObject = sprintf("%" + values[1] + "d", GameManager.variableStore.persistentNumbers[values[0] - 1] || 0);
        } else {
          tokenObject = (GameManager.variableStore.persistentNumbers[values[0] - 1] || 0).toString();
        }
        break;
      case "PT":
        tokenObject = GameManager.variableStore.persistentStrings[value - 1] || "";
        break;
      case "PS":
        tokenObject = (GameManager.variableStore.persistentBooleans[value - 1] || false).toString();
        break;
      case "PL":
        values = value.split(",");
        tokenObject = this.createListToken(GameManager.variableStore.persistentLists[values[0] - 1] || [], values);
        break;
      case "LN":
        values = isNaN(value) ? value.split(",") : [value];
        if (values[1]) {
          tokenObject = sprintf("%" + values[1] + "d", GameManager.variableStore.numberValueOf({
            scope: 0,
            index: value - 1
          }) || 0);
        } else {
          tokenObject = (GameManager.variableStore.numberValueOf({
            scope: 0,
            index: value - 1
          }) || 0).toString();
        }
        break;
      case "LT":
        tokenObject = (GameManager.variableStore.stringValueOf({
          scope: 0,
          index: value - 1
        }) || "").toString();
        break;
      case "LS":
        tokenObject = (GameManager.variableStore.booleanValueOf({
          scope: 0,
          index: value - 1
        }) || false).toString();
        break;
      case "LL":
        values = value.split(",");
        tokenObject = this.createListToken(GameManager.variableStore.listValueOf({
          scope: 0,
          index: values[0] - 1
        }) || [], values);
        break;
      case "N":
        tokenObject = (RecordManager.characters[value - 1] != null ? RecordManager.characters[value - 1].name : "");
        break;
      case "RT":
        pair = value.split("/");
        tokenObject = {
          code: code,
          rtStyleId: (ref = pair[2]) != null ? ref : 0,
          rb: pair[0],
          rt: pair[1],
          rbSize: {
            width: 0,
            height: 0
          },
          rtSize: {
            width: 0,
            height: 0
          }
        };
        break;
      case "M":
        macro = RecordManager.system.textMacros.first(function(m) {
          return m.name === value;
        });
        if (macro) {
          if (macro.type === 0) {
            tokenObject = macro.content.split(/\{([A-z]+):([^\{\}]+)\}|(\n)/gm);
            tokenObject.pop();
          } else if (macro.type === 1) {
            if (!macro.contentFunc) {
              macro.contentFunc = eval("(function(object, value){ " + macro.content + " })");
            }
            tokenObject = macro.contentFunc(this.object, value);
            tokenObject = tokenObject.split(/\{([A-z]+):([^\{\}]+)\}|(\n)/gm);
            tokenObject.pop();
          } else {
            if (!macro.contentFunc) {
              macro.contentFunc = eval("(function(object){ " + macro.content + " })");
            }
            tokenObject = {
              code: "X",
              value: macro.contentFunc
            };
          }
        } else {
          tokenObject = "";
        }
        break;
      default:
        tokenObject = {
          code: code,
          value: value
        };
    }
    return tokenObject;
  };


  /**
  * <p>Measures a control-token. If a token produces a visual result like displaying an icon then it must return the size taken by
  * the visual result. If the token has no visual result, <b>null</b> must be returned. This method is called for every token when the message is initialized.</p> 
  *
  * @param {Object} token - A control-token.
  * @return {gs.Size} The size of the area taken by the visual result of the token or <b>null</b> if the token has no visual result.
  * @method measureControlToken
  * @protected
   */

  Component_TextRenderer.prototype.measureControlToken = function(token) {
    var animation, font, fs, imageBitmap, ref, size, style;
    size = null;
    switch (token.code) {
      case "A":
        animation = RecordManager.animations[Math.max(token.value - 1, 0)];
        if ((animation != null ? animation.graphic.name : void 0) != null) {
          imageBitmap = ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
          if (imageBitmap != null) {
            size = {
              width: Math.round(imageBitmap.width / animation.framesX),
              height: Math.round(imageBitmap.height / animation.framesY)
            };
          }
        }
        break;
      case "RT":
        style = null;
        if (token.rtStyleId) {
          style = ui.UIManager.styles["rubyText-" + token.rtStyleId];
        }
        if (!style) {
          style = ui.UIManager.styles["rubyText"];
        }
        font = (ref = style != null ? style.font : void 0) != null ? ref : this.font;
        fs = font.size;
        font.size = font.size || this.font.size / 2;
        token.rbSize = this.font.measureTextPlain(token.rb);
        token.rtSize = font.measureTextPlain(token.rt);
        font.size = fs;
        size = {
          width: Math.max(token.rbSize.width, token.rtSize.width),
          height: token.rbSize.height + token.rtSize.height
        };
    }
    return size;
  };


  /**
  * <p>Draws the visual result of a token, like an icon for example, to the specified bitmap. This method is called for every token while the text is rendered.</p> 
  *
  * @param {Object} token - A control-token.
  * @param {gs.Bitmap} bitmap - The bitmap used for the current text-line. Can be used to draw something on it like an icon, etc.
  * @method drawControlToken
  * @protected
   */

  Component_TextRenderer.prototype.drawControlToken = function(token, bitmap) {
    var animation, font, fs, imageBitmap, rect, ref, ref1, style;
    switch (token.code) {
      case "A":
        animation = RecordManager.animations[Math.max(token.value - 1, 0)];
        if ((animation != null ? animation.graphic.name : void 0) != null) {
          imageBitmap = ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
          if (imageBitmap != null) {
            rect = new gs.Rect(0, 0, Math.round(imageBitmap.width / animation.framesX), Math.round(imageBitmap.height / animation.framesY));
            return bitmap.blt(this.currentX, this.currentY, imageBitmap, rect);
          }
        }
        break;
      case "RT":
        style = null;
        if (token.rtStyleId) {
          style = ui.UIManager.styles["rubyText-" + token.rtStyleId];
        }
        if (!style) {
          style = ui.UIManager.styles["rubyText"];
        }
        font = (ref = style != null ? style.font : void 0) != null ? ref : this.font;
        fs = font.size;
        font.size = font.size || this.font.size / 2;
        if (style && !((ref1 = style.descriptor.font) != null ? ref1.color : void 0)) {
          font.color.set(this.font.color);
        }
        bitmap.font = font;
        bitmap.drawText(this.currentX, bitmap.font.descent, Math.max(token.rbSize.width, token.rtSize.width), bitmap.height, token.rt, 1, 0);
        bitmap.font = this.font;
        font.size = fs;
        return bitmap.drawText(this.currentX, 0 + token.rtSize.height, Math.max(token.rbSize.width, token.rtSize.width), bitmap.height, token.rb, 1, 0);
    }
  };


  /**
  * Creates an a of line-objects. Each line-object is a list of token-objects. 
  * A token-object can be just a string or an object containing more information
  * about how to process the token at runtime.
  * 
  * A line-object also contains additional information like the width and height
  * of the line(in pixels).
  * 
  * If the wordWrap param is set, line-breaks are automatically created if a line
  * doesn't fit into the width of the game object's bitmap.
  * 
  * @method calculateLines
  * @param {string} message - A message creating the line-objects for.
  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.
  * @param {number} [firstLineWidth=0] - The current width of the first line.
  * @return {Array} An array of line-objects.
   */

  Component_TextRenderer.prototype.calculateLines = function(message, wordWrap, firstLineWidth) {
    var bold, currentWords, descent, height, i, italic, j, len, line, result, size, smallCaps, strikeThrough, t, token, tokenObject, tokens, underline, width, word, words;
    result = [];
    line = new gs.RendererTextLine();
    width = firstLineWidth || 0;
    height = 0;
    descent = this.font.descent;
    currentWords = [];
    size = null;
    this.spaceSize = this.font.measureChar(" ");
    this.fontSize = this.font.size;
    tokens = message.split(/\{([A-z]+):([^\{\}]+)\}|(\n)/gm);
    token = null;
    t = 0;
    underline = this.font.underline;
    strikeThrough = this.font.strikeThrough;
    italic = this.font.italic;
    bold = this.font.bold;
    smallCaps = this.font.smallCaps;
    while (t < tokens.length) {
      token = tokens[t];
      if (t % 4 !== 0) {
        if (token != null) {
          tokenObject = this.createToken(token, tokens[t + 1]);
          if (tokenObject.push != null) {
            Array.prototype.splice.apply(tokens, [t + 3, 0].concat(tokenObject));
          } else if (tokenObject.code == null) {
            tokens[t + 3] = tokenObject + tokens[t + 3];
          } else {
            size = this.measureControlToken(tokenObject);
            if (size) {
              width += size.width;
              height = Math.max(height, size.height);
            }
            line.content.push(tokenObject);
          }
        } else {
          line.height = height || this.font.lineHeight;
          line.width = width;
          line.descent = descent;
          result.push(line);
          line = new gs.RendererTextLine();
          width = 0;
          height = 0;
          descent = this.font.descent;
        }
        t += 2;
      } else if (token.length > 0) {
        words = token.split(" ");
        for (i = j = 0, len = words.length; j < len; i = ++j) {
          word = words[i];
          size = this.font.measureTextPlain(word);
          width += size.width + this.spaceSize.width;
          if ((width - this.spaceSize.width) > this.object.dstRect.width && wordWrap) {
            line.content.push(currentWords.join(" "));
            line.height = height;
            line.width = width - size.width;
            line.descent = descent;
            descent = this.font.descent;
            height = size.height;
            result.push(line);
            line = new gs.RendererTextLine();
            currentWords = [word];
            width = width - (width - size.width);
          } else {
            currentWords.push(word);
          }
          height = Math.max(height, this.font.lineHeight);
        }
        if (currentWords.length > 0) {
          line.content.push(currentWords.join(" "));
          currentWords = [];
        }
      }
      t++;
    }
    if (line.content.length > 0) {
      line.height = height;
      line.width = width;
      line.descent = descent;
      result.push(line);
    }
    this.font.size = this.fontSize;
    this.font.underline = underline;
    this.font.strikeThrough = strikeThrough;
    this.font.italic = italic;
    this.font.bold = bold;
    this.font.smallCaps = smallCaps;
    return result;
  };


  /**
  * Not implemented yet. Should be removed?
  * @method analyzeFormattedText
   */

  Component_TextRenderer.prototype.analyzeFormattedText = function(text, wordWrap) {
    var lines;
    return lines = this.calculateLines(text, wordWrap);
  };


  /**
  * Measures the dimensions of a formatted text in pixels. The result is not
  * pixel-perfect.
  * 
  * @method measureFormattedText
  * @param {string} text - The text to measure.
  * @param {boolean} wordWrap - If wordWrap is set to true, automatically created line-breaks will be calculated.
  * @result {Object} An object containing the width and height of the text.
   */

  Component_TextRenderer.prototype.measureFormattedText = function(text, wordWrap) {
    var j, len, line, lines, size;
    this.font.set(this.object.font);
    size = {
      width: 0,
      height: 0
    };
    lines = this.calculateLines(text, wordWrap);
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      size.width = Math.max(line.width + 2, size.width);
      size.height += line.height;
    }
    return size;
  };


  /**
  * Measures the dimensions of a plain text in pixels. Formatting and
  * word-wrapping are not supported.
  *
  * @method measureText
  * @param {string} text - The text to measure.
  * @result {Object} An object containing the width and height of the text.
   */

  Component_TextRenderer.prototype.measureText = function(text) {
    var j, len, line, lineSize, lines, size;
    size = {
      width: 0,
      height: 0
    };
    lines = text.toString().split("\n");
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      lineSize = this.object.font.measureText(text);
      size.width = Math.max(size.width, lineSize.width);
      size.height += this.object.font.lineHeight;
    }
    return size;
  };


  /**
  * Searches for a token in a list of tokens and returns the first match.
  *
  * @method findToken
  * @param {number} startIndex - The index in the list of tokens where the search will start.
  * @param {string} code - The code of the token to search for.
  * @param {number} direction - The search direction, can be forward(1) or backward(-1).
  * @param {Object[]} tokens - The list of tokens to search.
  * @result {Object} The first token which matches the specified code or <b>null</b> if the token cannot be found.
   */

  Component_TextRenderer.prototype.findToken = function(startIndex, code, direction, tokens) {
    var i, t, token;
    token = null;
    i = startIndex;
    if (direction === -1) {
      while (i >= 0) {
        t = tokens[i];
        if (t.code === code) {
          token = t;
          break;
        }
        i--;
      }
    }
    return token;
  };


  /**
  * Searches for a specific kind of tokens between a start and an end token.
  *
  * @method findTokensBetween
  * @param {number} startIndex - The index where the search will start.
  * @param {number} endIndex - The index where the search will end.
  * @param {string} code - The code of the token-type to search for.
  * @param {Object[]} tokens - The list of tokens to search.
  * @result {Object[]} List of tokens matching the specified code. Its an empty list if no tokens were found.
   */

  Component_TextRenderer.prototype.findTokensBetween = function(startIndex, endIndex, code, tokens) {
    var e, result, s, token;
    result = [];
    s = startIndex;
    e = endIndex;
    while (s < e) {
      token = tokens[s];
      if (token.code == code) {
        result.push(token);
      }
      s++;
    }
    return result;
  };


  /**
  * Processes a control-token. A control-token is a token which influences
  * the text-rendering like changing the fonts color, size or style.
  *
  * Changes will be automatically applied to the game object's font.
  *
  * @method processControlToken
  * @param {Object} token - A control-token.
   */

  Component_TextRenderer.prototype.processControlToken = function(token) {
    switch (token.code) {
      case "SZ":
        return this.object.font.size = token.value || this.fontSize;
      case "C":
        if (token.value <= 0) {
          return this.object.font.color = Font.defaultColor;
        } else {
          return this.object.font.color = RecordManager.system.colors[token.value - 1] || Font.defaultColor;
        }
        break;
      case "Y":
        switch (token.value) {
          case "U":
            return this.object.font.underline = true;
          case "S":
            return this.object.font.strikeThrough = true;
          case "I":
            return this.object.font.italic = true;
          case "B":
            return this.object.font.bold = true;
          case "C":
            return this.object.font.smallCaps = true;
          case "N":
            this.object.font.underline = false;
            this.object.font.strikeThrough = false;
            this.object.font.italic = false;
            this.object.font.bold = false;
            return this.object.font.smallCaps = false;
        }
    }
  };


  /**
  * Draws a plain text. Formatting and word-wrapping are not supported.
  *
  * @method drawText
  * @param {number} x - The x-coordinate of the text's position.
  * @param {number} y - The y-coordinate of the text's position.
  * @param {number} width - Deprecated. Can be null.
  * @param {number} height - Deprecated. Can be null.
  * @param {string} text - The text to draw.
   */

  Component_TextRenderer.prototype.drawText = function(x, y, width, height, text) {
    var font, i, j, len, line, lines, size;
    lines = text.toString().split("\n");
    font = this.object.font;
    height = font.lineHeight;
    for (i = j = 0, len = lines.length; j < len; i = ++j) {
      line = lines[i];
      size = font.measureText(line);
      this.object.bitmap.drawText(0, i * height, size.width, height, line, 0, 0);
    }
    return null;
  };


  /**
  * Draws a formatted text. 
  * If the wordWrap param is set, line-breaks are automatically created if a line
  * doesn't fit into the width of the game object's bitmap.
  *
  * @method drawFormattedText
  * @param {number} x - The x-coordinate of the text's position.
  * @param {number} y - The y-coordinate of the text's position.
  * @param {number} width - Deprecated. Can be null.
  * @param {number} height - Deprecated. Can be null.
  * @param {string} text - The text to draw.
  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.
   */

  Component_TextRenderer.prototype.drawFormattedText = function(x, y, width, height, text, wordWrap) {
    var font, j, k, len, len1, line, lines, ref, results, size, token;
    lines = this.calculateLines(text.toString(), wordWrap);
    this.currentX = 0;
    this.currentY = 0;
    this.currentLineHeight = 0;
    results = [];
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      ref = line.content;
      for (k = 0, len1 = ref.length; k < len1; k++) {
        token = ref[k];
        if (token.code != null) {
          this.processControlToken(token);
          size = this.measureControlToken(token);
          if (size) {
            this.drawControlToken(token, this.object.bitmap);
            this.currentX += size.width;
          }
        } else if (token.length > 0) {
          font = this.object.font;
          size = font.measureTextPlain(token);
          height = line.height;
          this.object.bitmap.drawText(this.currentX, this.currentY + height - size.height + font.descent - line.descent, size.width, height, token, 0, 0);
          this.currentX += size.width;
          this.currentLineHeight = Math.max(this.currentLineHeight, height);
        }
      }
      this.currentY += this.currentLineHeight || this.object.font.lineHeight;
      this.currentX = 0;
      results.push(this.currentLineHeight = 0);
    }
    return results;
  };

  return Component_TextRenderer;

})(gs.Component);

gs.Component_TextRenderer = Component_TextRenderer;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_TextRenderer_107.js

/**
* An enumeration of game message modes.
*
* ADV - Adventure Mode
* NVL - Novel Mode
*
* @typedef MessageMode
* @memberof vn
 */
var Component_MessageBehavior, MessageMode,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

MessageMode = (function() {
  function MessageMode() {}

  MessageMode.ADV = 0;

  MessageMode.NVL = 1;

  return MessageMode;

})();

vn.MessageMode = MessageMode;

Component_MessageBehavior = (function(superClass) {
  extend(Component_MessageBehavior, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_MessageBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A behavior-component to define the behavior of a game-message.
  *
  * @module vn
  * @class Component_MessageBehavior
  * @extends gs.Component
  * @memberof vn
  * @constructor
   */

  function Component_MessageBehavior() {

    /**
    * Reference to game settings.
    * @property settings
    * @type Object
    * @protected
     */
    this.settings = GameManager.settings;

    /**
    * Reference to temporary game settings.
    * @property settings
    * @type Object
    * @protected
     */
    this.tempSettings = GameManager.tempSettings;

    /**
    * Indicates if the message is currently waiting.
    * @property isWaiting
    * @type boolean
    * @readOnly
     */
    this.isWaiting = false;

    /**
    * Indicates if the message is currently running.
    * @property isRunning
    * @type boolean
    * @readOnly
     */
    this.isRunning = false;

    /**
    * Indicates if a voice is currently playing together with the message.
    * @property isVoicePlaying
    * @type boolean
    * @readOnly
     */
    this.isVoicePlaying = false;

    /**
    * Current message caret/cursor position.
    * @property caretPosition
    * @type gs.Point
    * @readOnly
     */
    this.caretPosition = new gs.Point(0, 0);

    /**
    * Current raw message text.
    * @property message
    * @type string
    * @readOnly
     */
    this.message = "";

    /**
    * All currently displayed raw messages.
    * @property messages
    * @type string[]
    * @readOnly
     */
    this.messages = [];

    /**
    * Voice associated with the current message.
    * @property voice
    * @type gs.AudioBufferReference
     */
    this.voice = null;

    /**
    * Indicates if current message is partial. DEPRECATED. Please do not use.
    * @property partial
    * @deprecated
    * @type boolean
    * @readOnly
     */
    this.partial = false;

    /**
    * Indicates if the message is currently waiting in live-preview.
    * @property waitingPreview
    * @type boolean
    * @readOnly
     */
    this.waitingPreview = false;
    this.onMessageFinish = (function(_this) {
      return function(sender) {
        if (!_this.partial) {
          _this.message = "";
        }
        return _this.object.events.emit("finish", _this);
      };
    })(this);
    this.onMessageWaiting = (function(_this) {
      return function(sender) {
        if (!_this.object.textRenderer.isBatched() || !_this.object.textRenderer.isBatchInProgress()) {
          _this.object.textRenderer.waitAtEnd = !_this.partial;
          return _this.object.events.emit("waiting", _this);
        }
      };
    })(this);
  }


  /**
  * Adds event-handlers
  *
  * @method setupEventHandlers
   */

  Component_MessageBehavior.prototype.setupEventHandlers = function() {
    this.object.events.offByOwner("messageFinish", this);
    this.object.events.offByOwner("messageWaiting", this);
    this.object.events.on("messageFinish", gs.CallBack("onMessageFinish", this));
    this.object.events.on("messageWaiting", gs.CallBack("onMessageWaiting", this));
    gs.GlobalEventManager.offByOwner("previewWaiting", this);
    gs.GlobalEventManager.offByOwner("previewRestart", this);
    gs.GlobalEventManager.on("previewWaiting", ((function(_this) {
      return function(sender) {
        return _this.waitingPreview = true;
      };
    })(this)), null, this);
    return gs.GlobalEventManager.on("previewRestart", ((function(_this) {
      return function(sender) {
        return _this.waitingPreview = false;
      };
    })(this)), null, this);
  };


  /**
  * Setup the component. Adds event handlers.
  *
  * @method setup
   */

  Component_MessageBehavior.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Disposes the component.
  *
  * @method toDataBundle
   */

  Component_MessageBehavior.prototype.dispose = function() {
    Component_MessageBehavior.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("previewWaiting", this);
    return gs.GlobalEventManager.offByOwner("previewRestart", this);
  };


  /**
  * Not implemented yet.
  *
  * @method toDataBundle
   */

  Component_MessageBehavior.prototype.toDataBundle = function() {};


  /**
  * Not implemented yet.
  *
  * @method restore
  * @param {Object} bundle - A data bundle.
   */

  Component_MessageBehavior.prototype.restore = function(bundle) {};


  /**
  * Action to show a game message.
  *
  * @method showMessage
  * @param {Object} sender - The sender of this action.
  * @param {Object} params - An object containing the necessary parameters.
   */

  Component_MessageBehavior.prototype.showMessage = function(sender, params) {
    this.partial = params.partial;
    this.message += lcsm(params.message);
    this.addMessage(params.message, null, false, !this.partial);
    if (this.object.textRenderer.isBatched()) {
      return this.object.textRenderer.waitAtEnd = true;
    } else {
      return this.object.textRenderer.waitAtEnd = !this.partial;
    }
  };


  /**
  * Deprecated. Not longer used.
  *
  * @method updateBitmap
   */

  Component_MessageBehavior.prototype.updateBitmap = function() {
    var ref;
    if (!this.object.bitmap || this.object.bitmap.width !== this.object.dstRect.width || this.object.bitmap.height !== this.object.dstRect.height) {
      if ((ref = this.object.bitmap) != null) {
        ref.dispose();
      }
      this.object.bitmap = new Bitmap(this.object.dstRect.width, this.object.dstRect.height);
      return this.object.bitmap.font = this.object.font;
    }
  };


  /**
  * Restores a NVL game message of an array of message-objects. That is
  * necessary to restore a NVL game message from a save-game.
  *
  * @method restoreMessages
  * @param {Array} messages - An array of messages to restore.
   */

  Component_MessageBehavior.prototype.restoreMessages = function(messages) {
    var i, len, message, ref, ref1;
    this.updateBitmap();
    this.clear();
    this.object.opacity = 255;
    this.object.srcRect = new Rect(0, 0, this.object.dstRect.width, this.object.dstRect.height);
    for (i = 0, len = messages.length; i < len; i++) {
      message = messages[i];
      this.object.font.color = new Color(((ref = message.character) != null ? ref.textColor : void 0) || Color.WHITE);
      this.object.textRenderer.drawFormattedTextImmediately(0, 0, this.object.dstRect.width, this.object.dstRect.height, lcsm((ref1 = message.text) != null ? ref1 : message), true);
    }
    return null;
  };


  /**
  * Adds a new message.
  * 
  * @method addMessage
  * @param {string} message - The message.
  * @param {Object} character - Database-Record of a character.
  * @param {boolean} newLine - Indicates if the message should make a line break.
   */

  Component_MessageBehavior.prototype.addMessage = function(message, character, newLine, waitAtEnd) {
    this.object.textRenderer.partialMessage = null;
    this.object.offset = {
      x: 0,
      y: 0
    };
    this.object.visible = true;
    GameManager.messages.push({
      text: message,
      character: character
    });
    this.object.textRenderer.waitAtEnd = waitAtEnd;
    if (newLine) {
      this.object.textRenderer.newLine();
    }
    this.updateBitmap();
    if (character != null) {
      this.object.font.color = new Color((character != null ? character.textColor : void 0) || Color.WHITE);
    }
    this.object.opacity = 255;
    this.object.srcRect = new Rect(0, 0, this.object.dstRect.width, this.object.dstRect.height);
    this.update();
    return this.object.textRenderer.drawFormattedText(0, 0, this.object.dstRect.width, this.object.dstRect.height, message, true);
  };


  /**
  * Clears the game message by deleting/clearing all messages.
  *
  * @method clear
   */

  Component_MessageBehavior.prototype.clear = function() {
    this.object.textRenderer.clear();
    return GameManager.messages = [];
  };


  /**
  * Closes the game message by making it invisible.
  *
  * @method close
   */

  Component_MessageBehavior.prototype.close = function() {
    return this.object.visible = false;
  };


  /**
  * Gets the duration of an associated voice or 0 if no voice is associated.
  *
  * @method voiceDuration
  * @return {number} The duration in frames.
   */

  Component_MessageBehavior.prototype.voiceDuration = function() {
    var duration;
    duration = 0;
    if ((this.voice != null) && (this.settings.autoMessage.waitForVoice || this.settings.timeMessageToVoice)) {
      duration = Math.round((this.voice.source.buffer.duration * this.voice.source.playbackRate.value) * 1000 / 16.6);
    } else {
      duration = 0;
    }
    if (this.tempSettings.skip) {
      return 1;
    } else {
      return duration;
    }
  };


  /**
  * Gets the duration of rendering the game-message.
  *
  * @method messageDuration
  * @return {number} The duration in frames.
   */

  Component_MessageBehavior.prototype.messageDuration = function() {
    var duration;
    duration = this.object.textRenderer.calculateDuration();
    if (this.tempSettings.skip) {
      return 1;
    } else {
      return duration;
    }
  };


  /**
  * Gets the time between two messages in auto-read mode.
  *
  * @method autoMessageTime
  * @return {number} The time in frames.
   */

  Component_MessageBehavior.prototype.autoMessageTime = function() {
    if (this.tempSettings.skip) {
      return 1;
    } else {
      return Math.max(Math.round(this.settings.autoMessage.time * Graphics.frameRate), this.voiceDuration() - this.messageDuration());
    }
  };


  /**
  * Gets the current message speed.
  *
  * @method messageSpeed
  * @return {number} The message speed.
   */

  Component_MessageBehavior.prototype.messageSpeed = function() {
    return 10 - Math.round(GameManager.settings.messageSpeed * 2.5);
  };


  /**
  * Checks if a mouse-button or key was pressed to continue with the message-rendering.
  *
  * @method actionTrigger
  * @return {boolean} If true, the an action-button or action-key is pressed.
   */

  Component_MessageBehavior.prototype.actionTrigger = function() {
    return (gs.ObjectManager.current.input && this.object.visible && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y) && Input.Mouse.buttons[Input.Mouse.LEFT] === 2) || Input.trigger(Input.C);
  };

  Component_MessageBehavior.prototype.finish = function() {
    this.object.character = null;
    if ((this.object.voice != null) && GameManager.settings.skipVoiceOnAction) {
      return AudioManager.stopSound(this.object.voice.name);
    }
  };

  Component_MessageBehavior.prototype.erase = function() {
    var duration, fading;
    fading = GameManager.tempSettings.messageFading;
    duration = GameManager.tempSettings.skip ? 0 : fading.duration;
    return this.object.animator.disappear(fading.animation, fading.easing, duration, (function(_this) {
      return function() {
        SceneManager.scene.currentCharacter = {
          name: ""
        };
        _this.clear();
        return _this.object.visible = false;
      };
    })(this));
  };


  /**
  * FIXME: Deprecated? It is also a re-definition of gs.Component_Visual.updateOrigin.
  *
  * @method updateOrigin
   */

  Component_MessageBehavior.prototype.updateOrigin = function() {
    var ox, oy, p;
    ox = 0;
    oy = 0;
    if ((this.object.parent != null) && (this.object.parent.dstRect != null)) {
      p = this.object.parent;
      while ((p != null) && (p.dstRect != null)) {
        ox += p.dstRect.x;
        oy += p.dstRect.y;
        p = p.parent;
      }
    }
    this.object.origin.x = ox;
    return this.object.origin.y = oy;
  };


  /**
  * Updates the object. 
  *
  * @method updateObject
  * @private
   */

  Component_MessageBehavior.prototype.updateObject = function() {
    this.updateOrigin();
    if (this.tempSettings.skip && !this.waitingPreview) {
      return this.object.textRenderer.isWaiting = false;
    }
  };


  /**
  * Updates the message.
  *
  * @method updateMessage
  * @private
   */

  Component_MessageBehavior.prototype.updateMessage = function() {
    var ref;
    this.caretPosition = this.object.textRenderer.caretPosition();
    if (this.tempSettings.skip && (this.settings.allowSkipUnreadMessages || ((ref = GameManager.globalData.messages[this.message]) != null ? ref.read : void 0))) {
      this.object.textRenderer.drawImmediately = true;
      this.object.textRenderer.waitAtEnd = this.waitingPreview;
      return this.object.textRenderer.waitAtEndTime = 0;
    } else {
      this.object.textRenderer.drawImmedialty = false;
      this.updateSpeed();
      return this.updateAutoMessage();
    }
  };


  /**
  * Updates the speed of the message. That depends on game-settings if a message
  * is timed to its voice or not.
  *
  * @method updateSpeed
  * @private
   */

  Component_MessageBehavior.prototype.updateSpeed = function() {
    var voiceDuration;
    voiceDuration = this.voiceDuration();
    if (voiceDuration > 0 && this.settings.timeMessageToVoice) {
      return this.object.textRenderer.speed = voiceDuration / this.message.length;
    } else {
      return this.object.textRenderer.speed = this.messageSpeed();
    }
  };


  /**
  * Update auto-read mode.
  *
  * @method updateAutoMessage
  * @private
   */

  Component_MessageBehavior.prototype.updateAutoMessage = function() {
    if (this.settings.autoMessage.stopOnAction && this.actionTrigger()) {
      this.settings.autoMessage.enabled = false;
    }
    if (this.settings.autoMessage.enabled && !this.partial) {
      if (this.object.textRenderer.waitAtEnd) {
        this.object.textRenderer.isWaiting = false;
      }
      this.object.textRenderer.waitAtEndTime = this.autoMessageTime();
      return this.object.textRenderer.waitAtEnd = false;
    } else {
      return this.object.textRenderer.waitAtEndTime = 0;
    }
  };


  /*
  * Updates the game message behavior
  *
  * @method update
   */

  Component_MessageBehavior.prototype.update = function() {
    var ref, ref1, ref2, ref3, ref4, ref5;
    this.object.needsUpdate = true;
    this.updateObject();
    this.updateMessage();
    if (this.character !== this.object.character) {
      gs.GlobalEventManager.emit("talkingEnded", this, {
        character: this.character
      });
      this.character = this.object.character;
    }
    if (this.object.textRenderer.isWaiting !== this.isWaiting || this.object.textRenderer.isRunning !== this.isRunning || (((ref = this.voice) != null ? ref.playing : void 0) && (!((ref1 = this.object.character) != null ? ref1.timeTalkingToVoiceVolume : void 0) || this.voice.averageVolume > this.object.character.talkingVolume)) !== this.isVoicePlaying) {
      this.isWaiting = this.object.textRenderer.isWaiting;
      this.isRunning = this.object.textRenderer.isRunning;
      this.isVoicePlaying = ((ref2 = this.voice) != null ? ref2.playing : void 0) && (!((ref3 = this.object.character) != null ? ref3.timeTalkingToVoiceVolume : void 0) || this.voice.averageVolume > this.object.character.talkingVolume);
      if (!this.tempSettings.skip) {
        if ((ref4 = this.voice) != null ? ref4.playing : void 0) {
          if (!this.isVoicePlaying) {
            gs.GlobalEventManager.emit("talkingEnded", this, {
              character: this.object.character
            });
          } else {
            gs.GlobalEventManager.emit("talkingStarted", this, {
              character: this.object.character
            });
          }
        } else {
          if (this.isWaiting) {
            gs.GlobalEventManager.emit("talkingEnded", this, {
              character: this.object.character
            });
          } else if (this.isRunning) {
            gs.GlobalEventManager.emit("talkingStarted", this, {
              character: this.object.character
            });
          }
        }
      }
    }
    if ((this.object.layoutRect != null) && (((ref5 = this.object.parent) != null ? ref5.dstRect : void 0) != null)) {
      if (this.object.layoutRect.x) {
        this.object.dstRect.x = this.object.layoutRect.x(this.object.parent.dstRect.width);
      }
      if (this.object.layoutRect.y) {
        this.object.dstRect.y = this.object.layoutRect.y(this.object.parent.dstRect.height);
      }
      if (this.object.layoutRect.width) {
        this.object.dstRect.width = this.object.layoutRect.width(this.object.parent.dstRect.width);
      }
      if (this.object.layoutRect.height) {
        return this.object.dstRect.height = this.object.layoutRect.height(this.object.parent.dstRect.height);
      }
    }
  };

  return Component_MessageBehavior;

})(gs.Component);

vn.Component_MessageBehavior = Component_MessageBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_MessageBehavior_119.js
var Component_MessageTextRenderer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_MessageTextRenderer = (function(superClass) {
  extend(Component_MessageTextRenderer, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_MessageTextRenderer.prototype.onDataBundleRestore = function(data, context) {
    var bitmap, i, j, len, line, ref;
    this.setupEventHandlers();
    debugger;
    if (this.message) {
      this.lines = this.calculateLines(lcsm(this.message), true, 0);
      ref = this.lines;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        line = ref[i];
        bitmap = this.createBitmap(line);
        this.sprites[i].bitmap = bitmap;
      }
    }
    return null;
  };


  /**
  *  A text-renderer component to render an animated and interactive message text using
  *  dimensions of the game object's destination-rectangle. The message is displayed
  *  using a sprite for each line instead of drawing to the game object's bitmap object.
  *
  *  @module gs
  *  @class Component_MessageTextRenderer
  *  @extends gs.Component_TextRenderer
  *  @memberof gs
  *  @constructor
   */

  function Component_MessageTextRenderer() {
    Component_MessageTextRenderer.__super__.constructor.apply(this, arguments);

    /**
    * An array containing all sprites of the current message.
    * @property sprites
    * @type gs.Sprite[]
    * @protected
     */
    this.sprites = [];

    /**
    * An array containing all sprites of all messages. In NVL mode
    * a page can contain multiple messages.
    * @property allSprites
    * @type gs.Sprite[]
    * @protected
     */
    this.allSprites = [];

    /**
    * An array containing all line-objects of the current message.
    * @property lines
    * @type gs.TextRendererLine[]
    * @readOnly
     */
    this.lines = null;

    /**
    * The line currently rendered.
    * @property line
    * @type number
    * @readOnly
     */
    this.line = 0;

    /**
    * The line currently rendered.
    * @property currentLine
    * @type number
    * @protected
     */
    this.currentLine = 0;

    /**
    * The height of the line currently rendered.
    * @property currentLineHeight
    * @type number
    * @protected
     */
    this.currentLineHeight = 0;

    /**
    * Index of the current character to draw.
    * @property charIndex
    * @type number
    * @readOnly
     */
    this.charIndex = 0;

    /**
    * Indicates that the a message is currently in progress.
    * @property isRunning
    * @type boolean
    * @readOnly
     */
    this.isRunning = false;

    /**
    * The current x-coordinate of the caret/cursor.
    * @property currentX
    * @type number
    * @readOnly
     */
    this.currentX = 0;

    /**
    * The current y-coordinate of the caret/cursor.
    * @property currentY
    * @type number
    * @readOnly
     */
    this.currentY = 0;

    /**
    * The current sprites used to display the current text-line/part.
    * @property currentSprite
    * @type gs.Sprite
    * @readOnly
     */
    this.currentSprite = null;

    /**
    * Indicates if the message-renderer is currently waiting like for a user-action.
    * @property isWaiting
    * @type boolean
    * @readOnly
     */
    this.isWaiting = false;

    /**
    * Indicates if the message-renderer is currently waiting for a key-press or mouse/touch action.
    * @property waitForKey
    * @type boolean
    * @readOnly
     */
    this.waitForKey = false;

    /**
    * Number of frames the message-renderer should wait before continue.
    * @property waitCounter
    * @type number
     */
    this.waitCounter = 0;

    /**
    * Speed of the message-drawing. The smaller the value, the faster the message is displayed.
    * @property speed
    * @type number
     */
    this.speed = 1;

    /**
    * Indicates if the message should be rendered immedialtely without any animation or delay.
    * @property drawImmediately
    * @type boolean
     */
    this.drawImmediately = false;

    /**
    * Indicates if the message should wait for a user-action or a certain amount of time
    * before finishing.
    * @property waitAtEnd
    * @type boolean
     */
    this.waitAtEnd = true;

    /**
    * The number of frames to wait before finishing a message.
    * before finishing.
    * @property waitAtEndTime
    * @type number
     */
    this.waitAtEndTime = 0;

    /**
    * Indicates if auto word-wrap should be used. Default is <b>true</b>
    * @property wordWrap
    * @type boolean
     */
    this.wordWrap = true;

    /**
    * Custom message speed value coming from a text-code.
    * before finishing.
    * @property wordWrap
    * @type boolean
     */
    this.customSpeed = 0;

    /**
    * Custom game objects which are alive until the current message is erased. Can be used to display
    * animated icons, etc.
    * @property customObjects
    * @type gs.Object_Base[]
     */
    this.customObjects = [];

    /**
    * A hashtable/dictionary object to store custom-data useful like for token-processing. The data must be
    * serializable.
    * @property customObjects
    * @type Object
     */
    this.customData = {};
  }


  /**
  * Serializes the message text-renderer into a data-bundle.
  * @method toDataBundle
  * @return {Object} A data-bundle.
   */

  Component_MessageTextRenderer.prototype.toDataBundle = function() {
    var bundle, ignore, k;
    ignore = ["object", "font", "sprites", "allSprites", "currentSprite", "currentX"];
    bundle = {
      currentSpriteIndex: this.sprites.indexOf(this.currentSprite)
    };
    for (k in this) {
      if (ignore.indexOf(k) === -1) {
        bundle[k] = this[k];
      }
    }
    return bundle;
  };


  /**
  * Disposes the message text-renderer and all sprites used to display
  * the message.
  * @method dispose
   */

  Component_MessageTextRenderer.prototype.dispose = function() {
    var j, len, ref, ref1, results, sprite;
    Component_MessageTextRenderer.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    gs.GlobalEventManager.offByOwner("keyUp", this.object);
    ref = this.allSprites;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      sprite = ref[j];
      if ((ref1 = sprite.bitmap) != null) {
        ref1.dispose();
      }
      results.push(sprite.dispose());
    }
    return results;
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_MessageTextRenderer.prototype.setupEventHandlers = function() {
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    gs.GlobalEventManager.offByOwner("keyUp", this.object);
    gs.GlobalEventManager.on("mouseUp", ((function(_this) {
      return function(e) {
        if (_this.object.dstRect.contains(Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y)) {
          if (_this.isWaiting && !(_this.waitCounter > 0 || _this.waitForKey)) {
            e.breakChain = true;
            _this["continue"]();
          } else {
            _this.drawImmediately = true;
            _this.waitCounter = 0;
            _this.waitForKey = false;
            _this.isWaiting = false;
          }
          if (_this.waitForKey) {
            if (Input.Mouse.buttons[Input.Mouse.LEFT] === 2) {
              e.breakChain = true;
              Input.clear();
              _this.waitForKey = false;
              return _this.isWaiting = false;
            }
          }
        }
      };
    })(this)), null, this.object);
    return gs.GlobalEventManager.on("keyUp", ((function(_this) {
      return function(e) {
        if (Input.keys[Input.C] && !_this.isWaiting || (_this.waitCounter > 0 || _this.waitForKey)) {
          _this.drawImmediately = true;
          _this.waitCounter = 0;
          _this.waitForKey = false;
          _this.isWaiting = false;
        }
        if (_this.isWaiting && !_this.waitForKey && !_this.waitCounter && Input.keys[Input.C]) {
          _this["continue"]();
        }
        if (_this.waitForKey) {
          if (Input.keys[Input.C]) {
            Input.clear();
            _this.waitForKey = false;
            return _this.isWaiting = false;
          }
        }
      };
    })(this)), null, this.object);
  };


  /**
  * Sets up the renderer. Registers necessary event handlers.
  * @method setup
   */

  Component_MessageTextRenderer.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Restores the message text-renderer's state from a data-bundle.
  * @method restore
  * @param {Object} bundle - A data-bundle containing message text-renderer state.
   */

  Component_MessageTextRenderer.prototype.restore = function(bundle) {
    var k;
    for (k in bundle) {
      if (k === "currentSpriteIndex") {
        this.currentSprite = this.sprites[bundle.currentSpriteIndex];
      } else {
        this[k] = bundle[k];
      }
    }
    if (this.sprites.length > 0) {
      this.currentY = this.sprites.last().y - this.object.origin.y - this.object.dstRect.y;
      this.line = this.maxLines;
      this.isWaiting = this.isWaiting || this.isRunning;
    }
    return null;
  };


  /**
  * Continues message-processing if currently waiting.
  * @method continue
   */

  Component_MessageTextRenderer.prototype["continue"] = function() {
    var ref, ref1;
    Input.clear();
    this.isWaiting = false;
    if (this.line >= this.lines.length) {
      this.isRunning = false;
      return (ref = this.object.events) != null ? ref.emit("messageFinish", this) : void 0;
    } else {
      if ((ref1 = this.object.events) != null) {
        ref1.emit("messageBatch", this);
      }
      return this.executeBatch();
    }
  };


  /**
  * Updates the text-renderer.
  * @method update
   */

  Component_MessageTextRenderer.prototype.update = function() {
    var j, l, len, len1, object, ref, ref1, ref2, sprite;
    ref = this.allSprites;
    for (j = 0, len = ref.length; j < len; j++) {
      sprite = ref[j];
      sprite.opacity = this.object.opacity;
      sprite.visible = this.object.visible;
      sprite.ox = -this.object.offset.x;
      sprite.oy = -this.object.offset.y;
      sprite.mask.value = this.object.mask.value;
      sprite.mask.vague = this.object.mask.vague;
      sprite.mask.source = this.object.mask.source;
      sprite.mask.type = this.object.mask.type;
    }
    ref1 = this.customObjects;
    for (l = 0, len1 = ref1.length; l < len1; l++) {
      object = ref1[l];
      object.opacity = this.object.opacity;
      object.visible = this.object.visible;
    }
    if (!this.isRunning && this.waitCounter > 0) {
      this.waitCounter--;
      if (this.waitCounter === 0) {
        if ((ref2 = this.object.events) != null) {
          ref2.emit("finish", this);
        }
      }
      return;
    }
    if (this.object.visible) {
      return this.updateLineWriting();
    }
  };


  /**
  * Indicates if its a batched messages.
  *
  * @method isBatched
  * @return If <b>true</b> it is a batched message. Otherwise <b>false</b>
   */

  Component_MessageTextRenderer.prototype.isBatched = function() {
    return this.lines.length > this.maxLines;
  };


  /**
  * Indicates if the batch is still in progress and not done.
  *
  * @method isBatchInProgress
  * @return If <b>true</b> the batched message is still not done. Otherwise <b>false</b>
   */

  Component_MessageTextRenderer.prototype.isBatchInProgress = function() {
    return this.lines.length - this.line > this.maxLines;
  };


  /**
  * Starts displaying the next page of text if a message is too long to fit
  * into one message box.
  *
  * @method executeBatch
   */

  Component_MessageTextRenderer.prototype.executeBatch = function() {
    this.clearAllSprites();
    this.lines = this.lines.slice(this.line);
    this.line = 0;
    this.currentX = 0;
    this.currentY = 0;
    this.currentLineHeight = 0;
    this.tokenIndex = 0;
    this.charIndex = 0;
    this.token = this.lines[this.line].content[this.tokenIndex] || "";
    this.maxLines = this.calculateMaxLines(this.lines);
    this.lineAnimationCount = this.customSpeed || this.speed;
    this.sprites = this.createSprites(this.lines);
    this.allSprites = this.allSprites.concat(this.sprites);
    this.currentSprite = this.sprites[this.line];
    this.currentSprite.x = this.currentX + this.object.origin.x + this.object.dstRect.x;
    return this.drawNext();
  };


  /**
  * Calculates the duration(in frames) the message-renderer needs to display
  * the message.
  *
  * @method calculateDuration
  * @return {number} The duration in frames.
   */

  Component_MessageTextRenderer.prototype.calculateDuration = function() {
    var duration, j, l, len, len1, line, ref, ref1, token;
    duration = 0;
    if (this.lines != null) {
      ref = this.lines;
      for (j = 0, len = ref.length; j < len; j++) {
        line = ref[j];
        ref1 = line.content;
        for (l = 0, len1 = ref1.length; l < len1; l++) {
          token = ref1[l];
          if (token != null) {
            duration += this.calculateDurationForToken(token);
          }
        }
      }
    }
    return duration;
  };


  /**
  * Calculates the duration(in frames) the message-renderer needs to process
  * the specified token.
  *
  * @method calculateDurationForToken
  * @param {string|Object} token - The token.
  * @return {number} The duration in frames.
   */

  Component_MessageTextRenderer.prototype.calculateDurationForToken = function(token) {
    var duration;
    duration = 0;
    switch (token.code) {
      case "W":
        if (token.value !== "A") {
          duration = token.value / 1000 * Graphics.frameRate;
        }
        break;
      default:
        duration = token.length * (this.customSpeed || this.speed);
    }
    return duration;
  };


  /**
  * Calculates the maximum of lines which can be displayed in one message.
  *
  * @method calculateMaxLines
  * @param {Array} lines - An array of line-objects.
  * @return {number} The number of displayable lines.
   */

  Component_MessageTextRenderer.prototype.calculateMaxLines = function(lines) {
    var height, j, len, line, result;
    height = 0;
    result = 0;
    for (j = 0, len = lines.length; j < len; j++) {
      line = lines[j];
      height += line.height + this.lineSpacing();
      if (this.currentY + height > this.object.dstRect.height) {
        break;
      }
      result++;
    }
    return Math.min(lines.length, result);
  };


  /**
  * Processes the next character/token of the message.
  * @method nextChar
  * @private
   */

  Component_MessageTextRenderer.prototype.nextChar = function() {
    this.charIndex++;
    this.lineAnimationCount = this.customSpeed || this.speed;
    if ((this.token.code != null) || this.charIndex >= this.token.length) {
      this.charIndex = 0;
      this.tokenIndex++;
      if (this.tokenIndex >= this.lines[this.line].content.length) {
        this.tokenIndex = 0;
        this.line++;
        this.currentSprite.srcRect.width = this.currentSprite.bitmap.width;
        this.currentSprite = this.sprites[this.line];
        if (this.currentSprite != null) {
          this.currentSprite.x = this.object.origin.x + this.object.dstRect.x;
        }
        if (this.line < this.maxLines) {
          this.currentX = 0;
          return this.token = this.lines[this.line].content[this.tokenIndex] || "";
        }
      } else {
        return this.token = this.lines[this.line].content[this.tokenIndex] || "";
      }
    }
  };


  /**
  * Finishes the message. Depending on the message configuration, the
  * message text-renderer will now wait for a user-action or a certain amount
  * of time.
  *
  * @method finish
   */

  Component_MessageTextRenderer.prototype.finish = function() {
    var ref, ref1, ref2, ref3;
    if (this.waitAtEnd) {
      this.isWaiting = true;
      return (ref = this.object.events) != null ? ref.emit("messageWaiting", this) : void 0;
    } else if (this.waitAtEndTime > 0) {
      this.waitCounter = this.waitAtEndTime;
      this.isRunning = false;
      this.isWaiting = false;
      return (ref1 = this.object.events) != null ? ref1.emit("messageWaiting", this) : void 0;
    } else {
      this.isRunning = false;
      this.isWaiting = false;
      this.waitAtEnd = true;
      if ((ref2 = this.object.events) != null) {
        ref2.emit("messageWaiting", this);
      }
      return (ref3 = this.object.events) != null ? ref3.emit("messageFinish", this) : void 0;
    }
  };


  /**
  * Updates the line writing.
  *
  * @method updateLineWriting
  * @private
   */

  Component_MessageTextRenderer.prototype.updateLineWriting = function() {
    if (this.isRunning && !this.isWaiting && !this.waitForKey && !this.waitCounter > 0) {
      this.lineAnimationCount--;
      if (this.lineAnimationCount <= 0) {
        while (true) {
          if (this.line < this.maxLines) {
            this.nextChar();
          }
          if (this.line >= this.maxLines) {
            this.finish();
          } else {
            this.drawNext();
          }
          if (!(this.drawImmediately && this.isRunning && this.line < this.maxLines)) {
            break;
          }
        }
      }
    }
    if (this.waitForKey) {
      this.isWaiting = true;
    }
    if (this.waitCounter > 0) {
      this.isWaiting = true;
      this.waitCounter--;
      if (this.waitCounter <= 0) {
        return this.isWaiting = false;
      }
    }
  };


  /**
  * <p>Measures a control-token. If a token produces a visual result like displaying an icon then it must return the size taken by
  * the visual result. If the token has no visual result, <b>null</b> must be returned. This method is called for every token when the message is initialized.</p> 
  *
  * <p>This method is not called while the message is running. For that case, see <i>processControlToken</i> method which is called
  * for every token while the message is running.</p>
  *
  * @param {Object} token - A control-token.
  * @return {gs.Size} The size of the area taken by the visual result of the token or <b>null</b> if the token has no visual result.
  * @method analyzeControlToken
  * @protected
   */

  Component_MessageTextRenderer.prototype.measureControlToken = function(token) {
    return Component_MessageTextRenderer.__super__.measureControlToken.call(this, token);
  };


  /**
  * <p>Draws the visual result of a token, like an icon for example, to the specified bitmap. This method is called for every token when the message is initialized and the sprites for each
  * text-line are created.</p> 
  *
  * <p>This method is not called while the message is running. For that case, see <i>processControlToken</i> method which is called
  * for every token while the message is running.</p>
  *
  * @param {Object} token - A control-token.
  * @param {gs.Bitmap} bitmap - The bitmap used for the current text-line. Can be used to draw something on it like an icon, etc.
  * @method drawControlToken
  * @protected
   */

  Component_MessageTextRenderer.prototype.drawControlToken = function(token, bitmap) {
    switch (token.code) {
      case "RT":
        return Component_MessageTextRenderer.__super__.drawControlToken.call(this, token, bitmap);
    }
  };


  /**
  * Processes a control-token. A control-token is a token which influences
  * the text-rendering like changing the fonts color, size or style. Changes 
  * will be automatically applied to the game object's font.
  *
  * For message text-renderer, a few additional control-tokens like
  * speed-change, waiting, etc. needs to be processed here.
  *
  * This method is called for each token while the message is initialized and
  * also while the message is running. See <i>formattingOnly</i> parameter.
  *
  * @param {Object} token - A control-token.
  * @param {boolean} formattingOnly - If <b>true</b> the message is initializing right now and only 
  * format-tokens should be processed which is necessary for the message to calculated sizes correctly.
  * @method processControlToken
  * @protected
   */

  Component_MessageTextRenderer.prototype.processControlToken = function(token, formattingOnly) {
    var animation, bitmap, character, duration, easing, expression, line, linkStart, object, sound, textTokens, values;
    if (formattingOnly) {
      return Component_MessageTextRenderer.__super__.processControlToken.call(this, token);
    }
    switch (token.code) {
      case "X":
        return typeof token.value === "function" ? token.value(this.object) : void 0;
      case "A":
        animation = RecordManager.animations[Math.max(token.value - 1, 0)];
        if ((animation != null ? animation.graphic.name : void 0) != null) {
          bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
          object = new gs.Object_Animation(animation);
          this.addCustomObject(object);
          this.currentX += Math.round(bitmap.width / animation.framesX);
          return this.currentSprite.srcRect.width += Math.round(bitmap.width / animation.framesX);
        }
        break;
      case "LK":
        if (token.value === 'E') {
          object = new ui.Object_Hotspot();
          object.enabled = true;
          object.setup();
          this.addCustomObject(object);
          object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;
          object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;
          object.dstRect.width = this.currentX - this.customData.linkData.cx;
          object.dstRect.height = this.currentLineHeight;
          return object.events.on("click", (function(_this) {
            return function(e) {
              return SceneManager.scene.interpreter.callCommonEvent(_this.customData.linkData.commonEventId, null);
            };
          })(this));
        } else {
          return this.customData.linkData = {
            cx: this.currentX,
            cy: this.currentY,
            commonEventId: token.value - 1,
            tokenIndex: this.tokenIndex
          };
        }
        break;
      case "SLK":
        if (token.value === 'E') {
          this.currentSprite.bitmap.clearRect(this.customData.linkData.cx, this.customData.linkData.cy, this.currentX - this.customData.linkData.cx + this.object.font.borderSize * 2, this.currentLineHeight);
          line = this.lines[this.line].content;
          linkStart = this.findToken(this.tokenIndex - 1, "SLK", -1, line);
          textTokens = this.findTokensBetween(this.customData.linkData.tokenIndex, this.tokenIndex, null, line);
          object = new ui.Object_Text();
          object.text = textTokens.join("");
          object.sizeToFit = true;
          object.formatting = true;
          object.wordWrap = false;
          object.ui = new ui.Component_UIBehavior();
          object.enabled = true;
          object.addComponent(object.ui);
          object.addComponent(new gs.Component_HotspotBehavior());
          if (this.customData.linkData.styleIndex === -1) {
            ui.UIManager.addControlStyles(object, ["hyperlink"]);
          } else {
            ui.UIManager.addControlStyles(object, ["hyperlink-" + this.customData.linkData.styleIndex]);
          }
          object.setup();
          this.addCustomObject(object);
          object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.customData.linkData.cx;
          object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.customData.linkData.cy;
          return object.events.on("click", (function(_this) {
            return function(e) {
              return SceneManager.scene.interpreter.callCommonEvent(_this.customData.linkData.commonEventId, null);
            };
          })(this));
        } else {
          if (isNaN(token.value)) {
            values = token.value.split(",");
            return this.customData.linkData = {
              cx: this.currentX,
              cy: this.currentY,
              commonEventId: parseInt(values[0]) - 1,
              styleIndex: parseInt(values[1]),
              tokenIndex: this.tokenIndex
            };
          } else {
            return this.customData.linkData = {
              cx: this.currentX,
              cy: this.currentY,
              commonEventId: token.value - 1,
              tokenIndex: this.tokenIndex,
              styleIndex: -1
            };
          }
        }
        break;
      case "E":
        expression = RecordManager.characterExpressions[Math.max(token.value - 1, 0)];
        character = SceneManager.scene.currentCharacter;
        if ((expression != null) && ((character != null ? character.index : void 0) != null)) {
          duration = GameManager.defaults.character.expressionDuration;
          easing = gs.Easings.fromObject(GameManager.defaults.character.changeEasing);
          animation = GameManager.defaults.character.changeAnimation;
          object = SceneManager.scene.characters.first(function(c) {
            return c.rid === character.index;
          });
          return object != null ? object.behavior.changeExpression(expression, animation, easing, duration) : void 0;
        }
        break;
      case "SP":
        sound = RecordManager.system.sounds[token.value - 1];
        return AudioManager.playSound(sound);
      case "S":
        return this.customSpeed = token.value;
      case "W":
        this.drawImmediately = false;
        if (!GameManager.tempSettings.skip) {
          if (token.value === "A") {
            return this.waitForKey = true;
          } else {
            return this.waitCounter = Math.round(token.value / 1000 * Graphics.frameRate);
          }
        }
        break;
      case "WE":
        return this.waitAtEnd = token.value === "Y";
      case "DI":
        return this.drawImmediately = token.value === 1;
      default:
        return Component_MessageTextRenderer.__super__.processControlToken.call(this, token);
    }
  };


  /**
  * Clears/Resets the text-renderer.
  *
  * @method clear
   */

  Component_MessageTextRenderer.prototype.clear = function() {
    var j, len, ref, ref1, ref2, sprite;
    this.charIndex = 0;
    this.currentX = 0;
    this.currentY = 0;
    this.line = 0;
    this.lines = [];
    this.clearCustomObjects();
    if ((ref = this.object.bitmap) != null) {
      ref.clear();
    }
    ref1 = this.allSprites;
    for (j = 0, len = ref1.length; j < len; j++) {
      sprite = ref1[j];
      sprite.dispose();
      if ((ref2 = sprite.bitmap) != null) {
        ref2.dispose();
      }
    }
    return null;
  };


  /**
  * Clears/Disposes all sprites used to display the text-lines/parts.
  *
  * @method clearAllSprites
   */

  Component_MessageTextRenderer.prototype.clearAllSprites = function() {
    var j, len, ref, results, sprite;
    ref = this.allSprites;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      sprite = ref[j];
      sprite.dispose();
      results.push(sprite.bitmap.dispose());
    }
    return results;
  };


  /**
  * Clears/Disposes the sprites used to display the text-lines/parts of the current/last message.
  *
  * @method clearSprites
   */

  Component_MessageTextRenderer.prototype.clearSprites = function() {
    var j, len, ref, results, sprite;
    ref = this.sprites;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      sprite = ref[j];
      sprite.dispose();
      results.push(sprite.bitmap.dispose());
    }
    return results;
  };


  /**
  * Returns the spacing between lines in pixels. By default, the spacing is 4.
  *
  * @method lineSpacing
  * @return {number} The line spacing in pixels.
   */

  Component_MessageTextRenderer.prototype.lineSpacing = function() {
    return 2;
  };


  /**
  * Returns the position of the caret in pixels. The caret is like an invisible
  * cursor pointing to the x/y coordinates of the last rendered character of
  * the message. That position can be used to display a waiting- or processing-animation for example.
  *
  * @method caretPosition
  * @return {Object} An object containing the x and y coordinates of the caret-position.
   */

  Component_MessageTextRenderer.prototype.caretPosition = function() {
    return {
      x: this.currentX,
      y: this.currentY + this.currentLineHeight / 2
    };
  };


  /**
  * Adds a game object to the message which is alive until the message is
  * erased. Can be used to display animationed-icons, etc. in a message.
  *
  * @method addCustomObject
  * @param object {Object} The game object to add.
   */

  Component_MessageTextRenderer.prototype.addCustomObject = function(object) {
    object.dstRect.x = this.object.dstRect.x + this.object.origin.x + this.currentX;
    object.dstRect.y = this.object.dstRect.y + this.object.origin.y + this.currentY;
    object.zIndex = this.object.zIndex + 1;
    object.update();
    SceneManager.scene.addObject(object);
    return this.customObjects.push(object);
  };


  /**
  * Clears the list of custom game objects. All game objects are disposed and removed
  * from the scene.
  *
  * @method addCustomObject
  * @param object {Object} The game object to add.
   */

  Component_MessageTextRenderer.prototype.clearCustomObjects = function() {
    var j, len, object, ref;
    ref = this.customObjects;
    for (j = 0, len = ref.length; j < len; j++) {
      object = ref[j];
      object.dispose();
      SceneManager.scene.removeObject(object);
    }
    return this.customObjects = [];
  };


  /**
  * Creates the bitmap for a specified line-object.
  *
  * @method createBitmap
  * @private
  * @param {Object} line - A line-object.
  * @return {Bitmap} A newly created bitmap containing the line-text.
   */

  Component_MessageTextRenderer.prototype.createBitmap = function(line) {
    var bitmap, j, len, ref, size, token;
    this.font = this.object.font;
    bitmap = new Bitmap(this.object.dstRect.width, line.height);
    bitmap.font = this.font;
    this.currentX = 0;
    ref = line.content;
    for (j = 0, len = ref.length; j < len; j++) {
      token = ref[j];
      if (token.code != null) {
        size = this.measureControlToken(token, bitmap);
        this.drawControlToken(token, bitmap);
        if (size) {
          this.currentX += size.width;
        }
        this.processControlToken(token, true, line);
      } else if (token.length > 0) {
        size = this.font.measureTextPlain(token);
        bitmap.drawText(this.currentX, bitmap.height - (size.height - this.font.descent) - line.descent, size.width, bitmap.height, token, 0, 0);
        this.currentX += size.width;
      }
    }
    return bitmap;
  };


  /**
  * Creates the sprite for a specified line-object.
  *
  * @method createSprite
  * @private
  * @param {Object} line - A line-object.
  * @return {Sprite} A newly created sprite object containing the line-text as bitmap.
   */

  Component_MessageTextRenderer.prototype.createSprite = function(line) {
    var bitmap, sprite;
    bitmap = this.createBitmap(line);
    this.currentX = 0;
    this.waitCounter = 0;
    this.waitForKey = false;
    sprite = new Sprite(Graphics.viewport);
    sprite.bitmap = bitmap;
    sprite.visible = true;
    sprite.z = this.object.zIndex + 1;
    sprite.srcRect = new Rect(0, 0, 0, bitmap.height);
    return sprite;
  };


  /**
  * Creates the sprites for a specified array of line-objects.
  *
  * @method createSprites
  * @private
  * @see gs.Component_MessageTextRenderer.createSprite.
  * @param {Array} lines - An array of line-objects.
  * @return {Array} An array of sprites.
   */

  Component_MessageTextRenderer.prototype.createSprites = function(lines) {
    var i, j, len, line, result, sprite;
    this.fontSize = this.object.font.size;
    result = [];
    for (i = j = 0, len = lines.length; j < len; i = ++j) {
      line = lines[i];
      sprite = this.createSprite(line);
      result.push(sprite);
    }
    return result;
  };


  /**
  * Starts a new line.
  *
  * @method newLine
   */

  Component_MessageTextRenderer.prototype.newLine = function() {
    this.currentX = 0;
    return this.currentY += this.currentLineHeight + this.lineSpacing();
  };


  /**
  * Displays a formatted text immediately without any delays or animations. The
  * Component_TextRenderer.drawFormattedText method from the base-class cannot
  * be used here because it would render to the game object's bitmap object while
  * this method is rendering to the sprites.
  *
  * @method drawFormattedTextImmediately
  * @param {number} x - The x-coordinate of the text's position.
  * @param {number} y - The y-coordinate of the text's position.
  * @param {number} width - Deprecated. Can be null.
  * @param {number} height - Deprecated. Can be null.
  * @param {string} text - The text to draw.
  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.
   */

  Component_MessageTextRenderer.prototype.drawFormattedTextImmediately = function(x, y, width, height, text, wordWrap) {
    this.drawFormattedText(x, y, width, height, text, wordWrap);
    while (true) {
      this.nextChar();
      if (this.line >= this.maxLines) {
        this.isRunning = false;
      } else {
        this.drawNext();
      }
      if (!this.isRunning) {
        break;
      }
    }
    this.currentY += this.currentLineHeight + this.lineSpacing();
    return null;
  };


  /**
  * Starts the rendering-process for the message.
  *
  * @method drawFormattedText
  * @param {number} x - The x-coordinate of the text's position.
  * @param {number} y - The y-coordinate of the text's position.
  * @param {number} width - Deprecated. Can be null.
  * @param {number} height - Deprecated. Can be null.
  * @param {string} text - The text to draw.
  * @param {boolean} wordWrap - If wordWrap is set to true, line-breaks are automatically created.
   */

  Component_MessageTextRenderer.prototype.drawFormattedText = function(x, y, width, height, text, wordWrap) {
    var ref, ref1;
    text = text || " ";
    this.font.set(this.object.font);
    this.speed = 10 - Math.round(GameManager.settings.messageSpeed * 2.5);
    this.isRunning = true;
    this.drawImmediately = false;
    this.lineAnimationCount = this.customSpeed || this.speed;
    this.currentLineHeight = 0;
    this.isWaiting = false;
    this.waitForKey = false;
    this.charIndex = 0;
    this.token = null;
    this.tokenIndex = 0;
    this.message = text;
    this.line = 0;
    this.currentLine = this.line;
    this.lines = this.calculateLines(lcsm(this.message), wordWrap, this.currentX);
    this.sprites = this.createSprites(this.lines);
    this.allSprites = this.allSprites.concat(this.sprites);
    this.currentSprite = this.sprites[this.line];
    this.currentSprite.x = this.currentX + this.object.origin.x + this.object.dstRect.x;
    this.maxLines = this.calculateMaxLines(this.lines);
    this.token = ((ref = this.lines[this.line]) != null ? ref.content[this.tokenIndex] : void 0) || "";
    if (this.maxLines === 0) {
      if (((ref1 = this.lines[0]) != null ? ref1.content : void 0) === "") {
        return this.finish();
      } else {
        this.maxLines = 1;
        return this.drawNext();
      }
    } else {
      return this.drawNext();
    }
  };


  /**
  * Displays the character or processes the next control-token.
  *
  * @method drawNext
   */

  Component_MessageTextRenderer.prototype.drawNext = function() {
    var lineSpacing, s, size;
    if (this.token.code != null) {
      return this.object.textRenderer.processControlToken(this.token, false);
    } else if (this.token.length > 0) {
      this.char = this.token.charAt(this.charIndex);
      size = this.font.measureTextPlain(this.char);
      s = Graphics.scale;
      lineSpacing = this.lineSpacing();
      if (this.currentLine !== this.line) {
        this.currentLine = this.line;
        this.currentY += this.currentLineHeight + lineSpacing * Graphics.scale;
        this.currentLineHeight = 0;
      }
      this.currentSprite.y = this.object.origin.y + this.object.dstRect.y + this.currentY;
      this.currentSprite.visible = true;
      this.currentSprite.srcRect.width = Math.min(this.currentSprite.srcRect.width + size.width, this.currentSprite.bitmap.width);
      this.currentLineHeight = this.lines[this.line].height;
      return this.currentX = Math.min(this.lines[this.line].width, this.currentX + size.width);
    }
  };

  return Component_MessageTextRenderer;

})(gs.Component_TextRenderer);

gs.Component_MessageTextRenderer = Component_MessageTextRenderer;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_MessageTextRenderer_126.js
var Component_Animator,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Animator = (function(superClass) {
  extend(Component_Animator, superClass);


  /**
  * An animator-component allows to execute different kind of animations 
  * on a game object. The animations are using the game object's 
  * dstRect & offset-property to execute.
  *
  * @module gs
  * @class Component_Animator
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_Animator() {
    Component_Animator.__super__.constructor.apply(this, arguments);

    /**
    * Standard Callback Routine
    * @property callback
    * @type function
    * @private
     */
    this.callback = function(object, animation) {
      return animation.dispose();
    };
    this.onBlendFinish = function(object, animation, callback) {
      animation.dispose();
      return typeof callback === "function" ? callback(object) : void 0;
    };
  }


  /**
  * Updates the animator.
  *
  * @method update
   */

  Component_Animator.prototype.update = function() {
    var ref, ref1;
    Component_Animator.__super__.update.apply(this, arguments);
    if (((ref = this.object.mask) != null ? (ref1 = ref.source) != null ? ref1.videoElement : void 0 : void 0) != null) {
      return this.object.mask.source.update();
    }
  };


  /**
  * Moves the game object with a specified speed.
  *
  * @method move
  * @param {number} speedX The speed on x-axis in pixels per frame.
  * @param {number} speedY The speed on y-axis in pixels per frame.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type used for the animation.
   */

  Component_Animator.prototype.move = function(speedX, speedY, duration, easingType) {
    var animation;
    animation = new gs.Component_MoveAnimation();
    this.object.addComponent(animation);
    animation.move(speedX, speedY, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Moves the game object to a specified position.
  *
  * @method moveTo
  * @param {number} x The x-coordinate of the position.
  * @param {number} y The y-coordinate of the position.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.moveTo = function(x, y, duration, easingType) {
    var animation;
    animation = new gs.Component_MoveAnimation();
    this.object.addComponent(animation);
    animation.moveTo(x, y, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Moves the game object along a path.
  *
  * @method movePath
  * @param {Object} path The path to follow.
  * @param {gs.AnimationLoopType} loopType The loop-Type.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {Object[]} effects Optional array of effects executed during the path-movement like playing a sound.
   */

  Component_Animator.prototype.movePath = function(path, loopType, duration, easingType, effects) {
    var animation, c;
    c = this.object.findComponent("Component_PathAnimation");
    if (c != null) {
      c.loopType = loopType;
    } else {
      animation = new gs.Component_PathAnimation();
      this.object.addComponent(animation);
      animation.start(path, loopType, duration, easingType, effects, this.callback);
    }
    return animation;
  };


  /**
  * Scrolls the game object with a specified speed.
  *
  * @method scroll
  * @param {number} speedX The speed on x-axis in pixels per frame.
  * @param {number} speedY The speed on y-axis in pixels per frame.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type used for the animation.
   */

  Component_Animator.prototype.scroll = function(speedX, speedY, duration, easingType) {
    var animation;
    animation = new gs.Component_MoveAnimation();
    this.object.addComponent(animation);
    animation.scroll(speedX, speedY, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Scrolls the game object to a specified position.
  *
  * @method scrollTo
  * @param {number} x The x-coordinate of the position.
  * @param {number} y The y-coordinate of the position.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.scrollTo = function(x, y, duration, easingType) {
    var animation;
    animation = new gs.Component_MoveAnimation();
    this.object.addComponent(animation);
    animation.scrollTo(x, y, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Scrolls the game object along a path.
  *
  * @method scrollPath
  * @param {Object} path The path to follow.
  * @param {gs.AnimationLoopType} loopType The loop-Type.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.scrollPath = function(path, loopType, duration, easingType) {
    var animation;
    animation = new gs.Component_PathAnimation();
    this.object.addComponent(animation);
    animation.scroll(path, loopType, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Zooms a game object to specified size.
  *
  * @method zoomTo
  * @param {number} x The x-axis zoom-factor.
  * @param {number} y The y-axis zoom-factor.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.zoomTo = function(x, y, duration, easingType) {
    var animation, c;
    c = this.object.findComponent("Component_ZoomAnimation");
    if (c != null) {
      this.object.removeComponent(c);
    }
    animation = new gs.Component_ZoomAnimation();
    this.object.addComponent(animation);
    animation.start(x, y, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Blends a game object to specified opacity.
  *
  * @method blendTo
  * @param {number} opacity The target opacity.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_Animator.prototype.blendTo = function(opacity, duration, easingType, callback) {
    var animation;
    animation = new gs.Component_BlendAnimation();
    this.object.addComponent(animation);
    animation.start(opacity, duration, easingType, gs.CallBack("onBlendFinish", this, callback));
    return animation;
  };


  /**
  * Colors a game object to a specified target color.
  *
  * @method colorTo
  * @param {Color} color The target color.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.colorTo = function(color, duration, easingType) {
    var animation;
    animation = new gs.Component_ColorAnimation();
    this.object.addComponent(animation);
    animation.start(color, duration, easingType, this.callback);
    return animation;
  };


  /**
  * An image animation runs from left to right using the game object's
  * image-property.
  *
  * @method changeImages
  * @param {Array} images An array of image names.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.changeImages = function(images, duration, easingType) {
    var animation;
    animation = new gs.Component_ImageAnimation();
    this.object.addComponent(animation);
    return animation.start(images, duration, easingType, this.callback);
  };


  /**
  * A frame animation which modifies the game object's srcRect property
  * a play an animation.
  *
  * @method changeFrames
  * @param {gs.Rect[]} frames An array of source rectangles (frames).
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */


  /**
  * A frame animation which modifies the game object's srcRect property
  * a play an animation.
  *
  * @method playAnimation
  * @param {gs.Rect[]} frames An array of source rectangles (frames).
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.playAnimation = function(animationRecord) {
    var animation;
    animation = new gs.Component_FrameAnimation(animationRecord);
    this.object.addComponent(animation);
    animation.start(this.callback);
    return animation;
  };


  /**
  * Changes a field of the game object to a specified value.
  *
  * @method change
  * @param {number} Value The target value.
  * @param {string} field The name of the field/property.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.change = function(value, field, duration, easingType) {
    var animation;
    animation = new gs.Component_FieldAnimation();
    this.object.addComponent(animation);
    animation.start(value, field, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Shakes the game object horizontally using the game object's offset-property.
  *
  * @method shake
  * @param {gs.Range} range The horizontal shake-range.
  * @param {number} speed The shake speed.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.shake = function(range, speed, duration, easing) {
    var animation;
    animation = new gs.Component_ShakeAnimation();
    this.object.addComponent(animation);
    animation.start(range, speed, duration, easing, this.callback);
    return animation;
  };


  /**
  * Tints the game object to a specified tone.
  *
  * @method tintTo
  * @param {Tone} tone The target tone.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.tintTo = function(tone, duration, easingType) {
    var animation;
    animation = new gs.Component_TintAnimation();
    this.object.addComponent(animation);
    animation.start(tone, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Rotates the game object around its anchor-point.
  *
  * @method rotate
  * @param {gs.RotationDirection} direction The rotation-direction.
  * @param {number} speed The rotation speed in degrees per frame.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
   */

  Component_Animator.prototype.rotate = function(direction, speed, duration, easingType) {
    var animation;
    animation = new gs.Component_RotateAnimation();
    this.object.addComponent(animation);
    animation.start(direction, speed, duration, easingType, this.callback);
    return animation;
  };


  /**
  * Lets a game object appear on screen using a masking-effect.
  *
  * @method maskIn
  * @param {gs.Mask} mask The mask used for the animation.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.maskIn = function(mask, duration, easing, callback) {
    var animation;
    animation = new gs.Component_MaskAnimation();
    this.object.addComponent(animation);
    animation.maskIn(mask, duration, easing, function(object, animation) {
      animation.dispose();
      return typeof callback === "function" ? callback(object) : void 0;
    });
    return animation;
  };


  /**
  * Description follows...
  *
  * @method maskTo
  * @param {gs.Mask} mask The mask used for the animation.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.maskTo = function(mask, duration, easing, callback) {
    var animation;
    animation = new gs.Component_MaskAnimation();
    this.object.addComponent(animation);
    animation.maskTo(mask, duration, easing, function(object, animation) {
      animation.dispose();
      return typeof callback === "function" ? callback(object) : void 0;
    });
    return animation;
  };


  /**
  * Lets a game object disappear from screen using a masking-effect.
  *
  * @method maskOut
  * @param {gs.Mask} mask The mask used for the animation.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.maskOut = function(mask, duration, easing, callback) {
    var animation;
    animation = new gs.Component_MaskAnimation();
    this.object.addComponent(animation);
    animation.maskOut(mask, duration, easing, function(object, animation) {
      animation.dispose();
      return typeof callback === "function" ? callback(object) : void 0;
    });
    return animation;
  };


  /**
  * Lets a game object appear on screen from left, top, right or bottom using 
  * a move-animation
  *
  * @method moveIn
  * @param {number} x The x-coordinate of the target-position.
  * @param {number} y The y-coordinate of the target-position.
  * @param {number} type The movement-direction from where the game object should move-in.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.moveIn = function(x, y, type, duration, easing, callback) {
    var animation;
    animation = new gs.Component_MoveAnimation();
    this.object.addComponent(animation);
    animation.moveIn(x, y, type, duration, easing, function(object, animation) {
      animation.dispose();
      return typeof callback === "function" ? callback(object) : void 0;
    });
    return animation;
  };


  /**
  * Lets a game object disappear from screen to the left, top, right or bottom using 
  * a move-animation
  *
  * @method moveOut
  * @param {number} type The movement-direction in which the game object should move-out.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.moveOut = function(type, duration, easing, callback) {
    var animation;
    animation = new gs.Component_MoveAnimation();
    this.object.addComponent(animation);
    animation.moveOut(type, duration, easing, function(object, animation) {
      animation.dispose();
      return typeof callback === "function" ? callback(object) : void 0;
    });
    return animation;
  };


  /**
  * Lets a game object appear on screen using blending.
  *
  * @method show
  * @param {number} duration The duration in frames.
  * @param {Object} easing The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.show = function(duration, easing, callback) {
    var ref;
    this.object.opacity = 0;
    if ((ref = this.object.visual) != null) {
      ref.update();
    }
    return this.blendTo(255, duration, easing, callback);
  };


  /**
  * Lets a game object disappear from screen using blending.
  *
  * @method hide
  * @param {number} duration The duration in frames.
  * @param {Object} easing The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.hide = function(duration, easing, callback) {
    this.object.opacity = 255;
    return this.blendTo(0, duration, easing, callback);
  };


  /**
  * Changes visible-property to true. This method is deprecated.
  * 
  * @method open
  * @deprecated
   */

  Component_Animator.prototype.open = function() {
    return this.object.visible = true;
  };


  /**
  * Changes visible-property to false. This method is deprecated.
  * 
  * @method close
  * @deprecated
   */

  Component_Animator.prototype.close = function() {
    return this.object.visible = false;
  };


  /**
  * Flashes the game object.
  *
  * @method flash
  * @param {Color} color The flash-color.
  * @param {number} duration The duration in frames.
   */

  Component_Animator.prototype.flash = function(color, duration) {
    this.object.color = color;
    color = new Color(color);
    color.alpha = 0;
    return this.colorTo(color, duration, gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN]);
  };


  /**
  * Lets a game object appear on screen using a specified animation.
  *
  * @method appear
  * @param {number} x The x-coordinate of the target-position.
  * @param {number} y The y-coordinate of the target-position.
  * @param {gs.AppearAnimationInfo} animation The animation info-object.
  * @param {Object} easing The easing-type.
  * @param {number} duration The duration in frames.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.appear = function(x, y, animation, easing, duration, callback) {
    easing = easing || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    this.object.visible = true;
    if (animation.type === gs.AnimationTypes.MOVEMENT) {
      return this.moveIn(x, y, animation.movement, duration, easing, callback);
    } else if (animation.type === gs.AnimationTypes.MASKING) {
      return this.maskIn(animation.mask, duration, easing, callback);
    } else {
      return this.show(duration, easing, callback);
    }
  };


  /**
  * Lets a game object disappear from screen using a specified animation.
  *
  * @method disappear
  * @param {gs.AppearAnimationInfo} animation The animation info-object.
  * @param {Object} easing The easing-type.
  * @param {number} duration The duration in frames.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_Animator.prototype.disappear = function(animation, easing, duration, callback) {
    this.object.visible = true;
    if (animation.type === gs.AnimationTypes.MOVEMENT) {
      return this.moveOut(animation.movement, duration, easing, callback);
    } else if (animation.type === gs.AnimationTypes.MASKING) {
      return this.maskOut(animation.mask, duration, easing, callback);
    } else {
      return this.hide(duration, easing, callback);
    }
  };

  return Component_Animator;

})(gs.Component);

gs.Animator = Component_Animator;

gs.Component_Animator = Component_Animator;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Animator_136.js
var Component_Live2D,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Live2D = (function(superClass) {
  extend(Component_Live2D, superClass);


  /**
  * A Live2D component which allows a game-object to become a animated
  * Live2D character.
  *
  * @module vn
  * @class Component_Live2D
  * @extends gs.Component
  * @memberof vn
  * @constructor
   */

  function Component_Live2D() {
    Component_Live2D.__super__.constructor.apply(this, arguments);

    /**
    * The Live2D graphics object.
    * @property l2dObject
    * @type gs.Live2DObject
    * @readOnly
     */
    this.l2dObject = new gs.Live2DObject();

    /**
    * The character's Live2D motion. Set name-property to an empty string
    * to disable motion and use a generated default idle-motion.
    * @property motion
    * @type gs.Live2DMotion
    * @default { name: "", loop: yes }
     */
    this.motion = {
      name: "",
      loop: true

      /**
      * The character's Live2D motion-group. Can be null
      * @property motionGroup
      * @type gs.Live2DMotionGroup
      * @default null
       */
    };
    this.motionGroup = null;

    /**
    * The character's Live2D expression. Set name-property to an empty string
    * to use default expression.
    * @property expression
    * @type gs.Live2DExpression
    * @default { name: "" }
     */
    this.expression = {
      name: ""

      /**
      * @property talkingDuration
      * @type number
      * @protected
       */
    };
    this.talkingDuration = 1;

    /**
    * @property talkingStep
    * @type number
    * @protected
     */
    this.talkingStep = 0;

    /**
    * @property talkingStep
    * @type number[]
    * @protected
     */
    this.talkingSteps = [0, 0.5, 1];
  }


  /**
  * Disposes the component and Live2D object.
  *
  * @method dispose
   */

  Component_Live2D.prototype.dispose = function() {
    return this.l2dObject.dispose();
  };


  /**
  * Updates the character's Live2D motion.
  *
  * @method updateMotion
   */

  Component_Live2D.prototype.updateMotion = function() {
    if (this.motion.name !== this.object.motion.name) {
      this.motion = this.object.motion;
      this.l2dObject.playMotion(this.motion.name, this.motion.fadeInTime);
      return this.l2dObject.loopMotion = this.motion.loop;
    }
  };


  /**
  * Updates the character's Live2D motion-group.
  *
  * @method updateMotionGroup
   */

  Component_Live2D.prototype.updateMotionGroup = function() {
    if (this.motionGroup !== this.object.motionGroup) {
      this.motionGroup = this.object.motionGroup;
      if (this.motionGroup != null) {
        this.l2dObject.playMotionGroup(this.motionGroup.name, this.motionGroup.playType);
        return this.l2dObject.loopMotion = this.motionGroup.loop;
      }
    }
  };


  /**
  * Updates the character's Live2D expression.
  *
  * @method updateExpression
   */

  Component_Live2D.prototype.updateExpression = function() {
    if (this.expression.name !== this.object.expression.name) {
      this.expression = this.object.expression;
      return this.l2dObject.setExpression(this.expression.name, this.expression.fadeInTime);
    }
  };


  /**
  * Updates the Live2D object properties from the game object properties.
  *
  * @method updateProperties
   */

  Component_Live2D.prototype.updateProperties = function() {
    this.l2dObject.model = this.object.model;
    this.object.dstRect.width = this.l2dObject.width;
    this.object.dstRect.height = this.l2dObject.height;
    this.l2dObject.x = this.object.dstRect.x + this.object.offset.x;
    this.l2dObject.y = this.object.dstRect.y + this.object.offset.y;
    this.l2dObject.z = this.object.zIndex;
    this.l2dObject.visible = this.object.visible;
    this.l2dObject.opacity = this.object.opacity;
    this.l2dObject.zoomX = this.object.zoom.x;
    this.l2dObject.zoomY = this.object.zoom.y;
    this.l2dObject.anchor.x = this.object.anchor.x;
    this.l2dObject.anchor.y = this.object.anchor.y;
    return this.l2dObject.angle = this.object.angle;
  };


  /**
  * Updates the optional Live2D object properties from the game object properties.
  *
  * @method updateOptionalProperties
   */

  Component_Live2D.prototype.updateOptionalProperties = function() {
    if (this.object.viewport != null) {
      return this.l2dObject.viewport = this.object.viewport;
    }
  };


  /**
  * Updates the Live2D object and its talking-animation.
  *
  * @method update
   */

  Component_Live2D.prototype.update = function() {
    if ((this.object.model != null) && !this.object.model.initialized) {
      this.object.model.initialize();
    }
    this.updateProperties();
    this.updateMotion();
    this.updateMotionGroup();
    this.updateExpression();
    this.updateOptionalProperties();
    this.l2dObject.update();
    return this.updateTalking();
  };


  /**
  * Updates the Live2D character's talking-animation.
  *
  * @method update
   */

  Component_Live2D.prototype.updateTalking = function() {
    var step;
    step = 0;
    if (this.object.talking) {
      this.l2dObject.talking = true;
      if (AudioManager.voice != null) {
        return this.l2dObject.talkingVolume = (AudioManager.voice.averageVolume || 0) / 100;
      } else {
        this.talkingDuration--;
        if (this.talkingDuration <= 0) {
          while (this.talkingStep === step) {
            step = Math.round(Math.random() * 2);
          }
          this.talkingDuration = 5;
          this.talkingStep = step;
          return this.l2dObject.talkingVolume = this.talkingSteps[step];
        }
      }
    } else {
      return this.l2dObject.talking = false;
    }
  };

  return Component_Live2D;

})(gs.Component);

vn.Component_Live2D = Component_Live2D;

gs.Component_Live2D = Component_Live2D;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Live2D_140.js
var Component_CommonEventBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_CommonEventBehavior = (function(superClass) {
  extend(Component_CommonEventBehavior, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_CommonEventBehavior.prototype.onDataBundleRestore = function(data, context) {};


  /**
  * A component which allows a game object to execute common-events.
  *
  * @module gs
  * @class Component_CommonEventBehavior
  * @extends gs.Component
  * @memberof gs
   */

  function Component_CommonEventBehavior() {
    Component_CommonEventBehavior.__super__.constructor.call(this);

    /**
    * @property readyToStart
    * @type boolean
    * @private
     */
    this.readyToStart = false;

    /**
    * @property initialized
    * @type boolean
    * @private
     */
    this.initialized = false;
  }


  /**
  * Serializes the component into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Component_CommonEventBehavior.prototype.toDataBundle = function() {
    return {
      initialized: this.initialized,
      readyToStart: this.readyToStart
    };
  };


  /**
  * Restores the component from a data-bundle
  *
  * @method restore
  * @param {Object} bundle- The data-bundle.
   */

  Component_CommonEventBehavior.prototype.restore = function(data) {
    this.setup();
    this.readyToStart = data.readyToStart;
    return this.initialized = data.initialized;
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_CommonEventBehavior.prototype.setupEventHandlers = function() {
    if (!this.object.interpreter) {
      return;
    }
    if (this.object.record.startCondition === 1) {
      return this.object.interpreter.onFinish = (function(_this) {
        return function() {
          var ref;
          if (!_this.object.record.parallel) {
            return (ref = _this.object.events) != null ? ref.emit("finish", _this) : void 0;
          }
        };
      })(this);
    } else {
      if (this.object.record.parallel) {
        return this.object.interpreter.onFinish = (function(_this) {
          return function(sender) {
            return _this.object.removeComponent(sender);
          };
        })(this);
      } else {
        return this.object.interpreter.onFinish = (function(_this) {
          return function(sender) {
            return _this.object.events.emit("finish", _this);
          };
        })(this);
      }
    }
  };


  /**
  * Initializes the common-event.
  *
  * @method setup
   */

  Component_CommonEventBehavior.prototype.setup = function() {
    GameManager.variableStore.setupLocalVariables(this.object.record);
    this.object.record.parameters = this.object.record.parameters != null ? this.object.record.parameters : [];
    this.object.record.startCondition = this.object.record.startCondition != null ? this.object.record.startCondition : 0;
    this.object.record.parallel = this.object.record.parallel != null ? this.object.record.parallel : false;
    this.object.record.conditionSwitch = this.object.record.conditionSwitch != null ? this.object.record.conditionSwitch : null;
    this.object.record.conditionEnabled = this.object.record.conditionEnabled;
    if (this.object.record.startCondition === 1) {
      this.object.interpreter = new gs.Component_CommandInterpreter();
      this.object.interpreter.onFinish = (function(_this) {
        return function() {
          var ref;
          if (!_this.object.record.parallel) {
            return (ref = _this.object.events) != null ? ref.emit("finish", _this) : void 0;
          }
        };
      })(this);
      this.object.interpreter.context.set(this.object.record.id, this.object.record);
      this.object.addComponent(this.object.interpreter);
    }
    return this.initialized = true;
  };


  /**
  * Starts the common-event interpreter with the specified parameters.
  * 
  * @method start
  * @param {Object} parameters The common-event's parameters which can be configured in database.
   */

  Component_CommonEventBehavior.prototype.start = function(parameters) {
    var ref, ref1;
    this.startParameters = parameters;
    if ((this.object.interpreter != null) && !this.object.interpreter.isRunning) {
      this.object.commands = this.object.record.commands;
      this.readyToStart = true;
      if ((ref = this.object.events) != null) {
        ref.emit("start", this);
      }
    }
    if (this.object.record.startCondition === 0 && this.object.record.parallel) {
      return (ref1 = this.object.events) != null ? ref1.emit("finish", this) : void 0;
    }
  };


  /**
  * Initializes variable-store with the start-up parameters configured for the
  * common-event in Database.
  *
  * @method setupParameters
   */

  Component_CommonEventBehavior.prototype.setupParameters = function(parameters) {
    var i, j, parameter, ref, results, value;
    if ((parameters != null) && (parameters.values != null)) {
      results = [];
      for (i = j = 0, ref = parameters.values.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        value = parameters.values[i];
        parameter = this.object.record.parameters[i];
        if ((parameter != null) && (value != null)) {
          switch (parameter.type) {
            case 1:
              results.push(GameManager.variableStore.setNumberValueTo(parameter.numberVariable, value));
              break;
            case 2:
              results.push(GameManager.variableStore.setBooleanValueTo(parameter.booleanVariable, value));
              break;
            case 3:
              results.push(GameManager.variableStore.setStringValueTo(parameter.stringVariable, value));
              break;
            default:
              results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };


  /**
  * Calls the common-event with the specified parameters.
  *
  * @method call
  * @param {Object} parameters The common-event's parameters which can be configured in database.
   */

  Component_CommonEventBehavior.prototype.call = function(parameters) {
    var interpreter;
    interpreter = this.object.interpreter || new gs.Component_CommandInterpreter();
    this.object.commands = this.object.record.commands;
    interpreter.repeat = false;
    interpreter.context.set(this.object.record.id, this.object.record);
    interpreter.object = this.object;
    this.object.interpreter = interpreter;
    if (this.object.record.parallel) {
      interpreter.onFinish = (function(_this) {
        return function(sender) {
          return _this.object.removeComponent(sender);
        };
      })(this);
      interpreter.start(parameters);
      this.object.addComponent(interpreter);
      return null;
    } else {
      interpreter.onFinish = (function(_this) {
        return function(sender) {
          return _this.object.events.emit("finish", _this);
        };
      })(this);
      return interpreter;
    }
  };


  /**
  * Stops the common-event interpreter.
  *
  * @method stop
   */

  Component_CommonEventBehavior.prototype.stop = function() {
    var ref;
    if (this.object.interpreter != null) {
      this.object.interpreter.stop();
      return (ref = this.object.events) != null ? ref.emit("finish", this) : void 0;
    }
  };


  /**
  * Updates the common-event interpreter.
  *
  * @method update
   */

  Component_CommonEventBehavior.prototype.update = function() {
    if (!this.initialized) {
      this.setup();
    }
    if ((this.object.interpreter != null) && this.readyToStart) {
      this.readyToStart = false;
      this.setupParameters(this.startParameters);
      this.object.interpreter.start();
    }
    if ((this.object.interpreter != null) && this.object.record.startCondition === 1 && !this.object.interpreter.isRunning) {
      if (this.object.record.conditionEnabled) {
        if (GameManager.variableStore.booleanValueOf(this.object.record.conditionSwitch)) {
          return this.start();
        }
      } else {
        return this.start();
      }
    }
  };


  /**
  * Not implemented yet.
  *
  * @method erase
   */

  Component_CommonEventBehavior.prototype.erase = function() {};

  return Component_CommonEventBehavior;

})(gs.Component);

gs.Component_CommonEventBehavior = Component_CommonEventBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_CommonEventBehavior_145.js
var Component_EventEmitter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_EventEmitter = (function(superClass) {
  extend(Component_EventEmitter, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_EventEmitter.prototype.onDataBundleRestore = function(data, context) {
    var handler, handlers, i, j, k, l, list, ref;
    for (k in this.handlers) {
      list = this.handlers[k];
      for (i = l = 0, ref = list.length; 0 <= ref ? l < ref : l > ref; i = 0 <= ref ? ++l : --l) {
        handlers = list[i];
        j = 0;
        while (j < handlers.length) {
          handler = handlers[j];
          if (!handler.handler.$vnm_cb) {
            handlers.splice(j, 1);
          } else {
            j++;
          }
        }
      }
    }
    return null;
  };


  /**
  * A component which allow a game object to fire events and manage a list
  * of observers.
  *
  * @module gs
  * @class Component_EventEmitter
  * @extends gs.Component
  * @memberof gs
   */

  function Component_EventEmitter() {
    Component_EventEmitter.__super__.constructor.apply(this, arguments);

    /**
    * List of registered observers.
    *
    * @property handlers
    * @type Object
    * @private
     */
    this.handlers = {};

    /**
    * @property defaultData
    * @type Object
    * @private
     */
    this.defaultData = {};

    /**
    * @property chainInfo
    * @type Object
    * @private
     */
    this.chainInfo = {};

    /**
    * @property needsSort
    * @type boolean
    * @private
     */
    this.needsSort = {};

    /**
    * @property markedForRemove
    * @type Object[]
    * @private
     */
    this.markedForRemove = [];

    /**
    * @property isEmitting
    * @type number
    * @private
     */
    this.isEmitting = 0;
  }


  /**
  * Adds a new observer/listener for a specified event.
  *
  * @method on
  * @param {string} eventName - The event name.
  * @param {function} handler - The handler-function called when the event is fired.
  * @param {Object} [data={}] - An optional info-object passed to the handler-function.
  * @param {Object} [owner=null] - An optional owner-object associated with the observer/listener.
  * @param {number} priority - An optional priority level. An observer/listener with a higher level will receive the event before observers/listeners with a lower level.
  * @return {gs.EventObserver} - The added observer-object.
   */

  Component_EventEmitter.prototype.on = function(eventName, handler, data, owner, priority) {
    var handlerObject;
    priority = priority || 0;
    this.needsSort[eventName] = true;
    if (this.handlers[eventName] == null) {
      this.handlers[eventName] = [];
    }
    if (!this.handlers[eventName][priority]) {
      this.handlers[eventName][priority] = [];
    }
    handlerObject = {
      handler: handler,
      data: data,
      owner: owner,
      eventName: eventName,
      priority: priority
    };
    this.handlers[eventName][priority].push(handlerObject);
    return handlerObject;
  };


  /**
  * Removes an observer/listener from a specified event. If handler parameter
  * is null, all observers for the specified event are removed.
  *
  * @method off
  * @param {string} eventName - The event name.
  * @param {gs.EventObserver} [handler=null] - The observer-object to remove. 
  * If null, all observers for the specified event are removed.
   */

  Component_EventEmitter.prototype.off = function(eventName, handler) {
    var ref, ref1;
    if (this.isEmitting > 0 && handler) {
      return this.markedForRemove.push(handler);
    } else if (handler != null) {
      return (ref = this.handlers[eventName]) != null ? (ref1 = ref[handler.priority]) != null ? ref1.remove(handler) : void 0 : void 0;
    } else {
      return this.handlers[eventName] = [];
    }
  };


  /**
  * Removes all observers/listeners from an event which are belonging to the specified
  * owner.
  *
  * @method offByOwner
  * @param {string} eventName - The event name.
  * @param {Object} owner - The owner.
  * @return {number} Count of removed observers/listeners.
   */

  Component_EventEmitter.prototype.offByOwner = function(eventName, owner) {
    var handler, handlerList, handlers, l, len, len1, m, ref, ref1, results, results1;
    if (this.handlers[eventName]) {
      if (this.isEmitting > 0) {
        ref = this.handlers[eventName];
        results = [];
        for (l = 0, len = ref.length; l < len; l++) {
          handlerList = ref[l];
          handlers = handlerList != null ? handlerList.where(function(x) {
            return x.owner === owner;
          }) : void 0;
          results.push((function() {
            var len1, m, results1;
            results1 = [];
            for (m = 0, len1 = handlers.length; m < len1; m++) {
              handler = handlers[m];
              results1.push(this.markedForRemove.push(handler));
            }
            return results1;
          }).call(this));
        }
        return results;
      } else {
        ref1 = this.handlers[eventName];
        results1 = [];
        for (m = 0, len1 = ref1.length; m < len1; m++) {
          handlerList = ref1[m];
          results1.push(handlerList.removeAll(function(x) {
            return x.owner === owner;
          }));
        }
        return results1;
      }
    }
  };


  /**
  * Emits the specified event. All observers/listeners registered for the
  * specified event are informed.
  *
  * @method emit
  * @param {string} eventName - The name of the event to fire.
  * @param {Object} [sender=null] - The sender of the event.
  * @param {Object} [data={}] - An optional object passed to each handler-function.
   */

  Component_EventEmitter.prototype.emit = function(eventName, sender, data) {
    var count, handler, handlerList, handlerLists, i, l, len, len1, m, n, ref;
    handlerLists = this.handlers[eventName];
    data = data != null ? data : this.defaultData;
    if (handlerLists && this.needsSort[eventName]) {
      this.needsSort[eventName] = false;
      for (l = 0, len = handlerLists.length; l < len; l++) {
        handlerList = handlerLists[l];
        handlerList.sort(function(a, b) {
          if (a.owner && b.owner) {
            if (a.owner.rIndex > b.owner.rIndex) {
              return -1;
            } else if (a.owner.rIndex < b.owner.rIndex) {
              return 1;
            } else {
              return 0;
            }
          } else {
            return -1;
          }
        });
      }
    }
    if (handlerLists != null) {
      for (m = handlerLists.length - 1; m >= 0; m += -1) {
        handlerList = handlerLists[m];
        if (!handlerList) {
          continue;
        }
        i = 0;
        count = handlerList.length;
        this.isEmitting++;
        while (i < count) {
          handler = handlerList[i];
          data.handler = handler;
          data.sender = sender;
          data.data = handler.data;
          if (!handler.owner || (handler.owner.visible == null) || handler.owner.visible) {
            handler.handler(data);
          }
          if (data.breakChain) {
            data.breakChain = false;
            break;
          }
          i++;
        }
        this.isEmitting--;
      }
      if (this.markedForRemove.length > 0) {
        ref = this.markedForRemove;
        for (n = 0, len1 = ref.length; n < len1; n++) {
          handler = ref[n];
          this.handlers[handler.eventName][handler.priority].remove(handler);
        }
        this.markedForRemove = [];
      }
    }
    return null;
  };


  /**
  * Checks if an event-handler with a specified owner exists for the
  * given event.
  *
  * @method checkForOwner
  * @param {string} eventName - The event name.
  * @param {function} owner - The owner to search for.
  * @return {boolean} If <b>true</b>, an event-handler with the specified owner
  * exists for the given event. Otherwise <b>false</b>.
   */

  Component_EventEmitter.prototype.checkForOwner = function(eventName, owner) {
    var handler, l, len, ref, result;
    result = false;
    ref = this.handlers[eventName];
    for (l = 0, len = ref.length; l < len; l++) {
      handler = ref[l];
      if (handler.owner === owner) {
        result = true;
        break;
      }
    }
    return result;
  };


  /**
  * Checks if an event-handler with a specified handler-function exists for the
  * given event.
  *
  * @method checkForHandlerFunction
  * @param {string} eventName - The event name.
  * @param {function} handlerFunction - The handler-function to search for.
  * @return {boolean} If true, an observer witht he specified handler-function
  * exists for the given event. Otherwise false.
   */

  Component_EventEmitter.prototype.checkForHandlerFunction = function(eventName, handlerFunction) {
    var handler, l, len, ref, result;
    result = false;
    if (handlerFunction != null) {
      ref = this.handlers[eventName];
      for (l = 0, len = ref.length; l < len; l++) {
        handler = ref[l];
        if (handler.handler === handlerFunction) {
          result = true;
          break;
        }
      }
    }
    return result;
  };


  /**
  * Not implemented yet.
  * @method update
   */

  Component_EventEmitter.prototype.update = function() {
    return this.object.active = this.object.active && (!this.object.parent || this.object.parent.active);
  };

  return Component_EventEmitter;

})(gs.Component);

gs.Component_EventEmitter = Component_EventEmitter;

gs.EventEmitter = Component_EventEmitter;

gs.GlobalEventManager = new Component_EventEmitter();

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_EventEmitter_151.js
var Component_CharacterBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_CharacterBehavior = (function(superClass) {
  extend(Component_CharacterBehavior, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_CharacterBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A behavior-component which handles the character-specific behavior like
  * talking and idle.
  *
  * @module vn
  * @class Component_CharacterBehavior
  * @extends gs.Component
  * @memberof vn
  * @constructor
   */

  function Component_CharacterBehavior() {
    Component_CharacterBehavior.__super__.constructor.apply(this, arguments);

    /**
    * @property imageIndex
    * @type number
    * @private
     */
    this.imageIndex = 0;

    /**
    * @property imageDuration
    * @type number
    * @private
     */
    this.imageDuration = 30;

    /**
    * @property idleTime
    * @type number
    * @private
     */
    this.idleTime = 120 + 120 * Math.random();

    /**
    * Indicates if the character is currently talking.
    * @property talking
    * @type boolean
     */
    this.talking = false;

    /**
    * @property initialized
    * @type boolean
    * @private
     */
    this.initialized = false;

    /**
    * Temporary game settings used by this character.
    * @property imageIndex
    * @type number
     */
    this.tempSettings = GameManager.tempSettings;
  }


  /**
  * Adds event-handlers
  *
  * @method setupEventHandlers
   */

  Component_CharacterBehavior.prototype.setupEventHandlers = function() {
    gs.GlobalEventManager.on("talkingStarted", (function(_this) {
      return function(e) {
        var ref;
        if (((ref = e.character) != null ? ref.index : void 0) === _this.object.rid) {
          _this.object.talking = true;
          return _this.imageIndex = 0;
        }
      };
    })(this));
    return gs.GlobalEventManager.on("talkingEnded", (function(_this) {
      return function(e) {
        var ref;
        if (((ref = e.character) != null ? ref.index : void 0) === _this.object.rid) {
          _this.object.talking = false;
          return _this.imageIndex = 0;
        }
      };
    })(this));
  };


  /**
  * Initializes the component. Adds event-handlers.
  *
  * @method setup
   */

  Component_CharacterBehavior.prototype.setup = function() {
    this.initialized = true;
    return this.setupEventHandlers();
  };


  /**
  * Changes the characters expression using blending. If the duration is set
  * to 0 the expression change is executed immediately without animation.
  *
  * @method changeExpression
  * @param {vn.CharacterExpression} expression - The character expression database-record.
  * @param {number} duration - The animation-duration in frames. Pass 0 to skip animation.
  * @param {function} [callback] An optional callback-function called when the change is finished.
   */

  Component_CharacterBehavior.prototype.changeExpression = function(expression, animation, easing, duration, callback) {
    var picture, prevExpression;
    prevExpression = this.object.expression;
    this.object.expression = expression;
    if ((prevExpression != null) && (this.object.expression != null) && prevExpression !== this.object.expression) {
      this.imageIndex = 0;
      picture = new gs.Object_Picture();
      picture.imageFolder = "Graphics/Characters";
      picture.image = prevExpression.idle[0].resource.name;
      picture.update();
      picture.dstRect.x = this.object.dstRect.x + Math.round((this.object.dstRect.width - picture.dstRect.width) / 2);
      picture.dstRect.y = this.object.dstRect.y + Math.round((this.object.dstRect.height - picture.dstRect.height) / 2);
      picture.zIndex = this.object.zIndex - 1;
      picture.update();
      this.object.parent.addObject(picture);
      switch (animation.fading) {
        case 0:
          this.object.animator.appear(this.object.dstRect.x, this.object.dstRect.y, animation, easing, duration, function() {
            picture.dispose();
            return typeof callback === "function" ? callback() : void 0;
          });
          return this.object.update();
        case 1:
          picture.animator.disappear(animation, easing, duration, function(object) {
            return object.dispose();
          });
          picture.update();
          this.object.animator.appear(this.object.dstRect.x, this.object.dstRect.y, animation, easing, duration, function(object) {
            return typeof callback === "function" ? callback() : void 0;
          });
          return this.object.update();
      }
    } else {
      return typeof callback === "function" ? callback() : void 0;
    }
  };


  /**
  * Lets the character start talking.
  *
  * @method startTalking
   */

  Component_CharacterBehavior.prototype.startTalking = function() {
    return this.object.talking = true;
  };


  /**
  * Lets the character stop with talking.
  *
  * @method stopTalking
   */

  Component_CharacterBehavior.prototype.stopTalking = function() {
    return this.object.talking = false;
  };


  /**
  * Updates character's talking-animation.
  *
  * @method updateTalking
  * @protected
   */

  Component_CharacterBehavior.prototype.updateTalking = function() {
    var imageIndex, ref, ref1, speed;
    if (this.tempSettings.skip && ((ref = this.object.expression.talking) != null ? ref.length : void 0) > 0) {
      this.object.talking = false;
      this.imageIndex = 0;
      return this.object.image = this.object.expression.talking[this.imageIndex].resource.name;
    } else if (this.object.expression != null) {
      if (((ref1 = this.object.expression.talking) != null ? ref1.length : void 0) > 0) {
        this.imageDuration--;
        if (this.imageDuration <= 0) {
          imageIndex = this.imageIndex;
          while (imageIndex === this.imageIndex) {
            this.imageIndex = Math.round(Math.random() * (this.object.expression.talking.length - 1));
          }
          speed = this.object.expression.talkingSpeed / 100 * 5;
          this.imageDuration = speed + Math.round(speed * Math.random());
        }
        return this.object.image = this.object.expression.talking[this.imageIndex].resource.name;
      } else {
        return this.updateIdle();
      }
    }
  };


  /**
  * Updates character's idle-animation.
  *
  * @method updateIdle
  * @protected
   */

  Component_CharacterBehavior.prototype.updateIdle = function() {
    var ref;
    if ((this.object.expression != null) && ((ref = this.object.expression.idle) != null ? ref.length : void 0) > 0) {
      if (this.imageDuration <= 0) {
        this.idleTime--;
        if (this.idleTime <= 0) {
          this.idleTime = this.object.expression.idleTime.start + (this.object.expression.idleTime.end - this.object.expression.idleTime.start) * Math.random();
          this.imageDuration = this.object.expression.idleSpeed / 100 * 5;
        }
      }
      if (this.imageDuration > 0) {
        this.imageDuration--;
        if (this.imageDuration <= 0) {
          this.imageIndex++;
          if (this.imageIndex >= this.object.expression.idle.length) {
            this.imageIndex = 0;
            this.imageDuration = 0;
          } else {
            this.imageDuration = this.object.expression.idleSpeed / 100 * 5;
          }
        }
      }
      return this.object.image = this.object.expression.idle[this.imageIndex].resource.name;
    }
  };


  /**
  * Updates character logic & animation-handling.
  *
  * @method update
   */

  Component_CharacterBehavior.prototype.update = function() {
    Component_CharacterBehavior.__super__.update.apply(this, arguments);
    if (!this.initialized) {
      this.setup();
    }
    if (this.object.talking) {
      return this.updateTalking();
    } else {
      return this.updateIdle();
    }
  };

  return Component_CharacterBehavior;

})(gs.Component);

vn.Component_CharacterBehavior = Component_CharacterBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_CharacterBehavior_152.js
var Component_Timer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Timer = (function(superClass) {
  extend(Component_Timer, superClass);


  /**
  * A component which adds timing-features to a game object. A timer-component
  * can be used as a regular timer or as a stop-watch.
  *
  * @module gs
  * @class Component_Timer
  * @extends gs.Component
  * @memberof gs
   */

  function Component_Timer() {
    Component_Timer.__super__.constructor.call(this);

    /**
    * Indicates if the timer is running. 
    *
    * @property isRunning
    * @type boolean
    * @readOnly
     */
    this.isRunning = false;

    /**
    * @property frameCount
    * @type number
    * @private
     */
    this.frameCount = 0;
  }


  /**
  * Starts the timer. 
  *
  * @method start
   */

  Component_Timer.prototype.start = function() {
    this.isRunning = true;
    if (this.object.stopWatch) {
      return this.frameCount = 0;
    } else {
      return this.frameCount = this.minutes * 60 * 60 + this.seconds * 60;
    }
  };


  /**
  * Stops the timer. 
  *
  * @method stop
   */

  Component_Timer.prototype.stop = function() {
    return this.isRunning = false;
  };


  /**
  * Resumes the timer. 
  *
  * @method resume
   */

  Component_Timer.prototype.resume = function() {
    return this.isRunning = true;
  };


  /**
  * Pauses the timer. 
  *
  * @method pause
   */

  Component_Timer.prototype.pause = function() {
    return this.isRunning = false;
  };


  /**
  * Updates the timer.
  *
  * @method update
   */

  Component_Timer.prototype.update = function() {
    if (this.object.stopWatch) {
      return this.updateStopWatch();
    } else {
      return this.updateTimer();
    }
  };


  /**
  * Updates the regular timer behavior
  *
  * @method updateTimer
   */

  Component_Timer.prototype.updateTimer = function() {
    var ref, seconds;
    if (this.isRunning && this.frameCount === 0) {
      this.isRunning = false;
      if ((ref = this.object.events) != null) {
        ref.emit("finish", this);
      }
    }
    if (!this.isRunning) {
      return;
    }
    seconds = Math.round(this.frameCount / 60);
    this.seconds = seconds % 60;
    this.minutes = Math.floor(seconds / 60);
    return this.frameCount--;
  };


  /**
  * Updates the stop-watch behavior
  *
  * @method updateStopWatch
   */

  Component_Timer.prototype.updateStopWatch = function() {
    var seconds;
    if (!this.isRunning) {
      return;
    }
    seconds = Math.round(this.frameCount / 60);
    this.seconds = seconds % 60;
    this.minutes = Math.floor(seconds / 60);
    return this.frameCount++;
  };

  return Component_Timer;

})(gs.Component);

gs.Component_Timer = Component_Timer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7O0VBU2EseUJBQUE7SUFDVCwrQ0FBQTs7QUFFQTs7Ozs7OztJQU9BLElBQUMsQ0FBQSxTQUFELEdBQWE7O0FBRWI7Ozs7O0lBS0EsSUFBQyxDQUFBLFVBQUQsR0FBYztFQWpCTDs7O0FBbUJiOzs7Ozs7NEJBS0EsS0FBQSxHQUFPLFNBQUE7SUFDSCxJQUFDLENBQUEsU0FBRCxHQUFhO0lBRWIsSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQVg7YUFDSSxJQUFDLENBQUEsVUFBRCxHQUFjLEVBRGxCO0tBQUEsTUFBQTthQUdJLElBQUMsQ0FBQSxVQUFELEdBQWMsSUFBQyxDQUFBLE9BQUQsR0FBVyxFQUFYLEdBQWdCLEVBQWhCLEdBQXFCLElBQUMsQ0FBQSxPQUFELEdBQVcsR0FIbEQ7O0VBSEc7OztBQVFQOzs7Ozs7NEJBS0EsSUFBQSxHQUFNLFNBQUE7V0FBRyxJQUFDLENBQUEsU0FBRCxHQUFhO0VBQWhCOzs7QUFFTjs7Ozs7OzRCQUtBLE1BQUEsR0FBUSxTQUFBO1dBQUcsSUFBQyxDQUFBLFNBQUQsR0FBYTtFQUFoQjs7O0FBRVI7Ozs7Ozs0QkFLQSxLQUFBLEdBQU8sU0FBQTtXQUFHLElBQUMsQ0FBQSxTQUFELEdBQWE7RUFBaEI7OztBQUVQOzs7Ozs7NEJBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBWDthQUNJLElBQUMsQ0FBQSxlQUFELENBQUEsRUFESjtLQUFBLE1BQUE7YUFHSSxJQUFDLENBQUEsV0FBRCxDQUFBLEVBSEo7O0VBREk7OztBQU1SOzs7Ozs7NEJBS0EsV0FBQSxHQUFhLFNBQUE7QUFDVCxRQUFBO0lBQUEsSUFBRyxJQUFDLENBQUEsU0FBRCxJQUFlLElBQUMsQ0FBQSxVQUFELEtBQWUsQ0FBakM7TUFDSSxJQUFDLENBQUEsU0FBRCxHQUFhOztXQUNDLENBQUUsSUFBaEIsQ0FBcUIsUUFBckIsRUFBK0IsSUFBL0I7T0FGSjs7SUFHQSxJQUFHLENBQUksSUFBQyxDQUFBLFNBQVI7QUFBdUIsYUFBdkI7O0lBRUEsT0FBQSxHQUFVLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBQyxDQUFBLFVBQUQsR0FBYyxFQUF6QjtJQUVWLElBQUMsQ0FBQSxPQUFELEdBQVcsT0FBQSxHQUFVO0lBQ3JCLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxPQUFBLEdBQVUsRUFBckI7V0FFWCxJQUFDLENBQUEsVUFBRDtFQVhTOzs7QUFhYjs7Ozs7OzRCQUtBLGVBQUEsR0FBaUIsU0FBQTtBQUNiLFFBQUE7SUFBQSxJQUFHLENBQUksSUFBQyxDQUFBLFNBQVI7QUFBdUIsYUFBdkI7O0lBRUEsT0FBQSxHQUFVLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBQyxDQUFBLFVBQUQsR0FBYyxFQUF6QjtJQUVWLElBQUMsQ0FBQSxPQUFELEdBQVcsT0FBQSxHQUFVO0lBQ3JCLElBQUMsQ0FBQSxPQUFELEdBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxPQUFBLEdBQVUsRUFBckI7V0FFWCxJQUFDLENBQUEsVUFBRDtFQVJhOzs7O0dBakdTLEVBQUUsQ0FBQzs7QUErR2pDLEVBQUUsQ0FBQyxlQUFILEdBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfVGltZXJcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIENvbXBvbmVudF9UaW1lciBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICMjIypcbiAgICAqIEEgY29tcG9uZW50IHdoaWNoIGFkZHMgdGltaW5nLWZlYXR1cmVzIHRvIGEgZ2FtZSBvYmplY3QuIEEgdGltZXItY29tcG9uZW50XG4gICAgKiBjYW4gYmUgdXNlZCBhcyBhIHJlZ3VsYXIgdGltZXIgb3IgYXMgYSBzdG9wLXdhdGNoLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfVGltZXJcbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRpbWVyIGlzIHJ1bm5pbmcuIFxuICAgICAgICAqXG4gICAgICAgICogQHByb3BlcnR5IGlzUnVubmluZ1xuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgKiBAcmVhZE9ubHlcbiAgICAgICAgIyMjXG4gICAgICAgIEBpc1J1bm5pbmcgPSBub1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBmcmFtZUNvdW50XG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHByaXZhdGVcbiAgICAgICAgIyMjXG4gICAgICAgIEBmcmFtZUNvdW50ID0gMFxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBTdGFydHMgdGhlIHRpbWVyLiBcbiAgICAqXG4gICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgIyMjXG4gICAgc3RhcnQ6IC0+IFxuICAgICAgICBAaXNSdW5uaW5nID0geWVzXG4gICAgICAgIFxuICAgICAgICBpZiBAb2JqZWN0LnN0b3BXYXRjaFxuICAgICAgICAgICAgQGZyYW1lQ291bnQgPSAwXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBmcmFtZUNvdW50ID0gQG1pbnV0ZXMgKiA2MCAqIDYwICsgQHNlY29uZHMgKiA2MFxuICAgICBcbiAgICAjIyMqXG4gICAgKiBTdG9wcyB0aGUgdGltZXIuIFxuICAgICpcbiAgICAqIEBtZXRob2Qgc3RvcFxuICAgICMjIyAgIFxuICAgIHN0b3A6IC0+IEBpc1J1bm5pbmcgPSBub1xuICAgIFxuICAgICMjIypcbiAgICAqIFJlc3VtZXMgdGhlIHRpbWVyLiBcbiAgICAqXG4gICAgKiBAbWV0aG9kIHJlc3VtZVxuICAgICMjI1xuICAgIHJlc3VtZTogLT4gQGlzUnVubmluZyA9IHllc1xuICAgIFxuICAgICMjIypcbiAgICAqIFBhdXNlcyB0aGUgdGltZXIuIFxuICAgICpcbiAgICAqIEBtZXRob2QgcGF1c2VcbiAgICAjIyNcbiAgICBwYXVzZTogLT4gQGlzUnVubmluZyA9IG5vXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIHRpbWVyLlxuICAgICpcbiAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgIyMjXG4gICAgdXBkYXRlOiAtPlxuICAgICAgICBpZiBAb2JqZWN0LnN0b3BXYXRjaFxuICAgICAgICAgICAgQHVwZGF0ZVN0b3BXYXRjaCgpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEB1cGRhdGVUaW1lcigpXG4gICAgICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSByZWd1bGFyIHRpbWVyIGJlaGF2aW9yXG4gICAgKlxuICAgICogQG1ldGhvZCB1cGRhdGVUaW1lclxuICAgICMjI1xuICAgIHVwZGF0ZVRpbWVyOiAtPlxuICAgICAgICBpZiBAaXNSdW5uaW5nIGFuZCBAZnJhbWVDb3VudCA9PSAwXG4gICAgICAgICAgICBAaXNSdW5uaW5nID0gbm9cbiAgICAgICAgICAgIEBvYmplY3QuZXZlbnRzPy5lbWl0KFwiZmluaXNoXCIsIHRoaXMpXG4gICAgICAgIGlmIG5vdCBAaXNSdW5uaW5nIHRoZW4gcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBzZWNvbmRzID0gTWF0aC5yb3VuZChAZnJhbWVDb3VudCAvIDYwKVxuICAgICAgICBcbiAgICAgICAgQHNlY29uZHMgPSBzZWNvbmRzICUgNjBcbiAgICAgICAgQG1pbnV0ZXMgPSBNYXRoLmZsb29yKHNlY29uZHMgLyA2MClcbiAgICAgICAgXG4gICAgICAgIEBmcmFtZUNvdW50LS1cbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogVXBkYXRlcyB0aGUgc3RvcC13YXRjaCBiZWhhdmlvclxuICAgICpcbiAgICAqIEBtZXRob2QgdXBkYXRlU3RvcFdhdGNoXG4gICAgIyMjXG4gICAgdXBkYXRlU3RvcFdhdGNoOiAtPlxuICAgICAgICBpZiBub3QgQGlzUnVubmluZyB0aGVuIHJldHVyblxuICAgICAgICBcbiAgICAgICAgc2Vjb25kcyA9IE1hdGgucm91bmQoQGZyYW1lQ291bnQgLyA2MClcbiAgICAgICAgXG4gICAgICAgIEBzZWNvbmRzID0gc2Vjb25kcyAlIDYwXG4gICAgICAgIEBtaW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApXG4gICAgICAgIFxuICAgICAgICBAZnJhbWVDb3VudCsrXG4gICAgICAgIFxuICAgICAgICAgICAgXG5cbiAgICAgICAgXG4gXG5ncy5Db21wb25lbnRfVGltZXIgPSBDb21wb25lbnRfVGltZXIiXX0=
//# sourceURL=Component_Timer_156.js
var Component_InputHandler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_InputHandler = (function(superClass) {
  extend(Component_InputHandler, superClass);


  /**
  * The input-handler component is an interface between the input-system
  * of the basic-engine and the game's event-system. In regular this
  * component is used only by game scene to allow its game objects to
  * receive input-events.
  *
  * Those input-events are necessary to solve the problem which game-object
  * responds to a user-action first by building a responder-chain.
  *
  * @module gs
  * @class Component_InputHandler
  * @extends gs.Component
  * @memberof gs
   */

  function Component_InputHandler() {}


  /**
  * Updates the component by checking the input-system and firing
  * an input-event if necessary.
  *
  * @method update
   */

  Component_InputHandler.prototype.update = function() {
    if (Input.Mouse.moved) {
      gs.GlobalEventManager.emit("mouseMoved");
    }
    if (Input.Mouse.buttonDown) {
      gs.GlobalEventManager.emit("mouseDown");
    }
    if (Input.Mouse.buttonUp) {
      gs.GlobalEventManager.emit("mouseUp");
    }
    if (Input.keyDown) {
      gs.GlobalEventManager.emit("keyDown");
    }
    if (Input.keyUp) {
      gs.GlobalEventManager.emit("keyUp");
    }
    if (Input.Mouse.wheelChanged) {
      return gs.GlobalEventManager.emit("mouseWheel");
    }
  };

  return Component_InputHandler;

})(gs.Component);

gs.Component_InputHandler = Component_InputHandler;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsc0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7Ozs7O0VBY2EsZ0NBQUEsR0FBQTs7O0FBRWI7Ozs7Ozs7bUNBTUEsTUFBQSxHQUFRLFNBQUE7SUFDSixJQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBZjtNQUNJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUF0QixDQUEyQixZQUEzQixFQURKOztJQUVBLElBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFmO01BQ0ksRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQXRCLENBQTJCLFdBQTNCLEVBREo7O0lBRUEsSUFBRyxLQUFLLENBQUMsS0FBSyxDQUFDLFFBQWY7TUFDSSxFQUFFLENBQUMsa0JBQWtCLENBQUMsSUFBdEIsQ0FBMkIsU0FBM0IsRUFESjs7SUFFQSxJQUFHLEtBQUssQ0FBQyxPQUFUO01BQ0ksRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQXRCLENBQTJCLFNBQTNCLEVBREo7O0lBRUEsSUFBRyxLQUFLLENBQUMsS0FBVDtNQUNJLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxJQUF0QixDQUEyQixPQUEzQixFQURKOztJQUVBLElBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxZQUFmO2FBQ0ksRUFBRSxDQUFDLGtCQUFrQixDQUFDLElBQXRCLENBQTJCLFlBQTNCLEVBREo7O0VBWEk7Ozs7R0F2QnlCLEVBQUUsQ0FBQzs7QUFxQ3hDLEVBQUUsQ0FBQyxzQkFBSCxHQUE0QiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tcG9uZW50X0lucHV0SGFuZGxlclxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X0lucHV0SGFuZGxlciBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICMjIypcbiAgICAqIFRoZSBpbnB1dC1oYW5kbGVyIGNvbXBvbmVudCBpcyBhbiBpbnRlcmZhY2UgYmV0d2VlbiB0aGUgaW5wdXQtc3lzdGVtXG4gICAgKiBvZiB0aGUgYmFzaWMtZW5naW5lIGFuZCB0aGUgZ2FtZSdzIGV2ZW50LXN5c3RlbS4gSW4gcmVndWxhciB0aGlzXG4gICAgKiBjb21wb25lbnQgaXMgdXNlZCBvbmx5IGJ5IGdhbWUgc2NlbmUgdG8gYWxsb3cgaXRzIGdhbWUgb2JqZWN0cyB0b1xuICAgICogcmVjZWl2ZSBpbnB1dC1ldmVudHMuXG4gICAgKlxuICAgICogVGhvc2UgaW5wdXQtZXZlbnRzIGFyZSBuZWNlc3NhcnkgdG8gc29sdmUgdGhlIHByb2JsZW0gd2hpY2ggZ2FtZS1vYmplY3RcbiAgICAqIHJlc3BvbmRzIHRvIGEgdXNlci1hY3Rpb24gZmlyc3QgYnkgYnVpbGRpbmcgYSByZXNwb25kZXItY2hhaW4uXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9JbnB1dEhhbmRsZXJcbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIGNvbXBvbmVudCBieSBjaGVja2luZyB0aGUgaW5wdXQtc3lzdGVtIGFuZCBmaXJpbmdcbiAgICAqIGFuIGlucHV0LWV2ZW50IGlmIG5lY2Vzc2FyeS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjI1xuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgaWYgSW5wdXQuTW91c2UubW92ZWRcbiAgICAgICAgICAgIGdzLkdsb2JhbEV2ZW50TWFuYWdlci5lbWl0KFwibW91c2VNb3ZlZFwiKVxuICAgICAgICBpZiBJbnB1dC5Nb3VzZS5idXR0b25Eb3duXG4gICAgICAgICAgICBncy5HbG9iYWxFdmVudE1hbmFnZXIuZW1pdChcIm1vdXNlRG93blwiKVxuICAgICAgICBpZiBJbnB1dC5Nb3VzZS5idXR0b25VcFxuICAgICAgICAgICAgZ3MuR2xvYmFsRXZlbnRNYW5hZ2VyLmVtaXQoXCJtb3VzZVVwXCIpXG4gICAgICAgIGlmIElucHV0LmtleURvd25cbiAgICAgICAgICAgIGdzLkdsb2JhbEV2ZW50TWFuYWdlci5lbWl0KFwia2V5RG93blwiKVxuICAgICAgICBpZiBJbnB1dC5rZXlVcFxuICAgICAgICAgICAgZ3MuR2xvYmFsRXZlbnRNYW5hZ2VyLmVtaXQoXCJrZXlVcFwiKVxuICAgICAgICBpZiBJbnB1dC5Nb3VzZS53aGVlbENoYW5nZWRcbiAgICAgICAgICAgIGdzLkdsb2JhbEV2ZW50TWFuYWdlci5lbWl0KFwibW91c2VXaGVlbFwiKVxuICAgICAgICAgICAgXG5ncy5Db21wb25lbnRfSW5wdXRIYW5kbGVyID0gQ29tcG9uZW50X0lucHV0SGFuZGxlciJdfQ==
//# sourceURL=Component_InputHandler_160.js
var Component_CommandInterpreter, InterpreterContext, LivePreviewInfo,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

LivePreviewInfo = (function() {

  /**
  * Stores internal preview-info if the game runs currently in Live-Preview.
  *
  * @module gs
  * @class LivePreviewInfo
  * @memberof gs
   */
  function LivePreviewInfo() {

    /**
    * Timer ID if a timeout for live-preview was configured to exit the game loop after a certain amount of time.
    * @property timeout
    * @type number
     */
    this.timeout = null;

    /**
    * Indicates if Live-Preview is currently waiting for the next user-action. (Selecting another command, etc.)
    * @property waiting
    * @type boolean
     */
    this.waiting = false;

    /**
    * Counts the amount of executed commands since the last 
    * interpreter-pause(waiting, etc.). If its more than 500, the interpreter will automatically pause for 1 frame to 
    * avoid that Live-Preview freezes the Editor in case of endless loops.
    * @property executedCommands
    * @type number
     */
    this.executedCommands = 0;
  }

  return LivePreviewInfo;

})();

gs.LivePreviewInfo = LivePreviewInfo;

InterpreterContext = (function() {
  InterpreterContext.objectCodecBlackList = ["owner"];


  /**
  * Describes an interpreter-context which holds information about
  * the interpreter's owner and also unique ID used for accessing correct
  * local variables.
  *
  * @module gs
  * @class InterpreterContext
  * @memberof gs
  * @param {number|string} id - A unique ID
  * @param {Object} owner - The owner of the interpreter
   */

  function InterpreterContext(id, owner) {

    /**
    * A unique numeric or textual ID used for accessing correct local variables.
    * @property id
    * @type number|string
     */
    this.id = id;

    /**
    * The owner of the interpreter (e.g. current scene, etc.).
    * @property owner
    * @type Object
     */
    this.owner = owner;
  }


  /**
  * Sets the context's data.
  * @param {number|string} id - A unique ID
  * @param {Object} owner - The owner of the interpreter
  * @method set
   */

  InterpreterContext.prototype.set = function(id, owner) {
    this.id = id;
    return this.owner = owner;
  };

  return InterpreterContext;

})();

gs.InterpreterContext = InterpreterContext;

Component_CommandInterpreter = (function(superClass) {
  extend(Component_CommandInterpreter, superClass);

  Component_CommandInterpreter.objectCodecBlackList = ["settings", "object", "command", "onMessageADVWaiting", "onMessageADVDisappear", "onMessageADVFinish"];


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_CommandInterpreter.prototype.onDataBundleRestore = function(data, context) {};


  /**
  * A component which allows a game object to process commands like for
  * scene-objects. For each command a command-function exists. To add
  * own custom commands to the interpreter just create a sub-class and
  * override the gs.Component_CommandInterpreter.assignCommand method
  * and assign the command-function for your custom-command.
  *
  * @module gs
  * @class Component_CommandInterpreter
  * @extends gs.Component
  * @memberof gs
   */

  function Component_CommandInterpreter() {
    Component_CommandInterpreter.__super__.constructor.call(this);

    /**
    * Wait-Counter in frames. If greater than 0, the interpreter will for that amount of frames before continue.
    * @property waitCounter
    * @type number
     */
    this.waitCounter = 0;

    /**
    * Index to the next command to execute.
    * @property pointer
    * @type number
     */
    this.pointer = 0;

    /**
    * Stores states of conditions.
    * @property conditions
    * @type number
    * @protected
     */
    this.conditions = [];

    /**
    * Stores states of loops.
    * @property loops
    * @type number
    * @protected
     */
    this.loops = [];
    this.timers = [];

    /**
    * Indicates if the interpreter is currently running.
    * @property isRunning
    * @type boolean
    * @readOnly
     */
    this.isRunning = false;

    /**
    * Indicates if the interpreter is currently waiting.
    * @property isWaiting
    * @type boolean
     */
    this.isWaiting = false;

    /**
    * Indicates if the interpreter is currently waiting until a message processed by another context like a Common Event
    * is finished.
    * FIXME: Conflict handling can be removed maybe. 
    * @property isWaitingForMessage
    * @type boolean
     */
    this.isWaitingForMessage = false;

    /**
    * Stores internal preview-info if the game runs currently in Live-Preview.
    * <ul>
    * <li>previewInfo.timeout - Timer ID if a timeout for live-preview was configured to exit the game loop after a certain amount of time.</li>
    * <li>previewInfo.waiting - Indicates if Live-Preview is currently waiting for the next user-action. (Selecting another command, etc.)</li>
    * <li>previewInfo.executedCommands - Counts the amount of executed commands since the last 
    * interpreter-pause(waiting, etc.). If its more than 500, the interpreter will automatically pause for 1 frame to 
    * avoid that Live-Preview freezes the Editor in case of endless loops.</li>
    * </ul>
    * @property previewInfo
    * @type boolean
    * @protected
     */
    this.previewInfo = new gs.LivePreviewInfo();

    /**
    * Stores Live-Preview related info passed from the VN Maker editor like the command-index the player clicked on, etc.
    * @property previewData
    * @type Object
    * @protected
     */
    this.previewData = null;

    /**
    * Indicates if the interpreter automatically repeats execution after the last command was executed.
    * @property repeat
    * @type boolean
     */
    this.repeat = false;

    /**
    * The execution context of the interpreter.
    * @property context
    * @type gs.InterpreterContext
    * @protected
     */
    this.context = new gs.InterpreterContext(0, null);

    /**
    * Sub-Interpreter from a Common Event Call. The interpreter will wait until the sub-interpreter is done and set back to
    * <b>null</b>.
    * @property subInterpreter
    * @type gs.Component_CommandInterpreter
    * @protected
     */
    this.subInterpreter = null;

    /**
    * Current indent-level of execution
    * @property indent
    * @type number
    * @protected
     */
    this.indent = 0;

    /**
    * Stores information about for what the interpreter is currently waiting for like for a ADV message, etc. to
    * restore probably when loaded from a save-game.
    * @property waitingFor
    * @type Object
    * @protected
     */
    this.waitingFor = {};

    /**
    * Stores interpreter related settings like how to handle messages, etc.
    * @property settings
    * @type Object
    * @protected
     */
    this.settings = {
      message: {
        byId: {},
        autoErase: true,
        waitAtEnd: true,
        backlog: true
      },
      screen: {
        pan: new gs.Point(0, 0)
      }
    };
    this.onMessageADVWaiting = (function(_this) {
      return function(e) {
        var messageObject;
        messageObject = e.sender.object;
        if (!_this.messageSettings().waitAtEnd) {
          if (_this.params.waitForCompletion) {
            _this.isWaiting = false;
          }
          messageObject.textRenderer.isWaiting = false;
          messageObject.textRenderer.isRunning = false;
        }
        messageObject.events.off("waiting", e.handler);
        if (_this.messageSettings().backlog) {
          return GameManager.backlog.push({
            character: messageObject.character,
            message: messageObject.behavior.message,
            choices: []
          });
        }
      };
    })(this);
    this.onMessageADVDisappear = (function(_this) {
      return function(messageObject, waitForCompletion) {
        SceneManager.scene.currentCharacter = {
          name: ""
        };
        messageObject.behavior.clear();
        messageObject.visible = false;
        if (waitForCompletion) {
          _this.isWaiting = false;
        }
        return _this.waitingFor.messageADV = null;
      };
    })(this);

    /**
    * Called when a ADV message finishes. 
    *
    * @method onMessageNVLFinish
    * @return {Object} Event Object containing additional data.
    * @protected
     */
    this.onMessageADVFinish = (function(_this) {
      return function(e) {
        var commands, duration, fading, messageObject, pointer;
        if (!_this.messageSettings().waitAtEnd) {
          return;
        }
        messageObject = e.sender.object;
        GameManager.globalData.messages[lcsm(e.data.params.message)] = {
          read: true
        };
        GameManager.saveGlobalData();
        if (e.data.params.waitForCompletion) {
          _this.isWaiting = false;
        }
        _this.waitingFor.messageADV = null;
        pointer = _this.pointer;
        commands = _this.object.commands;
        messageObject.events.off("finish", e.handler);
        messageObject.character = null;
        if ((messageObject.voice != null) && GameManager.settings.skipVoiceOnAction) {
          AudioManager.stopSound(messageObject.voice.name);
        }
        if (!_this.isMessageCommand(pointer, commands) && _this.messageSettings().autoErase) {
          _this.isWaiting = true;
          _this.waitingFor.messageADV = e.data.params;
          fading = GameManager.tempSettings.messageFading;
          duration = GameManager.tempSettings.skip ? 0 : fading.duration;
          messageObject.waitForCompletion = e.data.params.waitForCompletion;
          return messageObject.animator.disappear(fading.animation, fading.easing, duration, gs.CallBack("onMessageADVDisappear", _this, e.data.params.waitForCompletion));
        }
      };
    })(this);
  }


  /**
  * Serializes the interpreter into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Component_CommandInterpreter.prototype.toDataBundle = function() {
    if (this.isInputDataCommand(Math.max(this.pointer - 1, 0), this.object.commands)) {
      return {
        pointer: Math.max(this.pointer - 1, 0),
        choice: this.choice,
        conditions: this.conditions,
        loops: this.loops,
        labels: this.labels,
        isWaiting: false,
        isRunning: this.isRunning,
        waitCounter: this.waitCounter,
        waitingFor: this.waitingFor,
        indent: this.indent,
        settings: this.settings
      };
    } else {
      return {
        pointer: this.pointer,
        choice: this.choice,
        conditions: this.conditions,
        loops: this.loops,
        labels: this.labels,
        isWaiting: this.isWaiting,
        isRunning: this.isRunning,
        waitCounter: this.waitCounter,
        waitingFor: this.waitingFor,
        indent: this.indent,
        settings: this.settings
      };
    }
  };


  /**
   * Previews the current scene at the specified pointer. This method is called from the
   * VN Maker Scene-Editor if live-preview is enabled and the user clicked on a command.
   *
   * @method preview
   */

  Component_CommandInterpreter.prototype.preview = function() {
    var scene;
    GameManager.tempFields.choices = [];
    GameManager.setupCursor();
    this.previewData = $PARAMS.preview;
    gs.GlobalEventManager.emit("previewRestart");
    if (this.previewInfo.timeout) {
      clearTimeout(this.previewInfo.timeout);
    }
    if (Graphics.stopped) {
      Graphics.stopped = false;
      Graphics.onEachFrame(gs.Main.frameCallback);
    }
    scene = new vn.Object_Scene();
    scene.sceneData.uid = this.previewData.scene.uid;
    return SceneManager.switchTo(scene);
  };


  /**
   * Sets up the interpreter.
   *
   * @method setup
   */

  Component_CommandInterpreter.prototype.setup = function() {
    this.previewData = $PARAMS.preview;
    if (this.previewData) {
      return gs.GlobalEventManager.on("mouseDown", ((function(_this) {
        return function() {
          if (_this.previewInfo.waiting) {
            if (_this.previewInfo.timeout) {
              clearTimeout(_this.previewInfo.timeout);
            }
            _this.previewInfo.waiting = false;
            GameManager.tempSettings.skip = false;
            _this.previewData = null;
            return gs.GlobalEventManager.emit("previewRestart");
          }
        };
      })(this)), null, this.object);
    }
  };


  /**
   * Disposes the interpreter.
   *
   * @method dispose
   */

  Component_CommandInterpreter.prototype.dispose = function() {
    if (this.previewData) {
      gs.GlobalEventManager.offByOwner("mouseDown", this.object);
    }
    return Component_CommandInterpreter.__super__.dispose.apply(this, arguments);
  };


  /**
  * Restores the interpreter from a data-bundle
  *
  * @method restore
  * @param {Object} bundle- The data-bundle.
   */

  Component_CommandInterpreter.prototype.restore = function() {};


  /**
  * Gets the game message for novel-mode.
  *
  * @method messageObjectNVL
  * @return {ui.Object_Message} The NVL game message object.
   */

  Component_CommandInterpreter.prototype.messageObjectNVL = function() {
    return gs.ObjectManager.current.objectById("gameMessageNVL_message");
  };


  /**
  * Gets the game message for adventure-mode.
  *
  * @method messageObjectADV
  * @return {ui.Object_Message} The ADV game message object.
   */

  Component_CommandInterpreter.prototype.messageObjectADV = function() {
    return gs.ObjectManager.current.objectById("gameMessage_message");
  };


  /**
  * Starts the interpreter
  *
  * @method start
   */

  Component_CommandInterpreter.prototype.start = function() {
    this.conditions = [];
    this.loops = [];
    this.indent = 0;
    this.pointer = 0;
    return this.isRunning = true;
  };


  /**
  * Stops the interpreter
  *
  * @method stop
   */

  Component_CommandInterpreter.prototype.stop = function() {
    return this.isRunning = false;
  };


  /**
  * Resumes the interpreter
  *
  * @method resume
   */

  Component_CommandInterpreter.prototype.resume = function() {
    return this.isRunning = true;
  };


  /**
  * Updates the interpreter and executes all commands until the next wait is 
  * triggered by a command. So in the case of an endless-loop the method will 
  * never return.
  *
  * @method update
   */

  Component_CommandInterpreter.prototype.update = function() {
    if (this.subInterpreter != null) {
      this.subInterpreter.update();
      return;
    }
    GameManager.variableStore.setupTempVariables(this.context);
    if (((this.object.commands == null) || this.pointer >= this.object.commands.length) && !this.isWaiting) {
      if (this.repeat) {
        this.start();
      } else if (this.isRunning) {
        this.isRunning = false;
        if (this.onFinish != null) {
          this.onFinish(this);
        }
        return;
      }
    }
    if (!this.isRunning) {
      return;
    }
    if (!this.object.commands.optimized) {
      DataOptimizer.optimizeEventCommands(this.object.commands);
    }
    if (this.waitCounter > 0) {
      this.waitCounter--;
      this.isWaiting = this.waitCounter > 0;
      return;
    }
    if (this.isWaitingForMessage) {
      this.isWaiting = true;
      if (!this.isProcessingMessageInOtherContext()) {
        this.isWaiting = false;
        this.isWaitingForMessage = false;
      } else {
        return;
      }
    }
    if (GameManager.inLivePreview) {
      while (!(this.isWaiting || this.previewInfo.waiting) && this.pointer < this.object.commands.length && this.isRunning) {
        this.executeCommand(this.pointer);
        this.previewInfo.executedCommands++;
        if (this.previewInfo.executedCommands > 500) {
          this.previewInfo.executedCommands = 0;
          this.isWaiting = true;
          this.waitCounter = 1;
        }
      }
    } else {
      while (!(this.isWaiting || this.previewInfo.waiting) && this.pointer < this.object.commands.length && this.isRunning) {
        this.executeCommand(this.pointer);
      }
    }
    if (this.pointer >= this.object.commands.length && !this.isWaiting) {
      if (this.repeat) {
        return this.start();
      } else if (this.isRunning) {
        this.isRunning = false;
        if (this.onFinish != null) {
          return this.onFinish(this);
        }
      }
    }
  };


  /**
  * Assigns the correct command-function to the specified command-object if 
  * necessary.
  *
  * @method assignCommand
   */

  Component_CommandInterpreter.prototype.assignCommand = function(command) {
    switch (command.id) {
      case "gs.Idle":
        return command.execute = this.commandIdle;
      case "gs.StartTimer":
        return command.execute = this.commandStartTimer;
      case "gs.StopTimer":
        return command.execute = this.commandStopTimer;
      case "gs.WaitCommand":
        return command.execute = this.commandWait;
      case "gs.LoopCommand":
        return command.execute = this.commandLoop;
      case "gs.BreakLoopCommand":
        return command.execute = this.commandBreakLoop;
      case "gs.Comment":
        return command.execute = function() {
          return 0;
        };
      case "gs.EmptyCommand":
        return command.execute = function() {
          return 0;
        };
      case "gs.ListAdd":
        return command.execute = this.commandListAdd;
      case "gs.ListPop":
        return command.execute = this.commandListPop;
      case "gs.ListShift":
        return command.execute = this.commandListShift;
      case "gs.ListRemoveAt":
        return command.execute = this.commandListRemoveAt;
      case "gs.ListInsertAt":
        return command.execute = this.commandListInsertAt;
      case "gs.ListValueAt":
        return command.execute = this.commandListValueAt;
      case "gs.ListShuffle":
        return command.execute = this.commandListShuffle;
      case "gs.ListSort":
        return command.execute = this.commandListSort;
      case "gs.ListIndexOf":
        return command.execute = this.commandListIndexOf;
      case "gs.ListSet":
        return command.execute = this.commandListSet;
      case "gs.ListCopy":
        return command.execute = this.commandListCopy;
      case "gs.ListLength":
        return command.execute = this.commandListLength;
      case "gs.ChangeNumberVariables":
        return command.execute = this.commandChangeNumberVariables;
      case "gs.ChangeBooleanVariables":
        return command.execute = this.commandChangeBooleanVariables;
      case "gs.ChangeStringVariables":
        return command.execute = this.commandChangeStringVariables;
      case "gs.CheckSwitch":
        return command.execute = this.commandCheckSwitch;
      case "gs.CheckNumberVariable":
        return command.execute = this.commandCheckNumberVariable;
      case "gs.CheckTextVariable":
        return command.execute = this.commandCheckTextVariable;
      case "gs.Condition":
        return command.execute = this.commandCondition;
      case "gs.ConditionElse":
        return command.execute = this.commandConditionElse;
      case "gs.ConditionElseIf":
        return command.execute = this.commandConditionElseIf;
      case "gs.Label":
        return command.execute = this.commandLabel;
      case "gs.JumpToLabel":
        return command.execute = this.commandJumpToLabel;
      case "gs.SetMessageArea":
        return command.execute = this.commandSetMessageArea;
      case "gs.ShowMessage":
        return command.execute = this.commandShowMessage;
      case "gs.ShowPartialMessage":
        return command.execute = this.commandShowPartialMessage;
      case "gs.MessageFading":
        return command.execute = this.commandMessageFading;
      case "gs.MessageSettings":
        return command.execute = this.commandMessageSettings;
      case "gs.CreateMessageArea":
        return command.execute = this.commandCreateMessageArea;
      case "gs.EraseMessageArea":
        return command.execute = this.commandEraseMessageArea;
      case "gs.SetTargetMessage":
        return command.execute = this.commandSetTargetMessage;
      case "vn.MessageBoxDefaults":
        return command.execute = this.commandMessageBoxDefaults;
      case "vn.MessageBoxVisibility":
        return command.execute = this.commandMessageBoxVisibility;
      case "vn.MessageVisibility":
        return command.execute = this.commandMessageVisibility;
      case "vn.BacklogVisibility":
        return command.execute = this.commandBacklogVisibility;
      case "vn.ShowMessageNVL":
        return command.execute = this.commandShowMessageNVL;
      case "gs.ClearMessage":
        return command.execute = this.commandClearMessage;
      case "vn.ClosePageNVL":
        return command.execute = this.commandClosePageNVL;
      case "gs.ChangeWeather":
        return command.execute = this.commandChangeWeather;
      case "gs.FreezeScreen":
        return command.execute = this.commandFreezeScreen;
      case "gs.ScreenTransition":
        return command.execute = this.commandScreenTransition;
      case "gs.ShakeScreen":
        return command.execute = this.commandShakeScreen;
      case "gs.TintScreen":
        return command.execute = this.commandTintScreen;
      case "gs.FlashScreen":
        return command.execute = this.commandFlashScreen;
      case "gs.ZoomScreen":
        return command.execute = this.commandZoomScreen;
      case "gs.RotateScreen":
        return command.execute = this.commandRotateScreen;
      case "gs.PanScreen":
        return command.execute = this.commandPanScreen;
      case "gs.ScreenEffect":
        return command.execute = this.commandScreenEffect;
      case "gs.ShowVideo":
        return command.execute = this.commandShowVideo;
      case "gs.MoveVideo":
        return command.execute = this.commandMoveVideo;
      case "gs.MoveVideoPath":
        return command.execute = this.commandMoveVideoPath;
      case "gs.TintVideo":
        return command.execute = this.commandTintVideo;
      case "gs.FlashVideo":
        return command.execute = this.commandFlashVideo;
      case "gs.CropVideo":
        return command.execute = this.commandCropVideo;
      case "gs.RotateVideo":
        return command.execute = this.commandRotateVideo;
      case "gs.ZoomVideo":
        return command.execute = this.commandZoomVideo;
      case "gs.BlendVideo":
        return command.execute = this.commandBlendVideo;
      case "gs.MaskVideo":
        return command.execute = this.commandMaskVideo;
      case "gs.VideoMotionBlur":
        return command.execute = this.commandVideoMotionBlur;
      case "gs.VideoDefaults":
        return command.execute = this.commandVideoDefaults;
      case "gs.EraseVideo":
        return command.execute = this.commandEraseVideo;
      case "gs.ShowImageMap":
        return command.execute = this.commandShowImageMap;
      case "gs.EraseImageMap":
        return command.execute = this.commandEraseImageMap;
      case "gs.AddHotspot":
        return command.execute = this.commandAddHotspot;
      case "gs.EraseHotspot":
        return command.execute = this.commandEraseHotspot;
      case "gs.ChangeHotspotState":
        return command.execute = this.commandChangeHotspotState;
      case "gs.ShowPicture":
        return command.execute = this.commandShowPicture;
      case "gs.MovePicture":
        return command.execute = this.commandMovePicture;
      case "gs.MovePicturePath":
        return command.execute = this.commandMovePicturePath;
      case "gs.TintPicture":
        return command.execute = this.commandTintPicture;
      case "gs.FlashPicture":
        return command.execute = this.commandFlashPicture;
      case "gs.CropPicture":
        return command.execute = this.commandCropPicture;
      case "gs.RotatePicture":
        return command.execute = this.commandRotatePicture;
      case "gs.ZoomPicture":
        return command.execute = this.commandZoomPicture;
      case "gs.BlendPicture":
        return command.execute = this.commandBlendPicture;
      case "gs.ShakePicture":
        return command.execute = this.commandShakePicture;
      case "gs.MaskPicture":
        return command.execute = this.commandMaskPicture;
      case "gs.PictureEffect":
        return command.execute = this.commandPictureEffect;
      case "gs.PictureMotionBlur":
        return command.execute = this.commandPictureMotionBlur;
      case "gs.PictureDefaults":
        return command.execute = this.commandPictureDefaults;
      case "gs.PlayPictureAnimation":
        return command.execute = this.commandPlayPictureAnimation;
      case "gs.ErasePicture":
        return command.execute = this.commandErasePicture;
      case "gs.InputNumber":
        return command.execute = this.commandInputNumber;
      case "vn.Choice":
        return command.execute = this.commandShowChoice;
      case "vn.ChoiceTimer":
        return command.execute = this.commandChoiceTimer;
      case "vn.ShowChoices":
        return command.execute = this.commandShowChoices;
      case "vn.UnlockCG":
        return command.execute = this.commandUnlockCG;
      case "vn.L2DJoinScene":
        return command.execute = this.commandL2DJoinScene;
      case "vn.L2DExitScene":
        return command.execute = this.commandL2DExitScene;
      case "vn.L2DMotion":
        return command.execute = this.commandL2DMotion;
      case "vn.L2DMotionGroup":
        return command.execute = this.commandL2DMotionGroup;
      case "vn.L2DExpression":
        return command.execute = this.commandL2DExpression;
      case "vn.L2DMove":
        return command.execute = this.commandL2DMove;
      case "vn.L2DParameter":
        return command.execute = this.commandL2DParameter;
      case "vn.L2DDefaults":
        return command.execute = this.commandL2DDefaults;
      case "vn.CharacterJoinScene":
        return command.execute = this.commandCharacterJoinScene;
      case "vn.CharacterExitScene":
        return command.execute = this.commandCharacterExitScene;
      case "vn.CharacterChangeExpression":
        return command.execute = this.commandCharacterChangeExpression;
      case "vn.CharacterSetParameter":
        return command.execute = this.commandCharacterSetParameter;
      case "vn.CharacterGetParameter":
        return command.execute = this.commandCharacterGetParameter;
      case "vn.CharacterDefaults":
        return command.execute = this.commandCharacterDefaults;
      case "vn.ZoomCharacter":
        return command.execute = this.commandZoomCharacter;
      case "vn.RotateCharacter":
        return command.execute = this.commandRotateCharacter;
      case "vn.BlendCharacter":
        return command.execute = this.commandBlendCharacter;
      case "vn.ShakeCharacter":
        return command.execute = this.commandShakeCharacter;
      case "vn.MaskCharacter":
        return command.execute = this.commandMaskCharacter;
      case "vn.MoveCharacter":
        return command.execute = this.commandMoveCharacter;
      case "vn.MoveCharacterPath":
        return command.execute = this.commandMoveCharacterPath;
      case "vn.FlashCharacter":
        return command.execute = this.commandFlashCharacter;
      case "vn.CharacterMotionBlur":
        return command.execute = this.commandCharacterMotionBlur;
      case "vn.ChangeBackground":
        return command.execute = this.commandChangeBackground;
      case "vn.ShakeBackground":
        return command.execute = this.commandShakeBackground;
      case "vn.ScrollBackground":
        return command.execute = this.commandScrollBackground;
      case "vn.ScrollBackgroundTo":
        return command.execute = this.commandScrollBackgroundTo;
      case "vn.ScrollBackgroundPath":
        return command.execute = this.commandScrollBackgroundPath;
      case "vn.ZoomBackground":
        return command.execute = this.commandZoomBackground;
      case "vn.TintBackground":
        return command.execute = this.commandTintBackground;
      case "vn.BlendBackground":
        return command.execute = this.commandBlendBackground;
      case "vn.MaskBackground":
        return command.execute = this.commandMaskBackground;
      case "vn.BackgroundMotionBlur":
        return command.execute = this.commandBackgroundMotionBlur;
      case "vn.BackgroundEffect":
        return command.execute = this.commandBackgroundEffect;
      case "vn.BackgroundDefaults":
        return command.execute = this.commandBackgroundDefaults;
      case "vn.ChangeScene":
        return command.execute = this.commandChangeScene;
      case "vn.CallScene":
        return command.execute = this.commandCallScene;
      case "vn.SwitchToLayout":
        return command.execute = this.commandSwitchToLayout;
      case "gs.ChangeTransition":
        return command.execute = this.commandChangeTransition;
      case "gs.ChangeWindowSkin":
        return command.execute = this.commandChangeWindowSkin;
      case "gs.ChangeScreenTransitions":
        return command.execute = this.commandChangeScreenTransitions;
      case "vn.UIAccess":
        return command.execute = this.commandUIAccess;
      case "gs.PlayVideo":
        return command.execute = this.commandPlayVideo;
      case "gs.PlayMusic":
        return command.execute = this.commandPlayMusic;
      case "gs.StopMusic":
        return command.execute = this.commandStopMusic;
      case "gs.PlaySound":
        return command.execute = this.commandPlaySound;
      case "gs.PauseMusic":
        return command.execute = this.commandPauseMusic;
      case "gs.ResumeMusic":
        return command.execute = this.commandResumeMusic;
      case "gs.AudioDefaults":
        return command.execute = this.commandAudioDefaults;
      case "gs.EndCommonEvent":
        return command.execute = this.commandEndCommonEvent;
      case "gs.CallCommonEvent":
        return command.execute = this.commandCallCommonEvent;
      case "gs.ChangeTimer":
        return command.execute = this.commandChangeTimer;
      case "gs.ShowText":
        return command.execute = this.commandShowText;
      case "gs.RefreshText":
        return command.execute = this.commandRefreshText;
      case "gs.TextMotionBlur":
        return command.execute = this.commandTextMotionBlur;
      case "gs.MoveText":
        return command.execute = this.commandMoveText;
      case "gs.MoveTextPath":
        return command.execute = this.commandMoveTextPath;
      case "gs.RotateText":
        return command.execute = this.commandRotateText;
      case "gs.ZoomText":
        return command.execute = this.commandZoomText;
      case "gs.BlendText":
        return command.execute = this.commandBlendText;
      case "gs.ColorText":
        return command.execute = this.commandColorText;
      case "gs.EraseText":
        return command.execute = this.commandEraseText;
      case "gs.TextDefaults":
        return command.execute = this.commandTextDefaults;
      case "gs.ChangeTextSettings":
        return command.execute = this.commandChangeTextSettings;
      case "gs.InputText":
        return command.execute = this.commandInputText;
      case "gs.InputName":
        return command.execute = this.commandInputName;
      case "gs.SavePersistentData":
        return command.execute = this.commandSavePersistentData;
      case "gs.PrepareSaveGame":
        return command.execute = this.commandPrepareSaveGame;
      case "gs.SaveGame":
        return command.execute = this.commandSaveGame;
      case "gs.LoadGame":
        return command.execute = this.commandLoadGame;
      case "gs.GetInputData":
        return command.execute = this.commandGetInputData;
      case "gs.WaitForInput":
        return command.execute = this.commandWaitForInput;
      case "vn.GetGameData":
        return command.execute = this.commandGetGameData;
      case "vn.SetGameData":
        return command.execute = this.commandSetGameData;
      case "vn.GetObjectData":
        return command.execute = this.commandGetObjectData;
      case "vn.SetObjectData":
        return command.execute = this.commandSetObjectData;
      case "vn.ChangeSounds":
        return command.execute = this.commandChangeSounds;
      case "vn.ChangeColors":
        return command.execute = this.commandChangeColors;
      case "gs.ChangeScreenCursor":
        return command.execute = this.commandChangeScreenCursor;
      case "gs.ResetGlobalData":
        return command.execute = this.commandResetGlobalData;
      case "gs.Script":
        return command.execute = this.commandScript;
    }
  };


  /**
  * Executes the command at the specified index and increases the command-pointer.
  *
  * @method executeCommand
   */

  Component_CommandInterpreter.prototype.executeCommand = function(index) {
    var indent;
    this.command = this.object.commands[index];
    if (this.previewData) {
      if (this.pointer < this.previewData.pointer) {
        GameManager.tempSettings.skip = true;
        GameManager.tempSettings.skipTime = 0;
      } else {
        GameManager.tempSettings.skip = this.previewData.settings.animationDisabled;
        GameManager.tempSettings.skipTime = 0;
        this.previewInfo.waiting = true;
        gs.GlobalEventManager.emit("previewWaiting");
        if (this.previewData.settings.animationDisabled || this.previewData.settings.animationTime > 0) {
          this.previewInfo.timeout = setTimeout((function() {
            return Graphics.stopped = true;
          }), this.previewData.settings.animationTime * 1000);
        }
      }
    }
    if (this.command.execute != null) {
      this.command.interpreter = this;
      if ((this.command.params.duration != null) && GameManager.tempSettings.skip) {
        this.command.duration = this.command.params.duration;
        this.command.params.duration = GameManager.tempSettings.skipTime;
        if (this.command.params.fieldFlags) {
          this.command.durationFlags = this.command.params.fieldFlags.duration;
          this.command.params.fieldFlags.duration = this.command.params.fieldFlags.duration & ~gs.CommandFieldFlags.LOCKED;
        }
      } else if (this.command.duration != null) {
        this.command.params.duration = this.command.duration;
        if (this.command.durationFlags != null) {
          this.command.params.fieldFlags.duration = this.command.durationFlags;
        }
      }
      if (this.command.indent === this.indent) {
        this.command.execute();
      }
      this.pointer++;
      this.command = this.object.commands[this.pointer];
      if (this.command != null) {
        indent = this.command.indent;
      } else {
        indent = this.indent;
        while (indent > 0 && (this.loops[indent] == null)) {
          indent--;
        }
      }
      if (indent < this.indent) {
        this.indent = indent;
        if (this.loops[this.indent] != null) {
          this.pointer = this.loops[this.indent];
          this.command = this.object.commands[this.pointer];
          return this.command.interpreter = this;
        }
      }
    } else {
      this.assignCommand(this.command);
      if (this.command.execute != null) {
        this.command.interpreter = this;
        if ((this.command.params.duration != null) && GameManager.tempSettings.skip) {
          this.command.duration = this.command.params.duration;
          this.command.params.duration = GameManager.tempSettings.skipTime;
          if (this.command.params.fieldFlags) {
            this.command.durationFlags = this.command.params.fieldFlags.duration;
            this.command.params.fieldFlags.duration = this.command.params.fieldFlags.duration & ~gs.CommandFieldFlags.LOCKED;
          }
        } else if (this.command.duration != null) {
          this.command.params.duration = this.command.duration;
          if (this.command.durationFlags != null) {
            this.command.params.fieldFlags.duration = this.command.durationFlags;
          }
        }
        if (this.command.indent === this.indent) {
          this.command.execute();
        }
        this.pointer++;
        this.command = this.object.commands[this.pointer];
        if (this.command != null) {
          indent = this.command.indent;
        } else {
          indent = this.indent;
          while (indent > 0 && (this.loops[indent] == null)) {
            indent--;
          }
        }
        if (indent < this.indent) {
          this.indent = indent;
          if (this.loops[this.indent] != null) {
            this.pointer = this.loops[this.indent];
            this.command = this.object.commands[this.pointer];
            return this.command.interpreter = this;
          }
        }
      } else {
        return this.pointer++;
      }
    }
  };


  /**
  * Skips all commands until a command with the specified indent-level is 
  * found. So for example: To jump from a Condition-Command to the next
  * Else-Command just pass the indent-level of the Condition/Else command.
  *
  * @method skip
  * @param {number} indent - The indent-level.
  * @param {boolean} backward - If true the skip runs backward.
   */

  Component_CommandInterpreter.prototype.skip = function(indent, backward) {
    var results, results1;
    if (backward) {
      this.pointer--;
      results = [];
      while (this.pointer > 0 && this.object.commands[this.pointer].indent !== indent) {
        results.push(this.pointer--);
      }
      return results;
    } else {
      this.pointer++;
      results1 = [];
      while (this.pointer < this.object.commands.length && this.object.commands[this.pointer].indent !== indent) {
        results1.push(this.pointer++);
      }
      return results1;
    }
  };


  /**
  * Checks if the command at the specified pointer-index is a game message
  * related command.
  *
  * @method isMessageCommand
  * @param {number} pointer - The pointer/index.
  * @param {Object[]} commands - The list of commands to check.
  * @return {boolean} <b>true</b> if its a game message related command. Otherwise <b>false</b>.
   */

  Component_CommandInterpreter.prototype.isMessageCommand = function(pointer, commands) {
    var result;
    result = true;
    if (pointer >= commands.length || (commands[pointer].id !== "gs.InputNumber" && commands[pointer].id !== "vn.Choice" && commands[pointer].id !== "gs.InputText" && commands[pointer].id !== "gs.InputName")) {
      result = false;
    }
    return result;
  };


  /**
  * Checks if the command at the specified pointer-index asks for user-input like
  * the Input Number or Input Text command.
  *
  * @method isInputDataCommand
  * @param {number} pointer - The pointer/index.
  * @param {Object[]} commands - The list of commands to check.
  * @return {boolean} <b>true</b> if its an input-data command. Otherwise <b>false</b>
   */

  Component_CommandInterpreter.prototype.isInputDataCommand = function(pointer, commands) {
    return pointer < commands.length && (commands[pointer].id === "gs.InputNumber" || commands[pointer].id === "gs.InputText" || commands[pointer].id === "vn.Choice" || commands[pointer].id === "vn.ShowChoices");
  };


  /**
  * Checks if a game message is currently running by another interpreter like a
  * common-event interpreter.
  *
  * @method isProcessingMessageInOtherContext
  * @return {boolean} <b>true</b> a game message is running in another context. Otherwise <b>false</b>
   */

  Component_CommandInterpreter.prototype.isProcessingMessageInOtherContext = function() {
    var gm, result, s;
    result = false;
    gm = GameManager;
    s = SceneManager.scene;
    result = ((s.inputNumberWindow != null) && s.inputNumberWindow.visible && s.inputNumberWindow.executionContext !== this.context) || ((s.inputTextWindow != null) && s.inputTextWindow.active && s.inputTextWindow.executionContext !== this.context);
    return result;
  };


  /**
  * If a game message is currently running by an other interpreter like a common-event
  * interpreter, this method trigger a wait until the other interpreter is finished
  * with the game message.
  *
  * @method waitForMessage
  * @return {boolean} <b>true</b> a game message is running in another context. Otherwise <b>false</b>
   */

  Component_CommandInterpreter.prototype.waitForMessage = function() {
    this.isWaitingForMessage = true;
    this.isWaiting = true;
    return this.pointer--;
  };


  /**
  * Gets the value the number variable at the specified index.
  *
  * @method numberValueAtIndex
  * @param {number} scope - The variable's scope.
  * @param {number} index - The index of the variable to get the value from.
  * @return {Number} The value of the variable.
   */

  Component_CommandInterpreter.prototype.numberValueAtIndex = function(scope, index) {
    return GameManager.variableStore.numberValueAtIndex(scope, index);
  };


  /**
  * Gets the value of a (possible) number variable. If a constant number value is specified, this method
  * does nothing an just returns that constant value. That's to make it more comfortable to just pass a value which
  * can be calculated by variable but also be just a constant value.
  *
  * @method numberValueOf
  * @param {number|Object} object - A number variable or constant number value.
  * @return {Number} The value of the variable.
   */

  Component_CommandInterpreter.prototype.numberValueOf = function(object) {
    return GameManager.variableStore.numberValueOf(object);
  };


  /**
  * It does the same like <b>numberValueOf</b> with one difference: If the specified object
  * is a variable, it's value is considered as a duration-value in milliseconds and automatically converted
  * into frames.
  *
  * @method durationValueOf
  * @param {number|Object} object - A number variable or constant number value.
  * @return {Number} The value of the variable.
   */

  Component_CommandInterpreter.prototype.durationValueOf = function(object) {
    if (object && (object.index != null)) {
      return Math.round(GameManager.variableStore.numberValueOf(object) / 1000 * Graphics.frameRate);
    } else {
      return GameManager.variableStore.numberValueOf(object);
    }
  };


  /**
  * Gets a position ({x, y}) for the specified predefined object position configured in 
  * Database - System.
  *
  * @method predefinedObjectPosition
  * @param {number} position - The index/ID of the predefined object position to set.
  * @param {gs.Object_Base} object - The game object to set the position for.
  * @param {Object} params - The params object of the scene command.
  * @return {Object} The position {x, y}.
   */

  Component_CommandInterpreter.prototype.predefinedObjectPosition = function(position, object, params) {
    var f, objectPosition;
    objectPosition = RecordManager.system.objectPositions[position];
    if (!objectPosition) {
      return {
        x: 0,
        y: 0
      };
    }
    if (objectPosition.func == null) {
      f = eval("(function(object, params){" + objectPosition.script + "})");
      objectPosition.func = f;
    }
    return objectPosition.func(object, params) || {
      x: 0,
      y: 0
    };
  };


  /**
  * Sets the value of a number variable at the specified index.
  *
  * @method setNumberValueAtIndex
  * @param {number} scope - The variable's scope.
  * @param {number} index - The index of the variable to set.
  * @param {number} value - The number value to set the variable to.
   */

  Component_CommandInterpreter.prototype.setNumberValueAtIndex = function(scope, index, value) {
    return GameManager.variableStore.setNumberValueAtIndex(scope, index, value);
  };


  /**
  * Sets the value of a number variable.
  *
  * @method setNumberValueTo
  * @param {number} variable - The variable to set.
  * @param {number} value - The number value to set the variable to.
   */

  Component_CommandInterpreter.prototype.setNumberValueTo = function(variable, value) {
    return GameManager.variableStore.setNumberValueTo(variable, value);
  };


  /**
  * Sets the value of a list variable.
  *
  * @method setListObjectTo
  * @param {Object} variable - The variable to set.
  * @param {Object} value - The list object to set the variable to.
   */

  Component_CommandInterpreter.prototype.setListObjectTo = function(variable, value) {
    return GameManager.variableStore.setListObjectTo(variable, value);
  };


  /**
  * Sets the value of a boolean/switch variable.
  *
  * @method setBooleanValueTo
  * @param {Object} variable - The variable to set.
  * @param {boolean} value - The boolean value to set the variable to.
   */

  Component_CommandInterpreter.prototype.setBooleanValueTo = function(variable, value) {
    return GameManager.variableStore.setBooleanValueTo(variable, value);
  };


  /**
  * Sets the value of a string/text variable.
  *
  * @method setStringValueTo
  * @param {Object} variable - The variable to set.
  * @param {string} value - The string/text value to set the variable to.
   */

  Component_CommandInterpreter.prototype.setStringValueTo = function(variable, value) {
    return GameManager.variableStore.setStringValueTo(variable, value);
  };


  /**
  * Gets the value of a (possible) string variable. If a constant string value is specified, this method
  * does nothing an just returns that constant value. That's to make it more comfortable to just pass a value which
  * can be calculated by variable but also be just a constant value.
  *
  * @method stringValueOf
  * @param {string|Object} object - A string variable or constant string value.
  * @return {string} The value of the variable.
   */

  Component_CommandInterpreter.prototype.stringValueOf = function(object) {
    return GameManager.variableStore.stringValueOf(object);
  };


  /**
  * Gets the value of a (possible) boolean variable. If a constant boolean value is specified, this method
  * does nothing an just returns that constant value. That's to make it more comfortable to just pass a value which
  * can be calculated by variable but also be just a constant value.
  *
  * @method booleanValueOf
  * @param {boolean|Object} object - A boolean variable or constant boolean value.
  * @return {boolean} The value of the variable.
   */

  Component_CommandInterpreter.prototype.booleanValueOf = function(object) {
    return GameManager.variableStore.booleanValueOf(object);
  };


  /**
  * Gets the value of a (possible) list variable.
  *
  * @method listObjectOf
  * @param {Object} object - A list variable.
  * @return {Object} The value of the list variable.
   */

  Component_CommandInterpreter.prototype.listObjectOf = function(object) {
    return GameManager.variableStore.listObjectOf(object);
  };


  /**
  * Compares two object using the specified operation and returns the result.
  *
  * @method compare
  * @param {Object} a - Object A.
  * @param {Object} b - Object B.
  * @param {number} operation - The compare-operation to compare Object A with Object B.
  * <ul>
  * <li>0 = Equal To</li>
  * <li>1 = Not Equal To</li>
  * <li>2 = Greater Than</li>
  * <li>3 = Greater or Equal To</li>
  * <li>4 = Less Than</li>
  * <li>5 = Less or Equal To</li>
  * </ul>
  * @return {boolean} The comparison result.
   */

  Component_CommandInterpreter.prototype.compare = function(a, b, operation) {
    switch (operation) {
      case 0:
        return a == b;
      case 1:
        return a != b;
      case 2:
        return a > b;
      case 3:
        return a >= b;
      case 4:
        return a < b;
      case 5:
        return a <= b;
    }
  };


  /**
  * Shakes a game object.
  *
  * @method shakeObject
  * @param {gs.Object_Base} object - The game object to shake.
  * @return {Object} A params object containing additional info about the shake-animation.
   */

  Component_CommandInterpreter.prototype.shakeObject = function(object, params) {
    var duration, easing;
    duration = Math.max(Math.round(this.durationValueOf(params.duration)), 2);
    easing = gs.Easings.fromObject(params.easing);
    object.animator.shake({
      x: this.numberValueOf(params.range.x),
      y: this.numberValueOf(params.range.y)
    }, this.numberValueOf(params.speed) / 100, duration, easing);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Lets the interpreter wait for the completion of a running operation like an animation, etc.
  *
  * @method waitForCompletion
  * @param {gs.Object_Base} object - The game object the operation is executed on. Can be <b>null</b>.
  * @return {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.waitForCompletion = function(object, params) {
    var duration;
    duration = this.durationValueOf(params.duration);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Erases a game object.
  *
  * @method eraseObject
  * @param {gs.Object_Base} object - The game object to erase.
  * @return {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.eraseObject = function(object, params) {
    var duration, easing;
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.disappear(params.animation, easing, duration, (function(_this) {
      return function(sender) {
        return sender.dispose();
      };
    })(this));
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Shows a game object on screen.
  *
  * @method showObject
  * @param {gs.Object_Base} object - The game object to show.
  * @param {gs.Point} position - The position where the game object should be shown.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.showObject = function(object, position, params) {
    var duration, easing, x, y;
    x = this.numberValueOf(position.x);
    y = this.numberValueOf(position.y);
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.appear(x, y, params.animation, easing, duration);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Moves a game object.
  *
  * @method moveObject
  * @param {gs.Object_Base} object - The game object to move.
  * @param {gs.Point} position - The position to move the game object to.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.moveObject = function(object, position, params) {
    var duration, easing, p, x, y;
    if (params.positionType === 0) {
      p = this.predefinedObjectPosition(params.predefinedPositionId, object, params);
      x = p.x;
      y = p.y;
    } else {
      x = this.numberValueOf(position.x);
      y = this.numberValueOf(position.y);
    }
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.moveTo(x, y, duration, easing);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Moves a game object along a path.
  *
  * @method moveObjectPath
  * @param {gs.Object_Base} object - The game object to move.
  * @param {Object} path - The path to move the game object along.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.moveObjectPath = function(object, path, params) {
    var duration, easing, ref;
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.movePath(path.data, params.loopType, duration, easing, (ref = path.effects) != null ? ref.data : void 0);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Scrolls a scrollable game object along a path.
  *
  * @method scrollObjectPath
  * @param {gs.Object_Base} object - The game object to scroll.
  * @param {Object} path - The path to scroll the game object along.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.scrollObjectPath = function(object, path, params) {
    var duration, easing;
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.scrollPath(path, params.loopType, duration, easing);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Zooms/Scales a game object.
  *
  * @method zoomObject
  * @param {gs.Object_Base} object - The game object to zoom.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.zoomObject = function(object, params) {
    var duration, easing;
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.zoomTo(this.numberValueOf(params.zooming.x) / 100, this.numberValueOf(params.zooming.y) / 100, duration, easing);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Rotates a game object.
  *
  * @method rotateObject
  * @param {gs.Object_Base} object - The game object to rotate.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.rotateObject = function(object, params) {
    var duration, easing;
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.rotate(params.direction, this.numberValueOf(params.speed) / 100, duration, easing);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Blends a game object.
  *
  * @method blendObject
  * @param {gs.Object_Base} object - The game object to blend.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.blendObject = function(object, params) {
    var duration, easing;
    easing = gs.Easings.fromObject(params.easing);
    duration = this.durationValueOf(params.duration);
    object.animator.blendTo(this.numberValueOf(params.opacity), duration, easing);
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Executes a masking-effect on a game object..
  *
  * @method maskObject
  * @param {gs.Object_Base} object - The game object to execute a masking-effect on.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.maskObject = function(object, params) {
    var duration, easing, ref, ref1, ref2;
    easing = gs.Easings.fromObject(params.easing);
    if (params.mask.type === 0) {
      object.mask.type = 0;
      object.mask.ox = this.numberValueOf(params.mask.ox);
      object.mask.oy = this.numberValueOf(params.mask.oy);
      if (((ref = object.mask.source) != null ? ref.videoElement : void 0) != null) {
        object.mask.source.pause();
      }
      if (params.mask.sourceType === 0) {
        object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + ((ref1 = params.mask.graphic) != null ? ref1.name : void 0));
      } else {
        object.mask.source = ResourceManager.getVideo("Movies/" + ((ref2 = params.mask.video) != null ? ref2.name : void 0));
        if (object.mask.source) {
          object.mask.source.play();
          object.mask.source.loop = true;
        }
      }
    } else {
      duration = this.durationValueOf(params.duration);
      object.animator.maskTo(params.mask, duration, easing);
    }
    if (params.waitForCompletion && !(duration === 0)) {
      this.isWaiting = true;
      return this.waitCounter = duration;
    }
  };


  /**
  * Executes an effect on a game object.
  *
  * @method objectEffect
  * @param {gs.Object_Base} object - The game object to execute a masking-effect on.
  * @param {Object} A params object containing additional info.
   */

  Component_CommandInterpreter.prototype.objectEffect = function(object, params) {
    object.effects.wobble.enabled = params.power > 0;
    object.effects.wobble.power = params.power / 10000;
    object.effects.wobble.speed = params.speed / 100;
    object.effects.wobble.vertical = params.orientation === 0 || params.orientation === 2;
    return object.effects.wobble.horizontal = params.orientation === 1 || params.orientation === 2;
  };


  /**
  * Executes an action like for a hotspot.
  *
  * @method executeAction
  * @param {Object} action - Action-Data.
  * @param {boolean} stateValue - In case of switch-binding, the switch is set to this value.
   */

  Component_CommandInterpreter.prototype.executeAction = function(action, stateValue) {
    var ref;
    switch (action.type) {
      case 0:
        if (action.labelIndex) {
          return this.pointer = action.labelIndex;
        } else {
          return this.jumpToLabel(action.label);
        }
        break;
      case 1:
        return this.callCommonEvent(action.commonEventId);
      case 2:
        return this.setBooleanValueTo(action["switch"], stateValue);
      case 3:
        return this.callScene((ref = action.scene) != null ? ref.uid : void 0);
    }
  };


  /**
  * Calls a common event and returns the sub-interpreter for it.
  *
  * @method callCommonEvent
  * @param {number} id - The ID of the common event to call.
  * @param {Object} parameters - Optional common event parameters.
  * @param {boolean} wait - Indicates if the interpreter should be stay in waiting-mode even if the sub-interpreter is finished.
   */

  Component_CommandInterpreter.prototype.callCommonEvent = function(id, parameters, wait) {
    var commonEvent, ref;
    commonEvent = GameManager.commonEvents[id];
    if (commonEvent != null) {
      SceneManager.scene.commonEventContainer.addObject(commonEvent);
      if ((ref = commonEvent.events) != null) {
        ref.on("finish", (function(_this) {
          return function(e) {
            SceneManager.scene.commonEventContainer.removeObject(e.sender.object);
            e.sender.object.events.off("finish");
            _this.subInterpreter = null;
            return _this.isWaiting = wait != null ? wait : false;
          };
        })(this));
      }
      GameManager.variableStore.setupLocalVariables(commonEvent.record);
      GameManager.variableStore.setupTempVariables(commonEvent.record);
      this.subInterpreter = commonEvent.behavior.call(parameters || []);
      if (this.subInterpreter != null) {
        this.isWaiting = true;
        this.subInterpreter.start();
        return this.subInterpreter.update();
      }
    }
  };


  /**
  * Calls a scene and returns the sub-interpreter for it.
  *
  * @method callScene
  * @param {String} uid - The UID of the scene to call.
   */

  Component_CommandInterpreter.prototype.callScene = function(uid) {
    var object, sceneDocument;
    sceneDocument = DataManager.getDocument(uid);
    if (sceneDocument != null) {
      this.isWaiting = true;
      this.subInterpreter = new gs.Component_CommandInterpreter();
      object = {
        commands: sceneDocument.items.commands
      };
      this.subInterpreter.repeat = false;
      this.subInterpreter.context.set(sceneDocument.uid, sceneDocument);
      this.subInterpreter.object = object;
      this.subInterpreter.onFinish = (function(_this) {
        return function(sender) {
          _this.isWaiting = false;
          return _this.subInterpreter = null;
        };
      })(this);
      this.subInterpreter.start();
      return this.subInterpreter.update();
    }
  };


  /**
  * Calls a common event and returns the sub-interpreter for it.
  *
  * @method storeListValue
  * @param {number} id - The ID of the common event to call.
  * @param {Object} parameters - Optional common event parameters.
  * @param {boolean} wait - Indicates if the interpreter should be stay in waiting-mode even if the sub-interpreter is finished.
   */

  Component_CommandInterpreter.prototype.storeListValue = function(variable, list, value, valueType) {
    switch (valueType) {
      case 0:
        return this.setNumberValueTo(variable, (!isNaN(value) ? value : 0));
      case 1:
        return this.setBooleanValueTo(variable, (value ? 1 : 0));
      case 2:
        return this.setStringValueTo(variable, value.toString());
      case 3:
        return this.setListObjectTo(variable, (value.length != null ? value : []));
    }
  };


  /**
  * @method jumpToLabel
   */

  Component_CommandInterpreter.prototype.jumpToLabel = function(label) {
    var i, k, ref, results;
    if (!label) {
      return;
    }
    this.waitCounter = 0;
    this.isWaiting = false;
    results = [];
    for (i = k = 0, ref = this.object.commands.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      if (this.object.commands[i].id === "gs.Label" && this.object.commands[i].params.name === label) {
        this.pointer = i;
        break;
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * Gets the current message box object depending on game mode (ADV or NVL).
  *
  * @method messageBoxObject
  * @return {gs.Object_Base} The message box object.
  * @protected
   */

  Component_CommandInterpreter.prototype.messageBoxObject = function() {
    if (SceneManager.scene.layout.visible) {
      return gs.ObjectManager.current.objectById("messageBox");
    } else {
      return gs.ObjectManager.current.objectById("messageBoxNVL");
    }
  };


  /**
  * Gets the current message object depending on game mode (ADV or NVL).
  *
  * @method messageObject
  * @return {ui.Object_Message} The message object.
  * @protected
   */

  Component_CommandInterpreter.prototype.messageObject = function() {
    if (SceneManager.scene.layout.visible) {
      return gs.ObjectManager.current.objectById("gameMessage_message");
    } else {
      return gs.ObjectManager.current.objectById("gameMessageNVL_message");
    }
  };


  /**
  * Gets the current message ID depending on game mode (ADV or NVL).
  *
  * @method messageObjectId
  * @return {string} The message object ID.
  * @protected
   */

  Component_CommandInterpreter.prototype.messageObjectId = function() {
    if (SceneManager.scene.layout.visible) {
      return "gameMessage_message";
    } else {
      return "gameMessageNVL_message";
    }
  };


  /**
  * Gets the current message settings.
  *
  * @method messageSettings
  * @return {Object} The message settings
  * @protected
   */

  Component_CommandInterpreter.prototype.messageSettings = function() {
    var ref, ref1, ref2, ref3, settings;
    settings = this.settings.message.byId[(ref = (ref1 = this.settings.message.target) != null ? ref1.id : void 0) != null ? ref : this.messageObjectId()];
    if (!settings) {
      settings = {
        waitAtEnd: true,
        autoErase: true,
        backlog: true
      };
      this.settings.message.byId[(ref2 = (ref3 = this.settings.message.target) != null ? ref3.id : void 0) != null ? ref2 : this.messageObjectId()] = settings;
    }
    return settings;
  };


  /**
  * Gets the current target message object where all message commands are executed on.
  *
  * @method targetMessage
  * @return {ui.Object_Message} The target message object.
  * @protected
   */

  Component_CommandInterpreter.prototype.targetMessage = function() {
    var message, ref, ref1, ref2, target;
    message = this.messageObject();
    target = this.settings.message.target;
    if (target != null) {
      switch (target.type) {
        case 0:
          message = (ref = gs.ObjectManager.current.objectById(target.id)) != null ? ref : this.messageObject();
          break;
        case 1:
          message = (ref1 = (ref2 = SceneManager.scene.messageAreas[target.id]) != null ? ref2.message : void 0) != null ? ref1 : this.messageObject();
      }
    }
    return message;
  };


  /**
  * Gets the current target message box containing the current target message.
  *
  * @method targetMessageBox
  * @return {ui.Object_UIElement} The target message box.
  * @protected
   */

  Component_CommandInterpreter.prototype.targetMessageBox = function() {
    var messageBox, ref, ref1, target;
    messageBox = this.messageObject();
    target = this.settings.message.target;
    if (target != null) {
      switch (target.type) {
        case 0:
          messageBox = (ref = gs.ObjectManager.current.objectById(target.id)) != null ? ref : this.messageObject();
          break;
        case 1:
          messageBox = (ref1 = gs.ObjectManager.current.objectById("customGameMessage_" + target.id)) != null ? ref1 : this.messageObject();
      }
    }
    return messageBox;
  };


  /**
  * Called after an input number dialog was accepted by the user. It takes the user's input and puts
  * it in the configured number variable.
  *
  * @method onInputNumberFinish
  * @return {Object} Event Object containing additional data like the number, etc.
  * @protected
   */

  Component_CommandInterpreter.prototype.onInputNumberFinish = function(e) {
    this.messageObject().behavior.clear();
    this.setNumberValueTo(this.waitingFor.inputNumber.variable, parseInt(ui.Component_FormulaHandler.fieldValue(e.sender, e.number)));
    this.isWaiting = false;
    this.waitingFor.inputNumber = null;
    return SceneManager.scene.inputNumberBox.dispose();
  };


  /**
  * Called after an input text dialog was accepted by the user. It takes the user's text input and puts
  * it in the configured string variable.
  *
  * @method onInputTextFinish
  * @return {Object} Event Object containing additional data like the text, etc.
  * @protected
   */

  Component_CommandInterpreter.prototype.onInputTextFinish = function(e) {
    this.messageObject().behavior.clear();
    this.setStringValueTo(this.waitingFor.inputText.variable, ui.Component_FormulaHandler.fieldValue(e.sender, e.text).replace(/_/g, ""));
    this.isWaiting = false;
    this.waitingFor.inputText = null;
    return SceneManager.scene.inputTextBox.dispose();
  };


  /**
  * Called after a choice was selected by the user. It jumps to the corresponding label
  * and also puts the choice into backlog.
  *
  * @method onChoiceAccept
  * @return {Object} Event Object containing additional data like the label, etc.
  * @protected
   */

  Component_CommandInterpreter.prototype.onChoiceAccept = function(e) {
    var duration, fading, messageObject, scene;
    scene = SceneManager.scene;
    scene.choiceTimer.behavior.stop();
    e.isSelected = true;
    delete e.sender;
    GameManager.backlog.push({
      character: {
        name: ""
      },
      message: "",
      choice: e,
      choices: $tempFields.choices,
      isChoice: true
    });
    GameManager.tempFields.choices = [];
    messageObject = this.messageObject();
    if (messageObject != null ? messageObject.visible : void 0) {
      this.isWaiting = true;
      fading = GameManager.tempSettings.messageFading;
      duration = GameManager.tempSettings.skip ? 0 : fading.duration;
      messageObject.animator.disappear(fading.animation, fading.easing, duration, (function(_this) {
        return function() {
          messageObject.behavior.clear();
          messageObject.visible = false;
          _this.isWaiting = false;
          _this.waitingFor.choice = null;
          return _this.executeAction(e.action, true);
        };
      })(this));
    } else {
      this.isWaiting = false;
      this.executeAction(e.action, true);
    }
    return scene.choiceWindow.dispose();
  };


  /**
  * Called when a NVL message finishes. 
  *
  * @method onMessageNVLFinish
  * @return {Object} Event Object containing additional data.
  * @protected
   */

  Component_CommandInterpreter.prototype.onMessageNVLFinish = function(e) {
    var messageObject;
    messageObject = gs.ObjectManager.current.objectById("gameMessageNVL_message");
    messageObject.character = null;
    messageObject.events.off("finish", e.handler);
    this.isWaiting = false;
    this.waitingFor.messageNVL = null;
    if ((messageObject.voice != null) && GameManager.settings.skipVoiceOnAction) {
      return AudioManager.stopSound(messageObject.voice.name);
    }
  };


  /**
  * Idle
  * @method commandIdle
  * @protected
   */

  Component_CommandInterpreter.prototype.commandIdle = function() {
    return this.interpreter.isWaiting = true;
  };


  /**
  * Start Timer
  * @method commandStartTimer
  * @protected
   */

  Component_CommandInterpreter.prototype.commandStartTimer = function() {
    var number, timers;
    timers = this.interpreter.timers;
    number = this.interpreter.numberValueOf(this.params.number);
    if (timers[number] != null) {
      clearInterval(timers[number]);
      timers[number] = null;
    }
    return timers[number] = setInterval(((function(_this) {
      return function(params) {
        switch (params.action.type) {
          case 0:
            if (params.labelIndex != null) {
              return _this.interpreter.pointer = params.labelIndex;
            } else {
              return _this.interpreter.jumpToLabel(params.action.data.label);
            }
            break;
          case 1:
            return _this.interpreter.callCommonEvent(params.commonEventId);
        }
      };
    })(this)), this.interpreter.numberValueOf(this.params.interval), this.params);
  };


  /**
  * Stop Timer
  * @method commandStopTimer
  * @protected
   */

  Component_CommandInterpreter.prototype.commandStopTimer = function() {
    var number, timers;
    timers = this.interpreter.timers;
    number = this.interpreter.numberValueOf(this.params.number);
    if (timers[number] != null) {
      clearInterval(timers[number]);
      return timers[number] = null;
    }
  };


  /**
  * Wait
  * @method commandWait
  * @protected
   */

  Component_CommandInterpreter.prototype.commandWait = function() {
    var time;
    time = this.interpreter.durationValueOf(this.params.time);
    if ((time != null) && time > 0 && !this.interpreter.previewData) {
      this.interpreter.waitCounter = time;
      return this.interpreter.isWaiting = true;
    }
  };


  /**
  * Loop
  * @method commandLoop
  * @protected
   */

  Component_CommandInterpreter.prototype.commandLoop = function() {
    this.interpreter.loops[this.interpreter.indent] = this.interpreter.pointer;
    return this.interpreter.indent++;
  };


  /**
  * Break Loop
  * @method commandBreakLoop
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBreakLoop = function() {
    var indent;
    indent = this.indent;
    while ((this.interpreter.loops[indent] == null) && indent > 0) {
      indent--;
    }
    this.interpreter.loops[indent] = null;
    return this.interpreter.indent = indent;
  };


  /**
  * @method commandListAdd
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListAdd = function() {
    var list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    switch (this.params.valueType) {
      case 0:
        list.push(this.interpreter.numberValueOf(this.params.numberValue));
        break;
      case 1:
        list.push(this.interpreter.booleanValueOf(this.params.switchValue));
        break;
      case 2:
        list.push(this.interpreter.stringValueOf(this.params.stringValue));
        break;
      case 3:
        list.push(this.interpreter.listObjectOf(this.params.listValue));
    }
    return this.interpreter.setListObjectTo(this.params.listVariable, list);
  };


  /**
  * @method commandListPop
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListPop = function() {
    var list, ref, value;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    value = (ref = list.pop()) != null ? ref : 0;
    return this.interpreter.storeListValue(this.params.targetVariable, list, value, this.params.valueType);
  };


  /**
  * @method commandListShift
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListShift = function() {
    var list, ref, value;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    value = (ref = list.shift()) != null ? ref : 0;
    return this.interpreter.storeListValue(this.params.targetVariable, list, value, this.params.valueType);
  };


  /**
  * @method commandListIndexOf
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListIndexOf = function() {
    var list, value;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    value = -1;
    switch (this.params.valueType) {
      case 0:
        value = list.indexOf(this.interpreter.numberValueOf(this.params.numberValue));
        break;
      case 1:
        value = list.indexOf(this.interpreter.booleanValueOf(this.params.switchValue));
        break;
      case 2:
        value = list.indexOf(this.interpreter.stringValueOf(this.params.stringValue));
        break;
      case 3:
        value = list.indexOf(this.interpreter.listObjectOf(this.params.listValue));
    }
    return this.interpreter.setNumberValueTo(this.params.targetVariable, value);
  };


  /**
  * @method commandListValueAt
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListValueAt = function() {
    var index, list, ref, value;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    index = this.interpreter.numberValueOf(this.params.index);
    if (index >= 0 && index < list.length) {
      value = (ref = list[index]) != null ? ref : 0;
      return this.interpreter.storeListValue(this.params.targetVariable, list, value, this.params.valueType);
    }
  };


  /**
  * @method commandListRemoveAt
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListRemoveAt = function() {
    var index, list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    index = this.interpreter.numberValueOf(this.params.index);
    if (index >= 0 && index < list.length) {
      return list.splice(index, 1);
    }
  };


  /**
  * @method commandListInsertAt
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListInsertAt = function() {
    var index, list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    index = this.interpreter.numberValueOf(this.params.index);
    if (index >= 0 && index < list.length) {
      switch (this.params.valueType) {
        case 0:
          list.splice(index, 0, this.interpreter.numberValueOf(this.params.numberValue));
          break;
        case 1:
          list.splice(index, 0, this.interpreter.booleanValueOf(this.params.switchValue));
          break;
        case 2:
          list.splice(index, 0, this.interpreter.stringValueOf(this.params.stringValue));
          break;
        case 3:
          list.splice(index, 0, this.interpreter.listObjectOf(this.params.listValue));
      }
      return this.interpreter.setListObjectTo(this.params.listVariable, list);
    }
  };


  /**
  * @method commandListSet
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListSet = function() {
    var index, list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    index = this.interpreter.numberValueOf(this.params.index);
    if (index >= 0) {
      switch (this.params.valueType) {
        case 0:
          list[index] = this.interpreter.numberValueOf(this.params.numberValue);
          break;
        case 1:
          list[index] = this.interpreter.booleanValueOf(this.params.switchValue);
          break;
        case 2:
          list[index] = this.interpreter.stringValueOf(this.params.stringValue);
          break;
        case 3:
          list[index] = this.interpreter.listObjectOf(this.params.listValue);
      }
      return this.interpreter.setListObjectTo(this.params.listVariable, list);
    }
  };


  /**
  * @method commandListCopy
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListCopy = function() {
    var copy, list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    copy = Object.deepCopy(list);
    return this.interpreter.setListObjectTo(this.params.targetVariable, copy);
  };


  /**
  * @method commandListLength
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListLength = function() {
    var list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    return this.interpreter.setNumberValueTo(this.params.targetVariable, list.length);
  };


  /**
  * @method commandListShuffle
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListShuffle = function() {
    var i, j, k, list, ref, results, tempi, tempj;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    if (list.length === 0) {
      return;
    }
    results = [];
    for (i = k = ref = list.length - 1; ref <= 1 ? k <= 1 : k >= 1; i = ref <= 1 ? ++k : --k) {
      j = Math.floor(Math.random() * (i + 1));
      tempi = list[i];
      tempj = list[j];
      list[i] = tempj;
      results.push(list[j] = tempi);
    }
    return results;
  };


  /**
  * @method commandListSort
  * @protected
   */

  Component_CommandInterpreter.prototype.commandListSort = function() {
    var list;
    list = this.interpreter.listObjectOf(this.params.listVariable);
    if (list.length === 0) {
      return;
    }
    switch (this.params.sortOrder) {
      case 0:
        return list.sort(function(a, b) {
          if (a < b) {
            return -1;
          }
          if (a > b) {
            return 1;
          }
          return 0;
        });
      case 1:
        return list.sort(function(a, b) {
          if (a > b) {
            return -1;
          }
          if (a < b) {
            return 1;
          }
          return 0;
        });
    }
  };


  /**
  * @method commandChangeNumberVariables
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeNumberVariables = function() {
    var diff, end, i, index, k, ref, ref1, scope, source, start;
    source = 0;
    switch (this.params.source) {
      case 0:
        source = this.interpreter.numberValueOf(this.params.sourceValue);
        break;
      case 1:
        start = this.interpreter.numberValueOf(this.params.sourceRandom.start);
        end = this.interpreter.numberValueOf(this.params.sourceRandom.end);
        diff = end - start;
        source = Math.floor(start + Math.random() * (diff + 1));
        break;
      case 2:
        source = this.interpreter.numberValueAtIndex(this.params.sourceScope, this.interpreter.numberValueOf(this.params.sourceReference) - 1);
        break;
      case 3:
        source = this.interpreter.numberValueOfGameData(this.params.sourceValue1);
        break;
      case 4:
        source = this.interpreter.numberValueOfDatabaseData(this.params.sourceValue1);
    }
    switch (this.params.target) {
      case 0:
        switch (this.params.operation) {
          case 0:
            this.interpreter.setNumberValueTo(this.params.targetVariable, source);
            break;
          case 1:
            this.interpreter.setNumberValueTo(this.params.targetVariable, this.interpreter.numberValueOf(this.params.targetVariable) + source);
            break;
          case 2:
            this.interpreter.setNumberValueTo(this.params.targetVariable, this.interpreter.numberValueOf(this.params.targetVariable) - source);
            break;
          case 3:
            this.interpreter.setNumberValueTo(this.params.targetVariable, this.interpreter.numberValueOf(this.params.targetVariable) * source);
            break;
          case 4:
            this.interpreter.setNumberValueTo(this.params.targetVariable, this.interpreter.numberValueOf(this.params.targetVariable) / source);
            break;
          case 5:
            this.interpreter.setNumberValueTo(this.params.targetVariable, this.interpreter.numberValueOf(this.params.targetVariable) % source);
        }
        break;
      case 1:
        scope = this.params.targetScope;
        start = this.params.targetRange.start - 1;
        end = this.params.targetRange.end - 1;
        for (i = k = ref = start, ref1 = end; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          switch (this.params.operation) {
            case 0:
              this.interpreter.setNumberValueAtIndex(scope, i, source);
              break;
            case 1:
              this.interpreter.setNumberValueAtIndex(scope, i, this.interpreter.numberValueAtIndex(scope, i) + source);
              break;
            case 2:
              this.interpreter.setNumberValueAtIndex(scope, i, this.interpreter.numberValueAtIndex(scope, i) - source);
              break;
            case 3:
              this.interpreter.setNumberValueAtIndex(scope, i, this.interpreter.numberValueAtIndex(scope, i) * source);
              break;
            case 4:
              this.interpreter.setNumberValueAtIndex(scope, i, this.interpreter.numberValueAtIndex(scope, i) / source);
              break;
            case 5:
              this.interpreter.setNumberValueAtIndex(scope, i, this.interpreter.numberValueAtIndex(scope, i) % source);
          }
        }
        break;
      case 2:
        index = this.interpreter.numberValueOf(this.params.targetReference) - 1;
        switch (this.params.operation) {
          case 0:
            this.interpreter.setNumberValueAtIndex(this.params.targetScope, index, source);
            break;
          case 1:
            this.interpreter.setNumberValueAtIndex(this.params.targetScope, index, this.interpreter.numberValueAtIndex(this.params.targetScope, index) + source);
            break;
          case 2:
            this.interpreter.setNumberValueAtIndex(this.params.targetScope, index, this.interpreter.numberValueAtIndex(this.params.targetScope, index) - source);
            break;
          case 3:
            this.interpreter.setNumberValueAtIndex(this.params.targetScope, index, this.interpreter.numberValueAtIndex(this.params.targetScope, index) * source);
            break;
          case 4:
            this.interpreter.setNumberValueAtIndex(this.params.targetScope, index, this.interpreter.numberValueAtIndex(this.params.targetScope, index) / source);
            break;
          case 5:
            this.interpreter.setNumberValueAtIndex(this.params.targetScope, index, this.interpreter.numberValueAtIndex(this.params.targetScope, index) % source);
        }
    }
    return null;
  };


  /**
  * @method commandChangeBooleanVariables
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeBooleanVariables = function() {
    var i, k, ref, ref1, source, targetValue, variable;
    source = this.interpreter.booleanValueOf(this.params.value);
    switch (this.params.target) {
      case 0:
        if (source === 2) {
          targetValue = this.interpreter.booleanValueOf(this.params.targetVariable);
          this.interpreter.setBooleanValueTo(this.params.targetVariable, targetValue ? 0 : 1);
        } else {
          this.interpreter.setBooleanValueTo(this.params.targetVariable, source);
        }
        break;
      case 1:
        variable = {
          index: 0,
          scope: this.params.targetRangeScope
        };
        for (i = k = ref = this.params.rangeStart - 1, ref1 = this.params.rangeEnd - 1; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          variable.index = i;
          if (source === 2) {
            targetValue = this.interpreter.booleanValueOf(variable);
            this.interpreter.setBooleanValueTo(variable, targetValue ? 0 : 1);
          } else {
            this.interpreter.setBooleanValueTo(variable, source);
          }
        }
    }
    return null;
  };


  /**
  * @method commandChangeStringVariables
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeStringVariables = function() {
    var ex, i, k, ref, ref1, source, variable;
    source = "";
    switch (this.params.valueType) {
      case 0:
        source = lcs(this.params.textValue);
        break;
      case 1:
        source = this.interpreter.stringValueOf(this.params.valueVariable);
        break;
      case 2:
        source = this.interpreter.stringValueOfDatabaseData(this.params.databaseData);
        break;
      case 2:
        try {
          source = eval(this.params.script);
        } catch (error) {
          ex = error;
          source = "ERR: " + ex.message;
        }
    }
    switch (this.params.target) {
      case 0:
        switch (this.params.operation) {
          case 0:
            this.interpreter.setStringValueTo(this.params.targetVariable, source);
            break;
          case 1:
            this.interpreter.setStringValueTo(this.params.targetVariable, this.interpreter.stringValueOf(this.params.targetVariable) + source);
            break;
          case 2:
            this.interpreter.setStringValueTo(this.params.targetVariable, this.interpreter.stringValueOf(this.params.targetVariable).toUpperCase());
            break;
          case 3:
            this.interpreter.setStringValueTo(this.params.targetVariable, this.interpreter.stringValueOf(this.params.targetVariable).toLowerCase());
        }
        break;
      case 1:
        variable = {
          index: 0,
          scope: this.params.targetRangeScope
        };
        for (i = k = ref = this.params.rangeStart - 1, ref1 = this.params.rangeEnd - 1; ref <= ref1 ? k <= ref1 : k >= ref1; i = ref <= ref1 ? ++k : --k) {
          variable.index = i;
          switch (this.params.operation) {
            case 0:
              this.interpreter.setStringValueTo(variable, source);
              break;
            case 1:
              this.interpreter.setStringValueTo(variable, this.interpreter.stringValueOf(variable) + source);
              break;
            case 2:
              this.interpreter.setStringValueTo(variable, this.interpreter.stringValueOf(variable).toUpperCase());
              break;
            case 3:
              this.interpreter.setStringValueTo(variable, this.interpreter.stringValueOf(variable).toLowerCase());
          }
        }
    }
    return null;
  };


  /**
  * @method commandCheckSwitch
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCheckSwitch = function() {
    var result;
    result = this.interpreter.booleanValueOf(this.params.targetVariable) && this.params.value;
    if (result) {
      return this.interpreter.pointer = this.params.labelIndex;
    }
  };


  /**
  * @method commandNumberCondition
  * @protected
   */

  Component_CommandInterpreter.prototype.commandNumberCondition = function() {
    var result;
    result = this.interpreter.compare(this.interpreter.numberValueOf(this.params.targetVariable), this.interpreter.numberValueOf(this.params.value), this.params.operation);
    this.interpreter.conditions[this.interpreter.indent] = result;
    if (result) {
      return this.interpreter.indent++;
    }
  };


  /**
  * @method commandCondition
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCondition = function() {
    var result;
    switch (this.params.valueType) {
      case 0:
        result = this.interpreter.compare(this.interpreter.numberValueOf(this.params.variable), this.interpreter.numberValueOf(this.params.numberValue), this.params.operation);
        break;
      case 1:
        result = this.interpreter.compare(this.interpreter.booleanValueOf(this.params.variable), this.interpreter.booleanValueOf(this.params.switchValue), this.params.operation);
        break;
      case 2:
        result = this.interpreter.compare(this.interpreter.stringValueOf(this.params.variable), this.interpreter.stringValueOf(this.params.textValue), this.params.operation);
    }
    this.interpreter.conditions[this.interpreter.indent] = result;
    if (result) {
      return this.interpreter.indent++;
    }
  };


  /**
  * @method commandConditionElse
  * @protected
   */

  Component_CommandInterpreter.prototype.commandConditionElse = function() {
    if (!this.interpreter.conditions[this.interpreter.indent]) {
      return this.interpreter.indent++;
    }
  };


  /**
  * @method commandConditionElseIf
  * @protected
   */

  Component_CommandInterpreter.prototype.commandConditionElseIf = function() {
    if (!this.interpreter.conditions[this.interpreter.indent]) {
      return this.interpreter.commandCondition.call(this);
    }
  };


  /**
  * @method commandCheckNumberVariable
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCheckNumberVariable = function() {
    var result;
    result = this.interpreter.compare(this.interpreter.numberValueOf(this.params.targetVariable), this.interpreter.numberValueOf(this.params.value), this.params.operation);
    if (result) {
      return this.interpreter.pointer = this.params.labelIndex;
    }
  };


  /**
  * @method commandCheckTextVariable
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCheckTextVariable = function() {
    var result, text1, text2;
    result = false;
    text1 = this.interpreter.stringValueOf(this.params.targetVariable);
    text2 = this.interpreter.stringValueOf(this.params.value);
    switch (this.params.operation) {
      case 0:
        result = text1 === text2;
        break;
      case 1:
        result = text1 !== text2;
        break;
      case 2:
        result = text1.length > text2.length;
        break;
      case 3:
        result = text1.length >= text2.length;
        break;
      case 4:
        result = text1.length < text2.length;
        break;
      case 5:
        result = text1.length <= text2.length;
    }
    if (result) {
      return this.interpreter.pointer = this.params.labelIndex;
    }
  };


  /**
  * @method commandLabel
  * @protected
   */

  Component_CommandInterpreter.prototype.commandLabel = function() {};


  /**
  * @method commandJumpToLabel
  * @protected
   */

  Component_CommandInterpreter.prototype.commandJumpToLabel = function() {
    var label;
    label = this.params.labelIndex;
    if (label != null) {
      return this.interpreter.pointer = label;
    } else {
      return this.interpreter.jumpToLabel(this.params.name);
    }
  };


  /**
  * @method commandClearMessage
  * @protected
   */

  Component_CommandInterpreter.prototype.commandClearMessage = function() {
    var messageObject, scene;
    scene = SceneManager.scene;
    messageObject = this.interpreter.targetMessage();
    if (messageObject == null) {
      return;
    }
    return messageObject.message.clear();
  };


  /**
  * @method commandClosePageNVL
  * @protected
   */

  Component_CommandInterpreter.prototype.commandClosePageNVL = function() {
    var messageBox, messageObject, scene;
    scene = SceneManager.scene;
    messageObject = gs.ObjectManager.current.objectById("gameMessageNVL_message");
    if (messageObject == null) {
      return;
    }
    messageObject.message.clear();
    messageBox = gs.ObjectManager.current.objectById("messageBoxNVL");
    if (messageBox && this.params.visible !== messageBox.visible) {
      return messageBox.visible = false;
    }
  };


  /**
  * @method commandMessageBoxDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMessageBoxDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.messageBox;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.appearDuration)) {
      defaults.appearDuration = this.interpreter.durationValueOf(this.params.appearDuration);
    }
    if (!isLocked(flags.disappearDuration)) {
      defaults.disappearDuration = this.interpreter.durationValueOf(this.params.disappearDuration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags["appearEasing.type"])) {
      defaults.appearEasing = this.params.appearEasing;
    }
    if (!isLocked(flags["appearAnimation.type"])) {
      defaults.appearAnimation = this.params.appearAnimation;
    }
    if (!isLocked(flags["disappearEasing.type"])) {
      defaults.disappearEasing = this.params.disappearEasing;
    }
    if (!isLocked(flags["disappearAnimation.type"])) {
      return defaults.disappearAnimation = this.params.disappearAnimation;
    }
  };


  /**
  * @method commandShowMessageNVL
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowMessageNVL = function() {
    var character, messageObject, ref, ref1, ref2, scene, voiceSettings;
    scene = SceneManager.scene;
    scene.messageMode = vn.MessageMode.NVL;
    character = RecordManager.characters[this.params.characterId];
    scene.layout.visible = false;
    scene.layoutNVL.visible = true;
    messageObject = gs.ObjectManager.current.objectById("gameMessageNVL_message");
    if (messageObject == null) {
      return;
    }
    if ((ref = this.interpreter.messageBoxObject()) != null) {
      ref.visible = true;
    }
    messageObject.character = character;
    messageObject.message.addMessage(lcsm(this.params.message), character, !this.params.partial && GameManager.messages.length > 0, true);
    if (this.interpreter.messageSettings().backlog) {
      GameManager.backlog.push({
        character: character,
        message: lcsm(this.params.message),
        choices: []
      });
    }
    messageObject.events.on("finish", (function(_this) {
      return function(e) {
        return _this.interpreter.onMessageNVLFinish(e);
      };
    })(this));
    voiceSettings = GameManager.settings.voicesByCharacter[(ref1 = messageObject.character) != null ? ref1.index : void 0];
    if ((this.params.voice != null) && GameManager.settings.voiceEnabled && (!voiceSettings || voiceSettings.enabled)) {
      if (GameManager.settings.skipVoiceOnAction || !((ref2 = AudioManager.voice) != null ? ref2.playing : void 0)) {
        messageObject.voice = this.params.voice;
        AudioManager.playVoice(this.params.voice);
      }
    } else {
      AudioManager.voice = null;
    }
    this.interpreter.isWaiting = true;
    return this.interpreter.waitingFor.messageNVL = this.params;
  };


  /**
  * @method commandShowMessage
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowMessage = function() {
    var animation, character, defaults, duration, easing, expression, ref, scene, showMessage;
    scene = SceneManager.scene;
    scene.messageMode = vn.MessageMode.ADV;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    showMessage = (function(_this) {
      return function() {
        var messageObject, ref, settings, voiceSettings;
        character = RecordManager.characters[_this.params.characterId];
        scene.layout.visible = true;
        scene.layoutNVL.visible = false;
        messageObject = _this.interpreter.targetMessage();
        if (messageObject == null) {
          return;
        }
        scene.currentCharacter = character;
        messageObject.character = character;
        messageObject.opacity = 255;
        messageObject.message.showMessage(_this.interpreter, _this.params);
        messageObject.events.offByOwner("finish", _this.interpreter);
        messageObject.events.offByOwner("waiting", _this.interpreter);
        messageObject.events.on("finish", gs.CallBack("onMessageADVFinish", _this.interpreter), {
          params: _this.params
        }, _this.interpreter);
        messageObject.events.on("waiting", gs.CallBack("onMessageADVWaiting", _this.interpreter), null, _this.interpreter);
        settings = GameManager.settings;
        voiceSettings = settings.voicesByCharacter[character.index];
        if ((_this.params.voice != null) && GameManager.settings.voiceEnabled && (!voiceSettings || voiceSettings > 0)) {
          if ((GameManager.settings.skipVoiceOnAction || !((ref = AudioManager.voice) != null ? ref.playing : void 0)) && !GameManager.tempSettings.skip) {
            messageObject.voice = _this.params.voice;
            return messageObject.behavior.voice = AudioManager.playVoice(_this.params.voice);
          }
        } else {
          return messageObject.behavior.voice = null;
        }
      };
    })(this);
    if ((this.params.expressionId != null) && (character != null)) {
      expression = RecordManager.characterExpressions[this.params.expressionId || 0];
      defaults = GameManager.defaults.character;
      duration = !gs.CommandFieldFlags.isLocked(this.params.fieldFlags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.expressionDuration;
      easing = gs.Easings.fromObject(defaults.changeEasing);
      animation = defaults.changeAnimation;
      character.behavior.changeExpression(expression, animation, easing, duration, (function(_this) {
        return function() {
          return showMessage();
        };
      })(this));
    } else {
      showMessage();
    }
    this.interpreter.isWaiting = (ref = this.params.waitForCompletion) != null ? ref : true;
    return this.interpreter.waitingFor.messageADV = this.params;
  };


  /**
  * @method commandSetMessageArea
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSetMessageArea = function() {
    var messageLayout, number, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    if (scene.messageAreas[number]) {
      messageLayout = scene.messageAreas[number].layout;
      messageLayout.dstRect.x = this.params.box.x;
      messageLayout.dstRect.y = this.params.box.y;
      messageLayout.dstRect.width = this.params.box.size.width;
      messageLayout.dstRect.height = this.params.box.size.height;
      return messageLayout.needsUpdate = true;
    }
  };


  /**
  * @method commandMessageFading
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMessageFading = function() {
    return GameManager.tempSettings.messageFading = {
      duration: this.interpreter.durationValueOf(this.params.duration),
      animation: this.params.animation,
      easing: gs.Easings.fromObject(this.params.easing)
    };
  };


  /**
  * @method commandMessageSettings
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMessageSettings = function() {
    var flags, font, fontName, fontSize, isLocked, messageObject;
    messageObject = this.interpreter.targetMessage();
    if (!messageObject) {
      return;
    }
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.autoErase)) {
      this.interpreter.messageSettings().autoErase = this.params.autoErase;
    }
    if (!isLocked(flags.waitAtEnd)) {
      this.interpreter.messageSettings().waitAtEnd = this.params.waitAtEnd;
    }
    if (!isLocked(flags.backlog)) {
      this.interpreter.messageSettings().backlog = this.params.backlog;
    }
    fontName = !isLocked(flags.font) ? this.params.font : messageObject.font.name;
    fontSize = !isLocked(flags.size) ? this.params.size : messageObject.font.size;
    font = messageObject.font;
    if (!isLocked(flags.font) || !isLocked(flags.size)) {
      messageObject.font = new Font(fontName, fontSize);
    }
    messageObject.font.color = (flags.color != null) && !isLocked(flags.color) ? new Color(this.params.color) : font.color;
    messageObject.font.border = (flags.outline != null) && !isLocked(flags.outline) ? this.params.outline : font.border;
    messageObject.font.borderColor = (flags.borderColor != null) && !isLocked(flags.borderColor) ? new Color(this.params.outlineColor) : new Color(font.borderColor);
    messageObject.font.shadow = (flags.shadow != null) && !isLocked(flags.shadow) ? this.params.shadow : font.shadow;
    messageObject.font.shadowColor = (flags.shadowColor != null) && !isLocked(flags.shadowColor) ? new Color(this.params.shadowColor) : new Color(font.shadowColor);
    messageObject.font.bold = font.bold;
    messageObject.font.italic = font.italic;
    return messageObject.font.smallCaps = font.smallCaps;
  };


  /**
  * @method commandCreateMessageArea
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCreateMessageArea = function() {
    var message, messageLayout, number, scene;
    number = this.interpreter.numberValueOf(this.params.number);
    scene = SceneManager.scene;
    if (!scene.messageAreas[number]) {
      messageLayout = ui.UIManager.createControlFromDescriptor({
        type: "ui.CustomGameMessage",
        id: "customGameMessage_" + number,
        params: {
          id: "customGameMessage_" + number
        }
      }, this.interpreter.object);
      message = gs.ObjectManager.current.objectById("customGameMessage_" + number + "_message");
      messageLayout.dstRect.x = this.params.box.x;
      messageLayout.dstRect.y = this.params.box.y;
      messageLayout.dstRect.width = this.params.box.size.width;
      messageLayout.dstRect.height = this.params.box.size.height;
      messageLayout.needsUpdate = true;
      return scene.messageAreas[number] = {
        message: message,
        layout: messageLayout
      };
    }
  };


  /**
  * @method commandEraseMessageArea
  * @protected
   */

  Component_CommandInterpreter.prototype.commandEraseMessageArea = function() {
    var area, number, scene;
    number = this.interpreter.numberValueOf(this.params.number);
    scene = SceneManager.scene;
    area = scene.messageAreas[number];
    return area != null ? area.layout.dispose() : void 0;
  };


  /**
  * @method commandSetTargetMessage
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSetTargetMessage = function() {
    var message, ref, scene, target;
    message = this.interpreter.targetMessage();
    if (message != null) {
      message.textRenderer.isWaiting = false;
    }
    if (message != null) {
      message.behavior.isWaiting = false;
    }
    scene = SceneManager.scene;
    target = {
      type: this.params.type,
      id: null
    };
    switch (this.params.type) {
      case 0:
        target.id = this.params.id;
        break;
      case 1:
        target.id = this.interpreter.numberValueOf(this.params.number);
    }
    this.interpreter.settings.message.target = target;
    if (this.params.clear) {
      return (ref = this.interpreter.targetMessage()) != null ? ref.behavior.clear() : void 0;
    }
  };


  /**
  * @method commandBacklogVisibility
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBacklogVisibility = function() {
    var control;
    if (this.params.visible) {
      control = gs.ObjectManager.current.objectById("backlogBox");
      if (control == null) {
        control = gs.ObjectManager.current.objectById("backlog");
      }
      if (control != null) {
        control.dispose();
      }
      if (this.params.backgroundVisible) {
        return control = SceneManager.scene.behavior.createControl(this, {
          descriptor: "ui.MessageBacklogBox"
        });
      } else {
        return control = SceneManager.scene.behavior.createControl(this, {
          descriptor: "ui.MessageBacklog"
        });
      }
    } else {
      control = gs.ObjectManager.current.objectById("backlogBox");
      if (control == null) {
        control = gs.ObjectManager.current.objectById("backlog");
      }
      return control != null ? control.dispose() : void 0;
    }
  };


  /**
  * @method commandMessageVisibility
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMessageVisibility = function() {
    var animation, defaults, duration, easing, flags, isLocked, message;
    defaults = GameManager.defaults.messageBox;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    message = this.interpreter.targetMessage();
    if ((message == null) || this.params.visible === message.visible) {
      return;
    }
    if (this.params.visible) {
      duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
      easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromObject(this.params.easing) : gs.Easings.fromObject(defaults.appearEasing);
      animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
      message.animator.appear(message.dstRect.x, message.dstRect.y, this.params.animation, easing, duration);
    } else {
      duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.disappearDuration;
      easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromObject(this.params.easing) : gs.Easings.fromObject(defaults.disappearEasing);
      animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.disappearAnimation;
      message.animator.disappear(animation, easing, duration, function() {
        return message.visible = false;
      });
    }
    message.update();
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandMessageBoxVisibility
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMessageBoxVisibility = function() {
    var animation, defaults, duration, easing, flags, isLocked, messageBox;
    defaults = GameManager.defaults.messageBox;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    messageBox = this.interpreter.messageBoxObject();
    if ((messageBox == null) || this.params.visible === messageBox.visible) {
      return;
    }
    if (this.params.visible) {
      duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
      easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromObject(this.params.easing) : gs.Easings.fromObject(defaults.appearEasing);
      animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
      messageBox.animator.appear(messageBox.dstRect.x, messageBox.dstRect.y, this.params.animation, easing, duration);
    } else {
      duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.disappearDuration;
      easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromObject(this.params.easing) : gs.Easings.fromObject(defaults.disappearEasing);
      animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.disappearAnimation;
      messageBox.animator.disappear(animation, easing, duration, function() {
        return messageBox.visible = false;
      });
    }
    messageBox.update();
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandUIAccess
  * @protected
   */

  Component_CommandInterpreter.prototype.commandUIAccess = function() {
    var flags, isLocked;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.generalMenu)) {
      GameManager.tempSettings.menuAccess = this.interpreter.booleanValueOf(this.params.generalMenu);
    }
    if (!isLocked(flags.saveMenu)) {
      GameManager.tempSettings.saveMenuAccess = this.interpreter.booleanValueOf(this.params.saveMenu);
    }
    if (!isLocked(flags.loadMenu)) {
      GameManager.tempSettings.loadMenuAccess = this.interpreter.booleanValueOf(this.params.loadMenu);
    }
    if (!isLocked(flags.backlog)) {
      return GameManager.tempSettings.backlogAccess = this.interpreter.booleanValueOf(this.params.backlog);
    }
  };


  /**
  * @method commandUnlockCG
  * @protected
   */

  Component_CommandInterpreter.prototype.commandUnlockCG = function() {
    var cg;
    cg = RecordManager.cgGallery[this.interpreter.numberValueOf(this.params.cgId)];
    if (cg != null) {
      GameManager.globalData.cgGallery[cg.index] = {
        unlocked: true
      };
      return GameManager.saveGlobalData();
    }
  };


  /**
  * @method commandL2DMove
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DMove = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.moveObject(character, this.params.position, this.params);
  };


  /**
  * @method commandL2DMotionGroup
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DMotionGroup = function() {
    var character, motions, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    character.motionGroup = {
      name: this.params.data.motionGroup,
      loop: this.params.loop,
      playType: this.params.playType
    };
    if (this.params.waitForCompletion && !this.params.loop) {
      motions = character.model.motionsByGroup[character.motionGroup.name];
      if (motions != null) {
        this.interpreter.isWaiting = true;
        return this.interpreter.waitCounter = motions.sum(function(m) {
          return m.getDurationMSec() / 16.6;
        });
      }
    }
  };


  /**
  * @method commandL2DMotion
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DMotion = function() {
    var character, defaults, fadeInTime, flags, isLocked, motion, scene;
    defaults = GameManager.defaults.live2d;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    fadeInTime = !isLocked(flags.fadeInTime) ? this.params.fadeInTime : defaults.motionFadeInTime;
    character.motion = {
      name: this.params.data.motion,
      fadeInTime: fadeInTime,
      loop: this.params.loop
    };
    character.motionGroup = null;
    if (this.params.waitForCompletion && !this.params.loop) {
      motion = character.model.motions[character.motion.name];
      if (motion != null) {
        this.interpreter.isWaiting = true;
        return this.interpreter.waitCounter = motion.getDurationMSec() / 16.6;
      }
    }
  };


  /**
  * @method commandL2DExpression
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DExpression = function() {
    var character, defaults, fadeInTime, flags, isLocked, scene;
    defaults = GameManager.defaults.live2d;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    fadeInTime = !isLocked(flags.fadeInTime) ? this.params.fadeInTime : defaults.expressionFadeInTime;
    return character.expression = {
      name: this.params.data.expression,
      fadeInTime: fadeInTime
    };
  };


  /**
  * @method commandL2DExitScene
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DExitScene = function() {
    var defaults;
    defaults = GameManager.defaults.live2d;
    return this.interpreter.commandCharacterExitScene.call(this, defaults);
  };


  /**
  * @method commandL2DParameter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DParameter = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return character.visual.l2dObject.setParameter(this.params.param.name, this.interpreter.numberValueOf(this.params.param.value));
  };


  /**
  * @method commandL2DDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.live2d;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.appearDuration)) {
      defaults.appearDuration = this.interpreter.durationValueOf(this.params.appearDuration);
    }
    if (!isLocked(flags.disappearDuration)) {
      defaults.disappearDuration = this.interpreter.durationValueOf(this.params.disappearDuration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags.motionFadeInTime)) {
      defaults.motionFadeInTime = this.interpreter.numberValueOf(this.params.motionFadeInTime);
    }
    if (!isLocked(flags["appearEasing.type"])) {
      defaults.appearEasing = this.params.appearEasing;
    }
    if (!isLocked(flags["appearAnimation.type"])) {
      defaults.appearAnimation = this.params.appearAnimation;
    }
    if (!isLocked(flags["disappearEasing.type"])) {
      defaults.disappearEasing = this.params.disappearEasing;
    }
    if (!isLocked(flags["disappearAnimation.type"])) {
      return defaults.disappearAnimation = this.params.disappearAnimation;
    }
  };


  /**
  * @method commandL2DJoinScene
  * @protected
   */

  Component_CommandInterpreter.prototype.commandL2DJoinScene = function() {
    var animation, character, defaults, duration, easing, flags, isLocked, motionBlur, origin, p, record, scene, x, y, zIndex;
    defaults = GameManager.defaults.live2d;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    record = RecordManager.characters[this.interpreter.numberValueOf(this.params.characterId)];
    if (!record || scene.characters.first(function(v) {
      return v.rid === record.index;
    })) {
      return;
    }
    if (this.params.positionType === 1) {
      x = this.params.position.x;
      y = this.params.position.y;
    } else if (this.params.positionType === 2) {
      x = this.interpreter.numberValueOf(this.params.position.x);
      y = this.interpreter.numberValueOf(this.params.position.y);
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
    zIndex = !isLocked(flags.zOrder) ? this.interpreter.numberValueOf(this.params.zOrder) : defaults.zOrder;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
    motionBlur = !isLocked(flags["motionBlur.enabled"]) ? this.params.motionBlur : defaults.motionBlur;
    origin = !isLocked(flags.origin) ? this.params.origin : defaults.origin;
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    character = new vn.Object_Live2DCharacter(record);
    character.modelName = this.params.model.name;
    character.model = ResourceManager.getLive2DModel("Live2D/" + this.params.model.name);
    if (character.model.motions) {
      character.motion = {
        name: Object.keys(character.model.motions)[0] || "",
        fadeInTime: 0,
        loop: true
      };
    }
    character.dstRect.x = x;
    character.dstRect.y = y;
    character.anchor.x = !origin ? 0 : 0.5;
    character.anchor.y = !origin ? 0 : 0.5;
    character.blendMode = this.interpreter.numberValueOf(this.params.blendMode);
    character.zoom.x = this.params.position.zoom.d;
    character.zoom.y = this.params.position.zoom.d;
    character.zIndex = zIndex;
    character.update();
    if (this.params.positionType === 0) {
      p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, character, this.params);
      character.dstRect.x = p.x;
      character.dstRect.y = p.y;
    }
    return scene.behavior.addCharacter(character, false, {
      animation: animation,
      duration: duration,
      easing: easing,
      motionBlur: motionBlur
    });
  };


  /**
  * @method commandCharacterJoinScene
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterJoinScene = function() {
    var angle, animation, bitmap, character, defaults, duration, easing, flags, isLocked, mirror, motionBlur, origin, p, record, ref, ref1, ref2, scene, x, y, zIndex, zoom;
    defaults = GameManager.defaults.character;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    record = RecordManager.characters[this.params.characterId];
    if (!record || scene.characters.first(function(v) {
      return v.rid === record.index && !v.disposed;
    })) {
      return;
    }
    character = new vn.Object_Character(record, null, scene);
    character.expression = RecordManager.characterExpressions[((ref = this.params.expressionId) != null ? ref : record.defaultExpressionId) || 0];
    if (character.expression != null) {
      bitmap = ResourceManager.getBitmap("Graphics/Characters/" + ((ref1 = character.expression.idle[0]) != null ? ref1.resource.name : void 0));
    }
    mirror = false;
    angle = 0;
    zoom = 1;
    if (this.params.positionType === 1) {
      x = this.interpreter.numberValueOf(this.params.position.x);
      y = this.interpreter.numberValueOf(this.params.position.y);
      mirror = this.params.position.horizontalFlip;
      angle = this.params.position.angle || 0;
      zoom = this.params.position.zoom || 1;
    } else if (this.params.positionType === 2) {
      x = this.interpreter.numberValueOf(this.params.position.x);
      y = this.interpreter.numberValueOf(this.params.position.y);
      mirror = false;
      angle = 0;
      zoom = 1;
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
    origin = !isLocked(flags.origin) ? this.params.origin : defaults.origin;
    zIndex = !isLocked(flags.zOrder) ? this.interpreter.numberValueOf(this.params.zOrder) : defaults.zOrder;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
    motionBlur = !isLocked(flags["motionBlur.enabled"]) ? this.params.motionBlur : defaults.motionBlur;
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    if (character.expression != null) {
      bitmap = ResourceManager.getBitmap("Graphics/Characters/" + ((ref2 = character.expression.idle[0]) != null ? ref2.resource.name : void 0));
      if (this.params.origin === 1 && (bitmap != null)) {
        x += (bitmap.width * zoom - bitmap.width) / 2;
        y += (bitmap.height * zoom - bitmap.height) / 2;
      }
    }
    character.mirror = mirror;
    character.anchor.x = !origin ? 0 : 0.5;
    character.anchor.y = !origin ? 0 : 0.5;
    character.zoom.x = zoom;
    character.zoom.y = zoom;
    character.dstRect.x = x;
    character.dstRect.y = y;
    character.zIndex = zIndex || 200;
    character.blendMode = this.interpreter.numberValueOf(this.params.blendMode);
    character.angle = angle;
    character.setup();
    character.update();
    if (this.params.positionType === 0) {
      p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, character, this.params);
      character.dstRect.x = p.x;
      character.dstRect.y = p.y;
    }
    return scene.behavior.addCharacter(character, false, {
      animation: animation,
      duration: duration,
      easing: easing,
      motionBlur: motionBlur
    });
  };


  /**
  * @method commandCharacterExitScene
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterExitScene = function(defaults) {
    var animation, character, duration, easing, flags, isLocked, scene;
    defaults = defaults || GameManager.defaults.character;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.disappearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.disappearDuration;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.disappearAnimation;
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    return scene.behavior.removeCharacter(character, {
      animation: animation,
      duration: duration,
      easing: easing
    });
  };


  /**
  * @method commandCharacterChangeExpression
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterChangeExpression = function() {
    var animation, character, defaults, duration, easing, expression, flags, isLocked, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    defaults = GameManager.defaults.character;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.expressionDuration;
    expression = RecordManager.characterExpressions[this.params.expressionId || 0];
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromObject(this.params.easing) : gs.Easings.fromObject(defaults.changeEasing);
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.changeAnimation;
    character.behavior.changeExpression(expression, this.params.animation, easing, duration);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandCharacterSetParameter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterSetParameter = function() {
    var params, value;
    params = GameManager.characterParams[this.params.characterId];
    if ((params == null) || (this.params.param == null)) {
      return;
    }
    switch (this.params.valueType) {
      case 0:
        switch (this.params.param.type) {
          case 0:
            return params[this.params.param.name] = this.interpreter.numberValueOf(this.params.numberValue);
          case 1:
            return params[this.params.param.name] = this.interpreter.numberValueOf(this.params.numberValue).toString();
          case 2:
            return params[this.params.param.name] = this.interpreter.numberValueOf(this.params.numberValue) > 0;
        }
        break;
      case 1:
        switch (this.params.param.type) {
          case 0:
            value = this.interpreter.booleanValueOf(this.params.switchValue);
            return params[this.params.param.name] = value ? 1 : 0;
          case 1:
            value = this.interpreter.booleanValueOf(this.params.switchValue);
            return params[this.params.param.name] = value ? "ON" : "OFF";
          case 2:
            return params[this.params.param.name] = this.interpreter.booleanValueOf(this.params.switchValue);
        }
        break;
      case 2:
        switch (this.params.param.type) {
          case 0:
            value = this.interpreter.stringValueOf(this.params.textValue);
            return params[this.params.param.name] = value.length;
          case 1:
            return params[this.params.param.name] = this.interpreter.stringValueOf(this.params.textValue);
          case 2:
            return params[this.params.param.name] = this.interpreter.stringValueOf(this.params.textValue) === "ON";
        }
    }
  };


  /**
  * @method commandCharacterGetParameter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterGetParameter = function() {
    var params, value;
    params = GameManager.characterParams[this.params.characterId];
    if ((params == null) || (this.params.param == null)) {
      return;
    }
    value = params[this.params.param.name];
    switch (this.params.valueType) {
      case 0:
        switch (this.params.param.type) {
          case 0:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, value);
          case 1:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, value != null ? value.length : 0);
          case 2:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, value ? 1 : 0);
        }
        break;
      case 1:
        switch (this.params.param.type) {
          case 0:
            return this.interpreter.setBooleanValueTo(this.params.targetVariable, value > 0);
          case 1:
            return this.interpreter.setBooleanValueTo(this.params.targetVariable, value === "ON");
          case 2:
            return this.interpreter.setBooleanValueTo(this.params.targetVariable, value);
        }
        break;
      case 2:
        switch (this.params.param.type) {
          case 0:
            return this.interpreter.setStringValueTo(this.params.targetVariable, value != null ? value.toString() : "");
          case 1:
            return this.interpreter.setStringValueTo(this.params.targetVariable, value);
          case 2:
            return this.interpreter.setStringValueTo(this.params.targetVariable, value ? "ON" : "OFF");
        }
    }
  };


  /**
  * @method commandCharacterMotionBlur
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterMotionBlur = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return character.motionBlur.set(this.params.motionBlur);
  };


  /**
  * @method commandCharacterDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCharacterDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.character;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.appearDuration)) {
      defaults.appearDuration = this.interpreter.durationValueOf(this.params.appearDuration);
    }
    if (!isLocked(flags.disappearDuration)) {
      defaults.disappearDuration = this.interpreter.durationValueOf(this.params.disappearDuration);
    }
    if (!isLocked(flags.expressionDuration)) {
      defaults.expressionDuration = this.interpreter.durationValueOf(this.params.expressionDuration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags["appearEasing.type"])) {
      defaults.appearEasing = this.params.appearEasing;
    }
    if (!isLocked(flags["appearAnimation.type"])) {
      defaults.appearAnimation = this.params.appearAnimation;
    }
    if (!isLocked(flags["disappearEasing.type"])) {
      defaults.disappearEasing = this.params.disappearEasing;
    }
    if (!isLocked(flags["disappearAnimation.type"])) {
      defaults.disappearAnimation = this.params.disappearAnimation;
    }
    if (!isLocked(flags["motionBlur.enabled"])) {
      defaults.motionBlur = this.params.motionBlur;
    }
    if (!isLocked(flags.origin)) {
      return defaults.origin = this.params.origin;
    }
  };


  /**
  * @method commandFlashCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandFlashCharacter = function() {
    var character, duration, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    duration = this.interpreter.durationValueOf(this.params.duration);
    character.animator.flash(new Color(this.params.color), duration);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandZoomCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandZoomCharacter = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.zoomObject(character, this.params);
  };


  /**
  * @method commandRotateCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandRotateCharacter = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.rotateObject(character, this.params);
  };


  /**
  * @method commandBlendCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBlendCharacter = function() {
    var character;
    character = SceneManager.scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.blendObject(character, this.params);
  };


  /**
  * @method commandShakeCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShakeCharacter = function() {
    var character;
    character = SceneManager.scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.shakeObject(character, this.params);
  };


  /**
  * @method commandMaskCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMaskCharacter = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.maskObject(character, this.params);
  };


  /**
  * @method commandMoveCharacter
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMoveCharacter = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.moveObject(character, this.params.position, this.params);
  };


  /**
  * @method commandMoveCharacterPath
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMoveCharacterPath = function() {
    var character, scene;
    scene = SceneManager.scene;
    character = scene.characters.first((function(_this) {
      return function(v) {
        return v.rid === _this.params.characterId;
      };
    })(this));
    if (character == null) {
      return;
    }
    return this.interpreter.moveObjectPath(character, this.params.path, this.params);
  };


  /**
  * @method commandShakeBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShakeBackground = function() {
    var background;
    background = SceneManager.scene.backgrounds[this.interpreter.numberValueOf(this.params.layer)];
    if (background == null) {
      return;
    }
    return this.interpreter.shakeObject(background, this.params);
  };


  /**
  * @method commandScrollBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandScrollBackground = function() {
    var duration, easing, horizontalSpeed, layer, ref, scene, verticalSpeed;
    scene = SceneManager.scene;
    duration = this.interpreter.durationValueOf(this.params.duration);
    horizontalSpeed = this.interpreter.numberValueOf(this.params.horizontalSpeed);
    verticalSpeed = this.interpreter.numberValueOf(this.params.verticalSpeed);
    easing = gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut);
    layer = this.interpreter.numberValueOf(this.params.layer);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    return (ref = scene.backgrounds[layer]) != null ? ref.animator.move(horizontalSpeed, verticalSpeed, duration, easing) : void 0;
  };


  /**
  * @method commandScrollBackgroundTo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandScrollBackgroundTo = function() {
    var background, duration, easing, layer, p, scene, x, y;
    scene = SceneManager.scene;
    duration = this.interpreter.durationValueOf(this.params.duration);
    x = this.interpreter.numberValueOf(this.params.background.location.x);
    y = this.interpreter.numberValueOf(this.params.background.location.y);
    easing = gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut);
    layer = this.interpreter.numberValueOf(this.params.layer);
    background = scene.backgrounds[layer];
    if (!background) {
      return;
    }
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    if (this.params.positionType === 0) {
      p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, background, this.params);
      x = p.x;
      y = p.y;
    }
    return background.animator.moveTo(x, y, duration, easing);
  };


  /**
  * @method commandScrollBackgroundPath
  * @protected
   */

  Component_CommandInterpreter.prototype.commandScrollBackgroundPath = function() {
    var background, scene;
    scene = SceneManager.scene;
    background = scene.backgrounds[this.interpreter.numberValueOf(this.params.layer)];
    if (background == null) {
      return;
    }
    return this.interpreter.moveObjectPath(background, this.params.path, this.params);
  };


  /**
  * @method commandMaskBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMaskBackground = function() {
    var background, scene;
    scene = SceneManager.scene;
    background = scene.backgrounds[this.interpreter.numberValueOf(this.params.layer)];
    if (background == null) {
      return;
    }
    return this.interpreter.maskObject(background, this.params);
  };


  /**
  * @method commandZoomBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandZoomBackground = function() {
    var duration, easing, layer, ref, scene, x, y;
    scene = SceneManager.scene;
    duration = this.interpreter.durationValueOf(this.params.duration);
    x = this.interpreter.numberValueOf(this.params.zooming.x);
    y = this.interpreter.numberValueOf(this.params.zooming.y);
    easing = gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut);
    layer = this.interpreter.numberValueOf(this.params.layer);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    return (ref = scene.backgrounds[layer]) != null ? ref.animator.zoomTo(x / 100, y / 100, duration, easing) : void 0;
  };


  /**
  * @method commandTintBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandTintBackground = function() {
    var background, duration, easing, layer, scene;
    scene = SceneManager.scene;
    layer = this.interpreter.numberValueOf(this.params.layer);
    background = scene.backgrounds[layer];
    if (background == null) {
      return;
    }
    duration = this.interpreter.durationValueOf(this.params.duration);
    easing = gs.Easings.fromObject(this.params.easing);
    background.animator.tintTo(this.params.tone, duration, easing);
    return this.interpreter.waitForCompletion(background, this.params);
  };


  /**
  * @method commandBlendBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBlendBackground = function() {
    var background, layer;
    layer = this.interpreter.numberValueOf(this.params.layer);
    background = SceneManager.scene.backgrounds[layer];
    if (background == null) {
      return;
    }
    return this.interpreter.blendObject(background, this.params);
  };


  /**
  * @method commandBackgroundEffect
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBackgroundEffect = function() {
    var background, layer;
    layer = this.interpreter.numberValueOf(this.params.layer);
    background = SceneManager.scene.backgrounds[layer];
    if (background == null) {
      return;
    }
    return this.interpreter.objectEffect(background, this.params);
  };


  /**
  * @method commandBackgroundDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBackgroundDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.background;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.duration)) {
      defaults.duration = this.interpreter.durationValueOf(this.params.duration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags["easing.type"])) {
      defaults.easing = this.params.easing;
    }
    if (!isLocked(flags["animation.type"])) {
      defaults.animation = this.params.animation;
    }
    if (!isLocked(flags.origin)) {
      defaults.origin = this.params.origin;
    }
    if (!isLocked(flags.loopHorizontal)) {
      defaults.loopHorizontal = this.params.loopHorizontal;
    }
    if (!isLocked(flags.loopVertical)) {
      return defaults.loopVertical = this.params.loopVertical;
    }
  };


  /**
  * @method commandBackgroundMotionBlur
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBackgroundMotionBlur = function() {
    var background, layer;
    layer = this.interpreter.numberValueOf(this.params.layer);
    background = SceneManager.scene.backgrounds[layer];
    if (background == null) {
      return;
    }
    return background.motionBlur.set(this.params.motionBlur);
  };


  /**
  * @method commandChangeBackground
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeBackground = function() {
    var animation, defaults, duration, easing, flags, isLocked, layer, loopH, loopV, origin, scene, zIndex;
    defaults = GameManager.defaults.background;
    scene = SceneManager.scene;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.duration;
    loopH = !isLocked(flags.loopHorizontal) ? this.params.loopHorizontal : defaults.loopHorizontal;
    loopV = !isLocked(flags.loopVertical) ? this.params.loopVertical : defaults.loopVertical;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.animation;
    origin = !isLocked(flags.origin) ? this.params.origin : defaults.origin;
    zIndex = !isLocked(flags.zOrder) ? this.interpreter.numberValueOf(this.params.zOrder) : defaults.zOrder;
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      this.interpreter.waitCounter = duration;
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromObject(this.params.easing) : gs.Easings.fromObject(defaults.easing);
    layer = this.interpreter.numberValueOf(this.params.layer);
    scene.behavior.changeBackground(this.params.graphic, false, animation, easing, duration, 0, 0, layer, loopH, loopV);
    if (scene.backgrounds[layer]) {
      scene.backgrounds[layer].anchor.x = origin === 0 ? 0 : 0.5;
      scene.backgrounds[layer].anchor.y = origin === 0 ? 0 : 0.5;
      scene.backgrounds[layer].blendMode = this.interpreter.numberValueOf(this.params.blendMode);
      scene.backgrounds[layer].zIndex = zIndex;
      if (origin === 1) {
        scene.backgrounds[layer].dstRect.x = scene.backgrounds[layer].dstRect.x;
        scene.backgrounds[layer].dstRect.y = scene.backgrounds[layer].dstRect.y;
      }
      scene.backgrounds[layer].setup();
      return scene.backgrounds[layer].update();
    }
  };


  /**
  * @method commandCallScene
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCallScene = function() {
    return this.interpreter.callScene(this.params.scene.uid);
  };


  /**
  * @method commandChangeScene
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeScene = function() {
    var duration, flags, isLocked, newScene, scene, uid;
    if (GameManager.inLivePreview) {
      return;
    }
    scene = SceneManager.scene;
    if (!this.params.erasePictures) {
      scene.removeObject(scene.pictureContainer);
    }
    if (!this.params.eraseTexts) {
      scene.removeObject(scene.textContainer);
    }
    if (!this.params.eraseVideos) {
      scene.removeObject(scene.videoContainer);
    }
    if (this.params.scene) {
      GameManager.sceneData = {
        uid: uid = this.params.scene.uid,
        pictures: scene.pictures,
        texts: scene.texts,
        videos: scene.videos
      };
      flags = this.params.fieldFlags || {};
      isLocked = gs.CommandFieldFlags.isLocked;
      newScene = new vn.Object_Scene();
      newScene.sceneData = {
        uid: uid = this.params.scene.uid,
        pictures: scene.pictures,
        texts: scene.texts,
        videos: scene.videos
      };
      duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : SceneManager.transitionData.duration;
      SceneManager.switchTo(newScene);
    } else {
      SceneManager.switchTo(null);
    }
    this.interpreter.waitCounter = 1;
    return this.interpreter.isWaiting = true;
  };


  /**
  * @method commandSwitchToLayout
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSwitchToLayout = function() {
    var scene;
    if (GameManager.inLivePreview) {
      return;
    }
    if (ui.UIManager.layouts[this.params.layout.name] != null) {
      scene = new gs.Object_Layout(this.params.layout.name);
      SceneManager.switchTo(scene, this.params.savePrevious);
      this.interpreter.waitCounter = 1;
      return this.interpreter.isWaiting = true;
    }
  };


  /**
  * @method commandChangeTransition
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeTransition = function() {
    var flags, isLocked;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.duration)) {
      SceneManager.transitionData.duration = this.params.duration;
    }
    if (!isLocked(flags.graphic)) {
      SceneManager.transitionData.graphic = this.params.graphic;
    }
    if (!isLocked(flags.vague)) {
      return SceneManager.transitionData.vague = this.params.vague;
    }
  };


  /**
  * @method commandFreezeScreen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandFreezeScreen = function() {
    return Graphics.freeze();
  };


  /**
  * @method commandScreenTransition
  * @protected
   */

  Component_CommandInterpreter.prototype.commandScreenTransition = function() {
    var bitmap, defaults, duration, flags, graphicName, isLocked, ref, ref1, vague;
    defaults = GameManager.defaults.scene;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    graphicName = !isLocked(flags.graphic) ? (ref = this.params.graphic) != null ? ref.name : void 0 : (ref1 = SceneManager.transitionData.graphic) != null ? ref1.name : void 0;
    if (graphicName) {
      bitmap = !isLocked(flags.graphic) ? ResourceManager.getBitmap("Graphics/Masks/" + graphicName) : ResourceManager.getBitmap("Graphics/Masks/" + graphicName);
    }
    vague = !isLocked(flags.vague) ? this.interpreter.numberValueOf(this.params.vague) : SceneManager.transitionData.vague;
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : SceneManager.transitionData.duration;
    this.interpreter.isWaiting = !GameManager.inLivePreview;
    this.interpreter.waitCounter = duration;
    return Graphics.transition(duration, bitmap, vague);
  };


  /**
  * @method commandShakeScreen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShakeScreen = function() {
    if (SceneManager.scene.viewport == null) {
      return;
    }
    return this.interpreter.shakeObject(SceneManager.scene.viewport, this.params);
  };


  /**
  * @method commandTintScreen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandTintScreen = function() {
    var duration;
    duration = this.interpreter.durationValueOf(this.params.duration);
    SceneManager.scene.viewport.animator.tintTo(new Tone(this.params.tone), duration, gs.Easings.EASE_LINEAR[0]);
    if (this.params.waitForCompletion && duration > 0) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method command    reen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandZoomScreen = function() {
    var duration, easing, pan, scene;
    easing = gs.Easings.fromObject(this.params.easing);
    duration = this.interpreter.durationValueOf(this.params.duration);
    scene = SceneManager.scene;
    pan = this.interpreter.settings.screen.pan;

    /*
    for background in scene.backgrounds
        if background
            background.anchor.x = -((background.dstRect.x - pan.x) / (background.dstRect.width))
            background.anchor.y = -((background.dstRect.y - pan.y) / (background.dstRect.height))
            #@interpreter.zoomObject(background, @params)
            background.animator.zoomTo(@interpreter.numberValueOf(@params.zooming.x) / 100, @interpreter.numberValueOf(@params.zooming.y) / 100, duration, easing)
    
    for character in scene.characters
        if character
            character.anchor.x = -((character.dstRect.x - pan.x) / (character.dstRect.width))
            character.anchor.y = -((character.dstRect.y - pan.y) / (character.dstRect.height))
            #@interpreter.zoomObject(character, @params)
            character.animator.zoomTo(@interpreter.numberValueOf(@params.zooming.x) / 100, @interpreter.numberValueOf(@params.zooming.y) / 100, duration, easing)
     */
    SceneManager.scene.viewport.anchor.x = 0.5;
    SceneManager.scene.viewport.anchor.y = 0.5;
    SceneManager.scene.viewport.animator.zoomTo(this.interpreter.numberValueOf(this.params.zooming.x) / 100, this.interpreter.numberValueOf(this.params.zooming.y) / 100, duration, easing);
    return this.interpreter.waitForCompletion(null, this.params);
  };


  /**
  * @method commandPanScreen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPanScreen = function() {
    var duration, easing, scene, viewport;
    scene = SceneManager.scene;
    duration = this.interpreter.durationValueOf(this.params.duration);
    easing = gs.Easings.fromObject(this.params.easing);
    this.interpreter.settings.screen.pan.x -= this.params.position.x;
    this.interpreter.settings.screen.pan.y -= this.params.position.y;
    viewport = SceneManager.scene.viewport;
    viewport.animator.scrollTo(-this.params.position.x + viewport.dstRect.x, -this.params.position.y + viewport.dstRect.y, duration, easing);
    return this.interpreter.waitForCompletion(null, this.params);
  };


  /**
  * @method commandRotateScreen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandRotateScreen = function() {
    var duration, easing, pan, scene;
    scene = SceneManager.scene;
    easing = gs.Easings.fromObject(this.params.easing);
    duration = this.interpreter.durationValueOf(this.params.duration);
    pan = this.interpreter.settings.screen.pan;
    SceneManager.scene.viewport.anchor.x = 0.5;
    SceneManager.scene.viewport.anchor.y = 0.5;
    SceneManager.scene.viewport.animator.rotate(this.params.direction, this.interpreter.numberValueOf(this.params.speed) / 100, duration, easing);
    return this.interpreter.waitForCompletion(null, this.params);
  };


  /**
  * @method commandFlashScreen
  * @protected
   */

  Component_CommandInterpreter.prototype.commandFlashScreen = function() {
    var duration;
    duration = this.interpreter.durationValueOf(this.params.duration);
    SceneManager.scene.viewport.animator.flash(new Color(this.params.color), duration, gs.Easings.EASE_LINEAR[0]);
    if (this.params.waitForCompletion && duration !== 0) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandScreenEffect
  * @protected
   */

  Component_CommandInterpreter.prototype.commandScreenEffect = function() {
    var wobble;
    switch (this.params.type) {
      case 0:
        wobble = SceneManager.scene.viewport.effects.wobble;
        wobble.enabled = this.params.power > 0;
        wobble.power = this.params.power / 10000;
        wobble.speed = this.params.speed / 100;
        wobble.vertical = this.params.orientation === 0 || this.params.orientation === 2;
        return wobble.horizontal = this.params.orientation === 1 || this.params.orientation === 2;
      case 1:
        SceneManager.scene.viewport.visual.viewport.effects.blur.enabled = true;
        return SceneManager.scene.viewport.visual.viewport.effects.blur.passes = this.params.passes;
    }
  };


  /**
  * @method commandVideoDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandVideoDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.video;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.appearDuration)) {
      defaults.appearDuration = this.interpreter.durationValueOf(this.params.appearDuration);
    }
    if (!isLocked(flags.disappearDuration)) {
      defaults.disappearDuration = this.interpreter.durationValueOf(this.params.disappearDuration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags["appearEasing.type"])) {
      defaults.appearEasing = this.params.appearEasing;
    }
    if (!isLocked(flags["appearAnimation.type"])) {
      defaults.appearAnimation = this.params.appearAnimation;
    }
    if (!isLocked(flags["disappearEasing.type"])) {
      defaults.disappearEasing = this.params.disappearEasing;
    }
    if (!isLocked(flags["disappearAnimation.type"])) {
      defaults.disappearAnimation = this.params.disappearAnimation;
    }
    if (!isLocked(flags["motionBlur.enabled"])) {
      defaults.motionBlur = this.params.motionBlur;
    }
    if (!isLocked(flags.origin)) {
      return defaults.origin = this.params.origin;
    }
  };


  /**
  * @method commandShowVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowVideo = function() {
    var animation, defaults, duration, easing, flags, isLocked, number, origin, p, ref, scene, video, videos, x, y, zIndex;
    defaults = GameManager.defaults.video;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    videos = scene.videos;
    if (videos[number] == null) {
      videos[number] = new gs.Object_Video();
    }
    x = this.interpreter.numberValueOf(this.params.position.x);
    y = this.interpreter.numberValueOf(this.params.position.y);
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
    origin = !isLocked(flags.origin) ? this.params.origin : defaults.origin;
    zIndex = !isLocked(flags.zOrder) ? this.interpreter.numberValueOf(this.params.zOrder) : defaults.zOrder;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
    video = videos[number];
    video.video = (ref = this.params.video) != null ? ref.name : void 0;
    video.loop = true;
    video.dstRect.x = x;
    video.dstRect.y = y;
    video.blendMode = this.interpreter.numberValueOf(this.params.blendMode);
    video.anchor.x = origin === 0 ? 0 : 0.5;
    video.anchor.y = origin === 0 ? 0 : 0.5;
    video.zIndex = zIndex || (1000 + number);
    video.update();
    if (this.params.positionType === 0) {
      p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, video, this.params);
      video.dstRect.x = p.x;
      video.dstRect.y = p.y;
    }
    video.animator.appear(x, y, animation, easing, duration);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandMoveVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMoveVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandMovePicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandMoveVideoPath
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMoveVideoPath = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandMovePicturePath.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandRotateVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandRotateVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandRotatePicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandZoomVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandZoomVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandZoomPicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandBlendVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBlendVideo = function() {
    var video;
    video = SceneManager.scene.videos[this.interpreter.numberValueOf(this.params.number)];
    if (video == null) {
      return;
    }
    return this.interpreter.blendObject(video, this.params);
  };


  /**
  * @method commandTintVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandTintVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandTintPicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandFlashVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandFlashVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandFlashPicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandCropVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCropVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandCropPicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandVideoMotionBlur
  * @protected
   */

  Component_CommandInterpreter.prototype.commandVideoMotionBlur = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandPictureMotionBlur.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandMaskVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMaskVideo = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.videos;
    this.interpreter.commandMaskPicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandEraseVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandEraseVideo = function() {
    var animation, defaults, duration, easing, flags, isLocked, number, scene, video;
    defaults = GameManager.defaults.video;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    video = scene.videos[number];
    if (video == null) {
      return;
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.disappearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.disappearDuration;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.disappearAnimation;
    video.animator.disappear(animation, easing, duration, (function(_this) {
      return function(sender) {
        return sender.dispose();
      };
    })(this));
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandShowImageMap
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowImageMap = function() {
    var ref, ref1, ref2, ref3, ref4, ref5, scene;
    scene = SceneManager.scene;
    if ((ref = scene.imageMap) != null) {
      ref.dispose();
    }
    scene.imageMap = new gs.Object_ImageMap();
    scene.imageMap.dstRect.x = 0;
    scene.imageMap.dstRect.y = 0;
    scene.imageMap.hotspots = this.params.hotspots;
    scene.imageMap.images = [(ref1 = this.params.ground) != null ? ref1.name : void 0, (ref2 = this.params.hover) != null ? ref2.name : void 0, (ref3 = this.params.unselected) != null ? ref3.name : void 0, (ref4 = this.params.selected) != null ? ref4.name : void 0, (ref5 = this.params.selectedHover) != null ? ref5.name : void 0];
    scene.imageMap.events.on("jumpTo", (function(_this) {
      return function(e) {
        _this.interpreter.jumpToLabel(e.label);
        return _this.interpreter.isWaiting = false;
      };
    })(this));
    scene.imageMap.events.on("callCommonEvent", (function(_this) {
      return function(e) {
        _this.interpreter.callCommonEvent(e.commonEventId, [], !e.finish);
        return _this.interpreter.isWaiting = false;
      };
    })(this));
    scene.imageMap.setup();
    scene.addObject(scene.imageMap);
    scene.imageMap.update();
    this.interpreter.showObject(scene.imageMap, {
      x: 0,
      y: 0
    }, this.params);
    this.interpreter.isWaiting = true;
    if (this.params.waitForCompletion) {
      this.interpreter.waitCounter = 0;
    }
    return scene.imageMap.events.on("finish", (function(_this) {
      return function(sender) {
        return _this.interpreter.isWaiting = false;
      };
    })(this));
  };


  /**
  * @method commandEraseImageMap
  * @protected
   */

  Component_CommandInterpreter.prototype.commandEraseImageMap = function() {
    var scene;
    scene = SceneManager.scene;
    if (scene.imageMap == null) {
      return;
    }
    scene.imageMap.events.emit("finish", scene.imageMap);
    this.interpreter.eraseObject(scene.imageMap, this.params);
    return scene.imageMap = null;
  };


  /**
  * @method commandAddHotspot
  * @protected
   */

  Component_CommandInterpreter.prototype.commandAddHotspot = function() {
    var dragging, hotspot, hotspots, number, picture, ref, ref1, ref2, ref3, ref4, ref5, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    hotspots = scene.hotspots;
    if (hotspots[number] == null) {
      hotspots[number] = new gs.Object_Hotspot();
    }
    hotspot = hotspots[number];
    switch (this.params.positionType) {
      case 0:
        hotspot.dstRect.x = this.params.box.x;
        hotspot.dstRect.y = this.params.box.y;
        hotspot.dstRect.width = this.params.box.size.width;
        hotspot.dstRect.height = this.params.box.size.height;
        break;
      case 1:
        hotspot.dstRect.x = this.interpreter.numberValueOf(this.params.box.x);
        hotspot.dstRect.y = this.interpreter.numberValueOf(this.params.box.y);
        hotspot.dstRect.width = this.interpreter.numberValueOf(this.params.box.size.width);
        hotspot.dstRect.height = this.interpreter.numberValueOf(this.params.box.size.height);
        break;
      case 2:
        picture = scene.pictures[this.interpreter.numberValueOf(this.params.pictureNumber)];
        if (picture != null) {
          hotspot.target = picture;
        }
    }
    hotspot.behavior.shape = (ref = this.params.shape) != null ? ref : gs.HotspotShape.RECTANGLE;
    hotspot.images = [((ref1 = this.params.baseGraphic) != null ? ref1.name : void 0) || this.interpreter.stringValueOf(this.params.baseGraphic) || (picture != null ? picture.image : void 0), ((ref2 = this.params.hoverGraphic) != null ? ref2.name : void 0) || this.interpreter.stringValueOf(this.params.hoverGraphic), ((ref3 = this.params.selectedGraphic) != null ? ref3.name : void 0) || this.interpreter.stringValueOf(this.params.selectedGraphic), ((ref4 = this.params.selectedHoverGraphic) != null ? ref4.name : void 0) || this.interpreter.stringValueOf(this.params.selectedHoverGraphic), ((ref5 = this.params.unselectedGraphic) != null ? ref5.name : void 0) || this.interpreter.stringValueOf(this.params.unselectedGraphic)];
    if (this.params.actions.onClick.type !== 0 || this.params.actions.onClick.label) {
      hotspot.events.on("click", (function(_this) {
        return function() {
          return _this.interpreter.executeAction(_this.params.actions.onClick, false);
        };
      })(this));
    }
    if (this.params.actions.onEnter.type !== 0 || this.params.actions.onEnter.label) {
      hotspot.events.on("enter", (function(_this) {
        return function() {
          return _this.interpreter.executeAction(_this.params.actions.onEnter, true);
        };
      })(this));
    }
    if (this.params.actions.onLeave.type !== 0 || this.params.actions.onLeave.label) {
      hotspot.events.on("leave", (function(_this) {
        return function() {
          return _this.interpreter.executeAction(_this.params.actions.onLeave, false);
        };
      })(this));
    }
    if (this.params.actions.onDrag.type !== 0 || this.params.actions.onDrag.label) {
      hotspot.events.on("dragStart", (function(_this) {
        return function() {
          return _this.interpreter.executeAction(_this.params.actions.onDrag, true);
        };
      })(this));
      hotspot.events.on("drag", (function(_this) {
        return function() {
          return _this.interpreter.executeAction(_this.params.actions.onDrag, true);
        };
      })(this));
      hotspot.events.on("dragEnd", (function(_this) {
        return function() {
          return _this.interpreter.executeAction(_this.params.actions.onDrag, false);
        };
      })(this));
    }
    if (this.params.actions.onSelect.type !== 0 || this.params.actions.onSelect.label || this.params.actions.onDeselect.type !== 0 || this.params.actions.onDeselect.label) {
      hotspot.events.on("stateChanged", (function(_this) {
        return function(e) {
          if (e.sender.behavior.selected) {
            return _this.interpreter.executeAction(_this.params.actions.onSelect, true);
          } else {
            return _this.interpreter.executeAction(_this.params.actions.onDeselect, false);
          }
        };
      })(this));
    }
    hotspot.selectable = true;
    hotspot.setup();
    if (this.params.dragging.enabled) {
      dragging = this.params.dragging;
      hotspot.draggable = {
        rect: new Rect(dragging.rect.x, dragging.rect.y, dragging.rect.size.width, dragging.rect.size.height),
        axisX: dragging.horizontal,
        axisY: dragging.vertical
      };
      hotspot.addComponent(new ui.Component_Draggable());
      return hotspot.events.on("drag", (function(_this) {
        return function(e) {
          var drag;
          drag = e.sender.draggable;
          if (_this.params.dragging.horizontal) {
            return _this.interpreter.setNumberValueTo(_this.params.dragging.variable, Math.round((e.sender.dstRect.x - drag.rect.x) / (drag.rect.width - e.sender.dstRect.width) * 100));
          } else {
            return _this.interpreter.setNumberValueTo(_this.params.dragging.variable, Math.round((e.sender.dstRect.y - drag.rect.y) / (drag.rect.height - e.sender.dstRect.height) * 100));
          }
        };
      })(this));
    }
  };


  /**
  * @method commandChangeHotspotState
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeHotspotState = function() {
    var flags, hotspot, isLocked, number, scene;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    hotspot = scene.hotspots[number];
    if (!hotspot) {
      return;
    }
    if (!isLocked(flags.selected)) {
      hotspot.behavior.selected = this.interpreter.booleanValueOf(this.params.selected);
    }
    if (!isLocked(flags.enabled)) {
      hotspot.behavior.enabled = this.interpreter.booleanValueOf(this.params.enabled);
    }
    hotspot.behavior.updateInput();
    return hotspot.behavior.updateImage();
  };


  /**
  * @method commandEraseHotspot
  * @protected
   */

  Component_CommandInterpreter.prototype.commandEraseHotspot = function() {
    var number, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    if (scene.hotspots[number] != null) {
      scene.hotspots[number].dispose();
      return scene.hotspotContainer.eraseObject(number);
    }
  };


  /**
  * @method commandPictureDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPictureDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.picture;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.appearDuration)) {
      defaults.appearDuration = this.interpreter.durationValueOf(this.params.appearDuration);
    }
    if (!isLocked(flags.disappearDuration)) {
      defaults.disappearDuration = this.interpreter.durationValueOf(this.params.disappearDuration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags["appearEasing.type"])) {
      defaults.appearEasing = this.params.appearEasing;
    }
    if (!isLocked(flags["appearAnimation.type"])) {
      defaults.appearAnimation = this.params.appearAnimation;
    }
    if (!isLocked(flags["disappearEasing.type"])) {
      defaults.disappearEasing = this.params.disappearEasing;
    }
    if (!isLocked(flags["disappearAnimation.type"])) {
      defaults.disappearAnimation = this.params.disappearAnimation;
    }
    if (!isLocked(flags["motionBlur.enabled"])) {
      defaults.motionBlur = this.params.motionBlur;
    }
    if (!isLocked(flags.origin)) {
      return defaults.origin = this.params.origin;
    }
  };

  Component_CommandInterpreter.prototype.createPicture = function(graphic, params) {
    var animation, bitmap, defaults, duration, easing, flags, isLocked, number, origin, picture, pictures, ref, ref1, scene, x, y, zIndex;
    defaults = GameManager.defaults.picture;
    flags = params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.numberValueOf(params.number);
    pictures = scene.pictures;
    if (pictures[number] == null) {
      pictures[number] = new gs.Object_Picture();
    }
    x = this.numberValueOf(params.position.x);
    y = this.numberValueOf(params.position.y);
    picture = pictures[number];
    picture.image = graphic != null ? graphic.name : void 0;
    bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + (graphic != null ? graphic.name : void 0));
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.numberValueOf(params.easing.type), params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.durationValueOf(params.duration) : defaults.appearDuration;
    origin = !isLocked(flags.origin) ? params.origin : defaults.origin;
    zIndex = !isLocked(flags.zOrder) ? this.numberValueOf(params.zOrder) : defaults.zOrder;
    animation = !isLocked(flags["animation.type"]) ? params.animation : defaults.appearAnimation;
    picture.mirror = params.position.horizontalFlip;
    picture.angle = params.position.angle || 0;
    picture.zoom.x = ((ref = params.position.data) != null ? ref.zoom : void 0) || 1;
    picture.zoom.y = ((ref1 = params.position.data) != null ? ref1.zoom : void 0) || 1;
    picture.blendMode = this.numberValueOf(params.blendMode);
    if (params.origin === 1 && (bitmap != null)) {
      x += (bitmap.width * picture.zoom.x - bitmap.width) / 2;
      y += (bitmap.height * picture.zoom.y - bitmap.height) / 2;
    }
    picture.dstRect.x = x;
    picture.dstRect.y = y;
    picture.anchor.x = origin === 1 ? 0.5 : 0;
    picture.anchor.y = origin === 1 ? 0.5 : 0;
    picture.zIndex = zIndex || (700 + number);
    picture.update();
    return picture;
  };


  /**
  * @method commandShowPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowPicture = function() {
    var animation, defaults, duration, easing, flags, isLocked, p, picture;
    defaults = GameManager.defaults.picture;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    picture = this.interpreter.createPicture(this.params.graphic, this.params);
    if (this.params.positionType === 0) {
      p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, picture, this.params);
      picture.dstRect.x = p.x;
      picture.dstRect.y = p.y;
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
    picture.animator.appear(picture.dstRect.x, picture.dstRect.y, animation, easing, duration);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandPlayPictureAnimation
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPlayPictureAnimation = function() {
    var animation, bitmap, component, defaults, duration, easing, flags, isLocked, p, picture, record;
    defaults = GameManager.defaults.picture;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    picture = null;
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
    if (this.params.animationId != null) {
      record = RecordManager.animations[this.params.animationId];
      if (record != null) {
        picture = this.interpreter.createPicture(record.graphic, this.params);
        component = picture.findComponent("Component_FrameAnimation");
        if (component != null) {
          component.refresh(record);
          component.start();
        } else {
          component = new gs.Component_FrameAnimation(record);
          picture.addComponent(component);
        }
        component.update();
        if (this.params.positionType === 0) {
          p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, picture, this.params);
          picture.dstRect.x = p.x;
          picture.dstRect.y = p.y;
        }
        picture.animator.appear(picture.dstRect.x, picture.dstRect.y, animation, easing, duration);
      }
    } else {
      picture = SceneManager.scene.pictures[this.interpreter.numberValueOf(this.params.number)];
      animation = picture != null ? picture.findComponent("Component_FrameAnimation") : void 0;
      if (animation != null) {
        picture.removeComponent(animation);
        bitmap = ResourceManager.getBitmap("Graphics/Animations/" + picture.image);
        if (bitmap != null) {
          picture.srcRect.set(0, 0, bitmap.width, bitmap.height);
          picture.dstRect.width = picture.srcRect.width;
          picture.dstRect.height = picture.srcRect.height;
        }
      }
    }
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandMovePicturePath
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMovePicturePath = function() {
    var number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    return this.interpreter.moveObjectPath(picture, this.params.path, this.params);
  };


  /**
  * @method commandMovePicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMovePicture = function() {
    var number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    return this.interpreter.moveObject(picture, this.params.picture.position, this.params);
  };


  /**
  * @method commandTintPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandTintPicture = function() {
    var duration, easing, number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    duration = this.interpreter.durationValueOf(this.params.duration);
    easing = gs.Easings.fromObject(this.params.easing);
    picture.animator.tintTo(this.params.tone, duration, easing);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandFlashPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandFlashPicture = function() {
    var duration, number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    duration = this.interpreter.durationValueOf(this.params.duration);
    picture.animator.flash(new Color(this.params.color), duration);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandCropPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCropPicture = function() {
    var number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    picture.srcRect.x = this.interpreter.numberValueOf(this.params.x);
    picture.srcRect.y = this.interpreter.numberValueOf(this.params.y);
    picture.srcRect.width = this.interpreter.numberValueOf(this.params.width);
    picture.srcRect.height = this.interpreter.numberValueOf(this.params.height);
    picture.dstRect.width = this.interpreter.numberValueOf(this.params.width);
    return picture.dstRect.height = this.interpreter.numberValueOf(this.params.height);
  };


  /**
  * @method commandRotatePicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandRotatePicture = function() {
    var actualDuration, duration, easing, number, picture, scene, speed;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    easing = gs.Easings.fromObject(this.params.easing);
    if (GameManager.tempSettings.skip) {
      actualDuration = this.interpreter.durationValueOf(this.params.duration);
      duration = this.interpreter.durationValueOf(this.duration);
      speed = this.interpreter.numberValueOf(this.params.speed) / 100;
      speed = Math.round(duration / (actualDuration || 1) * speed);
      picture.animator.rotate(this.params.direction, speed, actualDuration || 1, easing);
      duration = actualDuration;
    } else {
      duration = this.interpreter.durationValueOf(this.params.duration);
      picture.animator.rotate(this.params.direction, this.interpreter.numberValueOf(this.params.speed) / 100, duration, easing);
    }
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandZoomPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandZoomPicture = function() {
    var duration, easing, number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    easing = gs.Easings.fromObject(this.params.easing);
    duration = this.interpreter.durationValueOf(this.params.duration);
    picture.animator.zoomTo(this.interpreter.numberValueOf(this.params.zooming.x) / 100, this.interpreter.numberValueOf(this.params.zooming.y) / 100, duration, easing);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandBlendPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBlendPicture = function() {
    var picture;
    picture = SceneManager.scene.pictures[this.interpreter.numberValueOf(this.params.number)];
    if (picture == null) {
      return;
    }
    return this.interpreter.blendObject(picture, this.params);
  };


  /**
  * @method commandShakePicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShakePicture = function() {
    var picture;
    picture = SceneManager.scene.pictures[this.interpreter.numberValueOf(this.params.number)];
    if (picture == null) {
      return;
    }
    return this.interpreter.shakeObject(picture, this.params);
  };


  /**
  * @method commandMaskPicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMaskPicture = function() {
    var number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    return this.interpreter.maskObject(picture, this.params);
  };


  /**
  * @method commandPictureMotionBlur
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPictureMotionBlur = function() {
    var number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    return picture.motionBlur.set(this.params.motionBlur);
  };


  /**
  * @method commandPictureEffect
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPictureEffect = function() {
    var number, picture, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    return this.interpreter.objectEffect(picture, this.params);
  };


  /**
  * @method commandErasePicture
  * @protected
   */

  Component_CommandInterpreter.prototype.commandErasePicture = function() {
    var animation, defaults, duration, easing, flags, isLocked, number, picture, scene;
    defaults = GameManager.defaults.picture;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    picture = scene.pictures[number];
    if (picture == null) {
      return;
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.disappearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.disappearDuration;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.disappearAnimation;
    picture.animator.disappear(animation, easing, duration, (function(_this) {
      return function(sender) {
        sender.dispose();
        return scene.pictures[number] = null;
      };
    })(this));
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandInputNumber
  * @protected
   */

  Component_CommandInterpreter.prototype.commandInputNumber = function() {
    var scene;
    scene = SceneManager.scene;
    this.interpreter.isWaiting = true;
    if (this.interpreter.isProcessingMessageInOtherContext()) {
      this.interpreter.waitForMessage();
      return;
    }
    if ((GameManager.settings.allowChoiceSkip || this.interpreter.preview) && GameManager.tempSettings.skip) {
      this.interpreter.isWaiting = false;
      this.interpreter.messageObject().behavior.clear();
      this.interpreter.setNumberValueTo(this.params.variable, 0);
      return;
    }
    $tempFields.digits = this.params.digits;
    scene.behavior.showInputNumber(this.params.digits, gs.CallBack("onInputNumberFinish", this.interpreter, this.params));
    return this.interpreter.waitingFor.inputNumber = this.params;
  };


  /**
  * @method commandChoiceTimer
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChoiceTimer = function() {
    var scene;
    scene = SceneManager.scene;
    GameManager.tempFields.choiceTimer = scene.choiceTimer;
    GameManager.tempFields.choiceTimerVisible = this.params.visible;
    if (this.params.enabled) {
      scene.choiceTimer.behavior.seconds = this.interpreter.numberValueOf(this.params.seconds);
      scene.choiceTimer.behavior.minutes = this.interpreter.numberValueOf(this.params.minutes);
      scene.choiceTimer.behavior.start();
      return scene.choiceTimer.events.on("finish", (function(_this) {
        return function(sender) {
          var defaultChoice, ref;
          if (scene.choiceWindow && ((ref = GameManager.tempFields.choices) != null ? ref.length : void 0) > 0) {
            defaultChoice = (GameManager.tempFields.choices.first(function(c) {
              return c.isDefault;
            })) || GameManager.tempFields.choices[0];
            return scene.choiceWindow.events.emit("selectionAccept", scene.choiceWindow, {
              labelIndex: defaultChoice.action.labelIndex
            });
          }
        };
      })(this));
    } else {
      return scene.choiceTimer.stop();
    }
  };


  /**
  * @method commandShowChoices
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowChoices = function() {
    var choices, defaultChoice, messageObject, pointer, scene;
    scene = SceneManager.scene;
    pointer = this.interpreter.pointer;
    choices = GameManager.tempFields.choices;
    if ((GameManager.settings.allowChoiceSkip || this.interpreter.previewData) && GameManager.tempSettings.skip) {
      messageObject = this.interpreter.messageObject();
      if (messageObject != null ? messageObject.visible : void 0) {
        messageObject.behavior.clear();
      }
      defaultChoice = (choices.first(function(c) {
        return c.isDefault;
      })) || choices[0];
      if (defaultChoice.action.labelIndex != null) {
        return this.interpreter.pointer = defaultChoice.action.labelIndex;
      } else {
        return this.interpreter.jumpToLabel(defaultChoice.action.label);
      }
    } else {
      if (choices.length > 0) {
        this.interpreter.isWaiting = true;
        return scene.behavior.showChoices(choices, gs.CallBack("onChoiceAccept", this.interpreter, {
          pointer: pointer,
          params: this.params
        }));
      }
    }
  };


  /**
  * @method commandShowChoice
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowChoice = function() {
    var choices, command, commands, dstRect, index, pointer, scene;
    scene = SceneManager.scene;
    commands = this.interpreter.object.commands;
    command = null;
    index = 0;
    pointer = this.interpreter.pointer;
    choices = null;
    dstRect = null;
    switch (this.params.positionType) {
      case 0:
        dstRect = null;
        break;
      case 1:
        dstRect = new Rect(this.params.box.x, this.params.box.y, this.params.box.size.width, this.params.box.size.height);
    }
    if (!GameManager.tempFields.choices) {
      GameManager.tempFields.choices = [];
    }
    choices = GameManager.tempFields.choices;
    return choices.push({
      dstRect: dstRect,
      text: this.params.text,
      index: index,
      action: this.params.action,
      isSelected: false,
      isDefault: this.params.defaultChoice,
      isEnabled: this.interpreter.booleanValueOf(this.params.enabled)
    });
  };


  /**
  * @method commandOpenMenu
  * @protected
   */

  Component_CommandInterpreter.prototype.commandOpenMenu = function() {
    SceneManager.switchTo(new gs.Object_Layout("menuLayout"), true);
    this.interpreter.waitCounter = 1;
    return this.interpreter.isWaiting = true;
  };


  /**
  * @method commandOpenLoadMenu
  * @protected
   */

  Component_CommandInterpreter.prototype.commandOpenLoadMenu = function() {
    SceneManager.switchTo(new gs.Object_Layout("loadMenuLayout"), true);
    this.interpreter.waitCounter = 1;
    return this.interpreter.isWaiting = true;
  };


  /**
  * @method commandOpenSaveMenu
  * @protected
   */

  Component_CommandInterpreter.prototype.commandOpenSaveMenu = function() {
    SceneManager.switchTo(new gs.Object_Layout("saveMenuLayout"), true);
    this.interpreter.waitCounter = 1;
    return this.interpreter.isWaiting = true;
  };


  /**
  * @method commandReturnToTitle
  * @protected
   */

  Component_CommandInterpreter.prototype.commandReturnToTitle = function() {
    SceneManager.clear();
    SceneManager.switchTo(new gs.Object_Layout("titleLayout"));
    this.interpreter.waitCounter = 1;
    return this.interpreter.isWaiting = true;
  };


  /**
  * @method commandPlayVideo
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPlayVideo = function() {
    var ref, scene;
    if ((GameManager.inLivePreview || GameManager.settings.allowVideoSkip) && GameManager.tempSettings.skip) {
      return;
    }
    GameManager.tempSettings.skip = false;
    scene = SceneManager.scene;
    if (((ref = this.params.video) != null ? ref.name : void 0) != null) {
      scene.video = ResourceManager.getVideo("Movies/" + this.params.video.name);
      this.videoSprite = new Sprite(Graphics.viewport);
      this.videoSprite.srcRect = new Rect(0, 0, scene.video.width, scene.video.height);
      this.videoSprite.video = scene.video;
      this.videoSprite.zoomX = Graphics.width / scene.video.width;
      this.videoSprite.zoomY = Graphics.height / scene.video.height;
      this.videoSprite.z = 99999999;
      scene.video.onEnded = (function(_this) {
        return function() {
          _this.interpreter.isWaiting = false;
          _this.videoSprite.dispose();
          return scene.video = null;
        };
      })(this);
      scene.video.volume = this.params.volume / 100;
      scene.video.playbackRate = this.params.playbackRate / 100;
      this.interpreter.isWaiting = true;
      return scene.video.play();
    }
  };


  /**
  * @method commandAudioDefaults
  * @protected
   */

  Component_CommandInterpreter.prototype.commandAudioDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.audio;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.musicFadeInDuration)) {
      defaults.musicFadeInDuration = this.params.musicFadeInDuration;
    }
    if (!isLocked(flags.musicFadeOutDuration)) {
      defaults.musicFadeOutDuration = this.params.musicFadeOutDuration;
    }
    if (!isLocked(flags.musicVolume)) {
      defaults.musicVolume = this.params.musicVolume;
    }
    if (!isLocked(flags.musicPlaybackRate)) {
      defaults.musicPlaybackRate = this.params.musicPlaybackRate;
    }
    if (!isLocked(flags.soundVolume)) {
      defaults.soundVolume = this.params.soundVolume;
    }
    if (!isLocked(flags.soundPlaybackRate)) {
      defaults.soundPlaybackRate = this.params.soundPlaybackRate;
    }
    if (!isLocked(flags.voiceVolume)) {
      defaults.voiceVolume = this.params.voiceVolume;
    }
    if (!isLocked(flags.voicePlaybackRate)) {
      return defaults.voicePlaybackRate = this.params.voicePlaybackRate;
    }
  };


  /**
  * @method commandPlayMusic
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPlayMusic = function() {
    var defaults, fadeDuration, flags, isLocked, music, playRange, playTime, playbackRate, volume;
    if (this.params.music == null) {
      return;
    }
    defaults = GameManager.defaults.audio;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (GameManager.settings.bgmEnabled) {
      fadeDuration = !isLocked(flags.fadeInDuration) ? this.params.fadeInDuration : defaults.musicFadeInDuration;
      volume = !isLocked(flags["music.volume"]) ? this.params.music.volume : defaults.musicVolume;
      playbackRate = !isLocked(flags["music.playbackRate"]) ? this.params.music.playbackRate : defaults.musicPlaybackRate;
      music = {
        name: this.params.music.name,
        volume: volume,
        playbackRate: playbackRate
      };
      if (this.params.playType === 1) {
        playTime = {
          min: this.params.playTime.min * 60,
          max: this.params.playTime.max * 60
        };
        playRange = {
          start: this.params.playRange.start * 60,
          end: this.params.playRange.end * 60
        };
        return AudioManager.playMusicRandom(music, fadeDuration, this.params.layer || 0, playTime, playRange);
      } else {
        return AudioManager.playMusic(this.params.music.name, volume, playbackRate, fadeDuration, this.params.layer || 0);
      }
    }
  };


  /**
  * @method commandStopMusic
  * @protected
   */

  Component_CommandInterpreter.prototype.commandStopMusic = function() {
    var defaults, fadeDuration, flags, isLocked;
    defaults = GameManager.defaults.audio;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    fadeDuration = !isLocked(flags.fadeOutDuration) ? this.params.fadeOutDuration : defaults.musicFadeOutDuration;
    return AudioManager.stopMusic(fadeDuration, this.interpreter.numberValueOf(this.params.layer));
  };


  /**
  * @method commandPauseMusic
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPauseMusic = function() {
    var defaults, fadeDuration, flags, isLocked;
    defaults = GameManager.defaults.audio;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    fadeDuration = !isLocked(flags.fadeOutDuration) ? this.params.fadeOutDuration : defaults.musicFadeOutDuration;
    return AudioManager.stopMusic(fadeDuration, this.interpreter.numberValueOf(this.params.layer));
  };


  /**
  * @method commandResumeMusic
  * @protected
   */

  Component_CommandInterpreter.prototype.commandResumeMusic = function() {
    var defaults, fadeDuration, flags, isLocked;
    defaults = GameManager.defaults.audio;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    fadeDuration = !isLocked(flags.fadeInDuration) ? this.params.fadeInDuration : defaults.musicFadeInDuration;
    return AudioManager.resumeMusic(fadeDuration, this.interpreter.numberValueOf(this.params.layer));
  };


  /**
  * @method commandPlaySound
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPlaySound = function() {
    var defaults, flags, isLocked, playbackRate, volume;
    defaults = GameManager.defaults.audio;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (GameManager.settings.soundEnabled && !GameManager.tempSettings.skip) {
      volume = !isLocked(flags["sound.volume"]) ? this.params.sound.volume : defaults.soundVolume;
      playbackRate = !isLocked(flags["sound.playbackRate"]) ? this.params.sound.playbackRate : defaults.soundPlaybackRate;
      return AudioManager.playSound(this.params.sound.name, volume, playbackRate, this.params.musicEffect);
    }
  };


  /**
  * @method commandEndCommonEvent
  * @protected
   */

  Component_CommandInterpreter.prototype.commandEndCommonEvent = function() {
    var event, eventId;
    eventId = this.interpreter.numberValueOf(this.params.commonEventId);
    event = GameManager.commonEvents[eventId];
    return event != null ? event.behavior.stop() : void 0;
  };


  /**
  * @method commandCallCommonEvent
  * @protected
   */

  Component_CommandInterpreter.prototype.commandCallCommonEvent = function() {
    var eventId, scene;
    scene = SceneManager.scene;
    eventId = this.interpreter.numberValueOf(this.params.commonEventId);
    return this.interpreter.callCommonEvent(eventId, this.params.parameters);
  };


  /**
  * @method commandChangeTextSettings
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeTextSettings = function() {
    var flags, font, fontName, fontSize, isLocked, number, scene, textSprite, texts;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    texts = scene.texts;
    if (texts[number] == null) {
      texts[number] = new gs.Object_Text();
      texts[number].visible = false;
    }
    textSprite = texts[number];
    font = textSprite.font;
    fontName = textSprite.font.name;
    fontSize = textSprite.font.size;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.font)) {
      fontName = this.interpreter.stringValueOf(this.params.font);
    }
    if (!isLocked(flags.size)) {
      fontSize = this.interpreter.numberValueOf(this.params.size);
    }
    if (!isLocked(flags.font) || !isLocked(flags.size)) {
      textSprite.font = new Font(fontName, fontSize);
    }
    textSprite.font.color = !isLocked(flags.color) ? new Color(this.params.color) : font.color;
    textSprite.font.border = !isLocked(flags.border) ? this.params.outline : font.border;
    textSprite.font.borderColor = !isLocked(flags.borderColor) ? new Color(this.params.outlineColor) : new Color(font.borderColor);
    textSprite.font.shadow = !isLocked(flags.shadow) ? this.params.shadow : font.shadow;
    textSprite.font.shadowColor = !isLocked(flags.shadowColor) ? new Color(this.params.shadowColor) : new Color(font.shadowColor);
    textSprite.behavior.refresh();
    return textSprite.update();
  };


  /**
  * @method commandChangeTextSettings
  * @protected
   */

  Component_CommandInterpreter.prototype.commandTextDefaults = function() {
    var defaults, flags, isLocked;
    defaults = GameManager.defaults.text;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    if (!isLocked(flags.appearDuration)) {
      defaults.appearDuration = this.interpreter.durationValueOf(this.params.appearDuration);
    }
    if (!isLocked(flags.disappearDuration)) {
      defaults.disappearDuration = this.interpreter.durationValueOf(this.params.disappearDuration);
    }
    if (!isLocked(flags.zOrder)) {
      defaults.zOrder = this.interpreter.numberValueOf(this.params.zOrder);
    }
    if (!isLocked(flags["appearEasing.type"])) {
      defaults.appearEasing = this.params.appearEasing;
    }
    if (!isLocked(flags["appearAnimation.type"])) {
      defaults.appearAnimation = this.params.appearAnimation;
    }
    if (!isLocked(flags["disappearEasing.type"])) {
      defaults.disappearEasing = this.params.disappearEasing;
    }
    if (!isLocked(flags["disappearAnimation.type"])) {
      defaults.disappearAnimation = this.params.disappearAnimation;
    }
    if (!isLocked(flags["motionBlur.enabled"])) {
      defaults.motionBlur = this.params.motionBlur;
    }
    if (!isLocked(flags.origin)) {
      return defaults.origin = this.params.origin;
    }
  };


  /**
  * @method commandShowText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandShowText = function() {
    var animation, defaults, duration, easing, flags, isLocked, number, origin, p, scene, text, textObject, texts, x, y, zIndex;
    defaults = GameManager.defaults.text;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    text = this.params.text;
    texts = scene.texts;
    if (texts[number] == null) {
      texts[number] = new gs.Object_Text();
    }
    x = this.interpreter.numberValueOf(this.params.position.x);
    y = this.interpreter.numberValueOf(this.params.position.y);
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.appearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.appearDuration;
    origin = !isLocked(flags.origin) ? this.params.origin : defaults.origin;
    zIndex = !isLocked(flags.zOrder) ? this.interpreter.numberValueOf(this.params.zOrder) : defaults.zOrder;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.appearAnimation;
    textObject = texts[number];
    textObject.text = text;
    textObject.dstRect.x = x;
    textObject.dstRect.y = y;
    textObject.blendMode = this.interpreter.numberValueOf(this.params.blendMode);
    textObject.anchor.x = origin === 0 ? 0 : 0.5;
    textObject.anchor.y = origin === 0 ? 0 : 0.5;
    textObject.zIndex = zIndex || (700 + number);
    textObject.sizeToFit = true;
    textObject.formatting = true;
    textObject.update();
    if (this.params.positionType === 0) {
      p = this.interpreter.predefinedObjectPosition(this.params.predefinedPositionId, textObject, this.params);
      textObject.dstRect.x = p.x;
      textObject.dstRect.y = p.y;
    }
    textObject.animator.appear(x, y, animation, easing, duration);
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandTextMotionBlur
  * @protected
   */

  Component_CommandInterpreter.prototype.commandTextMotionBlur = function() {
    var number, scene, text;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    text = scene.texts[number];
    if (text == null) {
      return;
    }
    return text.motionBlur.set(this.params.motionBlur);
  };


  /**
  * @method commandRefreshText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandRefreshText = function() {
    var number, scene, texts;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    texts = scene.texts;
    if (texts[number] == null) {
      return;
    }
    return texts[number].behavior.refresh();
  };


  /**
  * @method commandMoveText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMoveText = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.texts;
    this.interpreter.commandMovePicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandMoveTextPath
  * @protected
   */

  Component_CommandInterpreter.prototype.commandMoveTextPath = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.texts;
    this.interpreter.commandMovePicturePath.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandRotateText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandRotateText = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.texts;
    this.interpreter.commandRotatePicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandZoomText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandZoomText = function() {
    var number, pictures, scene;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    pictures = scene.pictures;
    scene.pictures = scene.texts;
    this.interpreter.commandZoomPicture.call(this);
    return scene.pictures = pictures;
  };


  /**
  * @method commandBlendText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandBlendText = function() {
    var text;
    text = SceneManager.scene.texts[this.interpreter.numberValueOf(this.params.number)];
    if (text == null) {
      return;
    }
    return this.interpreter.blendObject(text, this.params);
  };


  /**
  * @method commandColorText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandColorText = function() {
    var duration, easing, number, scene, text;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    text = scene.texts[number];
    duration = this.interpreter.durationValueOf(this.params.duration);
    easing = gs.Easings.fromObject(this.params.easing);
    if (text != null) {
      text.animator.colorTo(new Color(this.params.color), duration, easing);
      if (this.params.waitForCompletion && !(duration === 0)) {
        this.interpreter.isWaiting = true;
        return this.interpreter.waitCounter = duration;
      }
    }
  };


  /**
  * @method commandEraseText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandEraseText = function() {
    var animation, defaults, duration, easing, flags, isLocked, number, scene, text;
    defaults = GameManager.defaults.text;
    flags = this.params.fieldFlags || {};
    isLocked = gs.CommandFieldFlags.isLocked;
    scene = SceneManager.scene;
    number = this.interpreter.numberValueOf(this.params.number);
    text = scene.texts[number];
    if (text == null) {
      return;
    }
    easing = !isLocked(flags["easing.type"]) ? gs.Easings.fromValues(this.interpreter.numberValueOf(this.params.easing.type), this.params.easing.inOut) : gs.Easings.fromObject(defaults.disappearEasing);
    duration = !isLocked(flags.duration) ? this.interpreter.durationValueOf(this.params.duration) : defaults.disappearDuration;
    animation = !isLocked(flags["animation.type"]) ? this.params.animation : defaults.disappearAnimation;
    text.animator.disappear(animation, easing, duration, (function(_this) {
      return function(sender) {
        sender.dispose();
        return scene.texts[number] = null;
      };
    })(this));
    if (this.params.waitForCompletion && !(duration === 0)) {
      this.interpreter.isWaiting = true;
      return this.interpreter.waitCounter = duration;
    }
  };


  /**
  * @method commandInputText
  * @protected
   */

  Component_CommandInterpreter.prototype.commandInputText = function() {
    var scene;
    scene = SceneManager.scene;
    if ((GameManager.settings.allowChoiceSkip || this.interpreter.preview) && GameManager.tempSettings.skip) {
      this.interpreter.messageObject().behavior.clear();
      this.interpreter.setStringValueTo(this.params.variable, "");
      return;
    }
    this.interpreter.isWaiting = true;
    if (this.interpreter.isProcessingMessageInOtherContext()) {
      this.interpreter.waitForMessage();
      return;
    }
    $tempFields.letters = this.params.letters;
    scene.behavior.showInputText(this.params.letters, gs.CallBack("onInputTextFinish", this.interpreter, this.interpreter));
    return this.interpreter.waitingFor.inputText = this.params;
  };


  /**
  * @method commandSavePersistentData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSavePersistentData = function() {
    return GameManager.saveGlobalData();
  };


  /**
  * @method commandPrepareSaveGame
  * @protected
   */

  Component_CommandInterpreter.prototype.commandPrepareSaveGame = function() {
    if (this.interpreter.previewData != null) {
      return;
    }
    this.interpreter.pointer++;
    GameManager.prepareSaveGame(this.params.snapshot);
    return this.interpreter.pointer--;
  };


  /**
  * @method commandSaveGame
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSaveGame = function() {
    if (this.interpreter.previewData != null) {
      return;
    }
    return GameManager.save(this.interpreter.numberValueOf(this.params.slot) - 1);
  };


  /**
  * @method commandLoadGame
  * @protected
   */

  Component_CommandInterpreter.prototype.commandLoadGame = function() {
    if (this.interpreter.previewData != null) {
      return;
    }
    return GameManager.load(this.interpreter.numberValueOf(this.params.slot) - 1);
  };


  /**
  * @method commandWaitForInput
  * @protected
   */

  Component_CommandInterpreter.prototype.commandWaitForInput = function() {
    var f;
    gs.GlobalEventManager.offByOwner("mouseDown", this.object);
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    gs.GlobalEventManager.offByOwner("keyDown", this.object);
    gs.GlobalEventManager.offByOwner("keyUp", this.object);
    f = (function(_this) {
      return function() {
        var executeAction;
        executeAction = false;
        if (Input.Mouse.isButton(_this.params.key)) {
          executeAction = Input.Mouse.buttons[_this.params.key] === _this.params.state;
        } else {
          executeAction = Input.keys[_this.params.key] === _this.params.state;
        }
        if (executeAction) {
          _this.interpreter.isWaiting = false;
          gs.GlobalEventManager.offByOwner("mouseDown", _this.object);
          gs.GlobalEventManager.offByOwner("mouseUp", _this.object);
          gs.GlobalEventManager.offByOwner("keyDown", _this.object);
          return gs.GlobalEventManager.offByOwner("keyUp", _this.object);
        }
      };
    })(this);
    gs.GlobalEventManager.on("mouseDown", f, null, this.object);
    gs.GlobalEventManager.on("mouseUp", f, null, this.object);
    gs.GlobalEventManager.on("keyDown", f, null, this.object);
    gs.GlobalEventManager.on("KeyUp", f, null, this.object);
    return this.interpreter.isWaiting = true;
  };


  /**
  * @method commandGetInputData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandGetInputData = function() {
    switch (this.params.field) {
      case 0:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.A]);
      case 1:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.B]);
      case 2:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.X]);
      case 3:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.Y]);
      case 4:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.L]);
      case 5:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.R]);
      case 6:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.START]);
      case 7:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.keys[Input.SELECT]);
      case 8:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.Mouse.x);
      case 9:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.Mouse.y);
      case 10:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.Mouse.wheel);
      case 11:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.Mouse.buttons[Input.Mouse.LEFT]);
      case 12:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.Mouse.buttons[Input.Mouse.RIGHT]);
      case 13:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Input.Mouse.buttons[Input.Mouse.MIDDLE]);
    }
  };


  /**
  * @method commandGetGameData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandGetGameData = function() {
    var ref, ref1, settings, tempSettings;
    tempSettings = GameManager.tempSettings;
    settings = GameManager.settings;
    switch (this.params.field) {
      case 0:
        return this.interpreter.setStringValueTo(this.params.targetVariable, SceneManager.scene.sceneDocument.uid);
      case 1:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(Graphics.frameCount / 60));
      case 2:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(Graphics.frameCount / 60 / 60));
      case 3:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(Graphics.frameCount / 60 / 60 / 60));
      case 4:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, new Date().getDate());
      case 5:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, new Date().getDay());
      case 6:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, new Date().getMonth());
      case 7:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, new Date().getFullYear());
      case 8:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.allowSkip);
      case 9:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.allowSkipUnreadMessages);
      case 10:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, settings.messageSpeed);
      case 11:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.autoMessage.enabled);
      case 12:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, settings.autoMessage.time);
      case 13:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.autoMessage.waitForVoice);
      case 14:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.autoMessage.stopOnAction);
      case 15:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.timeMessageToVoice);
      case 16:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.allowVideoSkip);
      case 17:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.allowChoiceSkip);
      case 18:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.skipVoiceOnAction);
      case 19:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.fullScreen);
      case 20:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.adjustAspectRatio);
      case 21:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.confirmation);
      case 22:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, settings.bgmVolume);
      case 23:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, settings.voiceVolume);
      case 24:
        return this.interpreter.setNumberValueTo(this.params.targetVariable, settings.seVolume);
      case 25:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.bgmEnabled);
      case 26:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.voiceEnabled);
      case 27:
        return this.interpreter.setBooleanValueTo(this.params.targetVariable, settings.seEnabled);
      case 28:
        return this.interpreter.setStringValueTo(this.params.targetVariable, ((ref = LanguageManager.language) != null ? ref.code : void 0) || "");
      case 29:
        return this.interpreter.setStringValueTo(this.params.targetVariable, ((ref1 = LanguageManager.language) != null ? ref1.name : void 0) || "");
    }
  };


  /**
  * @method commandSetGameData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSetGameData = function() {
    var settings, tempSettings;
    tempSettings = GameManager.tempSettings;
    settings = GameManager.settings;
    switch (this.params.field) {
      case 0:
        return settings.allowSkip = this.interpreter.booleanValueOf(this.params.switchValue);
      case 1:
        return settings.allowSkipUnreadMessages = this.interpreter.booleanValueOf(this.params.switchValue);
      case 2:
        return settings.messageSpeed = this.interpreter.numberValueOf(this.params.numberValue);
      case 3:
        return settings.autoMessage.enabled = this.interpreter.booleanValueOf(this.params.switchValue);
      case 4:
        return settings.autoMessage.time = this.interpreter.numberValueOf(this.params.numberValue);
      case 5:
        return settings.autoMessage.waitForVoice = this.interpreter.booleanValueOf(this.params.switchValue);
      case 6:
        return settings.autoMessage.stopOnAction = this.interpreter.booleanValueOf(this.params.switchValue);
      case 7:
        return settings.timeMessageToVoice = this.interpreter.booleanValueOf(this.params.switchValue);
      case 8:
        return settings.allowVideoSkip = this.interpreter.booleanValueOf(this.params.switchValue);
      case 9:
        return settings.allowChoiceSkip = this.interpreter.booleanValueOf(this.params.switchValue);
      case 10:
        return settings.skipVoiceOnAction = this.interpreter.booleanValueOf(this.params.switchValue);
      case 11:
        settings.fullScreen = this.interpreter.booleanValueOf(this.params.switchValue);
        if (settings.fullScreen) {
          return SceneManager.scene.enterFullScreen();
        } else {
          return SceneManager.scene.leaveFullScreen();
        }
        break;
      case 12:
        settings.adjustAspectRatio = this.interpreter.booleanValueOf(this.params.switchValue);
        Graphics.keepRatio = settings.adjustAspectRatio;
        return Graphics.onResize();
      case 13:
        return settings.confirmation = this.interpreter.booleanValueOf(this.params.switchValue);
      case 14:
        return settings.bgmVolume = this.interpreter.numberValueOf(this.params.numberValue);
      case 15:
        return settings.voiceVolume = this.interpreter.numberValueOf(this.params.numberValue);
      case 16:
        return settings.seVolume = this.interpreter.numberValueOf(this.params.numberValue);
      case 17:
        return settings.bgmEnabled = this.interpreter.booleanValueOf(this.params.switchValue);
      case 18:
        return settings.voiceEnabled = this.interpreter.booleanValueOf(this.params.switchValue);
      case 19:
        return settings.seEnabled = this.interpreter.booleanValueOf(this.params.switchValue);
    }
  };


  /**
  * @method commandGetObjectData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandGetObjectData = function() {
    var area, field, object, ref, ref1;
    switch (this.params.objectType) {
      case 0:
        object = SceneManager.scene.pictures[this.interpreter.numberValueOf(this.params.number)];
        break;
      case 1:
        object = SceneManager.scene.backgrounds[this.interpreter.numberValueOf(this.params.layer)];
        break;
      case 2:
        object = SceneManager.scene.texts[this.interpreter.numberValueOf(this.params.number)];
        break;
      case 3:
        object = SceneManager.scene.videos[this.interpreter.numberValueOf(this.params.number)];
        break;
      case 4:
        object = SceneManager.scene.characters.first((function(_this) {
          return function(v) {
            return v.rid === _this.params.characterId;
          };
        })(this));
        break;
      case 5:
        object = gs.ObjectManager.current.objectById("messageBox");
        break;
      case 6:
        area = SceneManager.scene.messageAreas[this.interpreter.numberValueOf(this.params.number)];
        object = area != null ? area.layout : void 0;
        break;
      case 7:
        object = SceneManager.scene.hotspots[this.interpreter.numberValueOf(this.params.number)];
    }
    if (object != null) {
      field = this.params.field;
      if (this.params.objectType === 4) {
        switch (this.params.field) {
          case 0:
            this.interpreter.setNumberValueTo(this.params.targetVariable, ((ref = RecordManager.characters[this.params.characterId]) != null ? ref.index : void 0) || 0);
            break;
          case 1:
            this.interpreter.setStringValueTo(this.params.targetVariable, ((ref1 = RecordManager.characters[this.params.characterId]) != null ? ref1.name : void 0) || "");
        }
        field -= 2;
      }
      if (field >= 0) {
        switch (field) {
          case 0:
            switch (this.params.objectType) {
              case 2:
                return this.interpreter.setStringValueTo(this.params.targetVariable, object.text || "");
              case 3:
                return this.interpreter.setStringValueTo(this.params.targetVariable, object.video || "");
              default:
                return this.interpreter.setStringValueTo(this.params.targetVariable, object.image || "");
            }
            break;
          case 1:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.dstRect.x);
          case 2:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.dstRect.y);
          case 3:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(object.anchor.x * 100));
          case 4:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(object.anchor.y * 100));
          case 5:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(object.zoom.x * 100));
          case 6:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, Math.round(object.zoom.y * 100));
          case 7:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.dstRect.width);
          case 8:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.dstRect.height);
          case 9:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.zIndex);
          case 10:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.opacity);
          case 11:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.angle);
          case 12:
            return this.interpreter.setBooleanValueTo(this.params.targetVariable, object.visible);
          case 13:
            return this.interpreter.setNumberValueTo(this.params.targetVariable, object.blendMode);
          case 14:
            return this.interpreter.setBooleanValueTo(this.params.targetVariable, object.mirror);
        }
      }
    }
  };


  /**
  * @method commandSetObjectData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandSetObjectData = function() {
    var area, field, object, ref;
    switch (this.params.objectType) {
      case 0:
        object = SceneManager.scene.pictures[this.interpreter.numberValueOf(this.params.number)];
        break;
      case 1:
        object = SceneManager.scene.backgrounds[this.interpreter.numberValueOf(this.params.layer)];
        break;
      case 2:
        object = SceneManager.scene.texts[this.interpreter.numberValueOf(this.params.number)];
        break;
      case 3:
        object = SceneManager.scene.videos[this.interpreter.numberValueOf(this.params.number)];
        break;
      case 4:
        object = SceneManager.scene.characters.first((function(_this) {
          return function(v) {
            return v.rid === _this.params.characterId;
          };
        })(this));
        break;
      case 5:
        object = gs.ObjectManager.current.objectById("messageBox");
        break;
      case 6:
        area = SceneManager.scene.messageAreas[this.interpreter.numberValueOf(this.params.number)];
        object = area != null ? area.layout : void 0;
        break;
      case 7:
        object = SceneManager.scene.hotspots[this.interpreter.numberValueOf(this.params.number)];
    }
    if (object != null) {
      field = this.params.field;
      if (this.params.objectType === 4) {
        switch (field) {
          case 0:
            object.name = this.interpreter.stringValueOf(this.params.textValue);
            if ((ref = RecordManager.characters[object.rid]) != null) {
              ref.name = object.name;
            }
        }
        field--;
      }
      if (field >= 0) {
        switch (field) {
          case 0:
            switch (this.params.objectType) {
              case 2:
                return object.text = this.interpreter.stringValueOf(this.params.textValue);
              case 3:
                return object.video = this.interpreter.stringValueOf(this.params.textValue);
              default:
                return object.image = this.interpreter.stringValueOf(this.params.textValue);
            }
            break;
          case 1:
            return object.dstRect.x = this.interpreter.numberValueOf(this.params.numberValue);
          case 2:
            return object.dstRect.y = this.interpreter.numberValueOf(this.params.numberValue);
          case 3:
            return object.anchor.x = this.interpreter.numberValueOf(this.params.numberValue) / 100;
          case 4:
            return object.anchor.y = this.interpreter.numberValueOf(this.params.numberValue) / 100;
          case 5:
            return object.zoom.x = this.interpreter.numberValueOf(this.params.numberValue) / 100;
          case 6:
            return object.zoom.y = this.interpreter.numberValueOf(this.params.numberValue) / 100;
          case 7:
            return object.zIndex = this.interpreter.numberValueOf(this.params.numberValue);
          case 8:
            return object.opacity = this.interpreter.numberValueOf(this.params.numberValue);
          case 9:
            return object.angle = this.interpreter.numberValueOf(this.params.numberValue);
          case 10:
            return object.visible = this.interpreter.booleanValueOf(this.params.switchValue);
          case 11:
            return object.blendMode = this.interpreter.numberValueOf(this.params.numberValue);
          case 12:
            return object.mirror = this.interpreter.booleanValueOf(this.params.switchValue);
        }
      }
    }
  };


  /**
  * @method commandChangeSounds
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeSounds = function() {
    var fieldFlags, i, k, len, ref, results, sound, sounds;
    sounds = RecordManager.system.sounds;
    fieldFlags = this.params.fieldFlags || {};
    ref = this.params.sounds;
    results = [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      sound = ref[i];
      if (!gs.CommandFieldFlags.isLocked(fieldFlags["sounds." + i])) {
        results.push(sounds[i] = this.params.sounds[i]);
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * @method commandChangeColors
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeColors = function() {
    var color, colors, fieldFlags, i, k, len, ref, results;
    colors = RecordManager.system.colors;
    fieldFlags = this.params.fieldFlags || {};
    ref = this.params.colors;
    results = [];
    for (i = k = 0, len = ref.length; k < len; i = ++k) {
      color = ref[i];
      if (!gs.CommandFieldFlags.isLocked(fieldFlags["colors." + i])) {
        results.push(colors[i] = new gs.Color(this.params.colors[i]));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };


  /**
  * @method commandChangeScreenCursor
  * @protected
   */

  Component_CommandInterpreter.prototype.commandChangeScreenCursor = function() {
    var bitmap, ref;
    if (((ref = this.params.graphic) != null ? ref.name : void 0) != null) {
      bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + this.params.graphic.name);
      return Graphics.setCursorBitmap(bitmap, this.params.hx, this.params.hy);
    } else {
      return Graphics.setCursorBitmap(null, 0, 0);
    }
  };


  /**
  * @method commandResetGlobalData
  * @protected
   */

  Component_CommandInterpreter.prototype.commandResetGlobalData = function() {
    return GameManager.resetGlobalData();
  };


  /**
  * @method commandScript
  * @protected
   */

  Component_CommandInterpreter.prototype.commandScript = function() {
    var ex;
    this.interpreter.commandTintPicture;
    try {
      if (!this.params.scriptFunc) {
        this.params.scriptFunc = eval("(function(){" + this.params.script + "})");
      }
      return this.params.scriptFunc();
    } catch (error) {
      ex = error;
      return console.log(ex);
    }
  };

  return Component_CommandInterpreter;

})(gs.Component);

window.CommandInterpreter = Component_CommandInterpreter;

gs.Component_CommandInterpreter = Component_CommandInterpreter;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_CommandInterpreter_162.js
(function() {


}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIl19
//# sourceURL=UI_165.js
var Component_TextBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_TextBehavior = (function(superClass) {
  extend(Component_TextBehavior, superClass);

  Component_TextBehavior.memoryUsage = 0;


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_TextBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.refresh();
  };


  /**
  * 
  *
  * @module gs
  * @class Component_TextBehavior
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_TextBehavior() {
    Component_TextBehavior.__super__.constructor.call(this);

    /**
    * @property text
    * @type string
    * @protected
     */
    this.text = "";

    /**
    * @property text
    * @type string
    * @protected
     */
    this.font = new Font(gs.Fonts.TEXT);

    /**
    * @property format
    * @type string
    * @protected
     */
    this.format = null;
  }


  /**
  * Disposes the component and bitmap.
  *
  * @method dispose
   */

  Component_TextBehavior.prototype.dispose = function() {
    if (this.object.bitmap != null) {
      this.object.bitmap.dispose();
      return this.object.bitmap = null;
    }
  };


  /**
  * Redraws the texts on game object's bitmap.
  *
  * @method redraw
   */

  Component_TextBehavior.prototype.redraw = function() {
    var ref, text;
    if (this.text != null) {
      this.object.bitmap.clear();
      this.object.bitmap.font = this.object.font;
      text = lcs(this.text);
      if (this.format != null) {
        text = sprintf(this.format, text);
      }
      if (this.object.formatting) {
        return this.object.textRenderer.drawFormattedText(0, 0, this.object.dstRect.width, this.object.bitmap.font.size, text, (ref = this.object.wordWrap) != null ? ref : true);
      } else {
        return this.object.textRenderer.drawText(0, 0, this.object.bitmap.width, this.object.bitmap.font.size, text);
      }
    }
  };


  /**
  * Updates the game object's <b>dstRect</b> so that the text fits in. That only works
  * if the game object's <b>sizeToFit</b> property is set.
  *
  * @method refreshSize
   */

  Component_TextBehavior.prototype.refreshSize = function() {
    var ref, size, text;
    if (this.object.text == null) {
      return;
    }
    this.text = this.object.text;
    text = lcs(this.text).toString();
    if (this.format != null) {
      text = sprintf(this.format, text);
    }
    if (this.object.sizeToFit) {
      this.object.font = this.object.font || this.font;
      if (this.object.formatting) {
        size = this.object.textRenderer.measureFormattedText(text, (ref = this.object.wordWrap) != null ? ref : true);
      } else {
        size = this.object.textRenderer.measureText(text);
      }
      if (!(this.object.sizeToFit.horizontal != null) || this.object.sizeToFit.horizontal) {
        this.object.dstRect.width = size.width;
      }
      if (!(this.object.sizeToFit.vertical != null) || this.object.sizeToFit.vertical) {
        return this.object.dstRect.height = size.height;
      }
    }
  };


  /**
  * Refreshes the texts on game object's bitmap.
  *
  * @method refresh
   */

  Component_TextBehavior.prototype.refresh = function() {
    var height, ref, ref1, ref2, width;
    if (this.object.text == null) {
      return;
    }
    width = ((ref = this.object.bitmap) != null ? ref.width : void 0) || 0;
    height = ((ref1 = this.object.bitmap) != null ? ref1.height : void 0) || 0;
    this.refreshSize();
    if (!this.object.bitmap || width !== this.object.dstRect.width || height !== this.object.dstRect.height) {
      if ((ref2 = this.object.bitmap) != null) {
        ref2.dispose();
      }
      this.object.bitmap = new Bitmap(this.object.dstRect.width, this.object.dstRect.height);
    } else {
      this.object.bitmap.clear();
    }
    this.object.bitmap.font = this.font;
    this.srcRect = new Rect(0, 0, this.object.dstRect.width, this.object.dstRect.height);
    this.object.srcRect = this.srcRect;
    return this.redraw();
  };


  /**
  * Action to append a specified text.
  *
  * @method addText
  * @param {Object} sender - The sender of the action.
  * @param {Object} params - The action's parameters.
   */

  Component_TextBehavior.prototype.addText = function(sender, params) {
    return this.object.text += ui.Component_FormulaHandler.fieldValue(sender, params.text);
  };


  /**
  * Updates the component. Checks if the game object's bitmap needs a refresh
  * and maybe disposes the bitmap if the game object's is out of the
  * screen and memory usage is too high.
  *
  * @method update
   */

  Component_TextBehavior.prototype.update = function() {
    var ref, visible;
    Component_TextBehavior.__super__.update.apply(this, arguments);
    visible = this.object.visual.visible;
    if (!this.object.bitmap || this.object.bitmap.width !== this.object.dstRect.width || this.object.bitmap.height !== this.object.dstRect.height || ((ref = lcs(this.object.text)) != null ? ref.toString() : void 0) !== lcs(this.text)) {
      return this.refresh();
    }
  };

  return Component_TextBehavior;

})(gs.Component);

gs.Component_TextBehavior = Component_TextBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_TextBehavior_4.js
var Component_HotspotBehavior, HotspotShape,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

HotspotShape = (function() {
  function HotspotShape() {}

  HotspotShape.RECTANGLE = "rect";

  HotspotShape.PIXEL = "pixel";

  return HotspotShape;

})();

gs.HotspotShape = HotspotShape;

Component_HotspotBehavior = (function(superClass) {
  extend(Component_HotspotBehavior, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_HotspotBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * Adds a hotspot-behavior to a game object. That allows a game object
  * to respond to mouse/touch actions by firing an action-event or changing
  * the game object's image.
  *
  * @module gs
  * @class Component_HotspotBehavior
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_HotspotBehavior(params) {

    /**
    * The shape used to detect if a hotspot is clicked, hovered, etc.
    * @property shape
    * @type boolean
     */
    var ref;
    this.shape = gs.HotspotShape.RECTANGLE;

    /**
    * Indicates if the hotspot is selected.
    * @property selected
    * @type boolean
     */
    this.selected = false;

    /**
    * Indicates if the hotspot is enabled.
    * @property enabled
    * @type boolean
     */
    this.enabled = true;

    /**
    * @property imageHandling
    * @type number
    * @protected
     */
    this.imageHandling = 0;

    /**
    * Indicates if the mouse/touch pointer is inside the hotspot bounds.
    * @property contains
    * @type boolean
    * @protected
     */
    this.containsPointer = false;

    /**
    * Indicates if the action-button was pressed before.
    * @property buttonUp
    * @type boolean
    * @protected
     */
    this.buttonUp = false;

    /**
    * Indicates if the action-button is pressed.
    * @property buttonDown
    * @type boolean
    * @protected
     */
    this.buttonDown = false;

    /**
    * @property actionButtons
    * @type Object
    * @protected
     */
    this.actionButtons = {
      "left": Input.Mouse.BUTTON_LEFT,
      "right": Input.Mouse.BUTTON_RIGHT,
      "middle": Input.Mouse.BUTTON_MIDDLE
    };

    /**
    * The default action-button. By default the left-button is used.
    *
    * @property actionButton
    * @type number
     */
    this.actionButton = this.actionButtons[(ref = params != null ? params.actionButton : void 0) != null ? ref : "left"];

    /**
    * The sound played if the hotspot action is executed.
    * @property sound
    * @type Object
     */
    this.sound = params != null ? params.sound : void 0;

    /**
    * <p>The sounds played depending on the hotspot state.</p>
    * <ul>
    * <li>0 = Select Sound</li>
    * <li>1 = Unselect Sound</li>
    * </ul>
    * @property sounds
    * @type Object[]
     */
    this.sounds = (params != null ? params.sounds : void 0) || [];
  }

  Component_HotspotBehavior.prototype.checkShape = function(x, y) {
    var result;
    result = true;
    switch (this.shape) {
      case gs.HotspotShape.PIXEL:
        result = this.object.bitmap.isPixelSet(x, y);
    }
    return result;
  };

  Component_HotspotBehavior.prototype.setupEventHandlers = function() {
    gs.GlobalEventManager.on("mouseUp", ((function(_this) {
      return function(e) {
        var contains, mx, my;
        mx = Input.Mouse.x - _this.object.origin.x;
        my = Input.Mouse.y - _this.object.origin.y;
        contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, mx, my);
        if (contains) {
          contains = _this.checkShape(mx - _this.object.dstRect.x, my - _this.object.dstRect.y);
          if (contains) {
            _this.containsPointer = contains;
            _this.updateInput();
            _this.updateEvents();
            _this.object.needsUpdate = true;
            return e.breakChain = true;
          }
        }
      };
    })(this)), null, this.object);
    if (this.object.images) {
      return gs.GlobalEventManager.on("mouseMoved", ((function(_this) {
        return function(e) {
          var contains, mx, my;
          contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y);
          if (contains) {
            mx = Input.Mouse.x - _this.object.origin.x;
            my = Input.Mouse.y - _this.object.origin.y;
            contains = _this.checkShape(mx - _this.object.dstRect.x, my - _this.object.dstRect.y);
          }
          if (_this.containsPointer !== contains) {
            _this.containsPointer = contains;
            _this.object.needsUpdate = true;
            if (contains) {
              _this.object.events.emit("enter", _this);
            } else {
              _this.object.events.emit("leave", _this);
            }
          }
          return _this.updateInput();
        };
      })(this)), null, this.object);
    }
  };


  /**
  * Initializes the hotspot component.
  *
  * @method setup
   */

  Component_HotspotBehavior.prototype.setup = function() {
    var i, j, len, ref, sound;
    Component_HotspotBehavior.__super__.setup.apply(this, arguments);
    this.sound = ui.Component_FormulaHandler.fieldValue(this.object, this.sound);
    if (this.sounds != null) {
      ref = this.sounds;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        sound = ref[i];
        this.sounds[i] = ui.Component_FormulaHandler.fieldValue(this.object, sound);
      }
    } else {
      this.sounds = [];
    }
    return this.setupEventHandlers();
  };


  /**
  * Disposes the component.
  *
  * @method dispose
   */

  Component_HotspotBehavior.prototype.dispose = function() {
    Component_HotspotBehavior.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    return gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
  };


  /**
  * Updates the image depending on the hotspot state.
  *
  * @method updateImage
  * @protected
   */

  Component_HotspotBehavior.prototype.updateImage = function() {
    var baseImage, object;
    object = this.object.target || this.object;
    if (this.object.images != null) {
      baseImage = this.enabled ? this.object.images[4] || this.object.images[0] : this.object.images[0];
      if (this.containsPointer) {
        if (this.object.selected || this.selected) {
          object.image = this.object.images[3] || this.object.images[2] || baseImage;
        } else {
          object.image = this.object.images[1] || baseImage;
        }
      } else {
        if (this.object.selected || this.selected) {
          object.image = this.object.images[2] || this.object.images[4] || baseImage;
        } else {
          object.image = baseImage;
        }
      }
      if (!object.image) {
        return object.bitmap = null;
      }
    }
  };


  /**
  * Updates the hotspot position and size from an other target game object. For example, 
  * that is useful for adding a hotspot to an other moving game object.
  *
  * @method updateFromTarget
  * @protected
   */

  Component_HotspotBehavior.prototype.updateFromTarget = function() {
    if (this.object.target != null) {
      this.object.dstRect.x = this.object.target.dstRect.x;
      this.object.dstRect.y = this.object.target.dstRect.y;
      this.object.dstRect.width = this.object.target.dstRect.width;
      this.object.dstRect.height = this.object.target.dstRect.height;
      this.object.offset.x = this.object.target.offset.x;
      this.object.offset.y = this.object.target.offset.y;
      this.object.origin.x = this.object.target.origin.x;
      return this.object.origin.y = this.object.target.origin.y;
    }
  };


  /**
  * Updates the event-handling and fires necessary events.
  *
  * @method updateEvents
  * @protected
   */

  Component_HotspotBehavior.prototype.updateEvents = function() {
    var group, j, len, object;
    if (this.buttonUp && this.object.enabled && this.enabled && this.object.visible) {
      if (this.object.selectable) {
        group = gs.ObjectManager.current.objectsByGroup(this.object.group);
        for (j = 0, len = group.length; j < len; j++) {
          object = group[j];
          if (object !== this.object) {
            object.selected = false;
          }
        }
        if (this.object.group) {
          this.selected = true;
        } else {
          this.selected = !this.selected;
        }
        if (this.selected) {
          AudioManager.playSound(this.sounds[0] || this.sound);
        } else {
          AudioManager.playSound(this.sounds[1] || this.sound);
        }
        this.object.events.emit("click", this);
        return this.object.events.emit("stateChanged", this.object);
      } else {
        AudioManager.playSound(this.sounds[0] || this.sound);
        this.object.events.emit("click", this);
        return this.object.events.emit("action", this);
      }
    }
  };


  /**
  * Updates the game object's color depending on the state of the hotspot.
  *
  * @method updateColor
  * @protected
   */

  Component_HotspotBehavior.prototype.updateColor = function() {
    if (!this.object.enabled) {
      return this.object.color.set(0, 0, 0, 100);
    } else {
      return this.object.color.set(0, 0, 0, 0);
    }
  };


  /**
  * Stores current states of mouse/touch pointer and buttons.
  *
  * @method updateInput
  * @protected
   */

  Component_HotspotBehavior.prototype.updateInput = function() {
    this.buttonUp = Input.Mouse.buttons[this.actionButton] === 2 && this.containsPointer;
    return this.buttonDown = Input.Mouse.buttons[this.actionButton] === 1 && this.containsPointer;
  };


  /**
  * Updates the hotspot component.
  *
  * @method update
   */

  Component_HotspotBehavior.prototype.update = function() {
    if (!this.object.visible) {
      return;
    }
    this.updateColor();
    this.updateFromTarget();
    return this.updateImage();
  };

  return Component_HotspotBehavior;

})(gs.Component);

gs.Component_HotspotBehavior = Component_HotspotBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_HotspotBehavior_16.js
var Component_Draggable,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Draggable = (function(superClass) {
  extend(Component_Draggable, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_Draggable.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * Makes a game object draggable using mouse/touch. The dragging can be
  * vertical, horizontal or both. It can be configured as pixel-wise or 
  * step-wise dragging. For example: To create a slider for UI with
  * fixed steps, step-wise is useful while a pixel-wise dragging could
  * be used for a volume-slider.
  *
  * @module gs
  * @class Component_Draggable
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_Draggable() {

    /**
    * Mouse/Pointer x coordinate
    * @property mx
    * @type number
     */
    this.mx = 0;

    /**
    * Mouse/Pointer y coordinate
    * @property my
    * @type number
     */
    this.my = 0;

    /**
    * Stepping in pixels.
    * @property stepSize
    * @type gs.Point
     */
    this.stepSize = {
      x: 0,
      y: 0
    };

    /**
    * Drag Area
    * @property rect
    * @type gs.Rect
     */
    this.rect = null;
  }


  /**
  * Adds event-handler for mouse/touch events to update the component only if 
  * a user-action happened.
  *
  * @method setupEventHandlers
   */

  Component_Draggable.prototype.setupEventHandlers = function() {
    gs.GlobalEventManager.on("mouseMoved", ((function(_this) {
      return function() {
        var rect, ref, x, y;
        rect = (ref = _this.object.draggable) != null ? ref.rect : void 0;
        x = Input.Mouse.x - _this.object.origin.x;
        y = Input.Mouse.y - _this.object.origin.y;
        if (_this.object.dragging || rect.contains(x, y)) {
          return _this.object.needsUpdate = true;
        }
      };
    })(this)), null, this.object);
    return gs.GlobalEventManager.on("mouseDown", ((function(_this) {
      return function() {
        var rect, ref, x, y;
        rect = (ref = _this.object.draggable) != null ? ref.rect : void 0;
        x = Input.Mouse.x - _this.object.origin.x;
        y = Input.Mouse.y - _this.object.origin.y;
        if (rect.contains(x, y)) {
          return _this.object.needsUpdate = true;
        }
      };
    })(this)), null, this.object);
  };


  /**
  * Initializes the component. Adds event-handler for mouse/touch events to
  * update the component only if a user-action happened.
  *
  * @method setup
   */

  Component_Draggable.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Disposes the component.
  *
  * @method dispose
   */

  Component_Draggable.prototype.dispose = function() {
    Component_Draggable.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("mouseDown", this.object);
    return gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
  };


  /**
  * Updates the dragging-process on x-axis if configured.
  *
  * @method updateAxisX
  * @protected
   */

  Component_Draggable.prototype.updateAxisX = function() {
    var ref;
    if ((ref = this.object.draggable.axisX) != null ? ref : true) {
      if (this.object.dragging) {
        this.object.draggable.step = Math.round(Math.max(this.rect.x, Math.min(this.mx - this.object.dstRect.width / 2, this.rect.x + this.rect.width - this.object.dstRect.width)) / this.stepSize.x);
        return this.object.dstRect.x = this.object.draggable.step * this.stepSize.x;
      } else if (this.object.draggable.steps != null) {
        return this.object.dstRect.x = this.object.draggable.step * this.stepSize.x;
      }
    }
  };


  /**
  * Updates the dragging-process on y-axis if configured.
  *
  * @method updateAxisY
  * @protected
   */

  Component_Draggable.prototype.updateAxisY = function() {
    var ref;
    if ((ref = this.object.draggable.axisY) != null ? ref : true) {
      if (this.object.dragging) {
        this.object.draggable.step = Math.round(Math.max(this.rect.y, Math.min(this.my - this.object.dstRect.height / 2, this.rect.y + this.rect.height - this.object.dstRect.height)) / this.stepSize.y);
        return this.object.dstRect.y = this.object.draggable.step * this.stepSize.y;
      } else if (this.object.draggable.steps != null) {
        return this.object.dstRect.y = this.object.draggable.step * this.stepSize.y;
      }
    }
  };


  /**
  * Calculates the size of a single step if steps are configured for this
  * component. Otherwise the step-size 1-pixel.
  *
  * @method updateDragging
  * @protected
   */

  Component_Draggable.prototype.updateStepSize = function() {
    if (this.object.draggable.steps != null) {
      this.stepSize.x = (this.rect.width - this.object.dstRect.width) / (this.object.draggable.steps - 1);
      return this.stepSize.y = (this.rect.height - this.object.dstRect.height) / (this.object.draggable.steps - 1);
    } else {
      this.stepSize.x = 1;
      return this.stepSize.y = 1;
    }
  };


  /**
  * Updates the game object's dragging-state and fires a dragged-event
  * if necessary.
  *
  * @method updateDragging
  * @protected
   */

  Component_Draggable.prototype.updateDragging = function() {
    var pressed, ref, ref1, x, y;
    if (this.object.focusable && !this.object.ui.focused) {
      return;
    }
    x = Input.Mouse.x - this.object.origin.x;
    y = Input.Mouse.y - this.object.origin.y;
    pressed = Input.Mouse.buttons[Input.Mouse.LEFT] === 1;
    if ((this.mx !== x || this.my !== y) && pressed && this.rect.contains(x, y)) {
      if (!this.object.dragging) {
        this.object.dragging = true;
        if ((ref = this.object.events) != null) {
          ref.emit("dragStart", this.object);
        }
      }
      this.object.events.emit("drag", this.object);
    } else if (Input.Mouse.buttons[Input.Mouse.LEFT] === 2 || Input.Mouse.buttons[Input.Mouse.LEFT] === 0) {
      if (this.object.dragging) {
        this.object.dragging = false;
        if ((ref1 = this.object.events) != null) {
          ref1.emit("dragEnd", this.object);
        }
      }
    }
    this.mx = x;
    return this.my = y;
  };


  /**
  * Updates the dragging-logic.
  *
  * @method update
   */

  Component_Draggable.prototype.update = function() {
    var ref;
    this.rect = ((ref = this.object.draggable) != null ? ref.rect : void 0) || this.object.dstRect;
    this.updateStepSize();
    this.updateDragging();
    this.updateAxisX();
    return this.updateAxisY();
  };

  return Component_Draggable;

})(gs.Component);

ui.Draggable = Component_Draggable;

ui.Component_Draggable = Component_Draggable;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Draggable_37.js
var Component_LayoutBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_LayoutBehavior = (function(superClass) {
  extend(Component_LayoutBehavior, superClass);


  /**
  * The base class of all layout-components. A layout-component is used
  * to layout assigned sub-objects in a specific way depending on the layout-type.
  * For example: A grid-layout layouts its sub-objects like a grid using rows
  * and columns. The game object needs a container-component.<br><br>
  *
  * A layout can also be configured as scrollable. In that case, layout's content
  * can be larger than the layout-bounds and is automatically clipped. The content
  * can be scrolled using mouse-wheel or touch-gesture.
  *
  * @module gs
  * @class Component_LayoutBehavior
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_LayoutBehavior() {

    /**
    * Content size of the layout.
    * @property contentSize
    * @type gs.Size
    * @readOnly
     */
    this.contentSize = {
      width: 0,
      height: 0
    };
  }


  /**
  * Disposes the layout and all its sub-objects.
  *
  * @method dispose
   */

  Component_LayoutBehavior.prototype.dispose = function() {
    var control, i, len, ref, results;
    ref = this.object.controls;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      control = ref[i];
      results.push(control != null ? control.dispose() : void 0);
    }
    return results;
  };


  /**
  * Initializes the layout.
  *
  * @method setup
   */

  Component_LayoutBehavior.prototype.setup = function() {};


  /**
  * Sizes the layout to fit its content.
  *
  * @method sizeToFit
  * @abstract
   */

  Component_LayoutBehavior.prototype.sizeToFit = function() {};


  /**
  * Sort-Function to sort sub-objects by order-index.
  *
  * @method sort_
  * @protected
  * @param {gs.Object_Base} a Object A
  * @param {gs.Object_Base} b Object B
   */

  Component_LayoutBehavior.prototype.sort_ = function(a, b) {
    if (a.order > b.order) {
      return -1;
    } else if (a.order < b.order) {
      return 1;
    } else {
      return 0;
    }
  };


  /**
  * Updates a specified control.
  *
  * @method updateControl
  * @protected
  * @param {gs.Object_Base} control The control to update
   */

  Component_LayoutBehavior.prototype.updateControl = function(control) {
    this.object.rIndex = Math.max(this.object.rIndex, control.rIndex);
    if (control.updateBehavior === ui.UpdateBehavior.CONTINUOUS) {
      control.needsUpdate = true;
    }
    if (control.inheritProperties) {
      control.ui.enabled = this.object.ui.enabled;
      control.opacity = this.object.opacity;
      control.zoom = this.object.zoom;
      control.color = this.object.color;
      control.tone = this.object.tone;
      control.anchor.x = this.object.anchor.x;
      control.anchor.y = this.object.anchor.y;
    }
    if (control.needsUpdate) {
      control.needsUpdate = false;
      control.update();
      control.parent = this.object;
    }
    if (this.object.clipRect != null) {
      return control.clipRect = this.object.clipRect;
    }
  };


  /**
  * Updates the content size of the layout. Only works if scrolling is
  * enabled.
  *
  * @method updateContentSize
  * @protected
   */

  Component_LayoutBehavior.prototype.updateContentSize = function() {
    var control, i, len, ref;
    if (this.object.scrollable) {
      this.contentSize.width = 0;
      this.contentSize.height = 0;
      ref = this.object.controls;
      for (i = 0, len = ref.length; i < len; i++) {
        control = ref[i];
        if (control) {
          this.contentSize.width += control.margin.left + control.dstRect.width + control.margin.right;
          this.contentSize.height += control.margin.top + control.dstRect.height + control.margin.bottom;
        }
      }
      this.object.contentHeight = this.contentSize.height;
      return this.object.contentWidth = this.contentSize.width;
    }
  };


  /**
  * Updates scrolling.
  *
  * @method updateScroll
   */

  Component_LayoutBehavior.prototype.updateScroll = function() {
    if (this.object.scrollable) {
      this.object.scrollableHeight = Math.max(0, this.contentSize.height - this.object.dstRect.height);
      if (Input.Mouse.wheel <= -1) {
        this.object.scrollOffsetY = Math.max(this.object.scrollOffsetY - Input.Mouse.wheelSpeed * 0.1, 0);
      }
      if (Input.Mouse.wheel >= 1) {
        this.object.scrollOffsetY = Math.min(this.object.scrollOffsetY - Input.Mouse.wheelSpeed * 0.1, this.object.scrollableHeight);
      }
      return this.object.scrollOffsetY = Math.max(Math.min(this.object.scrollOffsetY, this.object.scrollableHeight), 0);
    }
  };


  /**
  * Updates the layout's content.
  *
  * @method updateContent
   */

  Component_LayoutBehavior.prototype.updateContent = function() {};


  /**
  * Updates the layout.
  *
  * @method update
   */

  Component_LayoutBehavior.prototype.update = function() {
    Component_LayoutBehavior.__super__.update.apply(this, arguments);
    this.updateContentSize();
    return this.updateScroll();
  };

  return Component_LayoutBehavior;

})(gs.Component_Visual);

gs.Component_LayoutBehavior = Component_LayoutBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_LayoutBehavior_50.js
var Component_FreeLayoutBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_FreeLayoutBehavior = (function(superClass) {
  extend(Component_FreeLayoutBehavior, superClass);


  /**
  * Turns a game object into a free-layout and layouts all sub-objects
  * at their specified positions. So that kind of layout allows each sub-object
  * to be freely positioned.
  * <br>
  * In addition, each sub-object can have different alignment options.
  *
  * @module gs
  * @class Component_FreeLayoutBehavior
  * @extends gs.Component_LayoutBehavior
  * @memberof gs
  * @constructor
   */

  function Component_FreeLayoutBehavior() {
    Component_FreeLayoutBehavior.__super__.constructor.apply(this, arguments);
  }


  /**
  * Sizes the layout to fit its content.
  *
  * @method sizeToFit
   */

  Component_FreeLayoutBehavior.prototype.sizeToFit = function() {
    var control, j, len, rect, ref, results;
    rect = this.object.dstRect;
    if (this.object.sizeToFit) {
      ref = this.object.subObjects;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        control = ref[j];
        if (!control.alignmentX) {
          rect.width = Math.max(control.dstRect.x + control.margin.left + control.dstRect.width + control.margin.right, rect.width || 1);
        }
        if (!control.alignmentY) {
          results.push(rect.height = Math.max(control.dstRect.y + control.margin.top + control.dstRect.height + control.margin.bottom, rect.height || 1));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };


  /**
  * Updates a specified control.
  *
  * @method updateControl
  * @protected
  * @param {gs.Object_Base} control The control to update
   */

  Component_FreeLayoutBehavior.prototype.updateControl = function(control) {
    var margin, rect;
    Component_FreeLayoutBehavior.__super__.updateControl.apply(this, arguments);
    rect = this.object.dstRect;
    margin = control.margin;
    if (control.alignmentX === 1) {
      control.dstRect.x = (rect.width - (control.dstRect.width + margin.right + margin.left)) / 2;
    } else if (control.alignmentX === 2) {
      control.dstRect.x = rect.width * this.object.zoom.x - (control.dstRect.width + control.margin.right) * control.zoom.x;
    }
    if (control.alignmentY === 1) {
      return control.dstRect.y = (rect.height * this.object.zoom.y - (control.dstRect.height + margin.bottom + margin.top) * control.zoom.y) / 2;
    } else if (control.alignmentY === 2) {
      return control.dstRect.y = rect.height - (control.dstRect.height + control.margin.bottom);
    }
  };


  /**
  * Layouts the sub-objects.
  *
  * @method update
   */

  Component_FreeLayoutBehavior.prototype.update = function() {
    var control, i, j, len, ref;
    Component_FreeLayoutBehavior.__super__.update.apply(this, arguments);
    ref = this.object.subObjects;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      control = ref[i];
      this.updateControl(control);
    }
    this.sizeToFit();
    return null;
  };

  return Component_FreeLayoutBehavior;

})(gs.Component_LayoutBehavior);

gs.Component_FreeLayoutBehavior = Component_FreeLayoutBehavior;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsNEJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7Ozs7RUFhYSxzQ0FBQTtJQUNULCtEQUFBLFNBQUE7RUFEUzs7O0FBR2I7Ozs7Ozt5Q0FLQSxTQUFBLEdBQVcsU0FBQTtBQUNQLFFBQUE7SUFBQSxJQUFBLEdBQU8sSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUNmLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFYO0FBQ0k7QUFBQTtXQUFBLHFDQUFBOztRQUNJLElBQUcsQ0FBQyxPQUFPLENBQUMsVUFBWjtVQUNJLElBQUksQ0FBQyxLQUFMLEdBQWEsSUFBSSxDQUFDLEdBQUwsQ0FBUyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBbkMsR0FBMEMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUExRCxHQUFrRSxPQUFPLENBQUMsTUFBTSxDQUFDLEtBQTFGLEVBQWlHLElBQUksQ0FBQyxLQUFMLElBQWMsQ0FBL0csRUFEakI7O1FBRUEsSUFBRyxDQUFDLE9BQU8sQ0FBQyxVQUFaO3VCQUNJLElBQUksQ0FBQyxNQUFMLEdBQWMsSUFBSSxDQUFDLEdBQUwsQ0FBUyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBbkMsR0FBeUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUF6RCxHQUFrRSxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQTFGLEVBQWtHLElBQUksQ0FBQyxNQUFMLElBQWUsQ0FBakgsR0FEbEI7U0FBQSxNQUFBOytCQUFBOztBQUhKO3FCQURKOztFQUZPOzs7QUFTWDs7Ozs7Ozs7eUNBT0EsYUFBQSxHQUFlLFNBQUMsT0FBRDtBQUNYLFFBQUE7SUFBQSxpRUFBQSxTQUFBO0lBRUEsSUFBQSxHQUFPLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFDZixNQUFBLEdBQVMsT0FBTyxDQUFDO0lBRWpCLElBQUcsT0FBTyxDQUFDLFVBQVIsS0FBc0IsQ0FBekI7TUFDSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLENBQUMsSUFBSSxDQUFDLEtBQUwsR0FBYSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBaEIsR0FBc0IsTUFBTSxDQUFDLEtBQTdCLEdBQW1DLE1BQU0sQ0FBQyxJQUEzQyxDQUFkLENBQUEsR0FBa0UsRUFEMUY7S0FBQSxNQUVLLElBQUcsT0FBTyxDQUFDLFVBQVIsS0FBc0IsQ0FBekI7TUFDRCxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLElBQUksQ0FBQyxLQUFMLEdBQVcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBeEIsR0FBNEIsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQWhCLEdBQXdCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBeEMsQ0FBQSxHQUErQyxPQUFPLENBQUMsSUFBSSxDQUFDLEVBRDNHOztJQUdMLElBQUcsT0FBTyxDQUFDLFVBQVIsS0FBc0IsQ0FBekI7YUFDSSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLENBQUMsSUFBSSxDQUFDLE1BQUwsR0FBWSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUF6QixHQUE2QixDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBaEIsR0FBdUIsTUFBTSxDQUFDLE1BQTlCLEdBQXFDLE1BQU0sQ0FBQyxHQUE3QyxDQUFBLEdBQWtELE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBN0YsQ0FBQSxHQUFrRyxFQUQxSDtLQUFBLE1BRUssSUFBRyxPQUFPLENBQUMsVUFBUixLQUFzQixDQUF6QjthQUNELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsSUFBSSxDQUFDLE1BQUwsR0FBYyxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsTUFBaEIsR0FBeUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUF6QyxFQURqQzs7RUFiTTs7O0FBa0JmOzs7Ozs7eUNBS0EsTUFBQSxHQUFRLFNBQUE7QUFDSixRQUFBO0lBQUEsMERBQUEsU0FBQTtBQUVBO0FBQUEsU0FBQSw2Q0FBQTs7TUFDSSxJQUFDLENBQUEsYUFBRCxDQUFlLE9BQWY7QUFESjtJQUdBLElBQUMsQ0FBQSxTQUFELENBQUE7QUFHQSxXQUFPO0VBVEg7Ozs7R0E3RCtCLEVBQUUsQ0FBQzs7QUF3RTlDLEVBQUUsQ0FBQyw0QkFBSCxHQUFrQyIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tcG9uZW50X0ZyZWVMYXlvdXRCZWhhdmlvclxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X0ZyZWVMYXlvdXRCZWhhdmlvciBleHRlbmRzIGdzLkNvbXBvbmVudF9MYXlvdXRCZWhhdmlvclxuICAgICMjIypcbiAgICAqIFR1cm5zIGEgZ2FtZSBvYmplY3QgaW50byBhIGZyZWUtbGF5b3V0IGFuZCBsYXlvdXRzIGFsbCBzdWItb2JqZWN0c1xuICAgICogYXQgdGhlaXIgc3BlY2lmaWVkIHBvc2l0aW9ucy4gU28gdGhhdCBraW5kIG9mIGxheW91dCBhbGxvd3MgZWFjaCBzdWItb2JqZWN0XG4gICAgKiB0byBiZSBmcmVlbHkgcG9zaXRpb25lZC5cbiAgICAqIDxicj5cbiAgICAqIEluIGFkZGl0aW9uLCBlYWNoIHN1Yi1vYmplY3QgY2FuIGhhdmUgZGlmZmVyZW50IGFsaWdubWVudCBvcHRpb25zLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfRnJlZUxheW91dEJlaGF2aW9yXG4gICAgKiBAZXh0ZW5kcyBncy5Db21wb25lbnRfTGF5b3V0QmVoYXZpb3JcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IC0+IFxuICAgICAgICBzdXBlclxuXG4gICAgIyMjKlxuICAgICogU2l6ZXMgdGhlIGxheW91dCB0byBmaXQgaXRzIGNvbnRlbnQuXG4gICAgKlxuICAgICogQG1ldGhvZCBzaXplVG9GaXRcbiAgICAjIyMgXG4gICAgc2l6ZVRvRml0OiAtPlxuICAgICAgICByZWN0ID0gQG9iamVjdC5kc3RSZWN0XG4gICAgICAgIGlmIEBvYmplY3Quc2l6ZVRvRml0XG4gICAgICAgICAgICBmb3IgY29udHJvbCBpbiBAb2JqZWN0LnN1Yk9iamVjdHNcbiAgICAgICAgICAgICAgICBpZiAhY29udHJvbC5hbGlnbm1lbnRYXG4gICAgICAgICAgICAgICAgICAgIHJlY3Qud2lkdGggPSBNYXRoLm1heChjb250cm9sLmRzdFJlY3QueCArIGNvbnRyb2wubWFyZ2luLmxlZnQgKyBjb250cm9sLmRzdFJlY3Qud2lkdGggKyBjb250cm9sLm1hcmdpbi5yaWdodCwgcmVjdC53aWR0aCB8fCAxKVxuICAgICAgICAgICAgICAgIGlmICFjb250cm9sLmFsaWdubWVudFlcbiAgICAgICAgICAgICAgICAgICAgcmVjdC5oZWlnaHQgPSBNYXRoLm1heChjb250cm9sLmRzdFJlY3QueSArIGNvbnRyb2wubWFyZ2luLnRvcCArIGNvbnRyb2wuZHN0UmVjdC5oZWlnaHQgKyBjb250cm9sLm1hcmdpbi5ib3R0b20sIHJlY3QuaGVpZ2h0IHx8IDEpXG4gICAgXG4gICAgIyMjKlxuICAgICogVXBkYXRlcyBhIHNwZWNpZmllZCBjb250cm9sLlxuICAgICpcbiAgICAqIEBtZXRob2QgdXBkYXRlQ29udHJvbFxuICAgICogQHByb3RlY3RlZFxuICAgICogQHBhcmFtIHtncy5PYmplY3RfQmFzZX0gY29udHJvbCBUaGUgY29udHJvbCB0byB1cGRhdGVcbiAgICAjIyMgICAgICAgICBcbiAgICB1cGRhdGVDb250cm9sOiAoY29udHJvbCkgLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIHJlY3QgPSBAb2JqZWN0LmRzdFJlY3RcbiAgICAgICAgbWFyZ2luID0gY29udHJvbC5tYXJnaW5cblxuICAgICAgICBpZiBjb250cm9sLmFsaWdubWVudFggPT0gMVxuICAgICAgICAgICAgY29udHJvbC5kc3RSZWN0LnggPSAocmVjdC53aWR0aCAtIChjb250cm9sLmRzdFJlY3Qud2lkdGgrbWFyZ2luLnJpZ2h0K21hcmdpbi5sZWZ0KSkgLyAyXG4gICAgICAgIGVsc2UgaWYgY29udHJvbC5hbGlnbm1lbnRYID09IDJcbiAgICAgICAgICAgIGNvbnRyb2wuZHN0UmVjdC54ID0gcmVjdC53aWR0aCpAb2JqZWN0Lnpvb20ueCAtIChjb250cm9sLmRzdFJlY3Qud2lkdGggKyBjb250cm9sLm1hcmdpbi5yaWdodCkqY29udHJvbC56b29tLnggXG4gICAgIFxuICAgICAgICBpZiBjb250cm9sLmFsaWdubWVudFkgPT0gMVxuICAgICAgICAgICAgY29udHJvbC5kc3RSZWN0LnkgPSAocmVjdC5oZWlnaHQqQG9iamVjdC56b29tLnkgLSAoY29udHJvbC5kc3RSZWN0LmhlaWdodCttYXJnaW4uYm90dG9tK21hcmdpbi50b3ApKmNvbnRyb2wuem9vbS55KSAvIDJcbiAgICAgICAgZWxzZSBpZiBjb250cm9sLmFsaWdubWVudFkgPT0gMlxuICAgICAgICAgICAgY29udHJvbC5kc3RSZWN0LnkgPSByZWN0LmhlaWdodCAtIChjb250cm9sLmRzdFJlY3QuaGVpZ2h0ICsgY29udHJvbC5tYXJnaW4uYm90dG9tKVxuICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogTGF5b3V0cyB0aGUgc3ViLW9iamVjdHMuXG4gICAgKlxuICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAjIyNcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICBmb3IgY29udHJvbCwgaSBpbiBAb2JqZWN0LnN1Yk9iamVjdHNcbiAgICAgICAgICAgIEB1cGRhdGVDb250cm9sKGNvbnRyb2wpXG4gICAgICAgICAgICBcbiAgICAgICAgQHNpemVUb0ZpdCgpXG4gXG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bGwgICAgXG4gICAgICAgIFxuZ3MuQ29tcG9uZW50X0ZyZWVMYXlvdXRCZWhhdmlvciA9IENvbXBvbmVudF9GcmVlTGF5b3V0QmVoYXZpb3IiXX0=
//# sourceURL=Component_FreeLayoutBehavior_57.js
var Component_SpreadLayoutBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_SpreadLayoutBehavior = (function(superClass) {
  extend(Component_SpreadLayoutBehavior, superClass);


  /**
  * Turns a game object into a spread-layout and spreads all sub-objects
  * evenly over the layout-space vertically or horizontally. The game object needs a 
  * container-component.
  *
  * @module gs
  * @class Component_SpreadLayoutBehavior
  * @extends gs.Component_LayoutBehavior
  * @memberof gs
  * @constructor
   */

  function Component_SpreadLayoutBehavior(orientation) {
    Component_SpreadLayoutBehavior.__super__.constructor.apply(this, arguments);

    /**
    * The orientation of the spread-layout.
    * @property orientation
    * @type gs.Orientation.
     */
    this.orientation = orientation || 0;
  }


  /**
  * Updates the spread-layout.
  *
  * @method update
   */

  Component_SpreadLayoutBehavior.prototype.update = function() {
    Component_SpreadLayoutBehavior.__super__.update.apply(this, arguments);
    this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);
    if (this.orientation === 0) {
      return this.layoutHorizontal();
    } else {
      return this.layoutVertical();
    }
  };


  /**
  * Spreads all sub-objects evenly over the layout-space horizontally.
  *
  * @method layoutHorizontal
   */

  Component_SpreadLayoutBehavior.prototype.layoutHorizontal = function() {
    var control, count, i, j, rect, ref, y;
    count = this.object.controls.length;
    this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);
    y = 0;
    rect = this.object.dstRect;
    for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      control = this.object.controls[i];
      control.parent = this.object;
      control.update();
      control.dstRect.x = Math.floor((rect.width - control.dstRect.width) / (count - 1)) * i;
      if (!control.clipRect) {
        control.clipRect = this.object.clipRect;
      }
      if (control.alignmentY === 1) {
        control.dstRect.y = y + Math.round((rect.height - (control.dstRect.height + control.margin.top + control.margin.bottom)) / 2);
      }
    }
    if (this.object.clipRect != null) {
      return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);
    }
  };


  /**
  * Spreads all sub-objects evenly over the layout-space vertically.
  *
  * @method layoutHorizontal
   */

  Component_SpreadLayoutBehavior.prototype.layoutVertical = function() {
    var control, count, i, j, rect, ref, x;
    count = this.object.controls.length;
    this.object.visible_ = this.object.visible && (!this.object.parent || this.object.parent.visible);
    x = 0;
    rect = this.object.dstRect;
    for (i = j = 0, ref = count; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      control = this.object.controls[i];
      control.parent = this.object;
      control.update();
      control.dstRect.y = Math.floor(rect.height / count) * i;
      if (!control.clipRect) {
        control.clipRect = this.object.clipRect;
      }
      if (control.alignmentX === 1) {
        control.dstRect.x = x + Math.round((rect.width - (control.dstRect.width + control.margin.left + control.margin.right)) / 2);
      }
    }
    if (this.object.clipRect != null) {
      return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);
    }
  };

  return Component_SpreadLayoutBehavior;

})(gs.Component_LayoutBehavior);

gs.Component_SpreadLayoutBehavior = Component_SpreadLayoutBehavior;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsOEJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7O0VBV2Esd0NBQUMsV0FBRDtJQUNULGlFQUFBLFNBQUE7O0FBRUE7Ozs7O0lBS0EsSUFBQyxDQUFBLFdBQUQsR0FBZSxXQUFBLElBQWU7RUFSckI7OztBQVViOzs7Ozs7MkNBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSiw0REFBQSxTQUFBO0lBQ0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFSLEdBQW1CLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixJQUFvQixDQUFDLENBQUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFULElBQW1CLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBTSxDQUFDLE9BQW5DO0lBQ3ZDLElBQUcsSUFBQyxDQUFBLFdBQUQsS0FBZ0IsQ0FBbkI7YUFDSSxJQUFDLENBQUEsZ0JBQUQsQ0FBQSxFQURKO0tBQUEsTUFBQTthQUdJLElBQUMsQ0FBQSxjQUFELENBQUEsRUFISjs7RUFISTs7O0FBUVI7Ozs7OzsyQ0FLQSxnQkFBQSxHQUFrQixTQUFBO0FBQ2QsUUFBQTtJQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN6QixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsR0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLElBQW9CLENBQUMsQ0FBQyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVQsSUFBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBbkM7SUFDdkMsQ0FBQSxHQUFJO0lBQ0osSUFBQSxHQUFPLElBQUMsQ0FBQSxNQUFNLENBQUM7QUFFZixTQUFTLDhFQUFUO01BQ0ksT0FBQSxHQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUE7TUFDM0IsT0FBTyxDQUFDLE1BQVIsR0FBaUIsSUFBQyxDQUFBO01BQ2xCLE9BQU8sQ0FBQyxNQUFSLENBQUE7TUFFQSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQyxJQUFJLENBQUMsS0FBTCxHQUFXLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBNUIsQ0FBQSxHQUFxQyxDQUFDLEtBQUEsR0FBTSxDQUFQLENBQWhELENBQUEsR0FBNkQ7TUFFakYsSUFBRyxDQUFDLE9BQU8sQ0FBQyxRQUFaO1FBQ0ksT0FBTyxDQUFDLFFBQVIsR0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUQvQjs7TUFFQSxJQUFHLE9BQU8sQ0FBQyxVQUFSLEtBQXNCLENBQXpCO1FBQ0ksT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFoQixHQUFvQixDQUFBLEdBQUksSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLElBQUksQ0FBQyxNQUFMLEdBQVksQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE1BQWhCLEdBQXVCLE9BQU8sQ0FBQyxNQUFNLENBQUMsR0FBdEMsR0FBMEMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxNQUExRCxDQUFiLENBQUEsR0FBa0YsQ0FBN0YsRUFENUI7O0FBVEo7SUFZQSxJQUFHLDRCQUFIO2FBQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFRLENBQUMsR0FBakIsQ0FBcUIsSUFBSSxDQUFDLENBQTFCLEVBQTZCLElBQUksQ0FBQyxDQUFsQyxFQUFxQyxJQUFJLENBQUMsS0FBMUMsRUFBaUQsSUFBSSxDQUFDLE1BQXRELEVBREo7O0VBbEJjOzs7QUFxQmxCOzs7Ozs7MkNBS0EsY0FBQSxHQUFnQixTQUFBO0FBQ1osUUFBQTtJQUFBLEtBQUEsR0FBUSxJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVEsQ0FBQztJQUN6QixJQUFDLENBQUEsTUFBTSxDQUFDLFFBQVIsR0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLElBQW9CLENBQUMsQ0FBQyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVQsSUFBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBbkM7SUFDdkMsQ0FBQSxHQUFJO0lBQ0osSUFBQSxHQUFPLElBQUMsQ0FBQSxNQUFNLENBQUM7QUFFZixTQUFTLDhFQUFUO01BQ0ksT0FBQSxHQUFVLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUE7TUFDM0IsT0FBTyxDQUFDLE1BQVIsR0FBaUIsSUFBQyxDQUFBO01BQ2xCLE9BQU8sQ0FBQyxNQUFSLENBQUE7TUFFQSxPQUFPLENBQUMsT0FBTyxDQUFDLENBQWhCLEdBQW9CLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBSSxDQUFDLE1BQUwsR0FBYyxLQUF6QixDQUFBLEdBQWtDO01BRXRELElBQUcsQ0FBQyxPQUFPLENBQUMsUUFBWjtRQUNJLE9BQU8sQ0FBQyxRQUFSLEdBQW1CLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FEL0I7O01BR0EsSUFBRyxPQUFPLENBQUMsVUFBUixLQUFzQixDQUF6QjtRQUNJLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsQ0FBQSxHQUFJLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQyxJQUFJLENBQUMsS0FBTCxHQUFXLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFoQixHQUFzQixPQUFPLENBQUMsTUFBTSxDQUFDLElBQXJDLEdBQTBDLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBMUQsQ0FBWixDQUFBLEdBQWdGLENBQTNGLEVBRDVCOztBQVZKO0lBYUEsSUFBRyw0QkFBSDthQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCLENBQXFCLElBQUksQ0FBQyxDQUExQixFQUE2QixJQUFJLENBQUMsQ0FBbEMsRUFBcUMsSUFBSSxDQUFDLEtBQTFDLEVBQWlELElBQUksQ0FBQyxNQUF0RCxFQURKOztFQW5CWTs7OztHQWxFeUIsRUFBRSxDQUFDOztBQXdGaEQsRUFBRSxDQUFDLDhCQUFILEdBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfU3ByZWFkTGF5b3V0QmVoYXZpb3JcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIENvbXBvbmVudF9TcHJlYWRMYXlvdXRCZWhhdmlvciBleHRlbmRzIGdzLkNvbXBvbmVudF9MYXlvdXRCZWhhdmlvclxuICAgICMjIypcbiAgICAqIFR1cm5zIGEgZ2FtZSBvYmplY3QgaW50byBhIHNwcmVhZC1sYXlvdXQgYW5kIHNwcmVhZHMgYWxsIHN1Yi1vYmplY3RzXG4gICAgKiBldmVubHkgb3ZlciB0aGUgbGF5b3V0LXNwYWNlIHZlcnRpY2FsbHkgb3IgaG9yaXpvbnRhbGx5LiBUaGUgZ2FtZSBvYmplY3QgbmVlZHMgYSBcbiAgICAqIGNvbnRhaW5lci1jb21wb25lbnQuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9TcHJlYWRMYXlvdXRCZWhhdmlvclxuICAgICogQGV4dGVuZHMgZ3MuQ29tcG9uZW50X0xheW91dEJlaGF2aW9yXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAob3JpZW50YXRpb24pIC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9yaWVudGF0aW9uIG9mIHRoZSBzcHJlYWQtbGF5b3V0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBvcmllbnRhdGlvblxuICAgICAgICAqIEB0eXBlIGdzLk9yaWVudGF0aW9uLlxuICAgICAgICAjIyNcbiAgICAgICAgQG9yaWVudGF0aW9uID0gb3JpZW50YXRpb24gfHwgMFxuXG4gICAgIyMjKlxuICAgICogVXBkYXRlcyB0aGUgc3ByZWFkLWxheW91dC5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjI1xuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgQG9iamVjdC52aXNpYmxlXyA9IEBvYmplY3QudmlzaWJsZSBhbmQgKCFAb2JqZWN0LnBhcmVudCBvciBAb2JqZWN0LnBhcmVudC52aXNpYmxlKVxuICAgICAgICBpZiBAb3JpZW50YXRpb24gPT0gMFxuICAgICAgICAgICAgQGxheW91dEhvcml6b250YWwoKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAbGF5b3V0VmVydGljYWwoKVxuICAgIFxuICAgICMjIypcbiAgICAqIFNwcmVhZHMgYWxsIHN1Yi1vYmplY3RzIGV2ZW5seSBvdmVyIHRoZSBsYXlvdXQtc3BhY2UgaG9yaXpvbnRhbGx5LlxuICAgICpcbiAgICAqIEBtZXRob2QgbGF5b3V0SG9yaXpvbnRhbFxuICAgICMjIyAgICAgICAgXG4gICAgbGF5b3V0SG9yaXpvbnRhbDogLT5cbiAgICAgICAgY291bnQgPSBAb2JqZWN0LmNvbnRyb2xzLmxlbmd0aFxuICAgICAgICBAb2JqZWN0LnZpc2libGVfID0gQG9iamVjdC52aXNpYmxlIGFuZCAoIUBvYmplY3QucGFyZW50IG9yIEBvYmplY3QucGFyZW50LnZpc2libGUpXG4gICAgICAgIHkgPSAwXG4gICAgICAgIHJlY3QgPSBAb2JqZWN0LmRzdFJlY3RcbiAgICAgICAgXG4gICAgICAgIGZvciBpIGluIFswLi4uY291bnRdXG4gICAgICAgICAgICBjb250cm9sID0gQG9iamVjdC5jb250cm9sc1tpXVxuICAgICAgICAgICAgY29udHJvbC5wYXJlbnQgPSBAb2JqZWN0XG4gICAgICAgICAgICBjb250cm9sLnVwZGF0ZSgpXG5cbiAgICAgICAgICAgIGNvbnRyb2wuZHN0UmVjdC54ID0gTWF0aC5mbG9vcigocmVjdC53aWR0aC1jb250cm9sLmRzdFJlY3Qud2lkdGgpIC8gKGNvdW50LTEpKSAqIGlcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgaWYgIWNvbnRyb2wuY2xpcFJlY3RcbiAgICAgICAgICAgICAgICBjb250cm9sLmNsaXBSZWN0ID0gQG9iamVjdC5jbGlwUmVjdFxuICAgICAgICAgICAgaWYgY29udHJvbC5hbGlnbm1lbnRZID09IDFcbiAgICAgICAgICAgICAgICBjb250cm9sLmRzdFJlY3QueSA9IHkgKyBNYXRoLnJvdW5kKChyZWN0LmhlaWdodC0oY29udHJvbC5kc3RSZWN0LmhlaWdodCtjb250cm9sLm1hcmdpbi50b3ArY29udHJvbC5tYXJnaW4uYm90dG9tKSkgLyAyKVxuICAgICAgXG4gICAgICAgIGlmIEBvYmplY3QuY2xpcFJlY3Q/XG4gICAgICAgICAgICBAb2JqZWN0LmNsaXBSZWN0LnNldChyZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpICBcbiAgICAgIFxuICAgICMjIypcbiAgICAqIFNwcmVhZHMgYWxsIHN1Yi1vYmplY3RzIGV2ZW5seSBvdmVyIHRoZSBsYXlvdXQtc3BhY2UgdmVydGljYWxseS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIGxheW91dEhvcml6b250YWxcbiAgICAjIyMgICAgICAgICAgICAgIFxuICAgIGxheW91dFZlcnRpY2FsOiAtPlxuICAgICAgICBjb3VudCA9IEBvYmplY3QuY29udHJvbHMubGVuZ3RoXG4gICAgICAgIEBvYmplY3QudmlzaWJsZV8gPSBAb2JqZWN0LnZpc2libGUgYW5kICghQG9iamVjdC5wYXJlbnQgb3IgQG9iamVjdC5wYXJlbnQudmlzaWJsZSlcbiAgICAgICAgeCA9IDBcbiAgICAgICAgcmVjdCA9IEBvYmplY3QuZHN0UmVjdFxuICAgICAgICBcbiAgICAgICAgZm9yIGkgaW4gWzAuLi5jb3VudF1cbiAgICAgICAgICAgIGNvbnRyb2wgPSBAb2JqZWN0LmNvbnRyb2xzW2ldXG4gICAgICAgICAgICBjb250cm9sLnBhcmVudCA9IEBvYmplY3RcbiAgICAgICAgICAgIGNvbnRyb2wudXBkYXRlKClcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgY29udHJvbC5kc3RSZWN0LnkgPSBNYXRoLmZsb29yKHJlY3QuaGVpZ2h0IC8gY291bnQpICogaVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAhY29udHJvbC5jbGlwUmVjdFxuICAgICAgICAgICAgICAgIGNvbnRyb2wuY2xpcFJlY3QgPSBAb2JqZWN0LmNsaXBSZWN0XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiBjb250cm9sLmFsaWdubWVudFggPT0gMVxuICAgICAgICAgICAgICAgIGNvbnRyb2wuZHN0UmVjdC54ID0geCArIE1hdGgucm91bmQoKHJlY3Qud2lkdGgtKGNvbnRyb2wuZHN0UmVjdC53aWR0aCtjb250cm9sLm1hcmdpbi5sZWZ0K2NvbnRyb2wubWFyZ2luLnJpZ2h0KSkgLyAyKVxuICAgICAgXG4gICAgICAgIGlmIEBvYmplY3QuY2xpcFJlY3Q/XG4gICAgICAgICAgICBAb2JqZWN0LmNsaXBSZWN0LnNldChyZWN0LngsIHJlY3QueSwgcmVjdC53aWR0aCwgcmVjdC5oZWlnaHQpIFxuICAgXG5ncy5Db21wb25lbnRfU3ByZWFkTGF5b3V0QmVoYXZpb3IgPSBDb21wb25lbnRfU3ByZWFkTGF5b3V0QmVoYXZpb3IiXX0=
//# sourceURL=Component_SpreadLayoutBehavior_63.js
var Component_StackLayoutBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_StackLayoutBehavior = (function(superClass) {
  extend(Component_StackLayoutBehavior, superClass);


  /**
  * Turns a game object into a stack-layout and layouts all sub-objects
  * like stack vertically or horizontally. The game object needs a 
  * container-component.
  * <br>
  * The sub-objects in a stack-layout can be configured as resizable or
  * non-resizable(fixed-size). For example:<br>
  * <br>
  * Lets say we have a layout-size of 500px in width with three controls.<br>
  * <br>
  * | 80px | dynamic | 80px | <br>
  * <br>
  * Two controls have a fixed size of 80px and the middle-control has a
  * dynamic-size because it is configured to be resizable. In that case, 
  * the size of the resizable control would be 340px because that is the
  * free space left after subtracting the size(160px) of the fixed-size controls.<br>
  * <br>
  * In addition, each sub-object can have different alignment options.
  *
  * @module gs
  * @class Component_StackLayoutBehavior
  * @extends gs.Component_LayoutBehavior
  * @memberof gs
  * @constructor
   */

  function Component_StackLayoutBehavior(orientation) {
    Component_StackLayoutBehavior.__super__.constructor.apply(this, arguments);

    /**
    * The orientation of the stack-layout. Can be vertical or horizontal.
    * @property orientation
    * @type gs.Orientation
     */
    this.orientation = orientation || 0;

    /**
    * @property scrollOffsetX
    * @type number
    * @protected
     */
    this.scrollOffsetX = 0;

    /**
    * @property scrollOffsetY
    * @type number
    * @protected
     */
    this.scrollOffsetY = 0;

    /**
    * @property contentHeight
    * @type number
    * @protected
     */
    this.contentHeight = 0;

    /**
    * Control list-offset.
    * @property offset
    * @type number
    * @protected
     */
    this.offset = 0;

    /**
    * Count of controls to process.
    * @property contentHeight
    * @type number
    * @protected
     */
    this.count = 0;

    /**
    * Current x-coordinate. 
    * @property cx
    * @type number
    * @protected
     */
    this.cx = 0;

    /**
    * Current y-coordinate. 
    * @property cy
    * @type number
    * @protected
     */
    this.cy = 0;

    /**
    * Total size of all centered controls. 
    * @property centerSize
    * @type number
    * @protected
     */
    this.centerSize = 0;

    /**
    * Current x/y-coordinate for a centered control.
    * @property center
    * @type number
    * @protected
     */
    this.center = 0;

    /**
    * Current x/y-coordinate for a bottom/right aligned control.
    * @property bottom
    * @type number
    * @protected
     */
    this.bottom = 0;
    this.managementMode = 0;
  }


  /**
  * Initializes the layout.
  *
  * @method setup
   */

  Component_StackLayoutBehavior.prototype.setup = function() {
    this.update();
    if (this.object.scrollable) {
      return gs.GlobalEventManager.on("mouseWheel", (function(_this) {
        return function() {
          var r;
          r = _this.object.dstRect;
          if (Rect.contains(r.x, r.y, r.width, r.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y)) {
            return _this.object.update();
          }
        };
      })(this));
    }
  };


  /**
  * Updates the layout depending on its orientation.
  *
  * @method update
   */

  Component_StackLayoutBehavior.prototype.update = function() {
    Component_StackLayoutBehavior.__super__.update.apply(this, arguments);
    if (this.orientation === 0) {
      return this.layoutHorizontal();
    } else {
      return this.layoutVertical();
    }
  };


  /**
  * Sizes the layout to fit its content
  *
  * @method sizeToFit
  * @return number The content size.
   */

  Component_StackLayoutBehavior.prototype.sizeToFit = function() {
    if (this.orientation === 0) {
      return this.sizeToFitHorizontal();
    } else {
      return this.sizeToFitVertical();
    }
  };


  /**
  * Sizes the horizontal-layout to fit its content
  *
  * @method sizeToFitHorizontal
   */

  Component_StackLayoutBehavior.prototype.sizeToFitHorizontal = function() {
    var control, i, j, rect, ref, ref1, results, x, y;
    x = 0;
    y = 0;
    rect = this.object.dstRect;
    if (this.object.sizeToFit) {
      results = [];
      for (i = j = ref = this.offset, ref1 = this.count; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
        control = this.object.subObjects[i];
        if (!control.alignment) {
          rect.width = Math.max(x + control.margin.left + control.dstRect.width + control.margin.right, rect.width || 0);
          x += control.margin.left + control.dstRect.width + control.margin.right;
        }
        if (!control.alignmentY) {
          results.push(rect.height = Math.max(y + control.margin.top + control.dstRect.height + control.margin.bottom, rect.height || 0));
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };


  /**
  * Sizes the vertical-layout to fit its content
  *
  * @method sizeToFitVertical
   */

  Component_StackLayoutBehavior.prototype.sizeToFitVertical = function() {
    var control, j, len, rect, ref, results;
    rect = this.object.dstRect;
    if (this.object.sizeToFit) {
      ref = this.object.subObjects;
      results = [];
      for (j = 0, len = ref.length; j < len; j++) {
        control = ref[j];
        rect.width = Math.max(control.dstRect.x + control.dstRect.width + control.margin.right, rect.width || 1);
        results.push(rect.height = Math.max(control.dstRect.y + control.dstRect.height + control.margin.bottom, rect.height || 1));
      }
      return results;
    }
  };


  /**
  * Calculates the dynamic-size of a horizontal stack-layout. That size is used for
  * resizable-controls to let them fill all free space. It is calculated in the
  * following way:<br>
  * <br>
  * dynamic-size = sum-of-all-fixed-control-sizes / count-of-resizable-controls
  * <br>
  *
  * @method calculateDynamicSizeHorizontal
  * @return {number} The dynamic size.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.calculateDynamicSizeHorizontal = function() {
    var control, dynamicCount, fixedSize, i, j, len, rect, ref;
    fixedSize = 0;
    dynamicCount = 0;
    rect = this.object.dstRect;
    ref = this.object.subObjects;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      control = ref[i];
      if (control.resizable && !control.sizeToFit) {
        dynamicCount++;
      } else {
        fixedSize += control.margin.left + control.dstRect.width + control.margin.right;
        if (control.alignmentX === 1) {
          this.centerSize += control.dstRect.width + control.margin.right;
        }
      }
    }
    return Math.round((rect.width - fixedSize) / dynamicCount);
  };


  /**
  * Calculates the dynamic-size of a vertical stack-layout. That size is used for
  * resizable-controls to let them fill all free space. It is calculated in the
  * following way:<br>
  * <br>
  * dynamic-size = sum-of-all-fixed-control-sizes / count-of-resizable-controls
  * <br>
  *
  * @method calculateDynamicSizeVertical
  * @return {number} The dynamic size.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.calculateDynamicSizeVertical = function() {
    var control, dynamicCount, fixedSize, j, len, ref;
    fixedSize = 0;
    dynamicCount = 0;
    ref = this.object.subObjects;
    for (j = 0, len = ref.length; j < len; j++) {
      control = ref[j];
      if (control.resizable && !control.sizeToFit) {
        dynamicCount++;
      } else {
        fixedSize += control.dstRect.height;
        if (control.alignmentY === 1) {
          this.centerSize += control.dstRect.height + control.margin.bottom;
        }
      }
    }
    return Math.round((this.object.dstRect.height - fixedSize) / dynamicCount);
  };


  /**
  * Layouts the specified control as fixed-size control for a horizontal stack-layout. 
  *
  * @method updateControlRectFixedH
  * @param {gs.Object_Base} control The control to update.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.updateControlRectFixedH = function(control) {
    var rect;
    rect = this.object.dstRect;
    if (control.alignmentX === 0) {
      this.cx += control.margin.left;
      control.dstRect.x = this.cx;
      this.cx += control.dstRect.width + control.margin.right;
    } else if (control.alignmentX === 2) {
      this.bottom += control.margin.right;
      control.dstRect.x = (rect.x + rect.width) - control.dstRect.width - this.bottom;
      this.bottom += control.dstRect.width + control.margin.left;
    } else if (control.alignmentX === 1) {
      control.dstRect.x = this.center + (rect.width - this.centerSize) / 2;
      this.center += control.dstRect.width + control.margin.right;
    }
    if (control.alignmentY === 1) {
      return control.dstRect.y = this.cy + Math.round((rect.height - (control.dstRect.height + control.margin.top + control.margin.bottom)) / 2);
    } else {
      return control.dstRect.y = this.cy + control.margin.top;
    }
  };


  /**
  * Layouts the specified control as fixed-size control for a vertical stack-layout. 
  *
  * @method updateControlRectFixedV
  * @param {gs.Object_Base} control The control to update.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.updateControlRectFixedV = function(control) {
    var rect;
    rect = this.object.dstRect;
    if (control.alignmentY === 0) {
      this.cy += control.margin.top;
      control.dstRect.y = this.cy;
      this.cy += control.dstRect.height + control.margin.bottom;
      control.dstRect.x = this.cx + control.margin.left;
    } else if (control.alignmentY === 2) {
      this.bottom += control.margin.bottom;
      control.dstRect.y = rect.height - control.dstRect.height - this.bottom;
      this.bottom += control.dstRect.height + control.margin.top;
      control.dstRect.x = this.cx + control.margin.left;
    } else if (control.alignmentY === 1) {
      control.dstRect.y = this.center + (rect.height - this.centerSize) / 2;
      control.dstRect.x = this.cx + control.margin.left;
      this.center += control.dstRect.height + control.margin.bottom;
    }
    if (control.alignmentX === 1) {
      return control.dstRect.x = this.cx + Math.round((rect.width - control.dstRect.width) / 2);
    }
  };


  /**
  * Layouts the specified control as resizable-control for a horizontal stack-layout. 
  * That means the control will take up all free space after subtracting all 
  * fixed-size controls.
  *
  * @method updateControlRectResizableH
  * @param {gs.Object_Base} control The control to update.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.updateControlRectResizableH = function(control) {
    var dynamicSize;
    dynamicSize = this.calculateDynamicSizeHorizontal();
    control.dstRect.y = control.margin.top;
    control.dstRect.height = this.object.dstRect.height - control.margin.bottom - control.margin.top;
    control.dstRect.x = this.cx + control.margin.left;
    control.dstRect.width = dynamicSize - control.margin.right - control.margin.left;
    return this.cx += dynamicSize;
  };


  /**
  * Layouts the specified control as resizable-control for a vertical stack-layout. 
  * That means the control will take up all free space after subtracting all 
  * fixed-size controls.
  *
  * @method updateControlRectResizableV
  * @param {gs.Object_Base} control The control to update.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.updateControlRectResizableV = function(control) {
    var dynamicSize;
    dynamicSize = this.calculateDynamicSizeVertical();
    control.dstRect.x = control.margin.left;
    control.dstRect.width = this.object.dstRect.width - control.margin.right - control.margin.left;
    control.dstRect.y = this.cy + control.margin.top;
    control.dstRect.height = dynamicSize - control.margin.bottom - control.margin.top;
    return this.cy += dynamicSize;
  };


  /**
  * Updates a control.
  *
  * @method updateControl
  * @param {gs.Object_Base} control The control to update.
  * @protected
   */

  Component_StackLayoutBehavior.prototype.updateControl = function(control) {
    if (this.orientation === 1) {
      if (control.clipRect == null) {
        control.clipRect = this.object.clipRect;
      }
      if (true) {
        if (control.needsUpdate) {
          control.needsUpdate = false;
          control.update();
        }
        control.updated = true;
        return control.visible = true;
      } else {
        if (control.visible) {
          control.visible = false;
          return control.update();
        }
      }
    } else {
      return Component_StackLayoutBehavior.__super__.updateControl.call(this, control);
    }
  };


  /**
  * Layouts the sub-objects horizontally.
  *
  * @method layoutHorizontal
   */

  Component_StackLayoutBehavior.prototype.layoutHorizontal = function() {
    var control, i, ref;
    this.bottom = 0;
    this.center = 0;
    this.centerSize = 0;
    this.offset = this.object.listOffset || 0;
    this.count = this.object.subObjects.length;
    this.cx = 0;
    this.cy = 0;
    this.sizeToFitHorizontal();
    i = this.offset;
    while (i < this.object.subObjects.length) {
      control = this.object.subObjects[i];
      this.updateControl(control);
      if (control.disposed) {
        this.object.removeObject(control);
        i--;
      } else {
        if (control.resizable && !control.sizeToFit) {
          this.updateControlRectResizableH(control);
        } else {
          this.updateControlRectFixedH(control);
        }
      }
      i++;
    }
    if ((ref = this.object.clipRect) != null) {
      ref.set(this.object.dstRect.x + this.object.origin.x, this.object.dstRect.y + this.object.origin.y, this.object.dstRect.width, this.object.dstRect.height);
    }
    return null;
  };


  /**
  * Layouts the sub-objects vertically.
  *
  * @method layoutVertical
   */

  Component_StackLayoutBehavior.prototype.layoutVertical = function() {
    var control, currentY, i, ref;
    this.bottom = 0;
    this.center = 0;
    this.centerSize = 0;
    this.offset = this.object.listOffset || 0;
    this.count = this.object.subObjects.length;
    this.cx = 0;
    this.cy = 0;
    this.cy -= this.object.scrollOffsetY;
    i = this.offset;
    currentY = 0;
    while (i < this.object.subObjects.length) {
      control = this.object.subObjects[i];
      i++;
      if (!control) {
        continue;
      }
      this.updateControl(control);
      if (control.disposed) {
        this.object.removeObject(control);
        i--;
      } else {
        if (control.resizable && !control.sizeToFit) {
          this.updateControlRectResizableV(control);
        } else {
          this.updateControlRectFixedV(control);
        }
      }
    }
    this.sizeToFitVertical();
    if ((ref = this.object.clipRect) != null) {
      ref.set(this.object.dstRect.x + this.object.origin.x, this.object.dstRect.y + this.object.origin.y, this.object.dstRect.width, this.object.dstRect.height);
    }
    return null;
  };

  return Component_StackLayoutBehavior;

})(gs.Component_LayoutBehavior);

gs.Component_StackLayoutBehavior = Component_StackLayoutBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_StackLayoutBehavior_82.js
var Component_GridLayoutBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_GridLayoutBehavior = (function(superClass) {
  extend(Component_GridLayoutBehavior, superClass);


  /**
  * Turns a game object into a free-layout and layouts all sub-objects
  * in a grid of rows and columns.
  
  * @module gs
  * @class Component_GridLayoutBehavior
  * @extends gs.Component_LayoutBehavior
  * @memberof gs
  * @constructor
   */

  function Component_GridLayoutBehavior() {
    Component_GridLayoutBehavior.__super__.constructor.apply(this, arguments);
    this.column = 0;
    this.row = 0;
  }

  Component_GridLayoutBehavior.prototype.sizeToFit = function() {};


  /**
  * Updates a specified control.
  *
  * @method updateControl
  * @protected
  * @param {gs.Object_Base} control The control to update
   */

  Component_GridLayoutBehavior.prototype.updateControl = function(control) {
    var cellSpacing, rect;
    Component_GridLayoutBehavior.__super__.updateControl.apply(this, arguments);
    cellSpacing = this.object.cellSpacing;
    rect = this.object.dstRect;
    control.parent = this.object;
    control.dstRect.x = cellSpacing[0] + this.column * (control.dstRect.width + cellSpacing[2]);
    control.dstRect.y = cellSpacing[1] + this.row * (control.dstRect.height + cellSpacing[3]);
    if (control.needsUpdate) {
      control.needsUpdate = false;
      control.update();
    }
    if (this.object.sizeToFit) {
      rect.width = Math.max(control.dstRect.x + control.dstRect.width + cellSpacing[2], rect.width || 0);
      return rect.height = Math.max(control.dstRect.y + control.dstRect.height + cellSpacing[3], rect.height || 0);
    }
  };


  /**
  * Updates the grid-layout.
  *
  * @method update
   */

  Component_GridLayoutBehavior.prototype.update = function() {
    var cellSpacing, columns, control, count, i, j, offset, rect, ref, ref1, rows;
    this.updateOrigin();
    cellSpacing = this.object.cellSpacing;
    rows = this.object.rows;
    columns = this.object.columns;
    this.row = 0;
    this.column = 0;
    offset = (this.object.listOffset || 0) * (rows * columns);
    count = Math.min(this.object.subObjects.length, rows * columns + offset);
    rect = this.object.dstRect;
    for (i = j = ref = offset, ref1 = count; ref <= ref1 ? j < ref1 : j > ref1; i = ref <= ref1 ? ++j : --j) {
      control = this.object.subObjects[i];
      control.index = i;
      this.updateControl(control);
      this.column++;
      if (this.column >= columns) {
        this.column = 0;
        this.row++;
      }
      if (this.row >= rows) {
        break;
      }
    }
    if (this.object.clipRect != null) {
      return this.object.clipRect.set(rect.x, rect.y, rect.width, rect.height);
    }
  };

  return Component_GridLayoutBehavior;

})(gs.Component_LayoutBehavior);

gs.Component_GridLayoutBehavior = Component_GridLayoutBehavior;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsNEJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7RUFVYSxzQ0FBQTtJQUNULCtEQUFBLFNBQUE7SUFFQSxJQUFDLENBQUEsTUFBRCxHQUFVO0lBQ1YsSUFBQyxDQUFBLEdBQUQsR0FBTztFQUpFOzt5Q0FNYixTQUFBLEdBQVcsU0FBQSxHQUFBOzs7QUFFWDs7Ozs7Ozs7eUNBT0EsYUFBQSxHQUFlLFNBQUMsT0FBRDtBQUNYLFFBQUE7SUFBQSxpRUFBQSxTQUFBO0lBRUEsV0FBQSxHQUFjLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFDdEIsSUFBQSxHQUFPLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFFZixPQUFPLENBQUMsTUFBUixHQUFpQixJQUFDLENBQUE7SUFDbEIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFoQixHQUFvQixXQUFZLENBQUEsQ0FBQSxDQUFaLEdBQWlCLElBQUMsQ0FBQSxNQUFELEdBQVUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLEtBQWhCLEdBQXNCLFdBQVksQ0FBQSxDQUFBLENBQW5DO0lBQy9DLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsV0FBWSxDQUFBLENBQUEsQ0FBWixHQUFpQixJQUFDLENBQUEsR0FBRCxHQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFoQixHQUF1QixXQUFZLENBQUEsQ0FBQSxDQUFwQztJQUM1QyxJQUFHLE9BQU8sQ0FBQyxXQUFYO01BQ0ksT0FBTyxDQUFDLFdBQVIsR0FBc0I7TUFDdEIsT0FBTyxDQUFDLE1BQVIsQ0FBQSxFQUZKOztJQUlBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFYO01BQ0ksSUFBSSxDQUFDLEtBQUwsR0FBYSxJQUFJLENBQUMsR0FBTCxDQUFTLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFwQyxHQUE0QyxXQUFZLENBQUEsQ0FBQSxDQUFqRSxFQUFxRSxJQUFJLENBQUMsS0FBTCxJQUFjLENBQW5GO2FBQ2IsSUFBSSxDQUFDLE1BQUwsR0FBYyxJQUFJLENBQUMsR0FBTCxDQUFTLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBaEIsR0FBb0IsT0FBTyxDQUFDLE9BQU8sQ0FBQyxNQUFwQyxHQUE2QyxXQUFZLENBQUEsQ0FBQSxDQUFsRSxFQUFzRSxJQUFJLENBQUMsTUFBTCxJQUFlLENBQXJGLEVBRmxCOztFQWJXOzs7QUFrQmY7Ozs7Ozt5Q0FLQSxNQUFBLEdBQVEsU0FBQTtBQUNKLFFBQUE7SUFBQSxJQUFDLENBQUEsWUFBRCxDQUFBO0lBRUEsV0FBQSxHQUFjLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFDdEIsSUFBQSxHQUFPLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFDZixPQUFBLEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUNsQixJQUFDLENBQUEsR0FBRCxHQUFPO0lBQ1AsSUFBQyxDQUFBLE1BQUQsR0FBVTtJQUNWLE1BQUEsR0FBUyxDQUFDLElBQUMsQ0FBQSxNQUFNLENBQUMsVUFBUixJQUFvQixDQUFyQixDQUFBLEdBQTBCLENBQUMsSUFBQSxHQUFPLE9BQVI7SUFDbkMsS0FBQSxHQUFRLElBQUksQ0FBQyxHQUFMLENBQVMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFVLENBQUMsTUFBNUIsRUFBb0MsSUFBQSxHQUFPLE9BQVAsR0FBaUIsTUFBckQ7SUFDUixJQUFBLEdBQU8sSUFBQyxDQUFBLE1BQU0sQ0FBQztBQUVmLFNBQVMsa0dBQVQ7TUFDSSxPQUFBLEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFXLENBQUEsQ0FBQTtNQUM3QixPQUFPLENBQUMsS0FBUixHQUFnQjtNQUVoQixJQUFDLENBQUEsYUFBRCxDQUFlLE9BQWY7TUFFQSxJQUFDLENBQUEsTUFBRDtNQUNBLElBQUcsSUFBQyxDQUFBLE1BQUQsSUFBVyxPQUFkO1FBQ0ksSUFBQyxDQUFBLE1BQUQsR0FBVTtRQUNWLElBQUMsQ0FBQSxHQUFELEdBRko7O01BSUEsSUFBRyxJQUFDLENBQUEsR0FBRCxJQUFRLElBQVg7QUFDSSxjQURKOztBQVhKO0lBY0EsSUFBRyw0QkFBSDthQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUSxDQUFDLEdBQWpCLENBQXFCLElBQUksQ0FBQyxDQUExQixFQUE2QixJQUFJLENBQUMsQ0FBbEMsRUFBcUMsSUFBSSxDQUFDLEtBQTFDLEVBQWlELElBQUksQ0FBQyxNQUF0RCxFQURKOztFQTFCSTs7OztHQWpEK0IsRUFBRSxDQUFDOztBQThFOUMsRUFBRSxDQUFDLDRCQUFILEdBQWtDIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfR3JpZExheW91dEJlaGF2aW9yXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBDb21wb25lbnRfR3JpZExheW91dEJlaGF2aW9yIGV4dGVuZHMgZ3MuQ29tcG9uZW50X0xheW91dEJlaGF2aW9yXG4gICAgIyMjKlxuICAgICogVHVybnMgYSBnYW1lIG9iamVjdCBpbnRvIGEgZnJlZS1sYXlvdXQgYW5kIGxheW91dHMgYWxsIHN1Yi1vYmplY3RzXG4gICAgKiBpbiBhIGdyaWQgb2Ygcm93cyBhbmQgY29sdW1ucy5cblxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9HcmlkTGF5b3V0QmVoYXZpb3JcbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudF9MYXlvdXRCZWhhdmlvclxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIEBjb2x1bW4gPSAwXG4gICAgICAgIEByb3cgPSAwXG5cbiAgICBzaXplVG9GaXQ6IC0+XG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgYSBzcGVjaWZpZWQgY29udHJvbC5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZUNvbnRyb2xcbiAgICAqIEBwcm90ZWN0ZWRcbiAgICAqIEBwYXJhbSB7Z3MuT2JqZWN0X0Jhc2V9IGNvbnRyb2wgVGhlIGNvbnRyb2wgdG8gdXBkYXRlXG4gICAgIyMjIFxuICAgIHVwZGF0ZUNvbnRyb2w6IChjb250cm9sKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgY2VsbFNwYWNpbmcgPSBAb2JqZWN0LmNlbGxTcGFjaW5nXG4gICAgICAgIHJlY3QgPSBAb2JqZWN0LmRzdFJlY3RcbiAgICAgICAgXG4gICAgICAgIGNvbnRyb2wucGFyZW50ID0gQG9iamVjdFxuICAgICAgICBjb250cm9sLmRzdFJlY3QueCA9IGNlbGxTcGFjaW5nWzBdICsgQGNvbHVtbiAqIChjb250cm9sLmRzdFJlY3Qud2lkdGgrY2VsbFNwYWNpbmdbMl0pXG4gICAgICAgIGNvbnRyb2wuZHN0UmVjdC55ID0gY2VsbFNwYWNpbmdbMV0gKyBAcm93ICogKGNvbnRyb2wuZHN0UmVjdC5oZWlnaHQrY2VsbFNwYWNpbmdbM10pXG4gICAgICAgIGlmIGNvbnRyb2wubmVlZHNVcGRhdGVcbiAgICAgICAgICAgIGNvbnRyb2wubmVlZHNVcGRhdGUgPSBub1xuICAgICAgICAgICAgY29udHJvbC51cGRhdGUoKVxuICAgICAgIFxuICAgICAgICBpZiBAb2JqZWN0LnNpemVUb0ZpdFxuICAgICAgICAgICAgcmVjdC53aWR0aCA9IE1hdGgubWF4KGNvbnRyb2wuZHN0UmVjdC54ICsgY29udHJvbC5kc3RSZWN0LndpZHRoICsgY2VsbFNwYWNpbmdbMl0sIHJlY3Qud2lkdGggfHwgMClcbiAgICAgICAgICAgIHJlY3QuaGVpZ2h0ID0gTWF0aC5tYXgoY29udHJvbC5kc3RSZWN0LnkgKyBjb250cm9sLmRzdFJlY3QuaGVpZ2h0ICsgY2VsbFNwYWNpbmdbM10sIHJlY3QuaGVpZ2h0IHx8IDApXG4gICAgICAgICAgIFxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSBncmlkLWxheW91dC5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjI1xuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgQHVwZGF0ZU9yaWdpbigpXG4gICAgICAgIFxuICAgICAgICBjZWxsU3BhY2luZyA9IEBvYmplY3QuY2VsbFNwYWNpbmdcbiAgICAgICAgcm93cyA9IEBvYmplY3Qucm93c1xuICAgICAgICBjb2x1bW5zID0gQG9iamVjdC5jb2x1bW5zXG4gICAgICAgIEByb3cgPSAwXG4gICAgICAgIEBjb2x1bW4gPSAwXG4gICAgICAgIG9mZnNldCA9IChAb2JqZWN0Lmxpc3RPZmZzZXR8fDApICogKHJvd3MgKiBjb2x1bW5zKSBcbiAgICAgICAgY291bnQgPSBNYXRoLm1pbihAb2JqZWN0LnN1Yk9iamVjdHMubGVuZ3RoLCByb3dzICogY29sdW1ucyArIG9mZnNldClcbiAgICAgICAgcmVjdCA9IEBvYmplY3QuZHN0UmVjdFxuICAgICAgICBcbiAgICAgICAgZm9yIGkgaW4gW29mZnNldC4uLmNvdW50XVxuICAgICAgICAgICAgY29udHJvbCA9IEBvYmplY3Quc3ViT2JqZWN0c1tpXVxuICAgICAgICAgICAgY29udHJvbC5pbmRleCA9IGlcblxuICAgICAgICAgICAgQHVwZGF0ZUNvbnRyb2woY29udHJvbClcblxuICAgICAgICAgICAgQGNvbHVtbisrXG4gICAgICAgICAgICBpZiBAY29sdW1uID49IGNvbHVtbnNcbiAgICAgICAgICAgICAgICBAY29sdW1uID0gMFxuICAgICAgICAgICAgICAgIEByb3crK1xuXG4gICAgICAgICAgICBpZiBAcm93ID49IHJvd3NcbiAgICAgICAgICAgICAgICBicmVha1xuICAgICAgICBcbiAgICAgICAgaWYgQG9iamVjdC5jbGlwUmVjdD9cbiAgICAgICAgICAgIEBvYmplY3QuY2xpcFJlY3Quc2V0KHJlY3QueCwgcmVjdC55LCByZWN0LndpZHRoLCByZWN0LmhlaWdodCkgICAgICBcbiAgICAgICAgXG5ncy5Db21wb25lbnRfR3JpZExheW91dEJlaGF2aW9yID0gQ29tcG9uZW50X0dyaWRMYXlvdXRCZWhhdmlvciJdfQ==
//# sourceURL=Component_GridLayoutBehavior_96.js
var Component_Handler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Handler = (function(superClass) {
  extend(Component_Handler, superClass);


  /**
  * The base class for all handler-components. A handler-component is
  * used to handle condition- or event-based processes of a In-Game UI
  * object like executing bindings or triggering actions.
  *
  * A handler is only executed if all assigned conditions and events are
  * true.
  *
  * @module ui
  * @class Component_Handler
  * @extends gs.Component
  * @memberof ui
  * @constructor
   */

  function Component_Handler() {

    /**
    * @property mouseEntered
    * @type boolean
    * @protected
     */
    this.mouseEntered = false;

    /**
    * @property mouseLeaved
    * @type boolean
    * @protected
     */
    this.mouseLeaved = true;
  }


  /**
  * Checks if the condition is <b>true</b> for the specified game object.
  *
  * @method checkCondition
  * @param {gs.Object_Base} object The game object.
  * @param {Object} condition The condition-object.
  * @return {boolean} If <b>true</b> the condition is true. Otherwise <b>false</b>.
  * @static
   */

  Component_Handler.checkCondition = function(object, condition) {
    var result;
    result = false;
    if (condition.equalTo != null) {
      result = ui.Component_FormulaHandler.fieldValue(object, condition.field) === ui.Component_FormulaHandler.fieldValue(object, condition.equalTo);
    } else if (condition.greaterThan != null) {
      result = ui.Component_FormulaHandler.fieldValue(object, condition.field) > ui.Component_FormulaHandler.fieldValue(object, condition.greaterThan);
    } else if (condition.lessThan != null) {
      result = ui.Component_FormulaHandler.fieldValue(object, condition.field) < ui.Component_FormulaHandler.fieldValue(object, condition.lessThan);
    } else if (condition.notEqualTo != null) {
      result = ui.Component_FormulaHandler.fieldValue(object, condition.field) !== ui.Component_FormulaHandler.fieldValue(object, condition.notEqualTo);
    }
    return result;
  };


  /**
  * Checks if the specified condition is <b>true</b>.
  *
  * @method checkCondition
  * @param {Object} condition The condition-object.
  * @return {boolean} If <b>true</b> the condition is true. Otherwise <b>false</b>.
   */

  Component_Handler.prototype.checkCondition = function(condition) {
    return ui.Component_Handler.checkCondition(this.object, condition);
  };


  /**
  * Checks if the specified conditions are <b>true</b>.
  *
  * @method checkConditions
  * @param {Object[]} conditions An array of condition-objects.
  * @return {boolean} If <b>true</b> all conditions are true. Otherwise <b>false</b>.
   */

  Component_Handler.prototype.checkConditions = function(conditions) {
    var condition, i, len, result;
    result = true;
    for (i = 0, len = conditions.length; i < len; i++) {
      condition = conditions[i];
      if (!this.checkCondition(condition)) {
        result = false;
        break;
      }
    }
    return result;
  };


  /**
  * Checks if the specified event is true.
  *
  * @method checkEvent
  * @param {Object} event The event to check for.
  * @param {Object} [binding=null] binding An optional binding-object necessary for some event-types.
  * @return {boolean} If <b>true</b> the event is true. Otherwise <b>false</b>.
   */

  Component_Handler.prototype.checkEvent = function(event, binding) {
    var entered, leaved, result, value;
    result = false;
    if (event === "onInitialize") {
      result = !this.initializeEventEmitted;
      this.initializeEventEmitted = true;
    } else if (event === "onAlways") {
      result = true;
    } else if (event === "onAction") {
      result = Input.Mouse.buttons[Input.Mouse.LEFT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);
    } else if (event === "onCancel") {
      result = Input.Mouse.buttons[Input.Mouse.RIGHT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);
    } else if (event === "onAccept") {
      result = Input.release(Input.KEY_RETURN) || (Input.Mouse.buttons[Input.Mouse.LEFT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y));
    } else if (event === "onMouseEnter") {
      entered = this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);
      result = !this.mouseEntered && entered;
      this.mouseEntered = entered;
    } else if (event === "onMouseLeave") {
      leaved = !this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);
      result = !this.mouseLeaved && leaved;
      this.mouseLeaved = leaved;
    } else if (event === "onMouseHover") {
      result = this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);
    } else if (event === "onMouseClick") {
      result = Input.Mouse.buttons[Input.Mouse.LEFT] === 2 && this.object.dstRect.contains(Input.Mouse.x - this.object.origin.x, Input.Mouse.y - this.object.origin.y);
    } else if (event.onChange != null) {
      value = this.resolveFieldPath(event.onChange);
      if (value != null) {
        value = value.get(this.object);
        if (binding[event.onChange] !== value) {
          binding[event.onChange] = value;
          result = true;
        }
      } else {
        result = true;
      }
    }
    return result;
  };


  /**
  * Checks if all events and conditions defined for the handler
  * are true. If that check returns <b>true</b> the handler must be
  * executed.
  *
  * @method checkObject
  * @param {Object} object The game object to check.
  * @return {boolean} If <b>true</b> the handler must be executed. Otherwise <b>false</b>.
   */

  Component_Handler.prototype.checkObject = function(object) {
    var event, execute, i, len, ref;
    execute = true;
    if (object.event != null) {
      object.events = [object.event];
      delete object.event;
    }
    if (object.condition != null) {
      object.conditions = [object.condition];
      delete object.condition;
    }
    if (object.events != null) {
      ref = object.events;
      for (i = 0, len = ref.length; i < len; i++) {
        event = ref[i];
        execute = this.checkEvent(event, object);
        if (execute) {
          break;
        }
      }
    }
    if ((object.conditions != null) && execute) {
      execute = this.checkConditions(object.conditions);
    }
    return execute;
  };

  return Component_Handler;

})(gs.Component);

ui.Component_Handler = Component_Handler;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Handler_102.js
var Component_BindingHandler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_BindingHandler = (function(superClass) {
  extend(Component_BindingHandler, superClass);


  /**
  * Caches already compiled binding-paths.
  * @property compiledPaths
  * @type Object
  * @static
   */

  Component_BindingHandler.compiledPaths = {};


  /**
  * A binding-handler component allows a UI game object to execute
  * property-bindings.<br><br>
  *
  * For example: A text-label can bind its text-property to a backend-field 
  * like the current music-volume to always display correct music-volume. 
  * If the volume changes, the text-property will be updated
  * automatically.
  *
  * To define a binding, a special property-path syntax is used. For example:<br>
  * <br>
  * $myTextField.text<br>
  * <br>
  * is a property-path to access the text-property of a text-field object
  * with the identifier "myTextField". For more information, take a look
  * into the "In Game UI System" section of the help-file.
  * 
  * @module ui
  * @class Component_BindingHandler
  * @extends ui.Component_Handler
  * @memberof ui
  * @constructor
   */

  function Component_BindingHandler() {}


  /**
  * Initializes the binding-handler.
  * 
  * @method setup
   */

  Component_BindingHandler.prototype.setup = function() {};


  /**
  * Updates the binding-handler.
  * 
  * @method update
   */

  Component_BindingHandler.prototype.update = function() {
    var binding, i, len, ref;
    ref = this.object.bindings;
    for (i = 0, len = ref.length; i < len; i++) {
      binding = ref[i];
      this.executeBinding(binding);
    }
    this.object.initialized = true;
    return null;
  };


  /**
  * Executes a specified binding. The binding is only executed if all assigned
  * events and conditions are true.
  * 
  * @method executeBinding
  * @param {Object} binding - The binding to execute.
   */

  Component_BindingHandler.prototype.executeBinding = function(binding) {
    var offset, ref, ref1, source, target, value;
    if (!this.checkObject(binding)) {
      return;
    }
    source = (ref = binding.sourceFunc) != null ? ref : (binding.sourceFunc = this.resolveFieldPath(binding.sourceField));
    target = (ref1 = binding.targetFunc) != null ? ref1 : (binding.targetFunc = this.resolveFieldPath(binding.targetField));
    if (!target) {
      return;
    }
    if (!source) {
      return target.set(this.object, null);
    }
    value = source.get(this.object);
    offset = 0;
    if (binding.offset != null) {
      value += binding.offset;
    }
    if (binding.max != null) {
      value = Math.min(binding.max, value);
    }
    if (binding.min != null) {
      value = Math.max(binding.min, value);
    }
    return target.set(this.object, value);
  };


  /**
  * Evaluates a specified property-path and returns the result.
  * 
  * @method fieldValue
  * @param {string} path - A property-path.
  * @return {Object} The value of the property-path.
   */

  Component_BindingHandler.prototype.fieldValue = function(path) {
    return ui.Component_BindingHandler.fieldValue(this.object, path);
  };


  /**
  * Executes a specified binding. The binding is only executed if all assigned
  * events and conditions are true.
  * 
  * @method executeBinding
  * @param {Object} binding - The binding to execute.
  * @static
   */

  Component_BindingHandler.executeBinding = function(sender, binding) {
    var binder;
    binder = new ui.BindingHandler();
    binder.object = sender;
    return binder.executeBinding(binding);
  };


  /**
  * Evaluates a property-path on a specified object and returns the result.
  * 
  * @method fieldValue
  * @static
  * @param {Object} object - An object to evaluate the property-path on.
  * @param {string} path - A property-path.
  * @return {Object} The value of the property-path.
   */

  Component_BindingHandler.fieldValue = function(object, path) {
    var field;
    if (typeof path === "string") {
      field = ui.Component_BindingHandler.resolveFieldPath(object, path);
      if (field == null) {
        return 0;
      }
      return field.get(object);
    } else {
      return path;
    }
  };


  /**
  * Resolves a property-path of a specified object and returns the result. The
  * result-object has a get- and an optional set-function to get or set the
  * value for the property-path. The set-function is only present for property-paths
  * which can be written.
  * 
  * @method resolveFieldPath
  * @static
  * @param {Object} object - An object to evaluate the property-path on.
  * @param {string} path - A property-path.
  * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.
   */

  Component_BindingHandler.resolveFieldPath = function(object, path) {
    var result;
    result = ui.Component_BindingHandler.compiledPaths[path];
    if (result != null) {
      return result;
    }
    if (path != null) {
      result = {
        set: null,
        get: null
      };
      result.get = eval("(function(o) { return " + path + " })");
      result.set = eval("(function(o, v) { " + path + " = v; })");
      ui.Component_BindingHandler.compiledPaths[path] = result;
    }
    return result;
  };


  /**
  * Resolves a property-path and returns the result. The
  * result-object has a get- and an optional set-function to get or set the
  * value for the property-path. The set-function is only present for property-paths
  * which can be written.
  * 
  * @method resolveFieldPath
  * @param {Object} object - An object to evaluate the property-path on.
  * @param {string} path - A property-path.
  * @return {Object} The result-object containing a get- and set-function to manipulate the property-value.
   */

  Component_BindingHandler.prototype.resolveFieldPath = function(path) {
    return ui.Component_BindingHandler.resolveFieldPath(this.object, path);
  };

  return Component_BindingHandler;

})(ui.Component_Handler);

ui.Component_BindingHandler = Component_BindingHandler;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_BindingHandler_109.js
var Component_FormulaHandler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_FormulaHandler = (function(superClass) {
  extend(Component_FormulaHandler, superClass);


  /**
  * A binding-handler component allows a UI game object to execute
  * property-bindings.<br><br>
  *
  * For example: A text-label can bind its text-property to a backend-field 
  * like the current music-volume to always display correct music-volume. 
  * If the volume changes, the text-property will be updated
  * automatically.
  *
  * To define a binding, a special property-path syntax is used. For example:<br>
  * <br>
  * $myTextField.text<br>
  * <br>
  * is a property-path to access the text-property of a text-field object
  * with the identifier "myTextField". For more information, take a look
  * into the "In Game UI System" section of the help-file.
  * 
  * @module ui
  * @class Component_BindingHandler
  * @extends ui.Component_Handler
  * @memberof ui
  * @constructor
   */

  function Component_FormulaHandler() {
    this.breakChainAt = null;
  }


  /**
  * Initializes the binding-handler.
  * 
  * @method setup
   */

  Component_FormulaHandler.prototype.setup = function() {};


  /**
  * Updates the binding-handler.
  * 
  * @method update
   */

  Component_FormulaHandler.prototype.update = function() {
    var formula, i, len, ref;
    ref = this.object.formulas;
    for (i = 0, len = ref.length; i < len; i++) {
      formula = ref[i];
      this.executeFormula(formula);
    }
    this.object.initialized = true;
    return null;
  };

  Component_FormulaHandler.prototype.executeFormula = function(formula) {
    if (this.checkObject(formula)) {
      window.o = this.object;
      window.d = this.object.data[0];
      return formula.exec();
    }
  };

  Component_FormulaHandler.executeFormula = function(object, formula) {
    window.o = object;
    window.d = object.data[0];
    return formula.exec();
  };


  /**
  * Evaluates a specified property-path and returns the result.
  * 
  * @method fieldValue
  * @param {string} path - A property-path.
  * @return {Object} The value of the property-path.
   */

  Component_FormulaHandler.prototype.fieldValue = function(path) {
    return ui.FormulaHandler.fieldValue(this.object, path);
  };


  /**
  * Evaluates a property-path on a specified object and returns the result.
  * 
  * @method fieldValue
  * @static
  * @param {Object} object - An object to evaluate the property-path on.
  * @param {string} path - A property-path.
  * @return {Object} The value of the property-path.
   */

  Component_FormulaHandler.fieldValue = function(object, path, readOnly) {
    var ref, value;
    if (typeof (path != null ? path.exec : void 0) === "function") {
      window.o = object;
      window.d = object != null ? (ref = object.data) != null ? ref[0] : void 0 : void 0;
      value = path.exec();
      return value != null ? value : 0;
    } else {
      return path;
    }
  };

  return Component_FormulaHandler;

})(ui.Component_Handler);

ui.Component_FormulaHandler = Component_FormulaHandler;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsd0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0VBdUJhLGtDQUFBO0lBQ1QsSUFBQyxDQUFBLFlBQUQsR0FBZ0I7RUFEUDs7O0FBR2I7Ozs7OztxQ0FLQSxLQUFBLEdBQU8sU0FBQSxHQUFBOzs7QUFFUDs7Ozs7O3FDQUtBLE1BQUEsR0FBUSxTQUFBO0FBQ0osUUFBQTtBQUFBO0FBQUEsU0FBQSxxQ0FBQTs7TUFDSSxJQUFDLENBQUEsY0FBRCxDQUFnQixPQUFoQjtBQURKO0lBR0EsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLEdBQXNCO0FBRXRCLFdBQU87RUFOSDs7cUNBUVIsY0FBQSxHQUFnQixTQUFDLE9BQUQ7SUFDWixJQUFHLElBQUMsQ0FBQSxXQUFELENBQWEsT0FBYixDQUFIO01BQ0ksTUFBTSxDQUFDLENBQVAsR0FBVyxJQUFDLENBQUE7TUFDWixNQUFNLENBQUMsQ0FBUCxHQUFXLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSyxDQUFBLENBQUE7YUFDeEIsT0FBTyxDQUFDLElBQVIsQ0FBQSxFQUhKOztFQURZOztFQU1oQix3QkFBQyxDQUFBLGNBQUQsR0FBaUIsU0FBQyxNQUFELEVBQVMsT0FBVDtJQUNiLE1BQU0sQ0FBQyxDQUFQLEdBQVc7SUFDWCxNQUFNLENBQUMsQ0FBUCxHQUFXLE1BQU0sQ0FBQyxJQUFLLENBQUEsQ0FBQTtXQUN2QixPQUFPLENBQUMsSUFBUixDQUFBO0VBSGE7OztBQUtqQjs7Ozs7Ozs7cUNBT0EsVUFBQSxHQUFZLFNBQUMsSUFBRDtXQUFVLEVBQUUsQ0FBQyxjQUFjLENBQUMsVUFBbEIsQ0FBNkIsSUFBQyxDQUFBLE1BQTlCLEVBQXNDLElBQXRDO0VBQVY7OztBQUVaOzs7Ozs7Ozs7O0VBU0Esd0JBQUMsQ0FBQSxVQUFELEdBQWEsU0FBQyxNQUFELEVBQVMsSUFBVCxFQUFlLFFBQWY7QUFDVCxRQUFBO0lBQUEsSUFBRyxPQUFPLGdCQUFDLElBQUksQ0FBRSxhQUFQLENBQVAsS0FBdUIsVUFBMUI7TUFDSSxNQUFNLENBQUMsQ0FBUCxHQUFXO01BQ1gsTUFBTSxDQUFDLENBQVAscURBQXlCLENBQUEsQ0FBQTtNQUN6QixLQUFBLEdBQVEsSUFBSSxDQUFDLElBQUwsQ0FBQTtBQUVSLDZCQUFPLFFBQVEsRUFMbkI7S0FBQSxNQUFBO0FBT0ksYUFBTyxLQVBYOztFQURTOzs7O0dBNUVzQixFQUFFLENBQUM7O0FBc0YxQyxFQUFFLENBQUMsd0JBQUgsR0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9Gb3JtdWxhSGFuZGxlclxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X0Zvcm11bGFIYW5kbGVyIGV4dGVuZHMgdWkuQ29tcG9uZW50X0hhbmRsZXJcbiAgICAjIyMqXG4gICAgKiBBIGJpbmRpbmctaGFuZGxlciBjb21wb25lbnQgYWxsb3dzIGEgVUkgZ2FtZSBvYmplY3QgdG8gZXhlY3V0ZVxuICAgICogcHJvcGVydHktYmluZGluZ3MuPGJyPjxicj5cbiAgICAqXG4gICAgKiBGb3IgZXhhbXBsZTogQSB0ZXh0LWxhYmVsIGNhbiBiaW5kIGl0cyB0ZXh0LXByb3BlcnR5IHRvIGEgYmFja2VuZC1maWVsZCBcbiAgICAqIGxpa2UgdGhlIGN1cnJlbnQgbXVzaWMtdm9sdW1lIHRvIGFsd2F5cyBkaXNwbGF5IGNvcnJlY3QgbXVzaWMtdm9sdW1lLiBcbiAgICAqIElmIHRoZSB2b2x1bWUgY2hhbmdlcywgdGhlIHRleHQtcHJvcGVydHkgd2lsbCBiZSB1cGRhdGVkXG4gICAgKiBhdXRvbWF0aWNhbGx5LlxuICAgICpcbiAgICAqIFRvIGRlZmluZSBhIGJpbmRpbmcsIGEgc3BlY2lhbCBwcm9wZXJ0eS1wYXRoIHN5bnRheCBpcyB1c2VkLiBGb3IgZXhhbXBsZTo8YnI+XG4gICAgKiA8YnI+XG4gICAgKiAkbXlUZXh0RmllbGQudGV4dDxicj5cbiAgICAqIDxicj5cbiAgICAqIGlzIGEgcHJvcGVydHktcGF0aCB0byBhY2Nlc3MgdGhlIHRleHQtcHJvcGVydHkgb2YgYSB0ZXh0LWZpZWxkIG9iamVjdFxuICAgICogd2l0aCB0aGUgaWRlbnRpZmllciBcIm15VGV4dEZpZWxkXCIuIEZvciBtb3JlIGluZm9ybWF0aW9uLCB0YWtlIGEgbG9va1xuICAgICogaW50byB0aGUgXCJJbiBHYW1lIFVJIFN5c3RlbVwiIHNlY3Rpb24gb2YgdGhlIGhlbHAtZmlsZS5cbiAgICAqIFxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIENvbXBvbmVudF9CaW5kaW5nSGFuZGxlclxuICAgICogQGV4dGVuZHMgdWkuQ29tcG9uZW50X0hhbmRsZXJcbiAgICAqIEBtZW1iZXJvZiB1aVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6ICgpIC0+XG4gICAgICAgIEBicmVha0NoYWluQXQgPSBudWxsXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIEluaXRpYWxpemVzIHRoZSBiaW5kaW5nLWhhbmRsZXIuXG4gICAgKiBcbiAgICAqIEBtZXRob2Qgc2V0dXBcbiAgICAjIyNcbiAgICBzZXR1cDogLT5cbiAgICAgXG4gICAgIyMjKlxuICAgICogVXBkYXRlcyB0aGUgYmluZGluZy1oYW5kbGVyLlxuICAgICogXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjIyAgIFxuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgZm9yIGZvcm11bGEgaW4gQG9iamVjdC5mb3JtdWxhc1xuICAgICAgICAgICAgQGV4ZWN1dGVGb3JtdWxhKGZvcm11bGEpXG4gICAgICAgIFxuICAgICAgICBAb2JqZWN0LmluaXRpYWxpemVkID0geWVzXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICBcbiAgICBleGVjdXRlRm9ybXVsYTogKGZvcm11bGEpIC0+IFxuICAgICAgICBpZiBAY2hlY2tPYmplY3QoZm9ybXVsYSlcbiAgICAgICAgICAgIHdpbmRvdy5vID0gQG9iamVjdFxuICAgICAgICAgICAgd2luZG93LmQgPSBAb2JqZWN0LmRhdGFbMF1cbiAgICAgICAgICAgIGZvcm11bGEuZXhlYygpXG4gICAgICAgICAgICBcbiAgICBAZXhlY3V0ZUZvcm11bGE6IChvYmplY3QsIGZvcm11bGEpIC0+XG4gICAgICAgIHdpbmRvdy5vID0gb2JqZWN0XG4gICAgICAgIHdpbmRvdy5kID0gb2JqZWN0LmRhdGFbMF1cbiAgICAgICAgZm9ybXVsYS5leGVjKClcbiAgICBcbiAgICAjIyMqXG4gICAgKiBFdmFsdWF0ZXMgYSBzcGVjaWZpZWQgcHJvcGVydHktcGF0aCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxuICAgICogXG4gICAgKiBAbWV0aG9kIGZpZWxkVmFsdWVcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIC0gQSBwcm9wZXJ0eS1wYXRoLlxuICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgdmFsdWUgb2YgdGhlIHByb3BlcnR5LXBhdGguXG4gICAgIyMjIFxuICAgIGZpZWxkVmFsdWU6IChwYXRoKSAtPiB1aS5Gb3JtdWxhSGFuZGxlci5maWVsZFZhbHVlKEBvYmplY3QsIHBhdGgpICBcbiAgICBcbiAgICAjIyMqXG4gICAgKiBFdmFsdWF0ZXMgYSBwcm9wZXJ0eS1wYXRoIG9uIGEgc3BlY2lmaWVkIG9iamVjdCBhbmQgcmV0dXJucyB0aGUgcmVzdWx0LlxuICAgICogXG4gICAgKiBAbWV0aG9kIGZpZWxkVmFsdWVcbiAgICAqIEBzdGF0aWNcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgLSBBbiBvYmplY3QgdG8gZXZhbHVhdGUgdGhlIHByb3BlcnR5LXBhdGggb24uXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gcGF0aCAtIEEgcHJvcGVydHktcGF0aC5cbiAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eS1wYXRoLlxuICAgICMjIyBcbiAgICBAZmllbGRWYWx1ZTogKG9iamVjdCwgcGF0aCwgcmVhZE9ubHkpIC0+XG4gICAgICAgIGlmIHR5cGVvZiAocGF0aD8uZXhlYykgPT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICB3aW5kb3cubyA9IG9iamVjdFxuICAgICAgICAgICAgd2luZG93LmQgPSBvYmplY3Q/LmRhdGE/WzBdXG4gICAgICAgICAgICB2YWx1ZSA9IHBhdGguZXhlYygpXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB2YWx1ZSA/IDBcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgcmV0dXJuIHBhdGhcbiAgICAgXG51aS5Db21wb25lbnRfRm9ybXVsYUhhbmRsZXIgPSBDb21wb25lbnRfRm9ybXVsYUhhbmRsZXIiXX0=
//# sourceURL=Component_FormulaHandler_118.js
var Component_ActionHandler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ActionHandler = (function(superClass) {
  extend(Component_ActionHandler, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_ActionHandler.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * An action-handler component allows a UI game object to execute
  * actions. An action can be a method-call of a component or of the scene which
  * always takes two parameters: Sender and Params. For more info about
  * UI actions, see help-file.
  * 
  * @module ui
  * @class Component_ActionHandler
  * @extends ui.Component_Handler
  * @memberof ui
  * @constructor
   */

  function Component_ActionHandler() {

    /**
    * @property initialized
    * @type boolean
    * @protected
     */
    this.initialized = false;

    /**
    * Counter for delayed/timed actions.
    * @property waitCounter
    * @type number
    * @protected
     */
    this.waitCounter = 0;

    /**
    * Indicates if the mouse/touch pointer is inside the UI object's bounds.
    * @property contains
    * @type boolean
    * @protected
     */
    this.containsPointer = false;
  }


  /**
  * Disposes the component.
  *
  * @method dispose
   */

  Component_ActionHandler.prototype.dispose = function() {
    Component_ActionHandler.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("keyUp", this.object);
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    return gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
  };


  /**
  * Adds event-handler for mouse/touch events to update the component only if 
  * a user-action happened.
  *
  * @method setupEventHandlers
   */

  Component_ActionHandler.prototype.setupEventHandlers = function() {
    var ref;
    gs.GlobalEventManager.offByOwner("keyUp", this.object);
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
    if (this.object.focusable) {
      gs.GlobalEventManager.on("keyUp", ((function(_this) {
        return function(e) {
          if (Input.release(Input.KEY_RETURN) && _this.object.ui.focused) {
            _this.object.needsUpdate = true;
            return _this.executeActions();
          }
        };
      })(this)), null, this.object);
    }
    gs.GlobalEventManager.on("mouseUp", ((function(_this) {
      return function(e) {
        var action, actions, contains, exec, i, len;
        contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y);
        if (contains) {
          exec = false;
          actions = actions || _this.object.actions;
          if (actions != null) {
            for (i = 0, len = actions.length; i < len; i++) {
              action = actions[i];
              exec = _this.checkAction(action) && !_this.checkActionWait(action);
              if (exec) {
                break;
              }
            }
          }
          if (exec) {
            e.breakChain = true;
            _this.executeActions();
          }
          return _this.object.needsUpdate = true;
        }
      };
    })(this)), null, this.object);
    if ((ref = this.object.actions) != null ? ref.first(function(a) {
      return a && (a.event === "onMouseEnter" || a.event === "onMouseLeave" || a.event === "onMouseHover");
    }) : void 0) {
      gs.GlobalEventManager.on("mouseMoved", ((function(_this) {
        return function(e) {
          var contains;
          contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y);
          if (_this.containsPointer !== contains) {
            _this.containsPointer = contains;
            return _this.object.needsUpdate = true;
          }
        };
      })(this)), null, this.object);
    }
    return this.object.events.on("action", (function(_this) {
      return function(e) {
        if (e.actions || e.action) {
          return _this.executeAction(e.actions != null ? e.actions[0] : e.action);
        }
      };
    })(this));
  };


  /**
  * Sets up associated actions. Each action is validated and specific default values for the action-target
  * and other options are set if not specified.
  *
  * @method setupActions
   */

  Component_ActionHandler.prototype.setupActions = function() {
    var action, component, i, len, ref, results, target, targets;
    if (this.object.actions != null) {
      ref = this.object.actions;
      results = [];
      for (i = 0, len = ref.length; i < len; i++) {
        action = ref[i];
        if (!action) {
          continue;
        }
        if (!action.event) {
          action.event = "onAction";
        }
        if (action.wait != null) {
          continue;
        }
        if (action.target == null) {
          action.target = this.object.controller;
        }
        if (typeof action.target === "string") {
          if (action.target.contains(".")) {
            action.target = ui.Component_FormulaHandler.fieldValue(this.object, action.target);
          }
          targets = action.target.split(".");
          target = gs.ObjectManager.current.objectById(targets[0]);
          if (target != null) {
            component = target.findComponentById(targets[1]);
            if (component == null) {
              target = target.components.where(function(v) {
                return typeof v[action.name] === "function";
              }).first();
            } else {
              target = component;
            }
          } else {
            target = this.object;
          }
          action.target = target;
        }
        if (action.condition != null) {
          action.conditions = [action.condition];
          results.push(delete action.condition);
        } else {
          results.push(void 0);
        }
      }
      return results;
    }
  };


  /**
  * Initializes the action-handler.
  * 
  * @method setup
   */

  Component_ActionHandler.prototype.setup = function() {
    this.initialized = true;
    this.setupEventHandlers();
    return this.setupActions();
  };


  /**
  * Updates the action-handler.
  * 
  * @method update
   */

  Component_ActionHandler.prototype.update = function() {};

  Component_ActionHandler.prototype.checkAction = function(action) {
    return ((action != null ? action.event : void 0) || (action != null ? action.events : void 0)) && this.checkObject(action);
  };

  Component_ActionHandler.prototype.checkActionWait = function(action) {
    var result;
    result = false;
    if ((action.wait != null) && action.wait > 0) {
      this.waitCounter = action.wait;
      action.wait = 0;
      result = true;
    }
    return result;
  };

  Component_ActionHandler.prototype.updateActionTarget = function(action) {
    var component, target, targets;
    if (action.target == null) {
      action.target = this.object.controller;
    }
    if (action.target.exec || typeof action.target === "string") {
      if (action.target.exec) {
        action.target = ui.Component_FormulaHandler.fieldValue(this.object, action.target);
      }
      targets = action.target.split(".");
      target = gs.ObjectManager.current.objectById(targets[0]);
      if (target != null) {
        component = target.findComponentById(targets[1]);
        if (component == null) {
          target = target.components.where(function(v) {
            return typeof v[action.name] === "function";
          }).first();
        } else {
          target = component;
        }
      } else {
        target = this.object;
      }
      return action.target = target;
    }
  };

  Component_ActionHandler.prototype.canExecuteActions = function() {
    return this.waitCounter <= 0 && this.object.ui.enabled && this.object.visible;
  };


  /**
  * Executes the specified actions. A single action is only executed if
  * all assigned events and conditions are true.
  * 
  * @method executeActions
  * @return If <b>true</b> there was at least one action executed. Otherwise <b>false</b>
   */

  Component_ActionHandler.prototype.executeActions = function(actions) {
    var action, i, len, result;
    if (!this.canExecuteActions()) {
      return;
    }
    result = false;
    actions = actions || this.object.actions;
    if (actions != null) {
      for (i = 0, len = actions.length; i < len; i++) {
        action = actions[i];
        if (!this.checkAction(action)) {
          continue;
        }
        if (this.checkActionWait(action)) {
          break;
        }
        this.updateActionTarget(action);
        this.executeAction(action);
        result = true;
      }
    }
    return result;
  };


  /**
  * Executes the specified action if all assigned events and conditions
  * are true.
  * 
  * @method executeAction
  * @param {Object} action The action to execute.
   */

  Component_ActionHandler.prototype.executeAction = function(action) {
    var name, target;
    target = action.target || this.object.target;
    if (target != null) {
      return typeof target[name = action.name] === "function" ? target[name](this.object, action.params) : void 0;
    }
  };

  return Component_ActionHandler;

})(ui.Component_Handler);

ui.ActionHandler = Component_ActionHandler;

ui.Component_ActionHandler = Component_ActionHandler;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_ActionHandler_124.js
var Component_AnimationHandler,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_AnimationHandler = (function(superClass) {
  extend(Component_AnimationHandler, superClass);


  /**
  * An animation-handler component allows a UI game object to execute
  * a flow of animations. For more information about UI animations, see help-file.
  * 
  * @module ui
  * @class Component_AnimationHandler
  * @extends ui.Component_Handler
  * @memberof ui
  * @constructor
   */

  function Component_AnimationHandler() {
    Component_AnimationHandler.__super__.constructor.apply(this, arguments);

    /**
    * @property initialized
    * @type boolean
    * @protected
     */
    this.initialized = false;

    /**
    * @property waitCounter
    * @type number
    * @protected
     */
    this.waitCounter = 0;

    /**
    * @property pointer
    * @type number
    * @protected
     */
    this.pointer = 0;
  }


  /**
  * Initializes the animation-handler.
  * 
  * @method setup
   */

  Component_AnimationHandler.prototype.setup = function() {
    this.initialized = true;
    return null;
  };


  /**
  * Starts the specified animation.
  * 
  * @method startAnimation
  * @param {Object} animation - The animation to start.
  * @param {gs.Object_Base} target - The target object of the animation.
  * @protected
   */

  Component_AnimationHandler.prototype.startAnimation = function(animation, target, animator) {
    var easing, mask, record, value;
    switch (animation.type) {
      case "sound":
        return AudioManager.playSound(animation.sound);
      case "maskTo":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        mask = {
          value: animation.value,
          graphic: {
            name: animation.mask
          },
          vague: animation.vague,
          sourceType: 0
        };
        return animator.maskTo(mask, animation.duration, easing);
      case "changeImages":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.changeImages(animation.images, animation.duration, easing);
      case "playAnimation":
        record = RecordManager.animations[animation.animationId];
        if (record != null) {
          return animator.playAnimation(record);
        }
        break;
      case "changeTo":
        value = ui.Component_BindingHandler.fieldValue(target, animation.value);
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.change(value, animation.field, animation.duration, easing);
      case "blendTo":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.blendTo(animation.opacity, animation.duration, easing);
      case "colorTo":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.colorTo(Color.fromArray(animation.color), animation.duration, easing);
      case "tintTo":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.tintTo(Tone.fromArray(animation.tone), animation.duration, easing);
      case "moveTo":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.moveTo(animation.position[0], animation.position[1], animation.duration, easing);
      case "rotate":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.rotate(0, animation.speed, animation.duration, easing);
      case "moveBy":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.moveBy(this.object.dstRect.x + animation.position[0], this.object.dstRect.y + animation.position[1], animation.duration, easing);
      case "zoomTo":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.zoomTo(animation.zoom[0] / 100, animation.zoom[1] / 100, animation.duration, easing);
      case "scroll":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.scroll(animation.speed[0], animation.speed[1], 0, easing);
      case "shake":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.shake({
          x: animation.range[0],
          y: animation.range[1]
        }, animation.speed, animation.duration, easing);
      case "appear":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.appear(target.dstRect.x, target.dstRect.y, animation.animation, easing, animation.duration);
      case "disappear":
        easing = animation.easing ? gs.Easings.fromString(animation.easing) : null;
        return animator.disappear(animation.animation, easing, animation.duration, (function(_this) {
          return function(sender) {
            return sender.dispose();
          };
        })(this));
    }
  };


  /**
  * Processes the animation targets and starts the animation on each
  * target object if possible.
  * 
  * @method processTargets
  * @param {Object} animation - The animation to start.
  * @param {gs.Object_Base[]} targets - An array of target objects.
  * @protected
   */

  Component_AnimationHandler.prototype.processTargets = function(animation, targets) {
    var j, len, ref, ref1, target;
    for (j = 0, len = targets.length; j < len; j++) {
      target = targets[j];
      if (animation.type != null) {
        target.visible = true;
        if (animation.components == null) {
          animation.components = [];
        }
        if (!this.object.animator) {
          this.object.animator = new gs.Component_Animator();
          this.object.addComponent(this.object.animator);
        }
        animation.components.push(this.startAnimation(animation, target, this.object.animator));
        target.visible = true;
        animation.executed = !((ref = animation.repeat) != null ? ref : true);
      } else {
        animation.executed = !((ref1 = animation.repeat) != null ? ref1 : true);
      }
    }
    return null;
  };


  /**
  * Clears/Resets the specified animation if necessary.
  * 
  * @method clear
  * @param {Object} descriptor - The animation descriptor
  * @protected
   */

  Component_AnimationHandler.prototype.clear = function(descriptor) {
    var animation, component, j, k, len, len1, ref, ref1, target;
    descriptor.cleared = true;
    descriptor.pointer = 0;
    descriptor.waitCounter = 0;
    ref = descriptor.flow;
    for (j = 0, len = ref.length; j < len; j++) {
      animation = ref[j];
      if (animation.components) {
        ref1 = animation.components;
        for (k = 0, len1 = ref1.length; k < len1; k++) {
          component = ref1[k];
          if (component != null) {
            component.dispose();
          }
          target = this.object;
          target.visible = true;
          animation.executed = false;
          if ((animation.field != null) && (animation.reset != null)) {
            ui.BindingHandler.resolveFieldPath(target, animation.field).set(target, ui.BindingHandler.fieldValue(target, animation.reset || 0));
          }
        }
        animation.components = [];
      }
    }
    this.object.needsFullUpdate = true;
    return null;
  };


  /**
  * Processes the animation flow.
  * 
  * @method processAnimations
  * @param {Object} descriptor - The animation-descriptor containing the animation-flow.
  * @protected
   */

  Component_AnimationHandler.prototype.processAnimations = function(descriptor) {
    var animation, targets;
    while (descriptor.pointer < descriptor.flow.length) {
      animation = descriptor.flow[descriptor.pointer];
      descriptor.pointer++;
      if (!animation.wait && animation.executed) {
        continue;
      }
      targets = animation.target != null ? ui.Component_FormulaHandler.fieldValue(this.object, animation.target) : this.object;
      targets = targets.length != null ? targets : [targets];
      descriptor.cleared = false;
      this.processTargets(animation, targets);
      if (animation.wait) {
        if (animation.type != null) {
          descriptor.waitCounter = animation.duration;
        } else {
          descriptor.waitCounter = ui.Component_FormulaHandler.fieldValue(this.object, animation.wait || 0, true);
        }
        break;
      }
    }
    return null;
  };


  /**
  * Updates the animations.
  * 
  * @method updateAnimations
   */

  Component_AnimationHandler.prototype.updateAnimations = function() {
    var descriptor, i, j, len, ref, ref1;
    ref = this.object.animations;
    for (i = j = 0, len = ref.length; j < len; i = ++j) {
      descriptor = ref[i];
      if (this.checkObject(descriptor)) {
        if (descriptor.waitCounter > 0) {
          descriptor.waitCounter--;
          continue;
        }
        if ((descriptor.pointer == null) || descriptor.pointer >= descriptor.flow.length) {
          descriptor.pointer = 0;
        }
        this.processAnimations(descriptor);
      } else if (!descriptor.cleared && ((ref1 = descriptor.clear) != null ? ref1 : true)) {
        this.clear(descriptor);
      }
    }
    return null;
  };


  /**
  * Updates the animation-handler.
  * 
  * @method update
   */

  Component_AnimationHandler.prototype.update = function() {
    this.object.needsUpdate = true;
    return this.updateAnimations();
  };

  return Component_AnimationHandler;

})(ui.Component_Handler);

ui.Component_AnimationHandler = Component_AnimationHandler;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_AnimationHandler_132.js
var Component_UIBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_UIBehavior = (function(superClass) {
  extend(Component_UIBehavior, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_UIBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * @module ui
  * @class Component_UIBehavior
  * @extends gs.Component
  * @memberof ui
  * @constructor
   */

  function Component_UIBehavior() {
    this.breakChainAt = null;
    this.containsPointer = false;
    this.viewData_ = [true, false, false, true, false];
    this.nextKeyObjectId = "";
    this.nextKeyObject_ = null;
    this.prevKeyObject_ = null;
  }

  Component_UIBehavior.accessors("nextKeyObject", {
    set: function(v) {
      this.nextKeyObject_ = v;
      if (v) {
        return v.ui.prevKeyObject_ = this.object;
      }
    },
    get: function() {
      return this.nextKeyObject_;
    }
  });

  Component_UIBehavior.accessors("prevKeyObject", {
    set: function(v) {
      this.prevKeyObject_ = v;
      if (v) {
        return v.ui.nextKeyObject_ = this.object;
      }
    },
    get: function() {
      return this.prevKeyObject_;
    }
  });

  Component_UIBehavior.accessors("selected", {
    set: function(v) {
      if (v !== this.viewData_[2]) {
        this.viewData_[2] = v;
        return this.updateStyle();
      }
    },
    get: function() {
      return this.viewData_[2];
    }
  });

  Component_UIBehavior.accessors("hover", {
    set: function(v) {
      if (v !== this.viewData_[1]) {
        this.viewData_[1] = v;
        return this.updateStyle();
      }
    },
    get: function() {
      return this.viewData_[1];
    }
  });

  Component_UIBehavior.accessors("enabled", {
    set: function(v) {
      if (v !== this.viewData_[3]) {
        this.viewData_[3] = v;
        return this.updateStyle();
      }
    },
    get: function() {
      return this.viewData_[3];
    }
  });

  Component_UIBehavior.accessors("focused", {
    set: function(v) {
      if (v !== this.viewData_[4]) {
        this.viewData_[4] = v;
        return this.updateStyle();
      }
    },
    get: function() {
      return this.viewData_[4];
    }
  });

  Component_UIBehavior.accessors("viewData", {
    set: function(v) {
      if (v !== this.viewData_) {
        this.viewData_ = v;
        return this.updateStyle();
      }
    },
    get: function() {
      return this.viewData_;
    }
  });


  /**
  * Prepares the UI-Object for display. This method should be called
  * before a new created UI-Object will be displayed to position all
  * sub-elements correctly.
  *
  * @method prepare
   */

  Component_UIBehavior.prototype.prepare = function() {
    var scene;
    scene = SceneManager.scene;
    scene.preparing = true;
    this.object.update();
    this.object.update();
    return scene.preparing = false;
  };


  /**
  * Disposes the binding-handler.
  * 
  * @method dispose
   */

  Component_UIBehavior.prototype.dispose = function() {
    gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
    return gs.GlobalEventManager.offByOwner("mouseUp", this.object);
  };


  /**
  * Disposes the component.
  *
  * @method dispose
   */

  Component_UIBehavior.prototype.dispose = function() {
    Component_UIBehavior.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("objectGotFocus", this.object);
    gs.GlobalEventManager.offByOwner("keyUp", this.object);
    gs.GlobalEventManager.offByOwner("mouseDown", this.object);
    return gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_UIBehavior.prototype.setupEventHandlers = function() {
    if (this.object.focusable) {
      gs.GlobalEventManager.on("objectGotFocus", ((function(_this) {
        return function(e) {
          if (e.sender !== _this.object) {
            return _this.blur();
          }
        };
      })(this)), null, this.object);
      gs.GlobalEventManager.on("keyUp", ((function(_this) {
        return function(e) {
          if (_this.focused) {
            if (_this.nextKeyObject && (Input.release(Input.KEY_DOWN) || Input.release(Input.KEY_RIGHT))) {
              _this.nextKeyObject.ui.focus();
              return e.breakChain = true;
            } else if (_this.prevKeyObject && (Input.release(Input.KEY_UP) || Input.release(Input.KEY_LEFT))) {
              _this.prevKeyObject.ui.focus();
              return e.breakChain = true;
            }
          }
        };
      })(this)), null, this.object);
    }
    if (this.object.styles.first((function(s) {
      return s.selector === 1;
    }))) {
      gs.GlobalEventManager.on("mouseMoved", ((function(_this) {
        return function(e) {
          var contains;
          if (!_this.enabled) {
            return;
          }
          contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y);
          if (_this.containsPointer !== contains || (_this.hover && !contains)) {
            _this.containsPointer = contains;
            _this.object.needsUpdate = true;
            _this.hover = contains;
            _this.updateParentStyle();
            _this.updateChildrenStyle();
          }
          return null;
        };
      })(this)), null, this.object);
    }
    if (this.object.focusable || this.object.styles.first((function(s) {
      return s.selector === 2 || s.selector === 4;
    }))) {
      return gs.GlobalEventManager.on("mouseDown", ((function(_this) {
        return function(e) {
          var contains, group, i, len, object;
          if (!_this.enabled || Input.Mouse.buttons[Input.Mouse.LEFT] !== 1) {
            return;
          }
          contains = Rect.contains(_this.object.dstRect.x, _this.object.dstRect.y, _this.object.dstRect.width, _this.object.dstRect.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y);
          if (contains) {
            _this.object.needsUpdate = true;
            _this.focus();
            if (_this.object.selectable) {
              if (_this.object.group) {
                _this.selected = true;
                group = gs.ObjectManager.current.objectsByGroup(_this.object.group);
                for (i = 0, len = group.length; i < len; i++) {
                  object = group[i];
                  if (object !== _this.object) {
                    object.ui.selected = false;
                  }
                }
              } else {
                _this.selected = !_this.selected;
              }
            } else {
              _this.updateStyle();
            }
            _this.updateParentStyle();
          }
          return null;
        };
      })(this)), null, this.object, 0);
    }
  };


  /**
  * Initializes the binding-handler.
  * 
  * @method setup
   */

  Component_UIBehavior.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Gives the input focus to this UI object. If the UI object is not focusable, nothing will happen.
  * 
  * @method focus
   */

  Component_UIBehavior.prototype.focus = function() {
    if (this.object.focusable && !this.focused) {
      this.focused = true;
      this.updateChildrenStyle();
      return gs.GlobalEventManager.emit("objectGotFocus", this.object);
    }
  };


  /**
  * Removes the input focus from this UI object. If the UI object is not focusable, nothing will happen.
  * 
  * @method blur
   */

  Component_UIBehavior.prototype.blur = function() {
    if (this.object.focusable && this.focused) {
      this.focused = false;
      this.updateChildrenStyle();
      return gs.GlobalEventManager.emit("objectLostFocus", this.object);
    }
  };

  Component_UIBehavior.prototype.updateParentStyle = function() {
    var parent, ref;
    parent = this.object.parent;
    while (parent) {
      if ((ref = parent.ui) != null) {
        ref.updateStyle();
      }
      parent = parent.parent;
    }
    return null;
  };

  Component_UIBehavior.prototype.updateChildrenStyle = function() {
    var control, i, len, ref;
    if (this.object.controls) {
      ref = this.object.controls;
      for (i = 0, len = ref.length; i < len; i++) {
        control = ref[i];
        if (control && control.ui) {
          control.ui.updateStyle();
          control.ui.updateChildrenStyle();
        }
      }
    }
    return null;
  };

  Component_UIBehavior.prototype.updateStyle = function() {
    var base, i, j, len, len1, object, objects, ref, ref1, style;
    if (this.object.styles) {
      ref = this.object.styles;
      for (i = 0, len = ref.length; i < len; i++) {
        style = ref[i];
        if (!this.viewData_[style.selector]) {
          style.revert(this.object);
        }
      }
      ref1 = this.object.styles;
      for (j = 0, len1 = ref1.length; j < len1; j++) {
        style = ref1[j];
        if (style.target === -1) {
          if (this.viewData_[style.selector]) {
            style.apply(this.object);
          }
        } else {
          objects = this.object.parentsByStyle[style.target];
          if (objects) {
            object = objects[0];
            if (object && object.ui.viewData_[style.selector]) {
              style.apply(this.object);
            }
          }
        }
      }
      if (this.object.font) {
        if (typeof (base = this.object.behavior).refresh === "function") {
          base.refresh();
        }
      }
    }
    return null;
  };


  /**
  * Updates the binding-handler.
  * 
  * @method update
   */

  Component_UIBehavior.prototype.update = function() {
    if (this.nextKeyObjectId && !this.nextKeyObject) {
      return this.nextKeyObject = gs.ObjectManager.current.objectById(this.nextKeyObjectId);
    }
  };

  return Component_UIBehavior;

})(gs.Component);

ui.Component_UIBehavior = Component_UIBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_UIBehavior_134.js
var Component_Frame,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Frame = (function(superClass) {
  extend(Component_Frame, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_Frame.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A frame constructs a graphical frame from its skin-image. The frame can
  * rendered by tiling or strechting the four sides of the frame. A frame
  * is useful for creating In-Game UI windows and boxes. For more info about 
  * the skin-image format, see help-file.
  * 
  * @module gs
  * @class Component_Frame
  * @extends gs.Component_Visual
  * @memberof gs
  * @constructor
  * @param {gs.Viewport} viewport An optional native viewport object.
   */

  function Component_Frame(viewport) {
    Component_Frame.__super__.constructor.call(this);

    /**
    * The native frame-object.
    * @property frame
    * @type gs.Frame
     */
    this.frame = new gs.Frame(viewport != null ? viewport : Graphics.viewport);

    /**
    * The name of the skin-image used to construct the frame.
    * @property image
    * @type string
    * @protected
     */
    this.image = null;
  }


  /**
  * Disposes the frame.
  * 
  * @method dispose
   */

  Component_Frame.prototype.dispose = function() {
    Component_Frame.__super__.dispose.apply(this, arguments);
    return this.frame.dispose();
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_Frame.prototype.setupEventHandlers = function() {
    return this.frame.onIndexChange = (function(_this) {
      return function() {
        return _this.object.rIndex = _this.frame.index;
      };
    })(this);
  };


  /**
  * Setup the frame component. This method is automatically called by the
  * system.
  * @method setup
   */

  Component_Frame.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Updates the padding.
  * 
  * @method updatePadding
   */

  Component_Frame.prototype.updatePadding = function() {
    if (this.object.padding != null) {
      this.frame.x += this.object.padding.left;
      this.frame.y += this.object.padding.top;
      this.frame.width -= (this.object.padding.left + this.object.padding.right) / this.object.zoom.x;
      return this.frame.height -= (this.object.padding.top + this.object.padding.bottom) / this.object.zoom.y;
    }
  };


  /**
  * Updates the frame properties from the game object properties.
  *
  * @method updateProperties
   */

  Component_Frame.prototype.updateProperties = function() {
    this.frame.x = this.object.dstRect.x - this.object.dstRect.width * (this.object.zoom.x - 1.0) * this.object.anchor.x;
    this.frame.y = this.object.dstRect.y - this.object.dstRect.height * (this.object.zoom.y - 1.0) * this.object.anchor.y;
    this.frame.width = this.object.dstRect.width;
    this.frame.height = this.object.dstRect.height;
    this.frame.thickness = this.object.frameThickness || 16;
    this.frame.cornerSize = this.object.frameCornerSize || 16;
    this.frame.clipRect = this.object.clipRect;
    this.frame.visible = this.object.visible;
    this.frame.ox = -this.object.origin.x;
    this.frame.oy = -this.object.origin.y;
    this.frame.zoomX = this.object.zoom.x;
    this.frame.zoomY = this.object.zoom.y;
    this.frame.opacity = this.object.opacity;
    return this.frame.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);
  };


  /**
  * Updates the frame's skin-image used to construct the frame.
  *
  * @method updateImage
   */

  Component_Frame.prototype.updateImage = function() {
    var bitmap;
    if ((this.object.image != null) && this.image !== this.object.image) {
      this.image = this.object.image;
      bitmap = ResourceManager.getBitmap((this.object.imageFolder || "Graphics/Pictures") + "/" + this.object.image);
      return this.frame.skin = bitmap;
    }
  };


  /**
  * Updates the frame's padding, properties and skin-image.
  * 
  * @method update
   */

  Component_Frame.prototype.update = function() {
    Component_Frame.__super__.update.apply(this, arguments);
    this.object.rIndex = this.frame.index;
    this.updateProperties();
    this.updatePadding();
    return this.updateImage();
  };

  return Component_Frame;

})(gs.Component_Visual);

gs.Component_Frame = Component_Frame;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_Frame_143.js
var Component_ThreePartImage,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ThreePartImage = (function(superClass) {
  extend(Component_ThreePartImage, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_ThreePartImage.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A three-part image component displays an object on screen using three
  * sub-images: start, middle and end. The start and end will be rendered
  * with fixed size while the middle-part will be stretched in a way like this:<br>
  * <br>
  * |Start-Part Fixed|<-----------Middle-Part Stretched----------->|End-Part Fixed<br>
  * <br>
  * A three-part image is automatically added to the graphics-system
  * and rendered every frame until it gets disposed. It can be horizontal or
  * vertical.
  *
  * @module gs
  * @class Component_ThreePartImage
  * @extends gs.Component_Visual
  * @memberof gs
  * @constructor
   */

  function Component_ThreePartImage(viewport) {
    Component_ThreePartImage.__super__.constructor.call(this);

    /**
    * The native three-part image graphic object.
    * @property threePartImage
    * @type gs.ThreePartImage
     */
    this.threePartImage = new gs.ThreePartImage(viewport != null ? viewport : Graphics.viewport);

    /**
    * The name of the image used to construct the three-part image.
    * @property image
    * @type string
    * @protected
     */
    this.image = null;
  }


  /**
  * Disposes the three-part image.
  * 
  * @method dispose
   */

  Component_ThreePartImage.prototype.dispose = function() {
    Component_ThreePartImage.__super__.dispose.apply(this, arguments);
    return this.threePartImage.dispose();
  };


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_ThreePartImage.prototype.setupEventHandlers = function() {
    return this.threePartImage.onIndexChange = (function(_this) {
      return function() {
        return _this.object.rIndex = _this.threePartImage.index;
      };
    })(this);
  };


  /**
  * Setup the three-part image component. This method is automatically called by the
  * system.
  * @method setup
   */

  Component_ThreePartImage.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Updates the three-part image properties from the game object properties.
  *
  * @method updateProperties
   */

  Component_ThreePartImage.prototype.updateProperties = function() {
    this.threePartImage.x = this.object.dstRect.x - this.object.dstRect.width * (this.object.zoom.x - 1.0) * this.object.anchor.x;
    this.threePartImage.y = this.object.dstRect.y - this.object.dstRect.height * (this.object.zoom.y - 1.0) * this.object.anchor.y;
    this.threePartImage.width = this.object.dstRect.width;
    this.threePartImage.height = this.object.dstRect.height;
    this.threePartImage.firstPartSize = this.object.firstPartSize || 16;
    this.threePartImage.middlePartSize = this.object.middlePartSize || 1;
    this.threePartImage.lastPartSize = this.object.lastPartSize || 16;
    this.threePartImage.visible = this.object.visible;
    this.threePartImage.ox = -this.object.origin.x;
    this.threePartImage.oy = -this.object.origin.y;
    return this.threePartImage.z = (this.object.zIndex || 0) + (!this.object.parent ? 0 : this.object.parent.zIndex || 0);
  };


  /**
  * Updates the padding.
  * 
  * @method updatePadding
   */

  Component_ThreePartImage.prototype.updatePadding = function() {
    if (this.object.padding != null) {
      this.threePartImage.x += this.object.padding.left;
      this.threePartImage.y += this.object.padding.top;
      this.threePartImage.width -= this.object.padding.left + this.object.padding.right;
      return this.threePartImage.height -= this.object.padding.top + this.object.padding.bottom;
    }
  };


  /**
  * Updates the skin-image used to construct the three-part image.
  *
  * @method updateImage
   */

  Component_ThreePartImage.prototype.updateImage = function() {
    var bitmap;
    if ((this.object.image != null) && this.image !== this.object.image) {
      this.image = this.object.image;
      bitmap = ResourceManager.getBitmap((this.object.imageFolder || "Graphics/Pictures") + "/" + this.object.image);
      return this.threePartImage.skin = bitmap;
    }
  };


  /**
  * Updates the three-part image.
  * 
  * @method update
   */

  Component_ThreePartImage.prototype.update = function() {
    Component_ThreePartImage.__super__.update.apply(this, arguments);
    this.object.rIndex = this.threePartImage.index;
    this.updateProperties();
    this.updatePadding();
    return this.updateImage();
  };

  return Component_ThreePartImage;

})(gs.Component_Visual);

gs.Component_ThreePartImage = Component_ThreePartImage;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_ThreePartImage_147.js
var Component_PanelBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_PanelBehavior = (function(superClass) {
  extend(Component_PanelBehavior, superClass);


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_PanelBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * A panel-component gives a game-object the same capabilities like
  * a visual object but has no graphical representation. So a panel has
  * a position and a size.<br>
  * <br>
  * It can be used to make invisible hotspot-areas or modal-blocking areas for
  * example.
  *
  * @module gs
  * @class Component_PanelBehavior
  * @extends gs.Component_Visual
  * @memberof gs
  * @constructor
   */

  function Component_PanelBehavior() {}


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_PanelBehavior.prototype.setupEventHandlers = function() {
    if (this.object.modal) {
      gs.GlobalEventManager.on("mouseUp", ((function(_this) {
        return function(e) {
          if (_this.object.modal) {
            return e.breakChain = true;
          }
        };
      })(this)), null, this.object);
      gs.GlobalEventManager.on("mouseDown", ((function(_this) {
        return function(e) {
          if (_this.object.modal) {
            return e.breakChain = true;
          }
        };
      })(this)), null, this.object);
      return gs.GlobalEventManager.on("mouseMoved", ((function(_this) {
        return function(e) {
          if (_this.object.modal) {
            return e.breakChain = true;
          }
        };
      })(this)), null, this.object);
    }
  };


  /**
  * Initializes the panel component.
  *
  * @method setup
   */

  Component_PanelBehavior.prototype.setup = function() {
    return this.setupEventHandlers();
  };


  /**
  * Disposes the component.
  *
  * @method dispose
   */

  Component_PanelBehavior.prototype.dispose = function() {
    Component_PanelBehavior.__super__.dispose.apply(this, arguments);
    gs.GlobalEventManager.offByOwner("mouseUp", this.object);
    gs.GlobalEventManager.offByOwner("mouseDown", this.object);
    return gs.GlobalEventManager.offByOwner("mouseMoved", this.object);
  };

  return Component_PanelBehavior;

})(gs.Component_Visual);

gs.Component_PanelBehavior = Component_PanelBehavior;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsdUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7O29DQVFBLG1CQUFBLEdBQXFCLFNBQUMsSUFBRCxFQUFPLE9BQVA7V0FDakIsSUFBQyxDQUFBLGtCQUFELENBQUE7RUFEaUI7OztBQUdyQjs7Ozs7Ozs7Ozs7Ozs7O0VBY2EsaUNBQUEsR0FBQTs7O0FBR2I7Ozs7OztvQ0FLQSxrQkFBQSxHQUFvQixTQUFBO0lBQ2hCLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFYO01BQ0ksRUFBRSxDQUFDLGtCQUFrQixDQUFDLEVBQXRCLENBQXlCLFNBQXpCLEVBQW9DLENBQUMsQ0FBQSxTQUFBLEtBQUE7ZUFBQSxTQUFDLENBQUQ7VUFBTyxJQUFHLEtBQUMsQ0FBQSxNQUFNLENBQUMsS0FBWDttQkFBc0IsQ0FBQyxDQUFDLFVBQUYsR0FBZSxLQUFyQzs7UUFBUDtNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBRCxDQUFwQyxFQUF1RixJQUF2RixFQUE2RixJQUFDLENBQUEsTUFBOUY7TUFDQSxFQUFFLENBQUMsa0JBQWtCLENBQUMsRUFBdEIsQ0FBeUIsV0FBekIsRUFBc0MsQ0FBQyxDQUFBLFNBQUEsS0FBQTtlQUFBLFNBQUMsQ0FBRDtVQUFPLElBQUcsS0FBQyxDQUFBLE1BQU0sQ0FBQyxLQUFYO21CQUFzQixDQUFDLENBQUMsVUFBRixHQUFlLEtBQXJDOztRQUFQO01BQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFELENBQXRDLEVBQXlGLElBQXpGLEVBQStGLElBQUMsQ0FBQSxNQUFoRzthQUNBLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxFQUF0QixDQUF5QixZQUF6QixFQUF1QyxDQUFDLENBQUEsU0FBQSxLQUFBO2VBQUEsU0FBQyxDQUFEO1VBQ3BDLElBQUcsS0FBQyxDQUFBLE1BQU0sQ0FBQyxLQUFYO21CQUFzQixDQUFDLENBQUMsVUFBRixHQUFlLEtBQXJDOztRQURvQztNQUFBLENBQUEsQ0FBQSxDQUFBLElBQUEsQ0FBRCxDQUF2QyxFQUVHLElBRkgsRUFFUyxJQUFDLENBQUEsTUFGVixFQUhKOztFQURnQjs7O0FBUXBCOzs7Ozs7b0NBS0EsS0FBQSxHQUFPLFNBQUE7V0FDSCxJQUFDLENBQUEsa0JBQUQsQ0FBQTtFQURHOzs7QUFHUDs7Ozs7O29DQUtBLE9BQUEsR0FBUyxTQUFBO0lBQ0wsc0RBQUEsU0FBQTtJQUVBLEVBQUUsQ0FBQyxrQkFBa0IsQ0FBQyxVQUF0QixDQUFpQyxTQUFqQyxFQUE0QyxJQUFDLENBQUEsTUFBN0M7SUFDQSxFQUFFLENBQUMsa0JBQWtCLENBQUMsVUFBdEIsQ0FBaUMsV0FBakMsRUFBOEMsSUFBQyxDQUFBLE1BQS9DO1dBQ0EsRUFBRSxDQUFDLGtCQUFrQixDQUFDLFVBQXRCLENBQWlDLFlBQWpDLEVBQStDLElBQUMsQ0FBQSxNQUFoRDtFQUxLOzs7O0dBdkR5QixFQUFFLENBQUM7O0FBOER6QyxFQUFFLENBQUMsdUJBQUgsR0FBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9QYW5lbEJlaGF2aW9yXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBDb21wb25lbnRfUGFuZWxCZWhhdmlvciBleHRlbmRzIGdzLkNvbXBvbmVudF9WaXN1YWxcbiAgICAjIyMqXG4gICAgKiBDYWxsZWQgaWYgdGhpcyBvYmplY3QgaW5zdGFuY2UgaXMgcmVzdG9yZWQgZnJvbSBhIGRhdGEtYnVuZGxlLiBJdCBjYW4gYmUgdXNlZFxuICAgICogcmUtYXNzaWduIGV2ZW50LWhhbmRsZXIsIGFub255bW91cyBmdW5jdGlvbnMsIGV0Yy5cbiAgICAqIFxuICAgICogQG1ldGhvZCBvbkRhdGFCdW5kbGVSZXN0b3JlLlxuICAgICogQHBhcmFtIE9iamVjdCBkYXRhIC0gVGhlIGRhdGEtYnVuZGxlXG4gICAgKiBAcGFyYW0gZ3MuT2JqZWN0Q29kZWNDb250ZXh0IGNvbnRleHQgLSBUaGUgY29kZWMtY29udGV4dC5cbiAgICAjIyNcbiAgICBvbkRhdGFCdW5kbGVSZXN0b3JlOiAoZGF0YSwgY29udGV4dCkgLT5cbiAgICAgICAgQHNldHVwRXZlbnRIYW5kbGVycygpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIEEgcGFuZWwtY29tcG9uZW50IGdpdmVzIGEgZ2FtZS1vYmplY3QgdGhlIHNhbWUgY2FwYWJpbGl0aWVzIGxpa2VcbiAgICAqIGEgdmlzdWFsIG9iamVjdCBidXQgaGFzIG5vIGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbi4gU28gYSBwYW5lbCBoYXNcbiAgICAqIGEgcG9zaXRpb24gYW5kIGEgc2l6ZS48YnI+XG4gICAgKiA8YnI+XG4gICAgKiBJdCBjYW4gYmUgdXNlZCB0byBtYWtlIGludmlzaWJsZSBob3RzcG90LWFyZWFzIG9yIG1vZGFsLWJsb2NraW5nIGFyZWFzIGZvclxuICAgICogZXhhbXBsZS5cbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgQ29tcG9uZW50X1BhbmVsQmVoYXZpb3JcbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudF9WaXN1YWxcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIFxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBBZGRzIGV2ZW50LWhhbmRsZXJzIGZvciBtb3VzZS90b3VjaCBldmVudHNcbiAgICAqXG4gICAgKiBAbWV0aG9kIHNldHVwRXZlbnRIYW5kbGVyc1xuICAgICMjIyBcbiAgICBzZXR1cEV2ZW50SGFuZGxlcnM6IC0+XG4gICAgICAgIGlmIEBvYmplY3QubW9kYWxcbiAgICAgICAgICAgIGdzLkdsb2JhbEV2ZW50TWFuYWdlci5vbiBcIm1vdXNlVXBcIiwgKChlKSA9PiBpZiBAb2JqZWN0Lm1vZGFsIHRoZW4gZS5icmVha0NoYWluID0geWVzKSwgbnVsbCwgQG9iamVjdFxuICAgICAgICAgICAgZ3MuR2xvYmFsRXZlbnRNYW5hZ2VyLm9uIFwibW91c2VEb3duXCIsICgoZSkgPT4gaWYgQG9iamVjdC5tb2RhbCB0aGVuIGUuYnJlYWtDaGFpbiA9IHllcyksIG51bGwsIEBvYmplY3RcbiAgICAgICAgICAgIGdzLkdsb2JhbEV2ZW50TWFuYWdlci5vbiBcIm1vdXNlTW92ZWRcIiwgKChlKSA9PiBcbiAgICAgICAgICAgICAgICBpZiBAb2JqZWN0Lm1vZGFsIHRoZW4gZS5icmVha0NoYWluID0geWVzXG4gICAgICAgICAgICApLCBudWxsLCBAb2JqZWN0XG4gICAgICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBJbml0aWFsaXplcyB0aGUgcGFuZWwgY29tcG9uZW50LlxuICAgICpcbiAgICAqIEBtZXRob2Qgc2V0dXBcbiAgICAjIyNcbiAgICBzZXR1cDogLT5cbiAgICAgICAgQHNldHVwRXZlbnRIYW5kbGVycygpXG4gICAgIFxuICAgICMjIypcbiAgICAqIERpc3Bvc2VzIHRoZSBjb21wb25lbnQuXG4gICAgKlxuICAgICogQG1ldGhvZCBkaXNwb3NlXG4gICAgIyMjXG4gICAgZGlzcG9zZTogLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIGdzLkdsb2JhbEV2ZW50TWFuYWdlci5vZmZCeU93bmVyKFwibW91c2VVcFwiLCBAb2JqZWN0KVxuICAgICAgICBncy5HbG9iYWxFdmVudE1hbmFnZXIub2ZmQnlPd25lcihcIm1vdXNlRG93blwiLCBAb2JqZWN0KVxuICAgICAgICBncy5HbG9iYWxFdmVudE1hbmFnZXIub2ZmQnlPd25lcihcIm1vdXNlTW92ZWRcIiwgQG9iamVjdClcbiAgICAgICAgXG5ncy5Db21wb25lbnRfUGFuZWxCZWhhdmlvciA9IENvbXBvbmVudF9QYW5lbEJlaGF2aW9yIl19
//# sourceURL=Component_PanelBehavior_149.js
var Component_NumberInput,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_NumberInput = (function(superClass) {
  extend(Component_NumberInput, superClass);


  /**
  * The number-input component defines the logic for the number-input window
  * of the default In-Game UI. 
  *
  * @module gs
  * @class Component_NumberInput
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_NumberInput(params) {

    /**
    * The max. number of digits of the number.
    * @property digits
    * @type number
     */
    this.digits = ui.Component_FormulaHandler.fieldValue(this, params.digits);

    /**
    * The number-cursor position.
    * @property digits
    * @type number
    * @protected
     */
    this.cursor = 0;

    /**
    * The current number as text.
    * @property number
    * @type string
     */
    this.number = "";
  }


  /**
  * Initializes the number-input component.
  *
  * @method setup
   */

  Component_NumberInput.prototype.setup = function() {
    var text;
    text = "".fill("0", this.digits);
    return null;
  };


  /**
  * An action-method to add a single number/digit.
  *
  * @method action_addNumber
  * @param {gs.Object_Base} sender The sender of the action.
  * @param {Object} params The params-object which need a number-property containing the digit/number to add.
   */

  Component_NumberInput.prototype.action_addNumber = function(sender, params) {
    var number;
    number = ui.Component_FormulaHandler.fieldValue(sender, params.number);
    if (this.number.length === 0 && number === 0) {
      return;
    }
    if (this.number.length < this.digits) {
      this.number += number.toString();
    } else {
      this.number = this.number.replaceAt(this.number.length - 1, number.toString());
    }
    return this.setNumber(this.number);
  };


  /**
  * An action-method to clear the number at the current cursor position.
  *
  * @method action_removeNumber
  * @param {gs.Object_Base} sender The sender of the action.
  * @param {Object} [params=null] The params-object. Can be <b>null</b>.
   */

  Component_NumberInput.prototype.action_removeNumber = function(sender, params) {
    if (this.number.length > 0) {
      this.number = this.number.substring(0, this.number.length - 1);
    }
    this.setNumber(this.number);
    return this.setNumber(this.number);
  };


  /**
  * Puts the specified number into the UI label-objects to make it visible
  * on screen.
  *
  * @method setNumber
  * @param {string} number The number to set.
   */

  Component_NumberInput.prototype.setNumber = function(number) {
    var c, i, j, len, text;
    text = number.lfill("0", this.digits);
    for (i = j = 0, len = text.length; j < len; i = ++j) {
      c = text[i];
      this.object.controls[i].controls[1].text = c;
      this.object.controls[i].controls[1].update();
    }
    return null;
  };

  return Component_NumberInput;

})(gs.Component);

gs.Component_NumberInput = Component_NumberInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEscUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7RUFVYSwrQkFBQyxNQUFEOztBQUNUOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQVUsRUFBRSxDQUFDLHdCQUF3QixDQUFDLFVBQTVCLENBQXVDLElBQXZDLEVBQTZDLE1BQU0sQ0FBQyxNQUFwRDs7QUFFVjs7Ozs7O0lBTUEsSUFBQyxDQUFBLE1BQUQsR0FBVTs7QUFFVjs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFVO0VBckJEOzs7QUF1QmI7Ozs7OztrQ0FLQSxLQUFBLEdBQU8sU0FBQTtBQUNILFFBQUE7SUFBQSxJQUFBLEdBQU8sRUFBRSxDQUFDLElBQUgsQ0FBUSxHQUFSLEVBQWEsSUFBQyxDQUFBLE1BQWQ7QUFFUCxXQUFPO0VBSEo7OztBQUtQOzs7Ozs7OztrQ0FPQSxnQkFBQSxHQUFrQixTQUFDLE1BQUQsRUFBUyxNQUFUO0FBQ2QsUUFBQTtJQUFBLE1BQUEsR0FBUyxFQUFFLENBQUMsd0JBQXdCLENBQUMsVUFBNUIsQ0FBdUMsTUFBdkMsRUFBK0MsTUFBTSxDQUFDLE1BQXREO0lBQ1QsSUFBRyxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsS0FBa0IsQ0FBbEIsSUFBd0IsTUFBQSxLQUFVLENBQXJDO0FBQTRDLGFBQTVDOztJQUVBLElBQUcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCLElBQUMsQ0FBQSxNQUFyQjtNQUNJLElBQUMsQ0FBQSxNQUFELElBQVcsTUFBTSxDQUFDLFFBQVAsQ0FBQSxFQURmO0tBQUEsTUFBQTtNQUdJLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFSLENBQWtCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFlLENBQWpDLEVBQW9DLE1BQU0sQ0FBQyxRQUFQLENBQUEsQ0FBcEMsRUFIZDs7V0FJQSxJQUFDLENBQUEsU0FBRCxDQUFXLElBQUMsQ0FBQSxNQUFaO0VBUmM7OztBQVVsQjs7Ozs7Ozs7a0NBT0EsbUJBQUEsR0FBcUIsU0FBQyxNQUFELEVBQVMsTUFBVDtJQUNqQixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixDQUFwQjtNQUNJLElBQUMsQ0FBQSxNQUFELEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFSLENBQWtCLENBQWxCLEVBQXFCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFlLENBQXBDLEVBRGQ7O0lBR0EsSUFBQyxDQUFBLFNBQUQsQ0FBVyxJQUFDLENBQUEsTUFBWjtXQUNBLElBQUMsQ0FBQSxTQUFELENBQVcsSUFBQyxDQUFBLE1BQVo7RUFMaUI7OztBQU9yQjs7Ozs7Ozs7a0NBT0EsU0FBQSxHQUFXLFNBQUMsTUFBRDtBQUNQLFFBQUE7SUFBQSxJQUFBLEdBQU8sTUFBTSxDQUFDLEtBQVAsQ0FBYSxHQUFiLEVBQWtCLElBQUMsQ0FBQSxNQUFuQjtBQUNQLFNBQUEsOENBQUE7O01BQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLElBQWhDLEdBQXVDO01BRXZDLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxNQUFoQyxDQUFBO0FBSEo7QUFLQSxXQUFPO0VBUEE7Ozs7R0FsRnFCLEVBQUUsQ0FBQzs7QUEyRnZDLEVBQUUsQ0FBQyxxQkFBSCxHQUEyQiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tcG9uZW50X051bWJlcklucHV0XG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBDb21wb25lbnRfTnVtYmVySW5wdXQgZXh0ZW5kcyBncy5Db21wb25lbnRcbiAgICAjIyMqXG4gICAgKiBUaGUgbnVtYmVyLWlucHV0IGNvbXBvbmVudCBkZWZpbmVzIHRoZSBsb2dpYyBmb3IgdGhlIG51bWJlci1pbnB1dCB3aW5kb3dcbiAgICAqIG9mIHRoZSBkZWZhdWx0IEluLUdhbWUgVUkuIFxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfTnVtYmVySW5wdXRcbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKHBhcmFtcykgLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBtYXguIG51bWJlciBvZiBkaWdpdHMgb2YgdGhlIG51bWJlci5cbiAgICAgICAgKiBAcHJvcGVydHkgZGlnaXRzXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAZGlnaXRzID0gdWkuQ29tcG9uZW50X0Zvcm11bGFIYW5kbGVyLmZpZWxkVmFsdWUodGhpcywgcGFyYW1zLmRpZ2l0cylcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgbnVtYmVyLWN1cnNvciBwb3NpdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgZGlnaXRzXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQHByb3RlY3RlZFxuICAgICAgICAjIyNcbiAgICAgICAgQGN1cnNvciA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY3VycmVudCBudW1iZXIgYXMgdGV4dC5cbiAgICAgICAgKiBAcHJvcGVydHkgbnVtYmVyXG4gICAgICAgICogQHR5cGUgc3RyaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAbnVtYmVyID0gXCJcIlxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBJbml0aWFsaXplcyB0aGUgbnVtYmVyLWlucHV0IGNvbXBvbmVudC5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHNldHVwXG4gICAgIyMjXG4gICAgc2V0dXA6IC0+XG4gICAgICAgIHRleHQgPSBcIlwiLmZpbGwoXCIwXCIsIEBkaWdpdHMpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBBbiBhY3Rpb24tbWV0aG9kIHRvIGFkZCBhIHNpbmdsZSBudW1iZXIvZGlnaXQuXG4gICAgKlxuICAgICogQG1ldGhvZCBhY3Rpb25fYWRkTnVtYmVyXG4gICAgKiBAcGFyYW0ge2dzLk9iamVjdF9CYXNlfSBzZW5kZXIgVGhlIHNlbmRlciBvZiB0aGUgYWN0aW9uLlxuICAgICogQHBhcmFtIHtPYmplY3R9IHBhcmFtcyBUaGUgcGFyYW1zLW9iamVjdCB3aGljaCBuZWVkIGEgbnVtYmVyLXByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIGRpZ2l0L251bWJlciB0byBhZGQuXG4gICAgIyMjXG4gICAgYWN0aW9uX2FkZE51bWJlcjogKHNlbmRlciwgcGFyYW1zKSAtPlxuICAgICAgICBudW1iZXIgPSB1aS5Db21wb25lbnRfRm9ybXVsYUhhbmRsZXIuZmllbGRWYWx1ZShzZW5kZXIsIHBhcmFtcy5udW1iZXIpXG4gICAgICAgIGlmIEBudW1iZXIubGVuZ3RoID09IDAgYW5kIG51bWJlciA9PSAwIHRoZW4gcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBpZiBAbnVtYmVyLmxlbmd0aCA8IEBkaWdpdHNcbiAgICAgICAgICAgIEBudW1iZXIgKz0gbnVtYmVyLnRvU3RyaW5nKClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQG51bWJlciA9IEBudW1iZXIucmVwbGFjZUF0KEBudW1iZXIubGVuZ3RoLTEsIG51bWJlci50b1N0cmluZygpKVxuICAgICAgICBAc2V0TnVtYmVyKEBudW1iZXIpXG4gICAgICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBBbiBhY3Rpb24tbWV0aG9kIHRvIGNsZWFyIHRoZSBudW1iZXIgYXQgdGhlIGN1cnJlbnQgY3Vyc29yIHBvc2l0aW9uLlxuICAgICpcbiAgICAqIEBtZXRob2QgYWN0aW9uX3JlbW92ZU51bWJlclxuICAgICogQHBhcmFtIHtncy5PYmplY3RfQmFzZX0gc2VuZGVyIFRoZSBzZW5kZXIgb2YgdGhlIGFjdGlvbi5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBbcGFyYW1zPW51bGxdIFRoZSBwYXJhbXMtb2JqZWN0LiBDYW4gYmUgPGI+bnVsbDwvYj4uXG4gICAgIyMjICAgICAgIFxuICAgIGFjdGlvbl9yZW1vdmVOdW1iZXI6IChzZW5kZXIsIHBhcmFtcykgLT5cbiAgICAgICAgaWYgQG51bWJlci5sZW5ndGggPiAwXG4gICAgICAgICAgICBAbnVtYmVyID0gQG51bWJlci5zdWJzdHJpbmcoMCwgQG51bWJlci5sZW5ndGgtMSlcbiAgICAgICAgICAgIFxuICAgICAgICBAc2V0TnVtYmVyKEBudW1iZXIpICAgXG4gICAgICAgIEBzZXROdW1iZXIoQG51bWJlcilcbiAgICBcbiAgICAjIyMqXG4gICAgKiBQdXRzIHRoZSBzcGVjaWZpZWQgbnVtYmVyIGludG8gdGhlIFVJIGxhYmVsLW9iamVjdHMgdG8gbWFrZSBpdCB2aXNpYmxlXG4gICAgKiBvbiBzY3JlZW4uXG4gICAgKlxuICAgICogQG1ldGhvZCBzZXROdW1iZXJcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBudW1iZXIgVGhlIG51bWJlciB0byBzZXQuXG4gICAgIyMjICAgICBcbiAgICBzZXROdW1iZXI6IChudW1iZXIpIC0+XG4gICAgICAgIHRleHQgPSBudW1iZXIubGZpbGwoXCIwXCIsIEBkaWdpdHMpXG4gICAgICAgIGZvciBjLCBpIGluIHRleHRcbiAgICAgICAgICAgIEBvYmplY3QuY29udHJvbHNbaV0uY29udHJvbHNbMV0udGV4dCA9IGNcbiAgICAgICAgICAgICMgRklYTUU6IERpcmVjdCB1cGRhdGUgY2FsbCBzaG91bGRuJ3QgYmUgbmVjZXNzYXJ5LiBTZWUgVGV4dElucHV0LlxuICAgICAgICAgICAgQG9iamVjdC5jb250cm9sc1tpXS5jb250cm9sc1sxXS51cGRhdGUoKVxuICAgICAgICAgICAgXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIFxuZ3MuQ29tcG9uZW50X051bWJlcklucHV0ID0gQ29tcG9uZW50X051bWJlcklucHV0Il19
//# sourceURL=Component_NumberInput_155.js
var Component_TextInput,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_TextInput = (function(superClass) {
  extend(Component_TextInput, superClass);


  /**
  * The text-input component defines the logic for the text-input window
  * of the default In-Game UI. 
  *
  * @module gs
  * @class Component_TextInput
  * @extends gs.Component
  * @memberof gs
  * @constructor
  * @params {Object} params - The params-object needs at least a letters-property to define 
  * the number of letters for the text. The letters-property can also be a property-path.
   */

  function Component_TextInput(params) {

    /**
    * The max. number of letters.
    * @property letters
    * @type number
     */
    this.letters = ui.Component_FormulaHandler.fieldValue(this, params.letters);

    /**
    * The cursor position. Points to the current letter.
    * @property cursor
    * @type number
    * @protected
     */
    this.cursor = 0;

    /**
    * The current text.
    * @property text
    * @type string
     */
    this.text = "";
  }


  /**
  * Puts the specified text into the UI label-objects to make it visible
  * on screen.
  *
  * @method setText
  * @param {string} text The text to set.
   */

  Component_TextInput.prototype.setText = function(text) {
    var c, i, j, len;
    for (i = j = 0, len = text.length; j < len; i = ++j) {
      c = text[i];
      this.object.controls[i].controls[1].text = c;
    }
    return null;
  };


  /**
  * An action-method to add a single letter to the text.
  *
  * @method action_addLetter
  * @param {gs.Object_Base} sender The sender of the action.
  * @param {Object} params The params-object which needs a letter-property containing the letter to add.
   */

  Component_TextInput.prototype.action_addLetter = function(sender, params) {
    var letter;
    letter = params.letter;
    if (this.text.length < this.letters) {
      this.text += letter;
    } else {
      this.text = this.text.replaceAt(this.text.length - 1, letter.toString());
    }
    return this.setText(this.text.rfill(" ", this.letters));
  };


  /**
  * An action-method to clear the letter at the current cursor position.
  *
  * @method action_removeLetter
  * @param {gs.Object_Base} sender The sender of the action.
  * @param {Object} [params=null] The params-object. Can be <b>null</b>.
   */

  Component_TextInput.prototype.action_removeLetter = function() {
    if (this.text.length > 0) {
      this.text = this.text.substring(0, this.text.length - 1);
    }
    return this.setText(this.text.rfill(" ", this.letters));
  };

  return Component_TextInput;

})(gs.Component);

gs.Component_TextInput = Component_TextInput;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsbUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7OztFQVlhLDZCQUFDLE1BQUQ7O0FBQ1Q7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBVyxFQUFFLENBQUMsd0JBQXdCLENBQUMsVUFBNUIsQ0FBdUMsSUFBdkMsRUFBNkMsTUFBTSxDQUFDLE9BQXBEOztBQUVYOzs7Ozs7SUFNQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7OztJQUtBLElBQUMsQ0FBQSxJQUFELEdBQVE7RUFyQkM7OztBQXVCYjs7Ozs7Ozs7Z0NBT0EsT0FBQSxHQUFTLFNBQUMsSUFBRDtBQUNMLFFBQUE7QUFBQSxTQUFBLDhDQUFBOztNQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxJQUFoQyxHQUF1QztBQUQzQztBQUdBLFdBQU87RUFKRjs7O0FBTVQ7Ozs7Ozs7O2dDQU9BLGdCQUFBLEdBQWtCLFNBQUMsTUFBRCxFQUFTLE1BQVQ7QUFDZCxRQUFBO0lBQUEsTUFBQSxHQUFTLE1BQU0sQ0FBQztJQUNoQixJQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixHQUFlLElBQUMsQ0FBQSxPQUFuQjtNQUNJLElBQUMsQ0FBQSxJQUFELElBQVMsT0FEYjtLQUFBLE1BQUE7TUFHSSxJQUFDLENBQUEsSUFBRCxHQUFRLElBQUMsQ0FBQSxJQUFJLENBQUMsU0FBTixDQUFnQixJQUFDLENBQUEsSUFBSSxDQUFDLE1BQU4sR0FBYSxDQUE3QixFQUFnQyxNQUFNLENBQUMsUUFBUCxDQUFBLENBQWhDLEVBSFo7O1dBS0EsSUFBQyxDQUFBLE9BQUQsQ0FBUyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQU4sQ0FBWSxHQUFaLEVBQWlCLElBQUMsQ0FBQSxPQUFsQixDQUFUO0VBUGM7OztBQVNsQjs7Ozs7Ozs7Z0NBT0EsbUJBQUEsR0FBcUIsU0FBQTtJQUNqQixJQUFHLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixHQUFlLENBQWxCO01BQ0ksSUFBQyxDQUFBLElBQUQsR0FBUSxJQUFDLENBQUEsSUFBSSxDQUFDLFNBQU4sQ0FBZ0IsQ0FBaEIsRUFBbUIsSUFBQyxDQUFBLElBQUksQ0FBQyxNQUFOLEdBQWEsQ0FBaEMsRUFEWjs7V0FHQSxJQUFDLENBQUEsT0FBRCxDQUFTLElBQUMsQ0FBQSxJQUFJLENBQUMsS0FBTixDQUFZLEdBQVosRUFBaUIsSUFBQyxDQUFBLE9BQWxCLENBQVQ7RUFKaUI7Ozs7R0F4RVMsRUFBRSxDQUFDOztBQThFckMsRUFBRSxDQUFDLG1CQUFILEdBQXlCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfVGV4dElucHV0XG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBDb21wb25lbnRfVGV4dElucHV0IGV4dGVuZHMgZ3MuQ29tcG9uZW50XG4gICAgIyMjKlxuICAgICogVGhlIHRleHQtaW5wdXQgY29tcG9uZW50IGRlZmluZXMgdGhlIGxvZ2ljIGZvciB0aGUgdGV4dC1pbnB1dCB3aW5kb3dcbiAgICAqIG9mIHRoZSBkZWZhdWx0IEluLUdhbWUgVUkuIFxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfVGV4dElucHV0XG4gICAgKiBAZXh0ZW5kcyBncy5Db21wb25lbnRcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgKiBAcGFyYW1zIHtPYmplY3R9IHBhcmFtcyAtIFRoZSBwYXJhbXMtb2JqZWN0IG5lZWRzIGF0IGxlYXN0IGEgbGV0dGVycy1wcm9wZXJ0eSB0byBkZWZpbmUgXG4gICAgKiB0aGUgbnVtYmVyIG9mIGxldHRlcnMgZm9yIHRoZSB0ZXh0LiBUaGUgbGV0dGVycy1wcm9wZXJ0eSBjYW4gYWxzbyBiZSBhIHByb3BlcnR5LXBhdGguXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChwYXJhbXMpIC0+XG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgbWF4LiBudW1iZXIgb2YgbGV0dGVycy5cbiAgICAgICAgKiBAcHJvcGVydHkgbGV0dGVyc1xuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQGxldHRlcnMgPSB1aS5Db21wb25lbnRfRm9ybXVsYUhhbmRsZXIuZmllbGRWYWx1ZSh0aGlzLCBwYXJhbXMubGV0dGVycylcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY3Vyc29yIHBvc2l0aW9uLiBQb2ludHMgdG8gdGhlIGN1cnJlbnQgbGV0dGVyLlxuICAgICAgICAqIEBwcm9wZXJ0eSBjdXJzb3JcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICMjI1xuICAgICAgICBAY3Vyc29yID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBjdXJyZW50IHRleHQuXG4gICAgICAgICogQHByb3BlcnR5IHRleHRcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgICAgIyMjXG4gICAgICAgIEB0ZXh0ID0gXCJcIlxuXG4gICAgIyMjKlxuICAgICogUHV0cyB0aGUgc3BlY2lmaWVkIHRleHQgaW50byB0aGUgVUkgbGFiZWwtb2JqZWN0cyB0byBtYWtlIGl0IHZpc2libGVcbiAgICAqIG9uIHNjcmVlbi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHNldFRleHRcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSB0ZXh0IFRoZSB0ZXh0IHRvIHNldC5cbiAgICAjIyMgIFxuICAgIHNldFRleHQ6ICh0ZXh0KSAtPlxuICAgICAgICBmb3IgYywgaSBpbiB0ZXh0XG4gICAgICAgICAgICBAb2JqZWN0LmNvbnRyb2xzW2ldLmNvbnRyb2xzWzFdLnRleHQgPSBjXG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgXG4gICAgIyMjKlxuICAgICogQW4gYWN0aW9uLW1ldGhvZCB0byBhZGQgYSBzaW5nbGUgbGV0dGVyIHRvIHRoZSB0ZXh0LlxuICAgICpcbiAgICAqIEBtZXRob2QgYWN0aW9uX2FkZExldHRlclxuICAgICogQHBhcmFtIHtncy5PYmplY3RfQmFzZX0gc2VuZGVyIFRoZSBzZW5kZXIgb2YgdGhlIGFjdGlvbi5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBwYXJhbXMgVGhlIHBhcmFtcy1vYmplY3Qgd2hpY2ggbmVlZHMgYSBsZXR0ZXItcHJvcGVydHkgY29udGFpbmluZyB0aGUgbGV0dGVyIHRvIGFkZC5cbiAgICAjIyMgICBcbiAgICBhY3Rpb25fYWRkTGV0dGVyOiAoc2VuZGVyLCBwYXJhbXMpIC0+XG4gICAgICAgIGxldHRlciA9IHBhcmFtcy5sZXR0ZXJcbiAgICAgICAgaWYgQHRleHQubGVuZ3RoIDwgQGxldHRlcnNcbiAgICAgICAgICAgIEB0ZXh0ICs9IGxldHRlclxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAdGV4dCA9IEB0ZXh0LnJlcGxhY2VBdChAdGV4dC5sZW5ndGgtMSwgbGV0dGVyLnRvU3RyaW5nKCkpXG4gICAgICAgICAgICBcbiAgICAgICAgQHNldFRleHQoQHRleHQucmZpbGwoXCIgXCIsIEBsZXR0ZXJzKSlcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogQW4gYWN0aW9uLW1ldGhvZCB0byBjbGVhciB0aGUgbGV0dGVyIGF0IHRoZSBjdXJyZW50IGN1cnNvciBwb3NpdGlvbi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIGFjdGlvbl9yZW1vdmVMZXR0ZXJcbiAgICAqIEBwYXJhbSB7Z3MuT2JqZWN0X0Jhc2V9IHNlbmRlciBUaGUgc2VuZGVyIG9mIHRoZSBhY3Rpb24uXG4gICAgKiBAcGFyYW0ge09iamVjdH0gW3BhcmFtcz1udWxsXSBUaGUgcGFyYW1zLW9iamVjdC4gQ2FuIGJlIDxiPm51bGw8L2I+LlxuICAgICMjIyAgXG4gICAgYWN0aW9uX3JlbW92ZUxldHRlcjogLT5cbiAgICAgICAgaWYgQHRleHQubGVuZ3RoID4gMFxuICAgICAgICAgICAgQHRleHQgPSBAdGV4dC5zdWJzdHJpbmcoMCwgQHRleHQubGVuZ3RoLTEpXG4gICAgICAgICAgICBcbiAgICAgICAgQHNldFRleHQoQHRleHQucmZpbGwoXCIgXCIsIEBsZXR0ZXJzKSlcbiAgICAgICAgXG5ncy5Db21wb25lbnRfVGV4dElucHV0ID0gQ29tcG9uZW50X1RleHRJbnB1dCJdfQ==
//# sourceURL=Component_TextInput_158.js
var Component_DataGridBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_DataGridBehavior = (function(superClass) {
  var DataSource, DataWrapper;

  extend(Component_DataGridBehavior, superClass);

  DataWrapper = (function() {
    function DataWrapper(data) {
      this.data = data;
      this.viewData = [true, false, false, true, false];
    }

    return DataWrapper;

  })();

  DataSource = (function() {
    function DataSource(source) {
      var i, k, ref;
      this.source = source || [];
      this.length = this.source.length;
      this.wrappedSource = new Array(this.source.length);
      for (i = k = 0, ref = this.wrappedSource.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        this.wrappedSource[i] = null;
      }
    }

    DataSource.prototype.set = function(source) {
      var i, k, ref, results;
      this.source = source || [];
      this.length = this.source.length;
      this.wrappedSource = new Array(this.source.length);
      results = [];
      for (i = k = 0, ref = this.wrappedSource.length; 0 <= ref ? k <= ref : k >= ref; i = 0 <= ref ? ++k : --k) {
        results.push(this.wrappedSource[i] = null);
      }
      return results;
    };

    DataSource.prototype.itemAt = function(index) {
      var item;
      item = this.wrappedSource[index];
      if (!item) {
        item = new DataWrapper(this.source[index]);
        this.wrappedSource[index] = item;
      }
      return item;
    };

    return DataSource;

  })();

  Component_DataGridBehavior.accessors("dataSource", {
    set: function(v) {
      if (v !== this.dataSource_.source) {
        this.dataSource_.set(v);
        return this.resize();
      }
    },
    get: function() {
      return this.dataSource_;
    }
  });


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Component_DataGridBehavior.prototype.onDataBundleRestore = function(data, context) {
    return this.setupEventHandlers();
  };


  /**
  * The data-grid behavior component defines the logic for a data-grid. A data-grid
  * allows to display items from a associated data-source using a specified
  * item-template. Unlike a stack-layout, a data-grid is optimized to display even high amounts of items but they all
  * need to use the same item-template with same size.
  *
  * @module ui
  * @class Component_DataGridBehavior
  * @extends gs.Component_Visual
  * @memberof ui
  * @constructor
  * @params {Object} params - The params-object containing the data-grid settings.
   */

  function Component_DataGridBehavior(params) {
    Component_DataGridBehavior.__super__.constructor.call(this);
    this.params = params || {};

    /**
    * The item-template descriptor used for each item of the data-grid.
    * @property template
    * @type Object
     */
    this.template = this.params.template;

    /**
    * The data-source used for the data-grid. Can be an array or a formula.
    * @property dataSource
    * @type Object[]|string
     */
    this.dataSource_ = null;

    /**
    * Stores the item-objects needed for rendering. They are created from the item-template.
    * @property items
    * @protected
    * @type gs.Object_Base[]
     */
    this.items = this.params.items || [];

    /**
    * Numbers of columns.
    * @property columns
    * @type number
     */
    this.columns = this.params.columns || 1;

    /**
    * Indicates if the data-grid is initialized and ready for rendering.
    * @property initialized
    * @protected
    * @type boolean
     */
    this.initialized = false;

    /**
    * Defines a horizontal and vertical spacing between items.
    * @property spacing
    * @default [0, 10]        
    * @type number[]
     */
    this.spacing = this.params.spacing || [0, 0];
  }


  /**
  * Adds event-handlers for mouse/touch events
  *
  * @method setupEventHandlers
   */

  Component_DataGridBehavior.prototype.setupEventHandlers = function() {
    return gs.GlobalEventManager.on("mouseWheel", (function(_this) {
      return function() {
        var r;
        r = _this.object.dstRect;
        if (Rect.contains(r.x, r.y, r.width, r.height, Input.Mouse.x - _this.object.origin.x, Input.Mouse.y - _this.object.origin.y)) {
          return _this.updateScroll();
        }
      };
    })(this));
  };


  /**
  * Sets up the data-grid.
  *
  * @method setup
   */

  Component_DataGridBehavior.prototype.setup = function() {
    var item;
    if (this.object.dstRect.width === 1) {
      return;
    }
    this.initialized = true;
    if (!this.template.size) {
      item = ui.UIManager.createControlFromDescriptor(this.template.descriptor, this.object);
      item.index = 0;
      item.update();
      this.template.size = [item.dstRect.width, item.dstRect.height];
      item.dispose();
    }
    if (this.params.dataSource.exec) {
      this.dataSource_ = new DataSource(ui.Component_FormulaHandler.fieldValue(this.object, this.params.dataSource) || []);
    } else {
      this.dataSource_ = new DataSource(this.params.dataSource || []);
    }
    this.resize();
    this.setupEventHandlers();
    return Component_DataGridBehavior.__super__.setup.call(this);
  };


  /**
  * Updates scrolling.
  *
  * @method updateScroll
   */

  Component_DataGridBehavior.prototype.updateScroll = function() {
    this.object.scrollableHeight = Math.max(0, this.object.contentHeight - this.object.dstRect.height);
    if (Input.Mouse.wheel <= -1) {
      this.object.scrollOffsetY = Math.max(this.object.scrollOffsetY - Input.Mouse.wheelSpeed * 0.1, 0);
    }
    if (Input.Mouse.wheel >= 1) {
      this.object.scrollOffsetY = Math.min(this.object.scrollOffsetY - Input.Mouse.wheelSpeed * 0.1, this.object.scrollableHeight);
    }
    return this.object.scrollOffsetY = Math.max(Math.min(this.object.scrollOffsetY, this.object.scrollableHeight), 0);
  };


  /**
  * Resizes the data-grid and creates the necessary display objects from the data-grid template.
  *
  * @method resize
   */

  Component_DataGridBehavior.prototype.resize = function() {
    var height, index, item, itemsX, itemsY, k, l, len, m, ref, ref1, ref2, totalItemsY, width, x, y;
    width = this.object.dstRect.width;
    height = this.object.dstRect.height;
    itemsX = this.columns || 1;
    itemsY = Math.ceil((height - this.spacing[1]) / (this.template.size[1] + this.spacing[1])) + this.columns + 1;
    totalItemsY = Math.ceil(this.dataSource.length / this.columns);
    ref = this.items;
    for (k = 0, len = ref.length; k < len; k++) {
      item = ref[k];
      if (item != null) {
        item.dispose();
      }
    }
    this.items = [];
    for (y = l = 0, ref1 = itemsY; 0 <= ref1 ? l < ref1 : l > ref1; y = 0 <= ref1 ? ++l : --l) {
      for (x = m = 0, ref2 = itemsX; 0 <= ref2 ? m < ref2 : m > ref2; x = 0 <= ref2 ? ++m : --m) {
        index = y * itemsX + x;
        if (index < this.dataSource.length) {
          item = ui.UIManager.createControlFromDescriptor(this.template.descriptor, this.object);
          item.data[0] = this.dataSource.itemAt(index).data;
          item.dstRect.x = this.spacing[0] + x * (this.template.size[0] + this.spacing[0]);
          item.dstRect.y = this.spacing[1] + y * (this.template.size[1] + this.spacing[1]);
          item.dstRect.width = this.template.size[0];
          item.dstRect.height = this.template.size[1];
          item.index = index;
          item.ui.viewData = this.dataSource.itemAt(index).viewData;
          this.items[item.index] = item;
          this.object.addObject(item);
        }
      }
    }
    this.object.scrollableHeight = this.spacing[1] + totalItemsY * (this.template.size[1] + this.spacing[1]) - height;
    this.object.scrollOffsetY = 0;
    return this.object.contentHeight = this.spacing[1] + totalItemsY * (this.template.size[1] + this.spacing[1]);
  };


  /**
  * Updates the data-grid.
  *
  * @method update
   */

  Component_DataGridBehavior.prototype.update = function() {
    var column, i, item, itemIndex, itemsY, j, k, offset, ref, ref1, results, row, scrollOffset;
    Component_DataGridBehavior.__super__.update.call(this);
    if (!this.initialized) {
      this.setup();
    }
    scrollOffset = this.object.scrollOffsetY;
    offset = Math.floor(scrollOffset / (this.template.size[1] + this.spacing[1])) * this.columns;
    i = offset;
    itemIndex = 0;
    itemsY = Math.ceil((this.object.dstRect.height - this.spacing[1]) / (this.template.size[1] + this.spacing[1])) * this.columns + this.columns + 1;
    while (i < Math.min(offset + itemsY, this.dataSource.length)) {
      row = Math.floor(i / this.columns);
      column = i % this.columns;
      item = this.items[itemIndex];
      if (item) {
        item.data[0] = this.dataSource.itemAt(i).data;
        if (this.object.clipRect) {
          item.clipRect = this.object.clipRect;
        }
        item.index = i;
        item.ui.viewData = this.dataSource.itemAt(i).viewData;
        item.dstRect.x = this.spacing[0] + column * (this.template.size[0] + this.spacing[0]);
        item.dstRect.y = this.spacing[1] + (row - (offset / this.columns)) * (this.template.size[1] + this.spacing[1]) + (-scrollOffset % (this.template.size[1] + this.spacing[1]));
        item.visible = true;
        item.update();
        item.update();
        itemIndex++;
      }
      i++;
    }
    results = [];
    for (j = k = ref = itemIndex, ref1 = this.items.length; ref <= ref1 ? k < ref1 : k > ref1; j = ref <= ref1 ? ++k : --k) {
      if (this.items[j]) {
        this.items[j].visible = false;
        results.push(this.items[j].update());
      } else {
        results.push(void 0);
      }
    }
    return results;
  };

  return Component_DataGridBehavior;

})(gs.Component_Visual);

ui.Component_DataGridBehavior = Component_DataGridBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_DataGridBehavior_159.js
(function() {


}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIl19
//# sourceURL=Scene_168.js
var Component_SceneBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_SceneBehavior = (function(superClass) {
  extend(Component_SceneBehavior, superClass);


  /**
  * The base class of all scene-behavior components. A scene-behavior component
  * define the logic of a single game scene. 
  *
  * @module gs
  * @class Component_SceneBehavior
  * @extends gs.Component_Container
  * @memberof gs
   */

  function Component_SceneBehavior() {
    Component_SceneBehavior.__super__.constructor.call(this);
    this.loadingScreenVisible = false;
  }


  /**
  * Initializes the scene. 
  *
  * @method initialize
  * @abstract
   */

  Component_SceneBehavior.prototype.initialize = function() {};


  /**
  * Disposes the scene.
  *
  * @method dispose
   */

  Component_SceneBehavior.prototype.dispose = function() {
    var ref;
    ResourceManager.dispose();
    return (ref = this.object.events) != null ? ref.emit("dispose", this.object) : void 0;
  };


  /**
  * Prepares all visual game object for the scene.
  *
  * @method prepareVisual
  * @abstract
   */

  Component_SceneBehavior.prototype.prepareVisual = function() {};


  /**
  * Prepares all data for the scene and loads the necessary graphic and audio resources.
  *
  * @method prepareData
  * @abstract
   */

  Component_SceneBehavior.prototype.prepareData = function() {};


  /**
  * Prepares for a screen-transition.
  *
  * @method prepareTransition
  * @param {Object} transitionData - Object containing additional data for the transition 
  * like graphic, duration and vague.
   */

  Component_SceneBehavior.prototype.prepareTransition = function(transitionData) {
    var ref;
    if ((transitionData != null ? (ref = transitionData.graphic) != null ? ref.name.length : void 0 : void 0) > 0) {
      return ResourceManager.getBitmap("Graphics/Masks/" + transitionData.graphic.name);
    }
  };


  /**
  * Executes a screen-transition.
  *
  * @method transition
  * @param {Object} transitionData - Object containing additional data for the transition 
  * like graphic, duration and vague.
   */

  Component_SceneBehavior.prototype.transition = function(transitionData) {
    var ref;
    if ($PARAMS.preview) {
      return Graphics.transition(0);
    } else {
      transitionData = transitionData || SceneManager.transitionData;
      if ((transitionData != null ? (ref = transitionData.graphic) != null ? ref.name.length : void 0 : void 0) > 0) {
        return Graphics.transition(transitionData.duration, ResourceManager.getBitmap("Graphics/Masks/" + transitionData.graphic.name), transitionData.vague || 30);
      } else {
        return Graphics.transition(transitionData.duration);
      }
    }
  };


  /**
  * Update the scene's content.
  *
  * @method updateContent
  * @abstract
   */

  Component_SceneBehavior.prototype.updateContent = function() {};


  /**
  * Called once per frame while a scene is loading. Can be used to display
  * loading-message/animation.
  *
  * @method loading
   */

  Component_SceneBehavior.prototype.loading = function() {
    if (this.loadingBackgroundSprite == null) {
      this.loadingBackgroundSprite = new Sprite();
      if (Graphics.frozen) {
        return this.transition({
          duration: 0
        });
      }
    }
  };


  /**
  * Update the scene.
  *
  * @method update
   */

  Component_SceneBehavior.prototype.update = function() {
    Component_SceneBehavior.__super__.update.call(this);
    if (DataManager.documentsLoaded) {
      if (this.object.loadingData && !this.object.initialized) {
        this.prepareData();
      }
      this.object.loadingData = !DataManager.documentsLoaded;
    }
    if (!this.object.loadingData && ResourceManager.resourcesLoaded) {
      if (this.object.loadingResources && !this.object.initialized) {
        if (!this.loadingScreenVisible) {
          this.prepareVisual();
        }
        this.object.initialized = true;
      }
      this.object.loadingResources = false;
    }
    if (ResourceManager.resourcesLoaded && DataManager.documentsLoaded) {
      this.object.loading = false;
      if (Graphics.frozen && this.object.preparing) {
        return Graphics.update();
      } else {
        if (this.loadingScreenVisible) {
          if (this.object.loaded) {
            this.loadingScreenVisible = false;
            this.object.loaded = true;
            return this.updateContent();
          } else {
            if (!Graphics.frozen) {
              Graphics.freeze();
            }
            this.object.loaded = true;
            this.prepareVisual();
            this.loadingScreenVisible = false;
            Graphics.update();
            return Input.update();
          }
        } else {
          this.object.preparing = false;
          Graphics.update();
          this.updateContent();
          return Input.update();
        }
      }
    } else {
      this.loadingScreenVisible = true;
      Graphics.update();
      Input.update();
      return this.loading();
    }
  };

  return Component_SceneBehavior;

})(gs.Component_Container);

gs.Component_SceneBehavior = Component_SceneBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_SceneBehavior_15.js
var Component_LayoutSceneBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_LayoutSceneBehavior = (function(superClass) {
  extend(Component_LayoutSceneBehavior, superClass);


  /**
  * The base class of all scene-behavior components. A scene-behavior component
  * define the logic of a single game scene. 
  *
  * @module gs
  * @class Component_LayoutSceneBehavior
  * @extends gs.Component_SceneBehavior
  * @memberof gs
   */

  function Component_LayoutSceneBehavior() {
    Component_LayoutSceneBehavior.__super__.constructor.call(this);
    this.objectManager = SceneManager;
    this.layout = null;
  }


  /**
  * Initializes the scene. 
  *
  * @method initialize
   */

  Component_LayoutSceneBehavior.prototype.initialize = function() {
    Component_LayoutSceneBehavior.__super__.initialize.apply(this, arguments);
    if (this.object.layoutData == null) {
      this.object.layoutData = {
        "type": "ui.FreeLayout",
        "controls": [],
        "frame": [0, 0, 1, 1]
      };
    }
    return LanguageManager.loadBundles();
  };


  /**
  * Disposes the scene. 
  *
  * @method dispose
   */

  Component_LayoutSceneBehavior.prototype.dispose = function() {
    return Component_LayoutSceneBehavior.__super__.dispose.apply(this, arguments);
  };


  /**
  * Prepares all data for the scene and loads the necessary graphic and audio resources.
  *
  * @method prepareData
  * @abstract
   */

  Component_LayoutSceneBehavior.prototype.prepareData = function() {
    gs.ObjectManager.current = this.objectManager;
    if (!GameManager.initialized) {
      GameManager.initialize();
    }
    this.dataFields = ui.UiFactory.dataSources[this.object.layoutData.dataSource || "default"]();
    window.$dataFields = this.dataFields;
    this.music = ui.Component_FormulaHandler.fieldValue(this.object, this.object.layoutData.music);
    AudioManager.loadMusic(this.music);
    this.prepareTransition(RecordManager.system.menuTransition);
    ResourceLoader.loadUiTypesGraphics(ui.UiFactory.customTypes);
    ResourceLoader.loadUiLayoutGraphics(this.object.layoutData);
    if (this.dataFields != null) {
      ResourceLoader.loadUiDataFieldsGraphics(this.dataFields);
    }
    return ResourceManager.getBitmap("Graphics/Characters/JaneDate_Normal");
  };


  /**
  * Prepares all visual game object for the scene.
  *
  * @method prepareVisual
   */

  Component_LayoutSceneBehavior.prototype.prepareVisual = function() {
    var scale, vocab;
    scale = Graphics.scale;
    vocab = RecordManager.vocabulary;
    if (this.layout == null) {
      this.dataObject = {};
      this.layout = ui.UiFactory.createFromDescriptor(this.object.layoutData, this.object);
      if (this.music != null) {
        AudioManager.changeMusic(this.music, 30);
      }
    }
    this.layout.ui.prepare();
    return this.transition();
  };


  /**
  * Updates the scene's content.
  *
  * @method updateContent
   */

  Component_LayoutSceneBehavior.prototype.updateContent = function() {
    GameManager.update();
    return Graphics.viewport.update();
  };


  /**
  * Shows/Hides the current scene. A hidden scene is no longer shown and executed
  * but all objects and data is still there and be shown again anytime.
  *
  * @method show
  * @param {boolean} visible - Indicates if the scene should be shown or hidden.
   */

  Component_LayoutSceneBehavior.prototype.show = function(visible) {
    this.layout.visible = visible;
    this.layout.update();
    this.objectManager.active = visible;
    if (visible) {
      return gs.ObjectManager.current = SceneManager;
    }
  };


  /**
  * Action method which triggers a full refresh on the object returned by the specified binding-expression.
  * The params must be a direct binding-expression string.
  *
  * @method fullRefreshObject
  * @param {gs.Object_Base} sender - The sender object.
  * @param {string} params -  The binding expression.
   */

  Component_LayoutSceneBehavior.prototype.fullRefreshObject = function(sender, object) {
    object = ui.Component_FormulaHandler.fieldValue(sender, object);
    return object != null ? object.fullRefresh() : void 0;
  };


  /**
  * Action method which triggers a refresh on the object returned by the specified binding-expression.
  * The params must be a direct binding-expression string.
  *
  * @method refreshObject
  * @param {gs.Object_Base} sender - The sender object.
  * @param {string} params -  The binding expression.
   */

  Component_LayoutSceneBehavior.prototype.refreshObject = function(sender, object) {
    object = ui.Component_FormulaHandler.fieldValue(sender, object);
    return object != null ? object.needsUpdate = true : void 0;
  };

  Component_LayoutSceneBehavior.prototype.addStyle = function(sender, style) {
    var styleObject;
    styleObject = ui.UIManager.styles[style];
    if (styleObject != null) {
      styleObject.apply(sender);
    }
    sender.needsUpdate = true;
    if (styleObject != null ? styleObject.font : void 0) {
      return sender.behavior.refresh();
    }
  };

  Component_LayoutSceneBehavior.prototype.removeStyle = function(sender, style) {
    var i, len, ref, ref1, s, styleObject;
    styleObject = ui.UIManager.styles[style];
    if (styleObject != null) {
      styleObject.revert(sender);
    }
    sender.descriptor.styles.remove(style);
    ref = sender.descriptor.styles;
    for (i = 0, len = ref.length; i < len; i++) {
      s = ref[i];
      if ((ref1 = ui.UIManager.styles[s]) != null) {
        ref1.apply(sender);
      }
    }
    sender.needsUpdate = true;
    if (styleObject != null ? styleObject.font : void 0) {
      return sender.behavior.refresh();
    }
  };


  /**
  * Action method which executes the specified bindings.
  *
  * @method executeBindings
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object[]} params -  An array of binding-definitions.
   */

  Component_LayoutSceneBehavior.prototype.executeBindings = function(sender, bindings) {
    var binding, i, len;
    for (i = 0, len = bindings.length; i < len; i++) {
      binding = bindings[i];
      ui.Component_FormulaHandler.executeBinding(sender, binding);
    }
    return null;
  };


  /**
  * Action method which executes the specified formulas.
  *
  * @method executeFormulas
  * @param {gs.Object_Base} sender - The sender object.
  * @param {ui.Formula[]} params -  An array of formula-definitions.
   */

  Component_LayoutSceneBehavior.prototype.executeFormulas = function(sender, formulas) {
    var formula, i, len, results;
    results = [];
    for (i = 0, len = formulas.length; i < len; i++) {
      formula = formulas[i];
      results.push(ui.Component_FormulaHandler.executeFormula(sender, formula));
    }
    return results;
  };


  /**
  * Action method which executes animations on a specified target game object.
  *
  * @method executeAnimations
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params -  Contains target-id and animations: { target, animations }
   */

  Component_LayoutSceneBehavior.prototype.executeAnimations = function(sender, params) {};


  /**
  * Action method which emits the specified event.
  *
  * @method emitEvent
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Contains event name, source and data.
  * <ul>
  * <li>params.name - The name of the event to emit</li>
  * <li>params.source - A binding-expression to define the game object which should emit the event.</li>
  * <li>params.data - An object containing additional event specific data.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.emitEvent = function(sender, params) {
    var object;
    object = ui.Component_FormulaHandler.fieldValue(sender, params.source);
    return object != null ? object.events.emit(params.name, object, ui.Component_FormulaHandler.fieldValue(sender, params.data)) : void 0;
  };


  /**
  * Action method which changes the game's aspect ratio.
  *
  * @method executeBindings
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean} params -  If <b>true</b> the game screen will stretched so that it fills the entire screen
  * of the player without any black borders. Otherwise the game screen stretches but keeps its ratio
  * so black borders are possible if the game resolution's ratio and the target display's ratio are not match. It can also
  * be a binding-expression.
   */

  Component_LayoutSceneBehavior.prototype.adjustAspectRatio = function(sender, adjust) {
    adjust = ui.Component_FormulaHandler.fieldValue(sender, adjust);
    GameManager.settings.adjustAspectRatio = adjust;
    Graphics.keepRatio = !adjust;
    return Graphics.onResize();
  };


  /**
  * Action method which enters fullscreen mode.
  *
  * @method enterFullScreen
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean} params - Can be <b>null</b>
   */

  Component_LayoutSceneBehavior.prototype.enterFullScreen = function(sender, params) {
    gs.Graphics.enterFullscreen();
    return GameManager.settings.fullScreen = true;
  };


  /**
  * Action method which leaves fullscreen mode.
  *
  * @method leaveFullScreen
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean} params - Can be <b>null</b>
   */

  Component_LayoutSceneBehavior.prototype.leaveFullScreen = function() {
    gs.Graphics.leaveFullscreen();
    return GameManager.settings.fullScreen = false;
  };


  /**
  * Action method which toggles between window and fullscreen mode.
  *
  * @method toggleFullScreen
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>
   */

  Component_LayoutSceneBehavior.prototype.toggleFullScreen = function(sender, params) {
    var win;
    if (window.require && !$PARAMS.platform.isSteamOS) {
      win = nw.Window.get();
      win.toggleFullscreen();
      return GameManager.settings.fullScreen = win.isFullscreen;
    }
  };


  /**
  * Action method which plays the specified sound.
  *
  * @method playSound
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - The sound to play.
   */

  Component_LayoutSceneBehavior.prototype.playSound = function(sender, params) {
    AudioManager.loadSound(params);
    return AudioManager.playSound(params);
  };


  /**
  * Action method which plays the specified voice.
  *
  * @method playVoice
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - The voice to play.
   */

  Component_LayoutSceneBehavior.prototype.playVoice = function(sender, params) {
    AudioManager.loadSound(params);
    return AudioManager.playVoice(params);
  };


  /**
  * Action method which turns voice on or off.
  *
  * @method turnOnOffVoice
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - If <b>true</b> voice will be turned on. Otherwise it will be turned off. Can also be a binding-expression.
   */

  Component_LayoutSceneBehavior.prototype.turnOnOffVoice = function(sender, state) {
    if (ui.Component_FormulaHandler.fieldValue(sender, state)) {
      return this.turnOnVoice();
    } else {
      return this.turnOffVoice();
    }
  };


  /**
  * Action method which turns music on or off.
  *
  * @method turnOnOffMusic
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - If <b>true</b> music will be turned on. Otherwise it will be turned off. Can also be a binding-expression.
   */

  Component_LayoutSceneBehavior.prototype.turnOnOffMusic = function(sender, state) {
    if (ui.Component_FormulaHandler.fieldValue(sender, state)) {
      return this.turnOnMusic();
    } else {
      return this.turnOffMusic();
    }
  };


  /**
  * Action method which turns sound on or off.
  *
  * @method turnOnOffSound
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - If <b>true</b> sound will be turned on. Otherwise it will be turned off. Can also be a binding-expression.
   */

  Component_LayoutSceneBehavior.prototype.turnOnOffSound = function(sender, state) {
    if (ui.Component_FormulaHandler.fieldValue(sender, state)) {
      return this.turnOnSound();
    } else {
      return this.turnOffSound();
    }
  };


  /**
  * Action method which turns off voice.
  *
  * @method turnOffVoice
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.turnOffVoice = function() {
    return AudioManager.stopAllVoices();
  };


  /**
  * Action method which turns off music.
  *
  * @method turnOffMusic
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.turnOffMusic = function() {
    return AudioManager.stopMusic();
  };


  /**
  * Action method which turns off sound.
  *
  * @method turnOffSound
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.turnOffSound = function() {
    return AudioManager.stopAllSounds();
  };


  /**
  * Action method which turns on voice.
  *
  * @method turnOnVoice
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.turnOnVoice = function() {};


  /**
  * Action method which turns on sound.
  *
  * @method turnOnSound
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.turnOnSound = function() {};


  /**
  * Action method which turns on music.
  *
  * @method turnOnMusic
  * @param {gs.Object_Base} sender - The sender object.
  * @param {boolean|string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.turnOnMusic = function() {
    return AudioManager.resumeMusic();
  };


  /**
  * Action method which selects the specified language.
  *
  * @method selectLanguage
  * @param {gs.Object_Base} sender - The sender object.
  * @param {number|string} params - Index of the language to set. Can be a binding-expression.
   */

  Component_LayoutSceneBehavior.prototype.selectLanguage = function(sender, params) {
    var language;
    language = LanguageManager.languages[ui.Component_FormulaHandler.fieldValue(sender, params)];
    return LanguageManager.selectLanguage(language);
  };


  /**
  * Action method which resets global data storage.
  *
  * @method resetGlobalData
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.resetGlobalData = function(sender) {
    return GameManager.resetGlobalData();
  };


  /**
  * Action method which saves game settings.
  *
  * @method resetGlobalData
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.saveSettings = function(sender) {
    return GameManager.saveSettings();
  };


  /**
  * Action method which prepares the game for saving by taking a snapshot of the current game state
  * and storing it in GameManager.saveGame.
  *
  * @method prepareSaveGame
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.prepareSaveGame = function(sender, params) {
    return GameManager.prepareSaveGame(params != null ? params.snapshot : void 0);
  };


  /**
  * Action method which saves the current game at the specified save slot.
  *
  * @method saveGame
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Contains the slot-index where the game should be saved.
  * <ul>
  * <li>params.slot - The slot-index where the game should be saved. Can be a binding-expression.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.saveGame = function(sender, params) {
    return GameManager.save(ui.Component_FormulaHandler.fieldValue(sender, params.slot));
  };


  /**
  * Action method which loads the game from the specified save slot.
  *
  * @method loadGame
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Contains the slot-index where the game should be loaded from.
  * <ul>
  * <li>params.slot - The slot-index where the game should be loaded from. Can be a binding-expression.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.loadGame = function(sender, params) {
    GameManager.tempSettings.skip = false;
    return GameManager.load(ui.Component_FormulaHandler.fieldValue(sender, params.slot));
  };


  /**
  * Action method which starts a new game.
  *
  * @method newGame
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Can be <b>null</b>
   */

  Component_LayoutSceneBehavior.prototype.newGame = function(sender, params) {
    var scene;
    AudioManager.stopAllMusic(30);
    GameManager.newGame();
    scene = new vn.Object_Scene();
    return SceneManager.switchTo(scene);
  };


  /**
  * Action method which switches to another scene.
  *
  * @method switchScene
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Contains the class name of the scene to switch to.
  * <ul>
  * <li>params.name - The class-name of the scene to switch to. The class must be defined in vn-namespace.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.switchScene = function(sender, params) {
    var scene;
    if (params.clear) {
      SceneManager.clear();
    }
    scene = new vn[params.name]();
    return SceneManager.switchTo(scene);
  };


  /**
  * Action method which switches to another game scene.
  *
  * @method switchGameScene
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Contains the UID of the scene to switch to.
  * <ul>
  * <li>params.uid - The UID of the scene to switch to.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.switchGameScene = function(sender, params) {
    var newScene, sceneData, sceneDocument, sceneDocuments, uid;
    if (params.clear) {
      SceneManager.clear();
    }
    uid = params.uid;
    if (params.name) {
      sceneDocuments = DataManager.getDocumentsByType("vn.scene");
      sceneDocument = sceneDocuments.first(function(d) {
        return d.items.name === params.name;
      });
      if (sceneDocument) {
        uid = sceneDocument.uid;
      }
    }
    sceneData = {
      uid: uid,
      pictures: [],
      texts: []
    };
    GameManager.sceneData = sceneData;
    newScene = new vn.Object_Scene();
    newScene.sceneData = sceneData;
    return SceneManager.switchTo(newScene);
  };


  /**
  * Action method which switches to another layout.
  *
  * @method switchLayout
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Contains the name of the layout to switch to.
  * <ul>
  * <li>params.name - The name of the layout to switch to.</li>
  * <li>params.savePrevious - Indicates if the current layout should not be erased but paused and hidden instead so
  * that it can be restored using <i>returnToPrevious</i> action.</li>
  * <li>params.dataFields - Defines the data of "$dataFields" binding-expression variable. Can be a binding-expression
  * or a direct object. Optional.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.switchLayout = function(sender, layout) {
    var dataFields, i, len, ref, scene, senderField;
    Graphics.freeze();
    if (layout.clear) {
      SceneManager.clear();
    }
    scene = new gs.Object_Layout(layout.name);
    dataFields = sender.dataFields;
    if (typeof layout.dataFields === "string") {
      dataFields = ui.Component_FormulaHandler.fieldValue(sender, layout.dataFields);
    } else if (layout.dataFields != null) {
      dataFields = layout.dataFields;
    }
    scene.dataFields = dataFields;
    scene.controllers = layout.controllers;
    if (layout.senderData != null) {
      ref = layout.senderData;
      for (i = 0, len = ref.length; i < len; i++) {
        senderField = ref[i];
        scene[senderField] = sender[senderField];
      }
    }
    return SceneManager.switchTo(scene, layout.savePrevious, layout.stack);
  };


  /**
  * Action method which returns to previous layout. (If savePrevious was set to <b>true</b> on switchLayout.).
  *
  * @method previousLayout
  * @param {gs.Object_Base} sender - The sender object.
  * @param {Object} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.previousLayout = function(sender) {
    return SceneManager.returnToPrevious();
  };


  /**
  * Action method which disposes the specified control.
  *
  * @method disposeControl
  * @param {gs.Object_Base} sender - The sender object.
  * @param {string} params - The ID of the control to dispose. Can be a binding-expression.
   */

  Component_LayoutSceneBehavior.prototype.disposeControl = function(sender, id) {
    var control;
    control = this.objectManager.objectById(ui.Component_FormulaHandler.fieldValue(sender, id));
    return control != null ? control.dispose() : void 0;
  };


  /**
  * Action method which creates a new control from the specified descriptor.
  *
  * @method createControl
  * @param {gs.Object_Base} sender - The sender object.
  * @param {string} params - Contains the descriptor and other data needed to construct the control.
  * <ul>
  * <li>params.descriptor - The control' descriptor. Can be a direct descriptor definition or a template name</li>
  * <li>params.parent - A binding-expression which returns the control's parent.</li>
  * <li>params.senderData - An object containing additional data merged into the control object.</li>
  * </ul>
   */

  Component_LayoutSceneBehavior.prototype.createControl = function(sender, data) {
    var control, descriptor, fieldName, i, len, parent, ref;
    if (typeof data.descriptor === "string") {
      descriptor = ui.UIManager.customTypes[data.descriptor];
    } else {
      descriptor = data.descriptor;
    }
    parent = ui.Component_FormulaHandler.fieldValue(sender, data.parent);
    control = ui.UiFactory._createFromDescriptor(descriptor, parent != null ? parent : this.object);
    if (data.senderData != null) {
      ref = data.senderData;
      for (i = 0, len = ref.length; i < len; i++) {
        fieldName = ref[i];
        control[fieldName] = sender[fieldName];
      }
    }
    control.ui.prepare();
    return control;
  };


  /**
  * Action method which quits the game.
  *
  * @method quitGame
  * @param {gs.Object_Base} sender - The sender object.
  * @param {string} params - Can be <b>null</b>.
   */

  Component_LayoutSceneBehavior.prototype.quitGame = function(sender, data) {
    SceneManager.switchTo(null);
    if (window.require) {
      return require("nw.gui").App.quit();
    }
  };

  return Component_LayoutSceneBehavior;

})(gs.Component_SceneBehavior);

gs.Component_LayoutSceneBehavior = Component_LayoutSceneBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_LayoutSceneBehavior_26.js
var Component_GameSceneBehavior,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_GameSceneBehavior = (function(superClass) {
  extend(Component_GameSceneBehavior, superClass);


  /**
  * Defines the behavior of visual novel game scene.
  *
  * @module vn
  * @class Component_GameSceneBehavior
  * @extends gs.Component_LayoutSceneBehavior
  * @memberof vn
   */

  function Component_GameSceneBehavior() {
    Component_GameSceneBehavior.__super__.constructor.call(this);
    this.onAutoCommonEventStart = (function(_this) {
      return function() {
        _this.object.removeComponent(_this.object.interpreter);
        return _this.object.interpreter.stop();
      };
    })(this);
    this.onAutoCommonEventFinish = (function(_this) {
      return function() {
        if (!_this.object.components.contains(_this.object.interpreter)) {
          _this.object.addComponent(_this.object.interpreter);
        }
        return _this.object.interpreter.resume();
      };
    })(this);
  }


  /**
  * Initializes the scene. 
  *
  * @method initialize
   */

  Component_GameSceneBehavior.prototype.initialize = function() {
    var ref, saveGame, sceneUid, sprite;
    Graphics.freeze();
    saveGame = GameManager.loadedSaveGame;
    sceneUid = null;
    if (saveGame) {
      sceneUid = saveGame.sceneUid;
      this.object.sceneData = saveGame.data;
    } else {
      sceneUid = ((ref = $PARAMS.preview) != null ? ref.scene.uid : void 0) || this.object.sceneData.uid || RecordManager.system.startInfo.scene.uid;
    }
    this.object.sceneDocument = DataManager.getDocument(sceneUid);
    if (this.object.sceneDocument && this.object.sceneDocument.items.type === "vn.scene") {
      this.object.chapter = DataManager.getDocument(this.object.sceneDocument.items.chapterUid);
      this.object.currentCharacter = {
        "name": ""
      };
      if (!GameManager.initialized) {
        GameManager.initialize();
      }
      LanguageManager.loadBundles();
    } else {
      sprite = new gs.Sprite();
      sprite.bitmap = new gs.Bitmap(Graphics.width, 50);
      sprite.bitmap.drawText(0, 0, Graphics.width, 50, "No Start Scene selected", 1, 0);
      sprite.srcRect = new gs.Rect(0, 0, Graphics.width, 50);
      sprite.y = (Graphics.height - 50) / 2;
      sprite.z = 10000;
    }
    return this.setupScreen();
  };


  /**
  * Disposes the scene. 
  *
  * @method dispose
   */

  Component_GameSceneBehavior.prototype.dispose = function() {
    var event, j, len, ref;
    GameManager.tempFields.inGame = false;
    this.object.removeObject(this.object.commonEventContainer);
    this.show(false);
    ref = GameManager.commonEvents;
    for (j = 0, len = ref.length; j < len; j++) {
      event = ref[j];
      event.events.offByOwner("start", this.object);
      event.events.offByOwner("finish", this.object);
    }
    if (this.object.video) {
      this.object.video.dispose();
      this.object.video.onEnded();
    }
    this.viewport.dispose();
    return Component_GameSceneBehavior.__super__.dispose.call(this);
  };


  /**
  * Shows/Hides the current scene. A hidden scene is no longer shown and executed
  * but all objects and data is still there and be shown again anytime.
  *
  * @method show
  * @param {boolean} visible - Indicates if the scene should be shown or hidden.
   */

  Component_GameSceneBehavior.prototype.show = function(visible) {
    var area, background, character, j, k, l, len, len1, len2, len3, len4, len5, m, n, o, picture, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, text, video;
    this.object.visible = visible;
    if ((ref = this.object.layout) != null) {
      ref.update();
    }
    if ((ref1 = this.object.layoutNVL) != null) {
      ref1.update();
    }
    ref2 = this.object.pictures;
    for (j = 0, len = ref2.length; j < len; j++) {
      picture = ref2[j];
      if (picture != null) {
        picture.visible = visible;
      }
      if (picture != null) {
        picture.update();
      }
    }
    ref3 = this.object.texts;
    for (k = 0, len1 = ref3.length; k < len1; k++) {
      text = ref3[k];
      if (text != null) {
        text.visible = visible;
      }
      if (text != null) {
        text.update();
      }
    }
    ref4 = this.object.videos;
    for (l = 0, len2 = ref4.length; l < len2; l++) {
      video = ref4[l];
      if (video != null) {
        video.visible = visible;
      }
      if (video != null) {
        video.update();
      }
    }
    ref5 = this.object.messageAreas;
    for (m = 0, len3 = ref5.length; m < len3; m++) {
      area = ref5[m];
      if (area != null) {
        area.message.visible = visible;
      }
      if (area != null) {
        area.message.fullUpdate();
      }
    }
    ref6 = this.object.characters;
    for (n = 0, len4 = ref6.length; n < len4; n++) {
      character = ref6[n];
      if (character != null) {
        character.visible = visible;
        character.update();
      }
    }
    ref7 = this.object.backgrounds;
    for (o = 0, len5 = ref7.length; o < len5; o++) {
      background = ref7[o];
      if (background != null) {
        background.visible = visible;
        background.update();
      }
    }
    if ((ref8 = this.viewport) != null) {
      ref8.visible = visible;
    }
    if ((ref9 = this.object.choiceWindow) != null) {
      ref9.visible = visible;
    }
    if ((ref10 = this.object.inputNumberBox) != null) {
      ref10.visible = visible;
    }
    if ((ref11 = this.object.inputTextBox) != null) {
      ref11.visible = visible;
    }
    if ((ref12 = this.object.imageMap) != null) {
      ref12.visible = visible;
    }
    if ((ref13 = this.object.inputTextBox) != null) {
      ref13.update();
    }
    if ((ref14 = this.object.inputNumberBox) != null) {
      ref14.update();
    }
    if ((ref15 = this.object.choiceWindow) != null) {
      ref15.update();
    }
    return (ref16 = this.object.imageMap) != null ? ref16.update() : void 0;
  };


  /**
  * Sets up common event handling.
  *
  * @method setupCommonEvents
   */

  Component_GameSceneBehavior.prototype.setupCommonEvents = function() {
    var commonEvents, event, j, k, len, len1, ref, ref1, ref2, ref3;
    commonEvents = (ref = this.object.sceneData) != null ? ref.commonEvents : void 0;
    if (commonEvents) {
      for (j = 0, len = commonEvents.length; j < len; j++) {
        event = commonEvents[j];
        this.object.commonEventContainer.addObject(event);
        event.behavior.setupEventHandlers();
        if ((ref1 = event.interpreter) != null ? ref1.isRunning : void 0) {
          event.events.emit("start", event);
        }
      }
    } else {
      ref2 = GameManager.commonEvents;
      for (k = 0, len1 = ref2.length; k < len1; k++) {
        event = ref2[k];
        if (event.record.startCondition === 1 || event.record.parallel) {
          this.object.commonEventContainer.addObject(event);
          if (!event.record.parallel) {
            event.events.on("start", gs.CallBack("onAutoCommonEventStart", this), null, this.object);
            event.events.on("finish", gs.CallBack("onAutoCommonEventFinish", this), null, this.object);
          }
          if ((ref3 = event.interpreter) != null ? ref3.isRunning : void 0) {
            event.events.emit("start", event);
          }
        }
      }
    }
    return null;
  };


  /**
  * Sets up main interpreter.
  *
  * @method setupInterpreter
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupInterpreter = function() {
    this.object.commands = this.object.sceneDocument.items.commands;
    if (this.object.sceneData.interpreter) {
      this.object.removeComponent(this.object.interpreter);
      this.object.interpreter = this.object.sceneData.interpreter;
      this.object.addComponent(this.object.interpreter);
      this.object.interpreter.context.set(this.object.sceneDocument.uid, this.object);
      return this.object.interpreter.object = this.object;
    } else {
      this.object.interpreter.setup();
      return this.object.interpreter.start();
    }
  };


  /**
  * Sets up characters and restores them from loaded save game if necessary.
  *
  * @method setupCharacters
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupCharacters = function() {
    var c, i, j, len, ref;
    if (this.object.sceneData.characters != null) {
      ref = this.object.sceneData.characters;
      for (i = j = 0, len = ref.length; j < len; i = ++j) {
        c = ref[i];
        this.object.characterContainer.setObject(c, i);
      }
    }
    return this.object.currentCharacter = this.object.sceneData.currentCharacter || {
      name: ""
    };
  };


  /**
  * Sets up backgrounds and restores them from loaded save game if necessary.
  *
  * @method setupBackgrounds
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupBackgrounds = function() {
    var b, backgrounds, i, j, len, ref, ref1, results;
    backgrounds = (ref = (ref1 = this.object.sceneData) != null ? ref1.backgrounds : void 0) != null ? ref : [];
    results = [];
    for (i = j = 0, len = backgrounds.length; j < len; i = ++j) {
      b = backgrounds[i];
      results.push(this.object.backgroundContainer.setObject(b, i));
    }
    return results;
  };


  /**
  * Sets up pictures and restores them from loaded save game if necessary.
  *
  * @method setupPictures
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupPictures = function() {
    var i, j, len, picture, pictures, ref, ref1, results;
    pictures = (ref = (ref1 = this.object.sceneData) != null ? ref1.pictures : void 0) != null ? ref : [];
    results = [];
    for (i = j = 0, len = pictures.length; j < len; i = ++j) {
      picture = pictures[i];
      results.push(this.object.pictureContainer.setObject(picture, i));
    }
    return results;
  };


  /**
  * Sets up texts and restores them from loaded save game if necessary.
  *
  * @method setupTexts
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupTexts = function() {
    var i, j, len, ref, ref1, results, text, texts;
    texts = (ref = (ref1 = this.object.sceneData) != null ? ref1.texts : void 0) != null ? ref : [];
    results = [];
    for (i = j = 0, len = texts.length; j < len; i = ++j) {
      text = texts[i];
      results.push(this.object.textContainer.setObject(text, i));
    }
    return results;
  };


  /**
  * Sets up videos and restores them from loaded save game if necessary.
  *
  * @method setupVideos
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupVideos = function() {
    var i, j, len, ref, ref1, results, video, videos;
    videos = (ref = (ref1 = this.object.sceneData) != null ? ref1.videos : void 0) != null ? ref : [];
    results = [];
    for (i = j = 0, len = videos.length; j < len; i = ++j) {
      video = videos[i];
      if (video) {
        video.visible = true;
        video.update();
      }
      results.push(this.object.videoContainer.setObject(video, i));
    }
    return results;
  };


  /**
  * Sets up hotspots and restores them from loaded save game if necessary.
  *
  * @method setupHotspots
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupHotspots = function() {
    var hotspot, hotspots, i, j, len, ref, ref1, results;
    hotspots = (ref = (ref1 = this.object.sceneData) != null ? ref1.hotspots : void 0) != null ? ref : [];
    results = [];
    for (i = j = 0, len = hotspots.length; j < len; i = ++j) {
      hotspot = hotspots[i];
      results.push(this.object.hotspotContainer.setObject(hotspot, i));
    }
    return results;
  };


  /**
  * Sets up an image-map and restores them from loaded save game if necessary.
  *
  * @method setupImageMap
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupImageMap = function() {
    var imageMap, ref;
    imageMap = (ref = this.object.sceneData) != null ? ref.imageMap : void 0;
    if (imageMap) {
      this.object.imageMap = imageMap;
      return this.object.addObject(imageMap);
    }
  };


  /**
  * Sets up layout.
  *
  * @method setupLayout
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupLayout = function() {
    var advVisible, nvlVisible, ref;
    this.dataFields = ui.UIManager.dataSources[ui.UiFactory.layouts.gameLayout.dataSource || "default"]();
    this.dataFields.scene = this.object;
    window.$dataFields = this.dataFields;
    advVisible = this.object.messageMode === vn.MessageMode.ADV;
    nvlVisible = this.object.messageMode === vn.MessageMode.NVL;
    this.object.layoutNVL = ui.UiFactory.createFromDescriptor(ui.UiFactory.layouts.gameLayoutNVL, this.object);
    this.object.layout = ui.UiFactory.createFromDescriptor(ui.UiFactory.layouts.gameLayout, this.object);
    this.object.layoutNVL.visible = nvlVisible;
    this.object.layout.visible = advVisible;
    $gameMessageNVL_message.visible = nvlVisible;
    $gameMessage_message.visible = advVisible;
    this.object.layout.ui.prepare();
    this.object.layoutNVL.ui.prepare();
    if (((ref = $tempFields.choices) != null ? ref.length : void 0) > 0) {
      this.showChoices(GameManager.tempFields.choices, gs.CallBack("onChoiceAccept", this.object.interpreter, {
        pointer: this.object.interpreter.pointer,
        params: this.params
      }));
    }
    if (this.object.interpreter.waitingFor.inputNumber) {
      this.showInputNumber(GameManager.tempFields.digits, gs.CallBack("onInputNumberFinish", this.object.interpreter, this.object.interpreter));
    }
    if (this.object.interpreter.waitingFor.inputText) {
      return this.showInputText(GameManager.tempFields.letters, gs.CallBack("onInputTextFinish", this.object.interpreter, this.object.interpreter));
    }
  };


  /**
  * Sets up screen.
  *
  * @method setupScreen
  * @protected
   */

  Component_GameSceneBehavior.prototype.setupScreen = function() {
    if (this.object.sceneData.screen) {
      return this.object.viewport.restore(this.object.sceneData.screen);
    }
  };


  /**
  * Restores main interpreter from loaded save game.
  *
  * @method restoreInterpreter
  * @protected
   */

  Component_GameSceneBehavior.prototype.restoreInterpreter = function() {
    if (this.object.sceneData.interpreter) {
      return this.object.interpreter.restore();
    }
  };


  /**
  * Restores message box from loaded save game.
  *
  * @method restoreMessageBox
  * @protected
   */

  Component_GameSceneBehavior.prototype.restoreMessageBox = function() {
    var c, j, len, message, messageObject, ref, ref1, results;
    if ((ref = this.object.sceneData) != null ? ref.messageBox : void 0) {
      if (this.object.messageMode === vn.MessageMode.NVL) {
        messageObject = gs.ObjectManager.current.objectById("messageBoxNVL");
      } else {
        messageObject = gs.ObjectManager.current.objectById("messageBox");
      }
      messageObject.visible = this.object.sceneData.messageBox.visible;
      message = gs.ObjectManager.current.objectById("gameMessage_message");
      message.textRenderer.dispose();
      Object.mixin(message, this.object.sceneData.messageBox.message, ui.Object_Message.objectCodecBlackList.concat(["origin"]));
      ref1 = message.components;
      results = [];
      for (j = 0, len = ref1.length; j < len; j++) {
        c = ref1[j];
        results.push(c.object = message);
      }
      return results;
    }
  };


  /**
  * Restores message from loaded save game.
  *
  * @method restoreMessages
  * @protected
   */

  Component_GameSceneBehavior.prototype.restoreMessages = function() {
    var messageObject, ref, ref1, ref2;
    if (this.object.messageMode === vn.MessageMode.NVL) {
      messageObject = gs.ObjectManager.current.objectById("gameMessageNVL_message");
    } else {
      messageObject = gs.ObjectManager.current.objectById("gameMessage_message");
    }
    if ((ref = this.object.sceneData) != null ? ref.message : void 0) {
      messageObject.restore(this.object.sceneData.message);
    }
    if ((ref1 = this.object.sceneData) != null ? ref1.messages : void 0) {
      messageObject.message.restoreMessages(this.object.sceneData.messages);
      messageObject.textRenderer.restore(this.object.sceneData.messageTextRenderer);
    }
    if ((ref2 = this.object.sceneData) != null ? ref2.messageAreas : void 0) {
      return this.object.messageAreas = this.object.sceneData.messageAreas.select(function(f, i) {
        var c, j, len, message, messageLayout, ref3, result;
        result = null;
        if (f) {
          messageLayout = ui.UIManager.createControlFromDescriptor({
            type: "ui.CustomGameMessage",
            id: "customGameMessage_" + i,
            params: {
              id: "customGameMessage_" + i
            }
          }, this.object);
          message = gs.ObjectManager.current.objectById("customGameMessage_" + i + "_message");
          Object.mixin(message, f.message);
          ref3 = message.components;
          for (j = 0, len = ref3.length; j < len; j++) {
            c = ref3[j];
            c.object = message;
          }
          messageLayout.dstRect.x = f.layout.dstRect.x;
          messageLayout.dstRect.y = f.layout.dstRect.y;
          messageLayout.dstRect.width = f.layout.dstRect.width;
          messageLayout.dstRect.height = f.layout.dstRect.height;
          messageLayout.needsUpdate = true;
          messageLayout.update();
          result = {
            message: message,
            layout: messageLayout
          };
        }
        return result;
      });
    }
  };


  /**
  * Restores audio-playback from loaded save game.
  *
  * @method restoreAudioPlayback
  * @protected
   */

  Component_GameSceneBehavior.prototype.restoreAudioPlayback = function() {
    var b, j, len, ref;
    if (this.object.sceneData.audio) {
      ref = this.object.sceneData.audio.audioBuffers;
      for (j = 0, len = ref.length; j < len; j++) {
        b = ref[j];
        AudioManager.audioBuffers.push(b);
      }
      AudioManager.audioBuffersByLayer = this.object.sceneData.audio.audioBuffersByLayer;
      AudioManager.audioLayers = this.object.sceneData.audio.audioLayers;
      return AudioManager.soundReferences = this.object.sceneData.audio.soundReferences;
    }
  };


  /**
  * Prepares all data for the scene and loads the necessary graphic and audio resources.
  *
  * @method prepareData
  * @abstract
   */

  Component_GameSceneBehavior.prototype.prepareData = function() {
    RecordManager.translate();
    GameManager.tempFields.inGame = true;
    GameManager.scene = this.object;
    gs.ObjectManager.current = this.objectManager;
    this.object.sceneData.uid = this.object.sceneDocument.uid;
    if (!ResourceLoader.loadEventCommandsData(this.object.sceneDocument.items.commands)) {
      ResourceLoader.loadEventCommandsGraphics(this.object.sceneDocument.items.commands);
      GameManager.backlog = GameManager.sceneData.backlog || [];
      ResourceLoader.loadSystemSounds();
      ResourceLoader.loadSystemGraphics();
      ResourceLoader.loadUiTypesGraphics(ui.UiFactory.customTypes);
      ResourceLoader.loadUiLayoutGraphics(ui.UiFactory.layouts.gameLayout);
      if (this.dataFields != null) {
        ResourceLoader.loadUiDataFieldsGraphics(this.dataFields);
      }
      $tempFields.choiceTimer = this.object.choiceTimer;
      return GameManager.variableStore.setup({
        id: this.object.sceneDocument.uid
      });
    }
  };


  /**
  * Prepares all visual game object for the scene.
  *
  * @method prepareVisual
   */

  Component_GameSceneBehavior.prototype.prepareVisual = function() {
    var context, ref, saveGame;
    if (this.object.layout) {
      return;
    }
    saveGame = GameManager.loadedSaveGame;
    if (saveGame) {
      context = new gs.ObjectCodecContext([Graphics.viewport, this.object, this], saveGame.encodedObjectStore, null);
      saveGame.data = gs.ObjectCodec.decode(saveGame.data, context);
      gs.ObjectCodec.onRestore(saveGame.data, context);
      GameManager.restore(saveGame);
      this.object.sceneData = saveGame.data;
      Graphics.frameCount = saveGame.data.frameCount;
    }
    if (!this.object.sceneData.viewport) {
      this.viewport = new Viewport(0, 0, Graphics.width, Graphics.height, Graphics.viewport);
      this.object.viewport = new gs.Object_Viewport(this.viewport);
    } else {
      this.object.viewport = this.object.sceneData.viewport;
      this.viewport = this.object.viewport.visual.viewport;
      this.viewport.viewport = Graphics.viewport;
      this.object.addObject(this.object.viewport);
    }
    this.object.messageMode = (ref = this.object.sceneData.messageMode) != null ? ref : vn.MessageMode.ADV;
    this.setupCharacters();
    this.setupBackgrounds();
    this.setupPictures();
    this.setupTexts();
    this.setupVideos();
    this.setupHotspots();
    this.setupImageMap();
    this.setupInterpreter();
    this.setupLayout();
    this.setupCommonEvents();
    this.restoreMessageBox();
    this.restoreInterpreter();
    this.restoreMessages();
    this.restoreAudioPlayback();
    this.show(true);
    this.object.sceneData = {};
    GameManager.sceneData = {};
    Graphics.update();
    return this.transition({
      duration: 0
    });
  };


  /**
  * Adds a new character to the scene.
  *
  * @method addCharacter
  * @param {vn.Object_Character} character - The character to add.
  * @param {boolean} noAnimation - Indicates if the character should be added immediately witout any appear-animation.
  * @param {Object} animationData - Contains the appear-animation data -> { animation, easing, duration }.
   */

  Component_GameSceneBehavior.prototype.addCharacter = function(character, noAnimation, animationData) {
    if (!noAnimation) {
      character.motionBlur.set(animationData.motionBlur);
      if (animationData.duration > 0) {
        if (!noAnimation) {
          character.animator.appear(character.dstRect.x, character.dstRect.y, animationData.animation, animationData.easing, animationData.duration);
        }
      }
    }
    character.viewport = this.viewport;
    character.visible = true;
    return this.object.characterContainer.addObject(character);
  };


  /**
  * Removes a character from the scene.
  *
  * @method removeCharacter
  * @param {vn.Object_Character} character - The character to remove.
  * @param {Object} animationData - Contains the disappear-animation data -> { animation, easing, duration }.
   */

  Component_GameSceneBehavior.prototype.removeCharacter = function(character, animationData) {
    return character != null ? character.animator.disappear(animationData.animation, animationData.easing, animationData.duration, function(sender) {
      return sender.dispose();
    }) : void 0;
  };

  Component_GameSceneBehavior.prototype.showInputText = function(letters, callback) {
    var ref;
    if ((ref = this.object.inputTextBox) != null) {
      ref.dispose();
    }
    this.object.inputTextBox = ui.UiFactory.createControlFromDescriptor(ui.UiFactory.customTypes["ui.InputTextBox"], this.object);
    this.object.inputTextBox.ui.prepare();
    return this.object.inputTextBox.events.on("accept", callback);
  };

  Component_GameSceneBehavior.prototype.showInputNumber = function(digits, callback) {
    var ref;
    if ((ref = this.object.inputNumberBox) != null) {
      ref.dispose();
    }
    this.object.inputNumberBox = ui.UiFactory.createControlFromDescriptor(ui.UiFactory.customTypes["ui.InputNumberBox"], this.object);
    this.object.inputNumberBox.ui.prepare();
    return this.object.inputNumberBox.events.on("accept", callback);
  };

  Component_GameSceneBehavior.prototype.showChoices = function(choices, callback) {
    var ref, useFreeLayout;
    useFreeLayout = choices.where(function(x) {
      return x.dstRect != null;
    }).length > 0;
    GameManager.tempFields.choices = choices;
    if ((ref = this.object.choiceWindow) != null) {
      ref.dispose();
    }
    if (useFreeLayout) {
      this.object.choiceWindow = ui.UiFactory.createControlFromDescriptor(ui.UiFactory.customTypes["ui.FreeChoiceBox"], this.object);
    } else {
      this.object.choiceWindow = ui.UiFactory.createControlFromDescriptor(ui.UiFactory.customTypes["ui.ChoiceBox"], this.object);
    }
    this.object.choiceWindow.events.on("selectionAccept", callback);
    return this.object.choiceWindow.ui.prepare();
  };


  /**
  * Changes the background of the scene.
  *
  * @method changeBackground
  * @param {Object} background - The background graphic object -> { name }
  * @param {boolean} noAnimation - Indicates if the background should be changed immediately witout any change-animation.
  * @param {Object} animation - The appear/disappear animation to use.
  * @param {Object} easing - The easing of the change animation.
  * @param {number} duration - The duration of the change in frames.
  * @param {number} ox - The x-origin of the background.
  * @param {number} oy - The y-origin of the background.
  * @param {number} layer - The background-layer to change.
  * @param {boolean} loopHorizontal - Indicates if the background should be looped horizontally.
  * @param {boolean} loopVertical - Indicates if the background should be looped vertically.
   */

  Component_GameSceneBehavior.prototype.changeBackground = function(background, noAnimation, animation, easing, duration, ox, oy, layer, loopHorizontal, loopVertical) {
    var object, otherObject, ref;
    if (background != null) {
      otherObject = this.object.backgrounds[layer];
      object = new vn.Object_Background();
      object.image = background.name;
      object.origin.x = ox;
      object.origin.y = oy;
      object.viewport = this.viewport;
      object.visual.looping.vertical = false;
      object.visual.looping.horizontal = false;
      object.update();
      this.object.backgroundContainer.setObject(object, layer);
      duration = duration != null ? duration : 30;
      if (otherObject != null) {
        otherObject.zIndex = layer;
      }
      if (duration === 0) {
        if (otherObject != null) {
          otherObject.dispose();
        }
        object.visual.looping.vertical = loopVertical;
        return object.visual.looping.horizontal = loopHorizontal;
      } else {
        if (noAnimation) {
          object.visual.looping.vertical = loopVertical;
          return object.visual.looping.horizontal = loopHorizontal;
        } else {
          object.animator.otherObject = otherObject;
          return object.animator.appear(0, 0, animation, easing, duration, (function(_this) {
            return function(sender) {
              var ref;
              sender.update();
              if ((ref = sender.animator.otherObject) != null) {
                ref.dispose();
              }
              sender.visual.looping.vertical = loopVertical;
              return sender.visual.looping.horizontal = loopHorizontal;
            };
          })(this));
        }
      }
    } else {
      return (ref = this.object.backgrounds[layer]) != null ? ref.animator.hide(duration, easing, (function(_this) {
        return function() {
          _this.object.backgrounds[layer].dispose();
          return _this.object.backgrounds[layer] = null;
        };
      })(this)) : void 0;
    }
  };


  /**
  * Updates the scene's content.
  *
  * @method updateContent
   */

  Component_GameSceneBehavior.prototype.updateContent = function() {
    var background, character, component, j, k, l, len, len1, len2, len3, len4, len5, len6, len7, len8, len9, m, n, o, p, picture, q, r, ref, ref1, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, text, video;
    if (!this.object.settings.allowSkip) {
      this.object.tempSettings.skip = false;
    }
    Graphics.viewport.update();
    this.object.viewport.update();
    if (GameManager.tempSettings.skip) {
      ref = this.object.pictures;
      for (j = 0, len = ref.length; j < len; j++) {
        picture = ref[j];
        if (picture) {
          ref1 = picture.components;
          for (k = 0, len1 = ref1.length; k < len1; k++) {
            component = ref1[k];
            if (typeof component.skip === "function") {
              component.skip();
            }
          }
        }
      }
      ref2 = this.object.texts;
      for (l = 0, len2 = ref2.length; l < len2; l++) {
        text = ref2[l];
        if (text) {
          ref3 = text.components;
          for (m = 0, len3 = ref3.length; m < len3; m++) {
            component = ref3[m];
            if (typeof component.skip === "function") {
              component.skip();
            }
          }
        }
      }
      ref4 = this.object.videos;
      for (n = 0, len4 = ref4.length; n < len4; n++) {
        video = ref4[n];
        if (video) {
          ref5 = video.components;
          for (o = 0, len5 = ref5.length; o < len5; o++) {
            component = ref5[o];
            if (typeof component.skip === "function") {
              component.skip();
            }
          }
        }
      }
      ref6 = this.object.backgrounds;
      for (p = 0, len6 = ref6.length; p < len6; p++) {
        background = ref6[p];
        if (background) {
          ref7 = background.components;
          for (q = 0, len7 = ref7.length; q < len7; q++) {
            component = ref7[q];
            if (typeof component.skip === "function") {
              component.skip();
            }
          }
        }
      }
      ref8 = this.object.characters;
      for (r = 0, len8 = ref8.length; r < len8; r++) {
        character = ref8[r];
        if (character) {
          ref9 = character.components;
          for (s = 0, len9 = ref9.length; s < len9; s++) {
            component = ref9[s];
            if (typeof component.skip === "function") {
              component.skip();
            }
          }
        }
      }
      if (this.object.interpreter.waitCounter > GameManager.tempSettings.skipTime) {
        this.object.interpreter.waitCounter = GameManager.tempSettings.skipTime;
      }
    }
    if (this.object.video != null) {
      this.object.video.update();
      if (this.object.settings.allowVideoSkip && (Input.trigger(Input.C) || Input.Mouse.buttons[Input.Mouse.LEFT] === 2)) {
        this.object.video.stop();
      }
      Input.clear();
    }
    if (GameManager.tempSettings.menuAccess && Input.trigger(Input.X)) {
      SceneManager.switchTo(new gs.Object_Layout("settingsMenuLayout"), true);
    }
    if (Input.trigger(Input.KEY_ESCAPE)) {
      gs.Application.exit();
    }
    if (this.object.settings.allowSkip) {
      if (Input.keys[Input.KEY_CONTROL] === 1) {
        GameManager.tempSettings.skip = true;
      } else if (Input.keys[Input.KEY_CONTROL] === 2) {
        GameManager.tempSettings.skip = false;
      }
    }
    return Component_GameSceneBehavior.__super__.updateContent.call(this);
  };

  return Component_GameSceneBehavior;

})(gs.Component_LayoutSceneBehavior);

vn.Component_GameSceneBehavior = Component_GameSceneBehavior;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_GameSceneBehavior_41.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Animation_169.js
var Component_Animation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_Animation = (function(superClass) {
  extend(Component_Animation, superClass);


  /**
  * The base-class of all animation components. An animation-component
  * executes a certain animation on a game object. The type of the animation depends
  * on the component. <br>
  * <br>
  * In regular, animation components a used together with the gs.Component_Animator
  * component.
  *
  * @module gs
  * @class Component_Animation
  * @extends gs.Component
  * @memberof gs
  * @constructor
   */

  function Component_Animation() {
    Component_Animation.__super__.constructor.apply(this, arguments);
  }


  /**
  * Updates the animation. 
  *
  * @method update
   */

  Component_Animation.prototype.update = function() {
    return this.object.needsFullUpdate = true;
  };


  /**
  * Skips the animation. That is used to skip an animation if the user
  * wants to skip very fast through a visual novel scene.
  *
  * @method skip
   */

  Component_Animation.prototype.skip = function() {
    var ref;
    if (((ref = this.easing) != null ? ref.duration : void 0) > GameManager.tempSettings.skipTime) {
      this.easing.duration = GameManager.tempSettings.skipTime;
      return this.easing.time = 0;
    }
  };

  return Component_Animation;

})(gs.Component);

gs.Component_Animation = Component_Animation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsbUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7Ozs7O0VBY2EsNkJBQUE7SUFDVCxzREFBQSxTQUFBO0VBRFM7OztBQUdiOzs7Ozs7Z0NBS0EsTUFBQSxHQUFRLFNBQUE7V0FDSixJQUFDLENBQUEsTUFBTSxDQUFDLGVBQVIsR0FBMEI7RUFEdEI7OztBQUdSOzs7Ozs7O2dDQU1BLElBQUEsR0FBTSxTQUFBO0FBQ0YsUUFBQTtJQUFBLHNDQUFVLENBQUUsa0JBQVQsR0FBb0IsV0FBVyxDQUFDLFlBQVksQ0FBQyxRQUFoRDtNQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsUUFBUixHQUFtQixXQUFXLENBQUMsWUFBWSxDQUFDO2FBQzVDLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixHQUFlLEVBRm5COztFQURFOzs7O0dBaEN3QixFQUFFLENBQUM7O0FBc0NyQyxFQUFFLENBQUMsbUJBQUgsR0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9BbmltYXRpb25cbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIENvbXBvbmVudF9BbmltYXRpb24gZXh0ZW5kcyBncy5Db21wb25lbnRcbiAgICAjIyMqXG4gICAgKiBUaGUgYmFzZS1jbGFzcyBvZiBhbGwgYW5pbWF0aW9uIGNvbXBvbmVudHMuIEFuIGFuaW1hdGlvbi1jb21wb25lbnRcbiAgICAqIGV4ZWN1dGVzIGEgY2VydGFpbiBhbmltYXRpb24gb24gYSBnYW1lIG9iamVjdC4gVGhlIHR5cGUgb2YgdGhlIGFuaW1hdGlvbiBkZXBlbmRzXG4gICAgKiBvbiB0aGUgY29tcG9uZW50LiA8YnI+XG4gICAgKiA8YnI+XG4gICAgKiBJbiByZWd1bGFyLCBhbmltYXRpb24gY29tcG9uZW50cyBhIHVzZWQgdG9nZXRoZXIgd2l0aCB0aGUgZ3MuQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgKiBjb21wb25lbnQuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9BbmltYXRpb25cbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgc3VwZXJcbiAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSBhbmltYXRpb24uIFxuICAgICpcbiAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgIyMjICAgIFxuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgQG9iamVjdC5uZWVkc0Z1bGxVcGRhdGUgPSB5ZXNcbiAgICAgXG4gICAgIyMjKlxuICAgICogU2tpcHMgdGhlIGFuaW1hdGlvbi4gVGhhdCBpcyB1c2VkIHRvIHNraXAgYW4gYW5pbWF0aW9uIGlmIHRoZSB1c2VyXG4gICAgKiB3YW50cyB0byBza2lwIHZlcnkgZmFzdCB0aHJvdWdoIGEgdmlzdWFsIG5vdmVsIHNjZW5lLlxuICAgICpcbiAgICAqIEBtZXRob2Qgc2tpcFxuICAgICMjIyAgICBcbiAgICBza2lwOiAtPlxuICAgICAgICBpZiBAZWFzaW5nPy5kdXJhdGlvbiA+IEdhbWVNYW5hZ2VyLnRlbXBTZXR0aW5ncy5za2lwVGltZVxuICAgICAgICAgICAgQGVhc2luZy5kdXJhdGlvbiA9IEdhbWVNYW5hZ2VyLnRlbXBTZXR0aW5ncy5za2lwVGltZVxuICAgICAgICAgICAgQGVhc2luZy50aW1lID0gMFxuICAgICAgICBcbiAgICBcbmdzLkNvbXBvbmVudF9BbmltYXRpb24gPSBDb21wb25lbnRfQW5pbWF0aW9uIl19
//# sourceURL=Component_Animation_12.js
var Component_BlendAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_BlendAnimation = (function(superClass) {
  extend(Component_BlendAnimation, superClass);


  /**
  * Executes a blend-animation on a game-object.
  *
  * @module gs
  * @class Component_BlendAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_BlendAnimation(data) {
    Component_BlendAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The easing-object used for the animation.
    * @property easing
    * @type gs.Easing
     */
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
  }


  /**
  * Serializes the blend-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_BlendAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing
    };
  };


  /**
  * Updates the blend-animation.
  *
  * @method update
   */

  Component_BlendAnimation.prototype.update = function() {
    Component_BlendAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    this.object.opacity = this.easing.value;
    if (!this.easing.isRunning) {
      this.object.opacity = Math.round(this.object.opacity);
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Starts the blend-animation.
  *
  * @method start
  * @param {number} opacity The target opacity.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_BlendAnimation.prototype.start = function(opacity, duration, easingType, callback) {
    this.callback = callback;
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    if (this.object.opacity === opacity) {
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
    if (duration === 0) {
      this.object.opacity = opacity;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      return this.easing.startValue(this.object.opacity, opacity - this.object.opacity, duration);
    }
  };

  return Component_BlendAnimation;

})(gs.Component_Animation);

gs.Component_BlendAnimation = Component_BlendAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsd0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLGtDQUFDLElBQUQ7SUFDVCwyREFBQSxTQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQVYsaUJBQWdCLElBQUksQ0FBRSxlQUF0QjtFQVJMOzs7QUFVYjs7Ozs7O3FDQUtBLFlBQUEsR0FBYyxTQUFBO1dBQ1Y7TUFBQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BQVQ7O0VBRFU7OztBQUdkOzs7Ozs7cUNBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSixzREFBQSxTQUFBO0lBQ0EsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjtBQUE4QixhQUE5Qjs7SUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVIsQ0FBQTtJQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixHQUFrQixJQUFDLENBQUEsTUFBTSxDQUFDO0lBRTFCLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7TUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQVIsR0FBa0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxJQUFDLENBQUEsTUFBTSxDQUFDLE9BQW5CO21EQUNsQixJQUFDLENBQUEsU0FBVSxJQUFDLENBQUEsUUFBUSxlQUZ4Qjs7RUFQSTs7O0FBV1I7Ozs7Ozs7Ozs7cUNBU0EsS0FBQSxHQUFPLFNBQUMsT0FBRCxFQUFVLFFBQVYsRUFBb0IsVUFBcEIsRUFBZ0MsUUFBaEM7SUFDSCxJQUFDLENBQUEsUUFBRCxHQUFZO0lBQ1osSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLEdBQWUsVUFBQSxJQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBWSxDQUFBLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBZjtJQUNwRCxJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBUixLQUFtQixPQUF0QjtBQUFtQyxtREFBTyxJQUFDLENBQUEsU0FBVSxJQUFDLENBQUEsUUFBUSxlQUE5RDs7SUFFQSxJQUFHLFFBQUEsS0FBWSxDQUFmO01BQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEdBQWtCO21EQUNsQixJQUFDLENBQUEsU0FBVSxJQUFDLENBQUEsUUFBUSxlQUZ4QjtLQUFBLE1BQUE7YUFJSSxJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUEzQixFQUFvQyxPQUFBLEdBQVUsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUF0RCxFQUErRCxRQUEvRCxFQUpKOztFQUxHOzs7O0dBckQ0QixFQUFFLENBQUM7O0FBZ0UxQyxFQUFFLENBQUMsd0JBQUgsR0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9CbGVuZEFuaW1hdGlvblxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X0JsZW5kQW5pbWF0aW9uIGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICMjIypcbiAgICAqIEV4ZWN1dGVzIGEgYmxlbmQtYW5pbWF0aW9uIG9uIGEgZ2FtZS1vYmplY3QuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9CbGVuZEFuaW1hdGlvblxuICAgICogQGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKGRhdGEpIC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGVhc2luZy1vYmplY3QgdXNlZCBmb3IgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgZWFzaW5nXG4gICAgICAgICogQHR5cGUgZ3MuRWFzaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAZWFzaW5nID0gbmV3IGdzLkVhc2luZyhudWxsLCBkYXRhPy5lYXNpbmcpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFNlcmlhbGl6ZXMgdGhlIGJsZW5kLWFuaW1hdGlvbiBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAjIyNcbiAgICB0b0RhdGFCdW5kbGU6IC0+XG4gICAgICAgIGVhc2luZzogQGVhc2luZ1xuICAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSBibGVuZC1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAjIyMgICBcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIGlmIG5vdCBAZWFzaW5nLmlzUnVubmluZyB0aGVuIHJldHVyblxuICAgICAgICBcbiAgICAgICAgQGVhc2luZy51cGRhdGVWYWx1ZSgpXG4gICAgICAgIEBvYmplY3Qub3BhY2l0eSA9IEBlYXNpbmcudmFsdWVcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBAZWFzaW5nLmlzUnVubmluZ1xuICAgICAgICAgICAgQG9iamVjdC5vcGFjaXR5ID0gTWF0aC5yb3VuZChAb2JqZWN0Lm9wYWNpdHkpXG4gICAgICAgICAgICBAY2FsbGJhY2s/KEBvYmplY3QsIHRoaXMpXG4gXG4gICAgIyMjKlxuICAgICogU3RhcnRzIHRoZSBibGVuZC1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCBzdGFydFxuICAgICogQHBhcmFtIHtudW1iZXJ9IG9wYWNpdHkgVGhlIHRhcmdldCBvcGFjaXR5LlxuICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBmcmFtZXMuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZWFzaW5nVHlwZSBUaGUgZWFzaW5nLXR5cGUuXG4gICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIEFuIG9wdGlvbmFsIGNhbGxiYWNrIGNhbGxlZCBpZiBibGVuZGluZyBpcyBmaW5pc2hlZC4gXG4gICAgIyMjICBcbiAgICBzdGFydDogKG9wYWNpdHksIGR1cmF0aW9uLCBlYXNpbmdUeXBlLCBjYWxsYmFjaykgLT5cbiAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgQGVhc2luZy50eXBlID0gZWFzaW5nVHlwZSB8fCBncy5FYXNpbmdzLkVBU0VfTElORUFSW2dzLkVhc2luZ1R5cGVzLkVBU0VfSU5dXG4gICAgICAgIGlmIEBvYmplY3Qub3BhY2l0eSA9PSBvcGFjaXR5IHRoZW4gcmV0dXJuIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICAgICAgXG4gICAgICAgIGlmIGR1cmF0aW9uID09IDBcbiAgICAgICAgICAgIEBvYmplY3Qub3BhY2l0eSA9IG9wYWNpdHlcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGVhc2luZy5zdGFydFZhbHVlKEBvYmplY3Qub3BhY2l0eSwgb3BhY2l0eSAtIEBvYmplY3Qub3BhY2l0eSwgZHVyYXRpb24pXG4gICAgICAgIFxuZ3MuQ29tcG9uZW50X0JsZW5kQW5pbWF0aW9uID0gQ29tcG9uZW50X0JsZW5kQW5pbWF0aW9uIl19
//# sourceURL=Component_BlendAnimation_17.js
var Component_MaskAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_MaskAnimation = (function(superClass) {
  extend(Component_MaskAnimation, superClass);


  /**
  * Executes a mask-animation on a game-object.
  *
  * @module gs
  * @class Component_MaskAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_MaskAnimation(data) {
    Component_MaskAnimation.__super__.constructor.apply(this, arguments);
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
    this.callback = null;
    this.animationType = (data != null ? data.animationType : void 0) || 0;
  }


  /**
  * Serializes the mask-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_MaskAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing,
      animationType: this.animationType
    };
  };


  /**
  * Updates the mask-animation.
  *
  * @method update
   */

  Component_MaskAnimation.prototype.update = function() {
    Component_MaskAnimation.__super__.update.call(this);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    this.object.mask.value = this.easing.value;
    if (!this.easing.isRunning) {
      if (this.animationType < 1) {
        this.object.mask.source = null;
        this.object.mask.vague = 0;
      }
      this.animationType = 0;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Lets the game object appear on screen using a masking-effect.
  *
  * @method maskIn
  * @param {gs.Mask} mask The mask used for the animation.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MaskAnimation.prototype.maskIn = function(mask, duration, easing, callback) {
    this.easing.type = easing;
    this.animationType = 0;
    this.callback = callback;
    this.object.mask.type = 1;
    this.object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + mask.graphic.name);
    this.object.mask.vague = mask.vague;
    this.object.mask.value = 255;
    return this.easing.startValue(255, -255 - mask.vague, duration);
  };


  /**
  * Lets the game object disappear from screen using a masking-effect.
  *
  * @method maskIn
  * @param {gs.Mask} mask The mask used for the animation.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MaskAnimation.prototype.maskOut = function(mask, duration, easing, callback) {
    this.easing.type = easing;
    this.animationType = 0;
    this.callback = callback;
    this.object.mask.type = 1;
    this.object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + mask.graphic.name);
    this.object.mask.vague = mask.vague;
    this.object.mask.value = 0;
    return this.easing.startValue(-mask.vague, 255 + mask.vague, duration);
  };


  /**
  * Description follows...
  *
  * @method maskTo
  * @param {gs.Mask} mask The mask used for the animation.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MaskAnimation.prototype.maskTo = function(mask, duration, easing, callback) {
    var ref, ref1, ref2;
    this.easing.type = easing;
    this.animationType = 1;
    this.callback = callback;
    this.object.mask.type = 1;
    if (mask.sourceType === 0) {
      this.object.mask.source = ResourceManager.getBitmap("Graphics/Masks/" + mask.graphic.name);
    } else {
      if (((ref = this.object.mask.source) != null ? ref.videoElement : void 0) != null) {
        this.object.mask.source.pause();
      }
      this.object.mask.source = ResourceManager.getVideo("Movies/" + mask.video.name);
      if ((ref1 = this.object.mask.source) != null) {
        ref1.play();
      }
      if ((ref2 = this.object.mask.source) != null) {
        ref2.loop = true;
      }
    }
    this.object.mask.vague = mask.vague;
    if (duration === 0) {
      this.animationType = 0;
      this.object.mask.value = mask.value;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      return this.easing.startValue(this.object.mask.value, mask.value - this.object.mask.value, duration);
    }
  };

  return Component_MaskAnimation;

})(gs.Component_Animation);

gs.Component_MaskAnimation = Component_MaskAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsdUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLGlDQUFDLElBQUQ7SUFDVCwwREFBQSxTQUFBO0lBRUEsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixpQkFBZ0IsSUFBSSxDQUFFLGVBQXRCO0lBQ2QsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLElBQUMsQ0FBQSxhQUFELG1CQUFpQixJQUFJLENBQUUsdUJBQU4sSUFBdUI7RUFML0I7OztBQU9iOzs7Ozs7b0NBS0EsWUFBQSxHQUFjLFNBQUE7V0FDVjtNQUFBLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFBVDtNQUNBLGFBQUEsRUFBZSxJQUFDLENBQUEsYUFEaEI7O0VBRFU7OztBQUlkOzs7Ozs7b0NBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSixrREFBQTtJQUNBLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7QUFBOEIsYUFBOUI7O0lBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLENBQUE7SUFDQSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFiLEdBQXFCLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFFN0IsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjtNQUNJLElBQUcsSUFBQyxDQUFBLGFBQUQsR0FBaUIsQ0FBcEI7UUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFiLEdBQXNCO1FBQ3RCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQWIsR0FBcUIsRUFGekI7O01BR0EsSUFBQyxDQUFBLGFBQUQsR0FBaUI7bURBQ2pCLElBQUMsQ0FBQSxTQUFVLElBQUMsQ0FBQSxRQUFRLGVBTHhCOztFQVBJOzs7QUFjUjs7Ozs7Ozs7OztvQ0FTQSxNQUFBLEdBQVEsU0FBQyxJQUFELEVBQU8sUUFBUCxFQUFpQixNQUFqQixFQUF5QixRQUF6QjtJQUNKLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixHQUFlO0lBQ2YsSUFBQyxDQUFBLGFBQUQsR0FBaUI7SUFDakIsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUVaLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQWIsR0FBb0I7SUFDcEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBYixHQUFzQixlQUFlLENBQUMsU0FBaEIsQ0FBMEIsaUJBQUEsR0FBa0IsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUF6RDtJQUN0QixJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFiLEdBQXFCLElBQUksQ0FBQztJQUMxQixJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFiLEdBQXFCO1dBRXJCLElBQUMsQ0FBQSxNQUFNLENBQUMsVUFBUixDQUFtQixHQUFuQixFQUF3QixDQUFDLEdBQUQsR0FBTyxJQUFJLENBQUMsS0FBcEMsRUFBMkMsUUFBM0M7RUFWSTs7O0FBWVI7Ozs7Ozs7Ozs7b0NBU0EsT0FBQSxHQUFTLFNBQUMsSUFBRCxFQUFPLFFBQVAsRUFBaUIsTUFBakIsRUFBeUIsUUFBekI7SUFDTCxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsR0FBZTtJQUNmLElBQUMsQ0FBQSxhQUFELEdBQWlCO0lBQ2pCLElBQUMsQ0FBQSxRQUFELEdBQVk7SUFFWixJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFiLEdBQW9CO0lBQ3BCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWIsR0FBc0IsZUFBZSxDQUFDLFNBQWhCLENBQTBCLGlCQUFBLEdBQWtCLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBekQ7SUFDdEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBYixHQUFxQixJQUFJLENBQUM7SUFDMUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBYixHQUFxQjtXQUVyQixJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBbUIsQ0FBQyxJQUFJLENBQUMsS0FBekIsRUFBZ0MsR0FBQSxHQUFNLElBQUksQ0FBQyxLQUEzQyxFQUFrRCxRQUFsRDtFQVZLOzs7QUFZVDs7Ozs7Ozs7OztvQ0FTQSxNQUFBLEdBQVEsU0FBQyxJQUFELEVBQU8sUUFBUCxFQUFpQixNQUFqQixFQUF5QixRQUF6QjtBQUNKLFFBQUE7SUFBQSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsR0FBZTtJQUNmLElBQUMsQ0FBQSxhQUFELEdBQWlCO0lBQ2pCLElBQUMsQ0FBQSxRQUFELEdBQVk7SUFFWixJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFiLEdBQW9CO0lBR3BCLElBQUcsSUFBSSxDQUFDLFVBQUwsS0FBbUIsQ0FBdEI7TUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFiLEdBQXNCLGVBQWUsQ0FBQyxTQUFoQixDQUEwQixpQkFBQSxHQUFrQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQXpELEVBRDFCO0tBQUEsTUFBQTtNQUdJLElBQUcsNkVBQUg7UUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBcEIsQ0FBQSxFQURKOztNQUdBLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWIsR0FBc0IsZUFBZSxDQUFDLFFBQWhCLENBQXlCLFNBQUEsR0FBVSxJQUFJLENBQUMsS0FBSyxDQUFDLElBQTlDOztZQUNILENBQUUsSUFBckIsQ0FBQTs7O1lBQ21CLENBQUUsSUFBckIsR0FBNEI7T0FSaEM7O0lBVUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBYixHQUFxQixJQUFJLENBQUM7SUFFMUIsSUFBRyxRQUFBLEtBQVksQ0FBZjtNQUNJLElBQUMsQ0FBQSxhQUFELEdBQWlCO01BQ2pCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQWIsR0FBcUIsSUFBSSxDQUFDO21EQUMxQixJQUFDLENBQUEsU0FBVSxJQUFDLENBQUEsUUFBUSxlQUh4QjtLQUFBLE1BQUE7YUFLSSxJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBbUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBaEMsRUFBdUMsSUFBSSxDQUFDLEtBQUwsR0FBYSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFqRSxFQUF3RSxRQUF4RSxFQUxKOztFQXBCSTs7OztHQWhHMEIsRUFBRSxDQUFDOztBQTJIekMsRUFBRSxDQUFDLHVCQUFILEdBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfTWFza0FuaW1hdGlvblxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X01hc2tBbmltYXRpb24gZXh0ZW5kcyBncy5Db21wb25lbnRfQW5pbWF0aW9uXG4gICAgIyMjKlxuICAgICogRXhlY3V0ZXMgYSBtYXNrLWFuaW1hdGlvbiBvbiBhIGdhbWUtb2JqZWN0LlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfTWFza0FuaW1hdGlvblxuICAgICogQGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKGRhdGEpIC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICBAZWFzaW5nID0gbmV3IGdzLkVhc2luZyhudWxsLCBkYXRhPy5lYXNpbmcpXG4gICAgICAgIEBjYWxsYmFjayA9IG51bGxcbiAgICAgICAgQGFuaW1hdGlvblR5cGUgPSBkYXRhPy5hbmltYXRpb25UeXBlIHx8IDBcbiAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSBtYXNrLWFuaW1hdGlvbiBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAjIyMgICAgICAgIFxuICAgIHRvRGF0YUJ1bmRsZTogLT5cbiAgICAgICAgZWFzaW5nOiBAZWFzaW5nLFxuICAgICAgICBhbmltYXRpb25UeXBlOiBAYW5pbWF0aW9uVHlwZVxuICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIG1hc2stYW5pbWF0aW9uLlxuICAgICpcbiAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgIyMjICAgIFxuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmcgdGhlbiByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIEBlYXNpbmcudXBkYXRlVmFsdWUoKVxuICAgICAgICBAb2JqZWN0Lm1hc2sudmFsdWUgPSBAZWFzaW5nLnZhbHVlXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmdcbiAgICAgICAgICAgIGlmIEBhbmltYXRpb25UeXBlIDwgMVxuICAgICAgICAgICAgICAgIEBvYmplY3QubWFzay5zb3VyY2UgPSBudWxsXG4gICAgICAgICAgICAgICAgQG9iamVjdC5tYXNrLnZhZ3VlID0gMFxuICAgICAgICAgICAgQGFuaW1hdGlvblR5cGUgPSAwXG4gICAgICAgICAgICBAY2FsbGJhY2s/KEBvYmplY3QsIHRoaXMpXG4gICAgXG4gICAgIyMjKlxuICAgICogTGV0cyB0aGUgZ2FtZSBvYmplY3QgYXBwZWFyIG9uIHNjcmVlbiB1c2luZyBhIG1hc2tpbmctZWZmZWN0LlxuICAgICpcbiAgICAqIEBtZXRob2QgbWFza0luXG4gICAgKiBAcGFyYW0ge2dzLk1hc2t9IG1hc2sgVGhlIG1hc2sgdXNlZCBmb3IgdGhlIGFuaW1hdGlvbi5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gZnJhbWVzLlxuICAgICogQHBhcmFtIHtPYmplY3R9IGVhc2luZ1R5cGUgVGhlIGVhc2luZy10eXBlLlxuICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBBbiBvcHRpb25hbCBjYWxsYmFjay1mdW5jdGlvbiBjYWxsZWQgd2hlbiB0aGUgYW5pbWF0aW9uIGlzIGZpbmlzaGVkLiBcbiAgICAjIyMgICAgICAgXG4gICAgbWFza0luOiAobWFzaywgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIC0+XG4gICAgICAgIEBlYXNpbmcudHlwZSA9IGVhc2luZ1xuICAgICAgICBAYW5pbWF0aW9uVHlwZSA9IDBcbiAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgXG4gICAgICAgIEBvYmplY3QubWFzay50eXBlID0gMVxuICAgICAgICBAb2JqZWN0Lm1hc2suc291cmNlID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcChcIkdyYXBoaWNzL01hc2tzLyN7bWFzay5ncmFwaGljLm5hbWV9XCIpXG4gICAgICAgIEBvYmplY3QubWFzay52YWd1ZSA9IG1hc2sudmFndWVcbiAgICAgICAgQG9iamVjdC5tYXNrLnZhbHVlID0gMjU1XG4gICAgICAgIFxuICAgICAgICBAZWFzaW5nLnN0YXJ0VmFsdWUoMjU1LCAtMjU1IC0gbWFzay52YWd1ZSwgZHVyYXRpb24pXG4gICAgXG4gICAgIyMjKlxuICAgICogTGV0cyB0aGUgZ2FtZSBvYmplY3QgZGlzYXBwZWFyIGZyb20gc2NyZWVuIHVzaW5nIGEgbWFza2luZy1lZmZlY3QuXG4gICAgKlxuICAgICogQG1ldGhvZCBtYXNrSW5cbiAgICAqIEBwYXJhbSB7Z3MuTWFza30gbWFzayBUaGUgbWFzayB1c2VkIGZvciB0aGUgYW5pbWF0aW9uLlxuICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBmcmFtZXMuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZWFzaW5nVHlwZSBUaGUgZWFzaW5nLXR5cGUuXG4gICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIEFuIG9wdGlvbmFsIGNhbGxiYWNrLWZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBhbmltYXRpb24gaXMgZmluaXNoZWQuIFxuICAgICMjIyAgICAgIFxuICAgIG1hc2tPdXQ6IChtYXNrLCBkdXJhdGlvbiwgZWFzaW5nLCBjYWxsYmFjaykgLT5cbiAgICAgICAgQGVhc2luZy50eXBlID0gZWFzaW5nXG4gICAgICAgIEBhbmltYXRpb25UeXBlID0gMFxuICAgICAgICBAY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgICBcbiAgICAgICAgQG9iamVjdC5tYXNrLnR5cGUgPSAxXG4gICAgICAgIEBvYmplY3QubWFzay5zb3VyY2UgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKFwiR3JhcGhpY3MvTWFza3MvI3ttYXNrLmdyYXBoaWMubmFtZX1cIilcbiAgICAgICAgQG9iamVjdC5tYXNrLnZhZ3VlID0gbWFzay52YWd1ZVxuICAgICAgICBAb2JqZWN0Lm1hc2sudmFsdWUgPSAwXG4gICAgICAgIFxuICAgICAgICBAZWFzaW5nLnN0YXJ0VmFsdWUoLW1hc2sudmFndWUsIDI1NSArIG1hc2sudmFndWUsIGR1cmF0aW9uKVxuICAgIFxuICAgICMjIypcbiAgICAqIERlc2NyaXB0aW9uIGZvbGxvd3MuLi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIG1hc2tUb1xuICAgICogQHBhcmFtIHtncy5NYXNrfSBtYXNrIFRoZSBtYXNrIHVzZWQgZm9yIHRoZSBhbmltYXRpb24uXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIGluIGZyYW1lcy5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBlYXNpbmdUeXBlIFRoZSBlYXNpbmctdHlwZS5cbiAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gQW4gb3B0aW9uYWwgY2FsbGJhY2stZnVuY3Rpb24gY2FsbGVkIHdoZW4gdGhlIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC4gXG4gICAgIyMjICAgICAgIFxuICAgIG1hc2tUbzogKG1hc2ssIGR1cmF0aW9uLCBlYXNpbmcsIGNhbGxiYWNrKSAtPlxuICAgICAgICBAZWFzaW5nLnR5cGUgPSBlYXNpbmdcbiAgICAgICAgQGFuaW1hdGlvblR5cGUgPSAxXG4gICAgICAgIEBjYWxsYmFjayA9IGNhbGxiYWNrXG5cbiAgICAgICAgQG9iamVjdC5tYXNrLnR5cGUgPSAxXG5cbiAgICAgICAgIyBGSVhNRTogRG91YmxlZCBjb2RlLCBzZWUgQ29tbWFuZEludGVycHJldGVyLmNvbW1hbmRNYXNrUGljdHVyZVxuICAgICAgICBpZiBtYXNrLnNvdXJjZVR5cGUgPT0gMFxuICAgICAgICAgICAgQG9iamVjdC5tYXNrLnNvdXJjZSA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoXCJHcmFwaGljcy9NYXNrcy8je21hc2suZ3JhcGhpYy5uYW1lfVwiKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBpZiBAb2JqZWN0Lm1hc2suc291cmNlPy52aWRlb0VsZW1lbnQ/XG4gICAgICAgICAgICAgICAgQG9iamVjdC5tYXNrLnNvdXJjZS5wYXVzZSgpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBAb2JqZWN0Lm1hc2suc291cmNlID0gUmVzb3VyY2VNYW5hZ2VyLmdldFZpZGVvKFwiTW92aWVzLyN7bWFzay52aWRlby5uYW1lfVwiKVxuICAgICAgICAgICAgQG9iamVjdC5tYXNrLnNvdXJjZT8ucGxheSgpXG4gICAgICAgICAgICBAb2JqZWN0Lm1hc2suc291cmNlPy5sb29wID0gdHJ1ZVxuICAgICAgICAgICAgXG4gICAgICAgIEBvYmplY3QubWFzay52YWd1ZSA9IG1hc2sudmFndWVcblxuICAgICAgICBpZiBkdXJhdGlvbiA9PSAwXG4gICAgICAgICAgICBAYW5pbWF0aW9uVHlwZSA9IDBcbiAgICAgICAgICAgIEBvYmplY3QubWFzay52YWx1ZSA9IG1hc2sudmFsdWVcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGVhc2luZy5zdGFydFZhbHVlKEBvYmplY3QubWFzay52YWx1ZSwgbWFzay52YWx1ZSAtIEBvYmplY3QubWFzay52YWx1ZSwgZHVyYXRpb24pXG4gICAgICAgIFxuZ3MuQ29tcG9uZW50X01hc2tBbmltYXRpb24gPSBDb21wb25lbnRfTWFza0FuaW1hdGlvbiJdfQ==
//# sourceURL=Component_MaskAnimation_36.js
var Component_TintAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_TintAnimation = (function(superClass) {
  extend(Component_TintAnimation, superClass);


  /**
  * Executes a tint-animation on a game-object. The tint is executed on
  * the game object's tone-property.
  *
  * @module gs
  * @class Component_TintAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_TintAnimation(data) {
    Component_TintAnimation.__super__.constructor.apply(this, arguments);
    this.sourceTone = data != null ? data.sourceTone : void 0;
    this.targetTone = data != null ? data.targetTone : void 0;
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
    this.callback = null;
  }


  /**
  * Serializes the tint-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_TintAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing,
      sourceTone: this.sourceTone,
      targetTone: this.targetTone
    };
  };


  /**
  * Updates the tint-animation.
  *
  * @method update
   */

  Component_TintAnimation.prototype.update = function() {
    var a;
    Component_TintAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    a = this.easing.value;
    this.object.tone.red = Math.floor((this.sourceTone.red * a + this.targetTone.red * (255 - a)) / 255);
    this.object.tone.green = Math.floor((this.sourceTone.green * a + this.targetTone.green * (255 - a)) / 255);
    this.object.tone.blue = Math.floor((this.sourceTone.blue * a + this.targetTone.blue * (255 - a)) / 255);
    this.object.tone.grey = Math.floor((this.sourceTone.grey * a + this.targetTone.grey * (255 - a)) / 255);
    if (!this.easing.isRunning) {
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Starts the tint-animation.
  *
  * @method start
  * @param {gs.Tone} tone The target-tone.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if the animation is finished.
   */

  Component_TintAnimation.prototype.start = function(tone, duration, easing, callback) {
    this.callback = callback;
    if (this.object.tone.red === tone.red && this.object.tone.green === tone.green && this.object.tone.blue === tone.blue && this.object.tone.grey === tone.grey) {
      if (typeof this.callback === "function") {
        this.callback(this.object, this);
      }
    }
    if (duration === 0) {
      this.object.tone = tone;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      this.sourceTone = new Tone(this.object.tone);
      this.targetTone = tone;
      this.callback = callback;
      this.easing.type = easing;
      return this.easing.startValue(255, -255, duration);
    }
  };

  return Component_TintAnimation;

})(gs.Component_Animation);

gs.Component_TintAnimation = Component_TintAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsdUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7RUFVYSxpQ0FBQyxJQUFEO0lBQ1QsMERBQUEsU0FBQTtJQUVBLElBQUMsQ0FBQSxVQUFELGtCQUFjLElBQUksQ0FBRTtJQUNwQixJQUFDLENBQUEsVUFBRCxrQkFBYyxJQUFJLENBQUU7SUFDcEIsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixpQkFBZ0IsSUFBSSxDQUFFLGVBQXRCO0lBQ2QsSUFBQyxDQUFBLFFBQUQsR0FBWTtFQU5IOzs7QUFRYjs7Ozs7O29DQUtBLFlBQUEsR0FBYyxTQUFBO1dBQ1Y7TUFBQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BQVQ7TUFDQSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBRGI7TUFFQSxVQUFBLEVBQVksSUFBQyxDQUFBLFVBRmI7O0VBRFU7OztBQUtkOzs7Ozs7b0NBS0EsTUFBQSxHQUFRLFNBQUE7QUFDSixRQUFBO0lBQUEscURBQUEsU0FBQTtJQUNBLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7QUFBOEIsYUFBOUI7O0lBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLENBQUE7SUFDQSxDQUFBLEdBQUksSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUVaLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQWIsR0FBbUIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLElBQUMsQ0FBQSxVQUFVLENBQUMsR0FBWixHQUFrQixDQUFsQixHQUFzQixJQUFDLENBQUEsVUFBVSxDQUFDLEdBQVosR0FBa0IsQ0FBQyxHQUFBLEdBQU0sQ0FBUCxDQUF6QyxDQUFBLEdBQXNELEdBQWpFO0lBQ25CLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQWIsR0FBcUIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLElBQUMsQ0FBQSxVQUFVLENBQUMsS0FBWixHQUFvQixDQUFwQixHQUF3QixJQUFDLENBQUEsVUFBVSxDQUFDLEtBQVosR0FBb0IsQ0FBQyxHQUFBLEdBQU0sQ0FBUCxDQUE3QyxDQUFBLEdBQTBELEdBQXJFO0lBQ3JCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQWIsR0FBb0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLElBQUMsQ0FBQSxVQUFVLENBQUMsSUFBWixHQUFtQixDQUFuQixHQUF1QixJQUFDLENBQUEsVUFBVSxDQUFDLElBQVosR0FBbUIsQ0FBQyxHQUFBLEdBQU0sQ0FBUCxDQUEzQyxDQUFBLEdBQXdELEdBQW5FO0lBQ3BCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQWIsR0FBb0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLElBQUMsQ0FBQSxVQUFVLENBQUMsSUFBWixHQUFtQixDQUFuQixHQUF1QixJQUFDLENBQUEsVUFBVSxDQUFDLElBQVosR0FBbUIsQ0FBQyxHQUFBLEdBQU0sQ0FBUCxDQUEzQyxDQUFBLEdBQXdELEdBQW5FO0lBRXBCLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7bURBQ0ksSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVEsZUFEeEI7O0VBWkk7OztBQWdCUjs7Ozs7Ozs7OztvQ0FTQSxLQUFBLEdBQU8sU0FBQyxJQUFELEVBQU8sUUFBUCxFQUFpQixNQUFqQixFQUF5QixRQUF6QjtJQUVILElBQUMsQ0FBQSxRQUFELEdBQVk7SUFDWixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEdBQWIsS0FBb0IsSUFBSSxDQUFDLEdBQXpCLElBQWlDLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQWIsS0FBc0IsSUFBSSxDQUFDLEtBQTVELElBQ0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBYixLQUFxQixJQUFJLENBQUMsSUFEM0IsSUFDb0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBYixLQUFxQixJQUFJLENBQUMsSUFEakU7O1FBRUcsSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVE7T0FGdkI7O0lBSUEsSUFBRyxRQUFBLEtBQVksQ0FBZjtNQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixHQUFlO21EQUNmLElBQUMsQ0FBQSxTQUFVLElBQUMsQ0FBQSxRQUFRLGVBRnhCO0tBQUEsTUFBQTtNQUlJLElBQUMsQ0FBQSxVQUFELEdBQWtCLElBQUEsSUFBQSxDQUFLLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBYjtNQUNsQixJQUFDLENBQUEsVUFBRCxHQUFjO01BQ2QsSUFBQyxDQUFBLFFBQUQsR0FBWTtNQUNaLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBUixHQUFlO2FBQ2YsSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFSLENBQW1CLEdBQW5CLEVBQXdCLENBQUMsR0FBekIsRUFBOEIsUUFBOUIsRUFSSjs7RUFQRzs7OztHQTNEMkIsRUFBRSxDQUFDOztBQTRFekMsRUFBRSxDQUFDLHVCQUFILEdBQTZCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBDb21wb25lbnRfVGludEFuaW1hdGlvblxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X1RpbnRBbmltYXRpb24gZXh0ZW5kcyBncy5Db21wb25lbnRfQW5pbWF0aW9uXG4gICAgIyMjKlxuICAgICogRXhlY3V0ZXMgYSB0aW50LWFuaW1hdGlvbiBvbiBhIGdhbWUtb2JqZWN0LiBUaGUgdGludCBpcyBleGVjdXRlZCBvblxuICAgICogdGhlIGdhbWUgb2JqZWN0J3MgdG9uZS1wcm9wZXJ0eS5cbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgQ29tcG9uZW50X1RpbnRBbmltYXRpb25cbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudF9BbmltYXRpb25cbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgQHNvdXJjZVRvbmUgPSBkYXRhPy5zb3VyY2VUb25lXG4gICAgICAgIEB0YXJnZXRUb25lID0gZGF0YT8udGFyZ2V0VG9uZVxuICAgICAgICBAZWFzaW5nID0gbmV3IGdzLkVhc2luZyhudWxsLCBkYXRhPy5lYXNpbmcpXG4gICAgICAgIEBjYWxsYmFjayA9IG51bGxcbiAgICAgXG4gICAgIyMjKlxuICAgICogU2VyaWFsaXplcyB0aGUgdGludC1hbmltYXRpb24gaW50byBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgdG9EYXRhQnVuZGxlXG4gICAgIyMjICAgIFxuICAgIHRvRGF0YUJ1bmRsZTogLT5cbiAgICAgICAgZWFzaW5nOiBAZWFzaW5nLFxuICAgICAgICBzb3VyY2VUb25lOiBAc291cmNlVG9uZSxcbiAgICAgICAgdGFyZ2V0VG9uZTogQHRhcmdldFRvbmVcbiAgICAgXG4gICAgIyMjKlxuICAgICogVXBkYXRlcyB0aGUgdGludC1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAjIyMgICAgICBcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmcgdGhlbiByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIEBlYXNpbmcudXBkYXRlVmFsdWUoKVxuICAgICAgICBhID0gQGVhc2luZy52YWx1ZVxuICAgICAgICBcbiAgICAgICAgQG9iamVjdC50b25lLnJlZCA9IE1hdGguZmxvb3IoKEBzb3VyY2VUb25lLnJlZCAqIGEgKyBAdGFyZ2V0VG9uZS5yZWQgKiAoMjU1IC0gYSkpIC8gMjU1KVxuICAgICAgICBAb2JqZWN0LnRvbmUuZ3JlZW4gPSBNYXRoLmZsb29yKChAc291cmNlVG9uZS5ncmVlbiAqIGEgKyBAdGFyZ2V0VG9uZS5ncmVlbiAqICgyNTUgLSBhKSkgLyAyNTUpXG4gICAgICAgIEBvYmplY3QudG9uZS5ibHVlID0gTWF0aC5mbG9vcigoQHNvdXJjZVRvbmUuYmx1ZSAqIGEgKyBAdGFyZ2V0VG9uZS5ibHVlICogKDI1NSAtIGEpKSAvIDI1NSlcbiAgICAgICAgQG9iamVjdC50b25lLmdyZXkgPSBNYXRoLmZsb29yKChAc291cmNlVG9uZS5ncmV5ICogYSArIEB0YXJnZXRUb25lLmdyZXkgKiAoMjU1IC0gYSkpIC8gMjU1KVxuICAgICAgICBcbiAgICAgICAgaWYgbm90IEBlYXNpbmcuaXNSdW5uaW5nXG4gICAgICAgICAgICBAY2FsbGJhY2s/KEBvYmplY3QsIHRoaXMpXG4gICAgICAgIFxuICAgIFxuICAgICMjIypcbiAgICAqIFN0YXJ0cyB0aGUgdGludC1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCBzdGFydFxuICAgICogQHBhcmFtIHtncy5Ub25lfSB0b25lIFRoZSB0YXJnZXQtdG9uZS5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gZnJhbWVzLlxuICAgICogQHBhcmFtIHtPYmplY3R9IGVhc2luZ1R5cGUgVGhlIGVhc2luZy10eXBlLlxuICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBBbiBvcHRpb25hbCBjYWxsYmFjayBjYWxsZWQgaWYgdGhlIGFuaW1hdGlvbiBpcyBmaW5pc2hlZC4gXG4gICAgIyMjIFxuICAgIHN0YXJ0OiAodG9uZSwgZHVyYXRpb24sIGVhc2luZywgY2FsbGJhY2spIC0+XG5cbiAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgaWYgQG9iamVjdC50b25lLnJlZCA9PSB0b25lLnJlZCBhbmQgQG9iamVjdC50b25lLmdyZWVuID09IHRvbmUuZ3JlZW4gYW5kIFxuICAgICAgICAgICAgQG9iamVjdC50b25lLmJsdWUgPT0gdG9uZS5ibHVlIGFuZCBAb2JqZWN0LnRvbmUuZ3JleSA9PSB0b25lLmdyZXlcbiAgICAgICAgICAgQGNhbGxiYWNrPyhAb2JqZWN0LCB0aGlzKVxuICAgICAgICAgICBcbiAgICAgICAgaWYgZHVyYXRpb24gPT0gMFxuICAgICAgICAgICAgQG9iamVjdC50b25lID0gdG9uZVxuICAgICAgICAgICAgQGNhbGxiYWNrPyhAb2JqZWN0LCB0aGlzKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAc291cmNlVG9uZSA9IG5ldyBUb25lKEBvYmplY3QudG9uZSlcbiAgICAgICAgICAgIEB0YXJnZXRUb25lID0gdG9uZVxuICAgICAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgICAgIEBlYXNpbmcudHlwZSA9IGVhc2luZ1xuICAgICAgICAgICAgQGVhc2luZy5zdGFydFZhbHVlKDI1NSwgLTI1NSwgZHVyYXRpb24pXG4gICAgICAgIFxuZ3MuQ29tcG9uZW50X1RpbnRBbmltYXRpb24gPSBDb21wb25lbnRfVGludEFuaW1hdGlvbiJdfQ==
//# sourceURL=Component_TintAnimation_44.js

/**
* Different types of animation looping.
*
* @module gs
* @class AnimationLoopType
* @memberof gs
* @static
* @final
 */
var AnimationLoopType, Component_PathAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

AnimationLoopType = (function() {
  function AnimationLoopType() {}

  AnimationLoopType.initialize = function() {

    /**
    * No looping.
    * @property NONE
    * @static
    * @final
     */
    this.NONE = 0;

    /**
    * Regular looping. If the end of an animation is reached it will start
    * from the beginning.
    * @property NORMAL
    * @static
    * @final
     */
    this.NORMAL = 1;

    /**
    * Reverse looping. If the end of an animation is reached it will be
    * reversed an goes now from end to start.
    * @property REVERSE
    * @static
    * @final
     */
    return this.REVERSE = 2;
  };

  return AnimationLoopType;

})();

AnimationLoopType.initialize();

gs.AnimationLoopType = AnimationLoopType;

Component_PathAnimation = (function(superClass) {
  extend(Component_PathAnimation, superClass);


  /**
  * Executes a path-animation on a game-object. A path-animation moves the
  * game-object along a path of quadratic bezier-curves.
  *
  * @module gs
  * @class Component_PathAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_PathAnimation(data) {
    Component_PathAnimation.__super__.constructor.apply(this, arguments);
    this.path = (data != null ? data.path : void 0) || null;
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
    this.startPosition = (data != null ? data.startPosition : void 0) || null;
    this.loopType = (data != null ? data.loopType : void 0) || 0;
    this.animationType = 0;
    this.effects = (data != null ? data.effects : void 0) || [];
    this.effect = null;
  }


  /**
  * Serializes the path-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_PathAnimation.prototype.toDataBundle = function() {
    return {
      path: this.path,
      easing: this.easing,
      startPosition: this.startPosition,
      loopType: this.loopType
    };
  };


  /**
  * Skips the animation. That is used to skip an animation if the user
  * wants to skip very fast through a visual novel scene.
  *
  * @method skip
   */

  Component_PathAnimation.prototype.skip = function() {
    if (this.loopType === 0 && this.easing.duration > 1) {
      this.easing.duration = 1;
      return this.easing.time = 0;
    }
  };


  /**
  * Calculates a certain point on a specified bezier-curve.
  *
  * @method quadraticBezierPoint
  * @protected
  * @param {number} startPt - The start-point of the bezier-curve.
  * @param {number} controlPt - The control-point of the bezier-curve.
  * @param {number} endPt - The end-point of the bezier-curve.
  * @param {number} percent - The percentage (0.0 - 1.0). A percentage of
  * 0.0 returns the <b>startPt</b> and 1.0 returns the <b>endPt</b> while
  * 0.5 return the point at the middle of the bezier-curve.
   */

  Component_PathAnimation.prototype.quadraticBezierPoint = function(startPt, controlPt, endPt, percent) {
    var x, y;
    x = Math.pow(1 - percent, 2) * startPt.x + 2 * (1 - percent) * percent * controlPt.x + Math.pow(percent, 2) * endPt.x;
    y = Math.pow(1 - percent, 2) * startPt.y + 2 * (1 - percent) * percent * controlPt.y + Math.pow(percent, 2) * endPt.y;
    return {
      x: x,
      y: y
    };
  };


  /**
  * Updates the path-animation.
  *
  * @method update
   */

  Component_PathAnimation.prototype.update = function() {
    var current, curve, effect, i, j, k, len, len1, len2, point, ref, ref1, ref2, value;
    Component_PathAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    value = this.easing.value;
    point = this.path.curveLength / 100 * value;
    ref = this.path.curveLengths;
    for (i = j = 0, len1 = ref.length; j < len1; i = ++j) {
      len = ref[i];
      if (point <= len.len + len.offset) {
        current = {
          percent: (point - len.offset) / len.len,
          path: this.path.data[i]
        };
        break;
      }
    }
    curve = current.path;
    point = this.quadraticBezierPoint(curve.pt1, curve.cpt, curve.pt2, current.percent);
    switch (this.animationType) {
      case 0:
        this.object.dstRect.x = Math.round(point.x - this.path.data[0].pt1.x + this.startPosition.x);
        this.object.dstRect.y = Math.round(point.y - this.path.data[0].pt1.y + this.startPosition.y);
        break;
      case 2:
        this.object.visual.scroll.x = Math.round(point.x - this.path.data[0].pt1.x + this.startPosition.x);
        this.object.visual.scroll.y = Math.round(point.y - this.path.data[0].pt1.y + this.startPosition.y);
    }
    ref1 = this.effects;
    for (k = 0, len2 = ref1.length; k < len2; k++) {
      effect = ref1[k];
      if ((!this.effect || (this.effect !== effect && ((ref2 = this.effect) != null ? ref2.time : void 0) <= effect.time)) && this.easing.time >= effect.time) {
        this.effect = effect;
        AudioManager.playSound(this.effect.sound);
      }
    }
    if (!this.easing.isRunning) {
      switch (this.loopType) {
        case 0:
          return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
        case 1:
          this.easing.startValue(0, 100, this.easing.duration);
          this.startPosition.x = this.object.dstRect.x;
          return this.startPosition.y = this.object.dstRect.y;
        case 2:
          this.effect = null;
          return this.easing.startValue(this.easing.value, 100 - this.easing.value * 2, this.easing.duration);
      }
    }
  };


  /**
  * Starts the path-animation. Scrolls the game object along the path.
  *
  * @method scrollPath
  * @param {Object} path The path to follow.
  * @param {gs.AnimationLoopType} loopType The loop-Type.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_PathAnimation.prototype.scroll = function(path, loopType, duration, easingType, effects, callback) {
    this.start(path, loopType, duration, easingType, callback);
    return this.animationType = 2;
  };


  /**
  * Starts the path-animation.
  *
  * @method movePath
  * @param {Object} path The path to follow.
  * @param {gs.AnimationLoopType} loopType The loop-Type.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_PathAnimation.prototype.start = function(path, loopType, duration, easingType, effects, callback) {
    var curve, j, l, len1, length, lengths, point, ref, x, y;
    this.effects = effects || [];
    this.effect = null;
    this.callback = callback;
    this.loopType = loopType;
    this.path = {
      data: path || [],
      curveLength: null,
      curveLengths: null
    };
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    this.easing.startValue(0, 100, duration);
    this.startPosition = {
      x: this.object.dstRect.x,
      y: this.object.dstRect.y
    };
    if (this.path.data.length === 0) {
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else if (duration === 0) {
      point = this.path.data.last().pt2;
      this.object.dstRect.x = Math.round(point.x - this.path.data[0].pt1.x + this.startPosition.x);
      this.object.dstRect.y = Math.round(point.y - this.path.data[0].pt1.y + this.startPosition.y);
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else if (this.path.curveLength == null) {
      length = 0;
      lengths = [];
      ref = this.path.data;
      for (j = 0, len1 = ref.length; j < len1; j++) {
        curve = ref[j];
        x = (curve.cpt.x - curve.pt1.x) + (curve.pt2.x - curve.cpt.x);
        y = (curve.cpt.y - curve.pt1.y) + (curve.pt2.y - curve.cpt.y);
        l = Math.round(Math.sqrt(x * x + y * y));
        lengths.push({
          len: l,
          offset: length
        });
        length += l;
      }
      this.path.curveLength = length;
      return this.path.curveLengths = lengths;
    }
  };

  return Component_PathAnimation;

})(gs.Component_Animation);

gs.Component_PathAnimation = Component_PathAnimation;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_PathAnimation_52.js

/**
* Different methods of field-animation.
*
* @module gs
* @class AnimationLoopType
* @memberof gs
* @static
* @final
 */
var Component_FieldAnimation, FieldAnimationMethod,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

FieldAnimationMethod = (function() {
  function FieldAnimationMethod() {}

  FieldAnimationMethod.initialize = function() {

    /**
    * Set the value calculated by the easing-logic.
    * @property SET
    * @static
    * @final
     */
    this.SET = 0;

    /**
    * Adds the value calculated by the easing-logic.
    * @property ADD
    * @static
    * @final
     */
    return this.ADD = 1;
  };

  return FieldAnimationMethod;

})();

FieldAnimationMethod.initialize();

gs.FieldAnimationMethod = FieldAnimationMethod;

Component_FieldAnimation = (function(superClass) {
  extend(Component_FieldAnimation, superClass);


  /**
  * Executes a field-animation. A field-animation animates a certain
  * property of the game-object as long as it is a number-property.
  *
  * @module gs
  * @class Component_FieldAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_FieldAnimation(data) {
    Component_FieldAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The field to animate as property-path.
    * @property field
    * @type string
     */
    this.field = data != null ? data.field : void 0;

    /**
    * The animation-method.
    * @property method
    * @type gs.FieldAnimationMethod
    * @default gs.FieldAnimationMethod.SET
     */
    this.method = data != null ? data.method : void 0;

    /**
    * The easing-object used for the animation.
    * @property easing
    * @type gs.Easing
     */
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
  }


  /**
  * Serializes the path-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_FieldAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing,
      method: this.method,
      field: this.field
    };
  };


  /**
  * Updates the field-animation.
  *
  * @method update
   */

  Component_FieldAnimation.prototype.update = function() {
    var value;
    Component_FieldAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    value = ui.Component_BindingHandler.resolveFieldPath(this.object, this.field);
    if (!this.method) {
      value.set(this.object, this.easing.value);
    } else {
      value.set(this.object, value.get(this.object) + this.easing.value);
    }
    if (!this.easing.isRunning) {
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Starts the field-animation.
  *
  * @method start
  * @param {number} Value The target value.
  * @param {string} field The name of the field/property.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_FieldAnimation.prototype.start = function(value, field, duration, easingType, callback) {
    var startValue, valueField;
    this.callback = callback;
    this.field = field;
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    if (duration === 0) {
      valueField = ui.Component_BindingHandler.resolveFieldPath(this.object, this.field);
      valueField.set(this.object, value);
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      startValue = ui.Component_BindingHandler.fieldValue(this.object, field);
      return this.easing.startValue(startValue, value - startValue, duration);
    }
  };

  return Component_FieldAnimation;

})(gs.Component_Animation);

gs.Component_FieldAnimation = Component_FieldAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFRQTs7Ozs7Ozs7O0FBQUEsSUFBQSw4Q0FBQTtFQUFBOzs7QUFTTTs7O0VBQ0Ysb0JBQUMsQ0FBQSxVQUFELEdBQWEsU0FBQTs7QUFDVDs7Ozs7O0lBTUEsSUFBQyxDQUFBLEdBQUQsR0FBTzs7QUFFUDs7Ozs7O1dBTUEsSUFBQyxDQUFBLEdBQUQsR0FBTztFQWZFOzs7Ozs7QUFpQmpCLG9CQUFvQixDQUFDLFVBQXJCLENBQUE7O0FBQ0EsRUFBRSxDQUFDLG9CQUFILEdBQTBCOztBQUVwQjs7OztBQUNGOzs7Ozs7Ozs7OztFQVVhLGtDQUFDLElBQUQ7SUFDVCwyREFBQSxTQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxLQUFELGtCQUFTLElBQUksQ0FBRTs7QUFFZjs7Ozs7O0lBTUEsSUFBQyxDQUFBLE1BQUQsa0JBQVUsSUFBSSxDQUFFOztBQUVoQjs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsRUFBRSxDQUFDLE1BQUgsQ0FBVSxJQUFWLGlCQUFnQixJQUFJLENBQUUsZUFBdEI7RUF2Qkw7OztBQXlCYjs7Ozs7O3FDQUtBLFlBQUEsR0FBYyxTQUFBO1dBQ1Y7TUFBQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BQVQ7TUFDQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BRFQ7TUFFQSxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBRlI7O0VBRFU7OztBQU1kOzs7Ozs7cUNBS0EsTUFBQSxHQUFRLFNBQUE7QUFDSixRQUFBO0lBQUEsc0RBQUEsU0FBQTtJQUNBLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7QUFBOEIsYUFBOUI7O0lBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLENBQUE7SUFDQSxLQUFBLEdBQVEsRUFBRSxDQUFDLHdCQUF3QixDQUFDLGdCQUE1QixDQUE2QyxJQUFDLENBQUEsTUFBOUMsRUFBc0QsSUFBQyxDQUFBLEtBQXZEO0lBRVIsSUFBRyxDQUFDLElBQUMsQ0FBQSxNQUFMO01BQ0ksS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFDLENBQUEsTUFBWCxFQUFtQixJQUFDLENBQUEsTUFBTSxDQUFDLEtBQTNCLEVBREo7S0FBQSxNQUFBO01BR0ksS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFDLENBQUEsTUFBWCxFQUFtQixLQUFLLENBQUMsR0FBTixDQUFVLElBQUMsQ0FBQSxNQUFYLENBQUEsR0FBcUIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFoRCxFQUhKOztJQUtBLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7bURBQ0ksSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVEsZUFEeEI7O0VBWkk7OztBQWVSOzs7Ozs7Ozs7OztxQ0FVQSxLQUFBLEdBQU8sU0FBQyxLQUFELEVBQVEsS0FBUixFQUFlLFFBQWYsRUFBeUIsVUFBekIsRUFBcUMsUUFBckM7QUFDSCxRQUFBO0lBQUEsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLElBQUMsQ0FBQSxLQUFELEdBQVM7SUFDVCxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsR0FBZSxVQUFBLElBQWMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFZLENBQUEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFmO0lBRXBELElBQUcsUUFBQSxLQUFZLENBQWY7TUFDSSxVQUFBLEdBQWEsRUFBRSxDQUFDLHdCQUF3QixDQUFDLGdCQUE1QixDQUE2QyxJQUFDLENBQUEsTUFBOUMsRUFBc0QsSUFBQyxDQUFBLEtBQXZEO01BQ2IsVUFBVSxDQUFDLEdBQVgsQ0FBZSxJQUFDLENBQUEsTUFBaEIsRUFBd0IsS0FBeEI7bURBQ0EsSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVEsZUFIeEI7S0FBQSxNQUFBO01BS0ksVUFBQSxHQUFhLEVBQUUsQ0FBQyx3QkFBd0IsQ0FBQyxVQUE1QixDQUF1QyxJQUFDLENBQUEsTUFBeEMsRUFBZ0QsS0FBaEQ7YUFDYixJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBbUIsVUFBbkIsRUFBK0IsS0FBQSxHQUFRLFVBQXZDLEVBQW1ELFFBQW5ELEVBTko7O0VBTEc7Ozs7R0E3RTRCLEVBQUUsQ0FBQzs7QUEwRjFDLEVBQUUsQ0FBQyx3QkFBSCxHQUE4QiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tcG9uZW50X0ZpZWxkQW5pbWF0aW9uXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5cbiMjIypcbiogRGlmZmVyZW50IG1ldGhvZHMgb2YgZmllbGQtYW5pbWF0aW9uLlxuKlxuKiBAbW9kdWxlIGdzXG4qIEBjbGFzcyBBbmltYXRpb25Mb29wVHlwZVxuKiBAbWVtYmVyb2YgZ3NcbiogQHN0YXRpY1xuKiBAZmluYWxcbiMjI1xuY2xhc3MgRmllbGRBbmltYXRpb25NZXRob2RcbiAgICBAaW5pdGlhbGl6ZTogLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFNldCB0aGUgdmFsdWUgY2FsY3VsYXRlZCBieSB0aGUgZWFzaW5nLWxvZ2ljLlxuICAgICAgICAqIEBwcm9wZXJ0eSBTRVRcbiAgICAgICAgKiBAc3RhdGljXG4gICAgICAgICogQGZpbmFsXG4gICAgICAgICMjI1xuICAgICAgICBAU0VUID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEFkZHMgdGhlIHZhbHVlIGNhbGN1bGF0ZWQgYnkgdGhlIGVhc2luZy1sb2dpYy5cbiAgICAgICAgKiBAcHJvcGVydHkgQUREXG4gICAgICAgICogQHN0YXRpY1xuICAgICAgICAqIEBmaW5hbFxuICAgICAgICAjIyNcbiAgICAgICAgQEFERCA9IDFcbiAgICBcbkZpZWxkQW5pbWF0aW9uTWV0aG9kLmluaXRpYWxpemUoKVxuZ3MuRmllbGRBbmltYXRpb25NZXRob2QgPSBGaWVsZEFuaW1hdGlvbk1ldGhvZFxuXG5jbGFzcyBDb21wb25lbnRfRmllbGRBbmltYXRpb24gZXh0ZW5kcyBncy5Db21wb25lbnRfQW5pbWF0aW9uXG4gICAgIyMjKlxuICAgICogRXhlY3V0ZXMgYSBmaWVsZC1hbmltYXRpb24uIEEgZmllbGQtYW5pbWF0aW9uIGFuaW1hdGVzIGEgY2VydGFpblxuICAgICogcHJvcGVydHkgb2YgdGhlIGdhbWUtb2JqZWN0IGFzIGxvbmcgYXMgaXQgaXMgYSBudW1iZXItcHJvcGVydHkuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9GaWVsZEFuaW1hdGlvblxuICAgICogQGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKGRhdGEpIC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGZpZWxkIHRvIGFuaW1hdGUgYXMgcHJvcGVydHktcGF0aC5cbiAgICAgICAgKiBAcHJvcGVydHkgZmllbGRcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgICAgIyMjXG4gICAgICAgIEBmaWVsZCA9IGRhdGE/LmZpZWxkXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGFuaW1hdGlvbi1tZXRob2QuXG4gICAgICAgICogQHByb3BlcnR5IG1ldGhvZFxuICAgICAgICAqIEB0eXBlIGdzLkZpZWxkQW5pbWF0aW9uTWV0aG9kXG4gICAgICAgICogQGRlZmF1bHQgZ3MuRmllbGRBbmltYXRpb25NZXRob2QuU0VUXG4gICAgICAgICMjI1xuICAgICAgICBAbWV0aG9kID0gZGF0YT8ubWV0aG9kXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGVhc2luZy1vYmplY3QgdXNlZCBmb3IgdGhlIGFuaW1hdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgZWFzaW5nXG4gICAgICAgICogQHR5cGUgZ3MuRWFzaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAZWFzaW5nID0gbmV3IGdzLkVhc2luZyhudWxsLCBkYXRhPy5lYXNpbmcpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFNlcmlhbGl6ZXMgdGhlIHBhdGgtYW5pbWF0aW9uIGludG8gYSBkYXRhLWJ1bmRsZS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHRvRGF0YUJ1bmRsZVxuICAgICMjI1xuICAgIHRvRGF0YUJ1bmRsZTogLT5cbiAgICAgICAgZWFzaW5nOiBAZWFzaW5nLFxuICAgICAgICBtZXRob2Q6IEBtZXRob2QsXG4gICAgICAgIGZpZWxkOiBAZmllbGRcbiAgICAgXG4gICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIGZpZWxkLWFuaW1hdGlvbi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjIyAgIFxuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgaWYgbm90IEBlYXNpbmcuaXNSdW5uaW5nIHRoZW4gcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBAZWFzaW5nLnVwZGF0ZVZhbHVlKClcbiAgICAgICAgdmFsdWUgPSB1aS5Db21wb25lbnRfQmluZGluZ0hhbmRsZXIucmVzb2x2ZUZpZWxkUGF0aChAb2JqZWN0LCBAZmllbGQpXG4gICAgICAgIFxuICAgICAgICBpZiAhQG1ldGhvZCAjIFNldFxuICAgICAgICAgICAgdmFsdWUuc2V0KEBvYmplY3QsIEBlYXNpbmcudmFsdWUpXG4gICAgICAgIGVsc2UgICAgICAgICMgQWRkXG4gICAgICAgICAgICB2YWx1ZS5zZXQoQG9iamVjdCwgdmFsdWUuZ2V0KEBvYmplY3QpICsgQGVhc2luZy52YWx1ZSlcbiAgICAgICAgICAgIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmdcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICAgXG4gICAgIyMjKlxuICAgICogU3RhcnRzIHRoZSBmaWVsZC1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCBzdGFydFxuICAgICogQHBhcmFtIHtudW1iZXJ9IFZhbHVlIFRoZSB0YXJnZXQgdmFsdWUuXG4gICAgKiBAcGFyYW0ge3N0cmluZ30gZmllbGQgVGhlIG5hbWUgb2YgdGhlIGZpZWxkL3Byb3BlcnR5LlxuICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBmcmFtZXMuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZWFzaW5nVHlwZSBUaGUgZWFzaW5nLXR5cGUuXG4gICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIEFuIG9wdGlvbmFsIGNhbGxiYWNrIGNhbGxlZCBpZiBibGVuZGluZyBpcyBmaW5pc2hlZC4gXG4gICAgIyMjICAgXG4gICAgc3RhcnQ6ICh2YWx1ZSwgZmllbGQsIGR1cmF0aW9uLCBlYXNpbmdUeXBlLCBjYWxsYmFjaykgLT5cbiAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgQGZpZWxkID0gZmllbGRcbiAgICAgICAgQGVhc2luZy50eXBlID0gZWFzaW5nVHlwZSB8fCBncy5FYXNpbmdzLkVBU0VfTElORUFSW2dzLkVhc2luZ1R5cGVzLkVBU0VfSU5dXG4gICAgICAgIFxuICAgICAgICBpZiBkdXJhdGlvbiA9PSAwXG4gICAgICAgICAgICB2YWx1ZUZpZWxkID0gdWkuQ29tcG9uZW50X0JpbmRpbmdIYW5kbGVyLnJlc29sdmVGaWVsZFBhdGgoQG9iamVjdCwgQGZpZWxkKVxuICAgICAgICAgICAgdmFsdWVGaWVsZC5zZXQoQG9iamVjdCwgdmFsdWUpXG4gICAgICAgICAgICBAY2FsbGJhY2s/KEBvYmplY3QsIHRoaXMpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIHN0YXJ0VmFsdWUgPSB1aS5Db21wb25lbnRfQmluZGluZ0hhbmRsZXIuZmllbGRWYWx1ZShAb2JqZWN0LCBmaWVsZClcbiAgICAgICAgICAgIEBlYXNpbmcuc3RhcnRWYWx1ZShzdGFydFZhbHVlLCB2YWx1ZSAtIHN0YXJ0VmFsdWUsIGR1cmF0aW9uKVxuICAgICAgICBcbmdzLkNvbXBvbmVudF9GaWVsZEFuaW1hdGlvbiA9IENvbXBvbmVudF9GaWVsZEFuaW1hdGlvbiJdfQ==
//# sourceURL=Component_FieldAnimation_74.js
var Component_MoveAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_MoveAnimation = (function(superClass) {
  extend(Component_MoveAnimation, superClass);


  /**
  * Executes a move-animation on a game-object.
  *
  * @module gs
  * @class Component_MoveAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_MoveAnimation(data) {
    Component_MoveAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The easing-object used for the animation.
    * @property easing
    * @type gs.Easing
     */
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);

    /**
    * The move-animation type (move-in, move-out, etc.).
    * @property animationType
    * @type gs.MoveAnimationType
     */
    this.animationType = (data != null ? data.animationType : void 0) || 0;
  }


  /**
  * Serializes the move-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_MoveAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing,
      animationType: this.animationType
    };
  };


  /**
  * Updates the move-animation.
  *
  * @method update
   */

  Component_MoveAnimation.prototype.update = function() {
    Component_MoveAnimation.__super__.update.call(this);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updatePosition();
    this.updateCoordinates();
    if (!this.easing.isRunning) {
      if (!this.easing.isEndless) {
        this.object.dstRect.x = Math.round(this.object.dstRect.x);
        this.object.dstRect.y = Math.round(this.object.dstRect.y);
      }
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Updates the game object's coordinates depending on animation type.
  *
  * @method updateCoordinates
  * @protected
   */

  Component_MoveAnimation.prototype.updateCoordinates = function() {
    switch (this.animationType) {
      case 0:
        this.object.offset.x = this.easing.x;
        return this.object.offset.y = this.easing.y;
      case 1:
        this.object.dstRect.x = this.easing.x;
        return this.object.dstRect.y = this.easing.y;
      case 2:
        this.object.visual.scroll.x = Math.round(this.easing.x);
        return this.object.visual.scroll.y = Math.round(this.easing.y);
    }
  };


  /**
  * Scrolls the game object's content with a specified speed if supported.
  *
  * @method scroll
  * @param {number} speedX The speed on x-axis in pixels per frame.
  * @param {number} speedY The speed on y-axis in pixels per frame.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type used for the animation.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MoveAnimation.prototype.scroll = function(speedX, speedY, duration, easingType, callback) {
    this.move(speedX, speedY, duration, easingType, callback);
    return this.animationType = 2;
  };


  /**
  * Scrolls the game object to a specified position.
  *
  * @method scrollTo
  * @param {number} x The x-coordinate of the position.
  * @param {number} y The y-coordinate of the position.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MoveAnimation.prototype.scrollTo = function(x, y, duration, easingType, callback) {
    this.animationType = 2;
    this.callback = callback;
    if (this.object.visual.scroll.x === x && this.object.visual.scroll.y === y) {
      return;
    }
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    if (duration === 0) {
      this.object.visual.scroll.x = x;
      this.object.visual.scroll.y = y;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      this.easing.start(this.object.visual.scroll.x, this.object.visual.scroll.y, x, y, duration);
      this.targetX = x;
      return this.targetY = y;
    }
  };


  /**
  * Moves the game object with a specified speed.
  *
  * @method move
  * @param {number} speedX The speed on x-axis in pixels per frame.
  * @param {number} speedY The speed on y-axis in pixels per frame.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type used for the animation.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MoveAnimation.prototype.move = function(speedX, speedY, duration, easingType, callback) {
    this.animationType = 1;
    this.targetX = duration * speedX;
    this.targetY = duration * speedY;
    this.callback = callback;
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    if (duration === 0) {
      return this.easing.startEndless(speedX, speedY);
    } else {
      return this.easing.start(this.object.dstRect.x, this.object.dstRect.y, this.targetX, this.targetY, duration);
    }
  };


  /**
  * Moves the game object to a specified position.
  *
  * @method moveTo
  * @param {number} x The x-coordinate of the position.
  * @param {number} y The y-coordinate of the position.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MoveAnimation.prototype.moveTo = function(x, y, duration, easingType, callback) {
    this.animationType = 1;
    this.callback = callback;
    if (this.object.dstRect.x === x && this.object.dstRect.y === y) {
      return;
    }
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    if (duration === 0) {
      this.easing.x = x;
      this.easing.y = y;
      return this.updateCoordinates();
    } else {
      this.easing.start(this.object.dstRect.x, this.object.dstRect.y, x, y, duration);
      this.targetX = x;
      return this.targetY = y;
    }
  };


  /**
  * Lets a game object appear on screen from left, top, right or bottom using 
  * a move-animation
  *
  * @method moveIn
  * @param {number} x The x-coordinate of the target-position.
  * @param {number} y The y-coordinate of the target-position.
  * @param {number} type The movement-direction from where the game object should move-in.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MoveAnimation.prototype.moveIn = function(x, y, type, duration, easing, callback) {
    var height, rect, width;
    this.animationType = 0;
    this.object.offset.x = 0;
    this.object.offset.y = 0;
    this.object.update();
    if (duration === 0) {
      return typeof callback === "function" ? callback(this.object, this) : void 0;
    }
    this.easing.type = easing;
    this.callback = callback;
    rect = this.object.angle != null ? this.object.dstRect.rotate(this.object.angle) : this.object.dstRect;
    width = rect.width * this.object.zoom.x;
    height = rect.height * this.object.zoom.y;
    switch (type) {
      case 0:
        this.object.offset.y = 0;
        this.object.offset.x = -(this.object.dstRect.x + width + this.object.origin.x);
        break;
      case 1:
        this.object.offset.y = -(this.object.dstRect.y + height + this.object.origin.y);
        this.object.offset.x = 0;
        break;
      case 2:
        this.object.offset.x = (this.object.viewport || Graphics.viewport).rect.width - this.object.dstRect.x;
        this.object.offset.y = 0;
        break;
      case 3:
        this.object.offset.x = 0;
        this.object.offset.y = (this.object.viewport || Graphics.viewport).rect.height - this.object.dstRect.y;
    }
    this.object.update();
    return this.easing.start(this.object.offset.x, this.object.offset.y, 0, 0, duration);
  };


  /**
  * Lets a game object disappear from screen to the left, top, right or bottom using 
  * a move-animation
  *
  * @method moveOut
  * @param {number} type The movement-direction in which the game object should move-out.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_MoveAnimation.prototype.moveOut = function(type, duration, easing, callback) {
    var height, rect, viewport, width, x, y;
    if (duration === 0) {
      return typeof callback === "function" ? callback(this.object, this) : void 0;
    }
    this.animationType = 0;
    this.easing.type = easing;
    this.callback = callback;
    x = 0;
    y = 0;
    viewport = Graphics.viewport;
    rect = this.object.angle != null ? this.object.dstRect.rotate(this.object.angle) : this.object.dstRect;
    width = rect.width * this.object.zoom.x;
    height = rect.height * this.object.zoom.y;
    switch (type) {
      case 0:
        x = -(this.object.origin.x + this.object.dstRect.x + width);
        y = 0;
        break;
      case 1:
        y = -(this.object.origin.y + this.object.dstRect.y + height);
        x = 0;
        break;
      case 2:
        x = (this.object.viewport || Graphics.viewport).rect.width;
        y = this.object.dstRect.y;
        break;
      case 3:
        y = (this.object.viewport || Graphics.viewport).rect.height;
        x = this.object.dstRect.x;
    }
    if (duration === 0) {
      this.object.offset.x = x;
      this.object.offset.y = y;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      return this.easing.start(this.object.offset.x, this.object.offset.y, x, y, duration);
    }
  };

  return Component_MoveAnimation;

})(gs.Component_Animation);

gs.Component_MoveAnimation = Component_MoveAnimation;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_MoveAnimation_76.js
var Component_RotateAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_RotateAnimation = (function(superClass) {
  extend(Component_RotateAnimation, superClass);


  /**
  * Executes a rotate-animation on a game-object.
  *
  * @module gs
  * @class Component_RotateAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_RotateAnimation(data) {
    Component_RotateAnimation.__super__.constructor.apply(this, arguments);
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
    this.callback = null;
  }


  /**
  * Serializes the rotate-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_RotateAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing
    };
  };


  /**
  * Updates the rotate-animation.
  *
  * @method update
   */

  Component_RotateAnimation.prototype.update = function() {
    Component_RotateAnimation.__super__.update.call(this);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    this.object.angle = this.easing.value;
    if (!this.easing.isRunning && !this.easing.isEndless) {
      this.object.angle = Math.round(this.object.angle);
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Starts the rotate-animation.
  *
  * @method start
  * @param {gs.RotationDirection} direction The rotation direction.
  * @param {number} speed The rotation speed in degrees per frame.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if the animation is finished.
   */

  Component_RotateAnimation.prototype.start = function(direction, speed, duration, easingType, callback) {
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    this.callback = callback;
    if (direction === 1) {
      speed = -speed;
    }
    if (duration === 0 || GameManager.tempSettings.skip) {
      this.object.angle += speed * duration;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      return this.easing.startValue(this.object.angle, (this.object.angle + speed * duration) - this.object.angle, duration);
    }
  };

  return Component_RotateAnimation;

})(gs.Component_Animation);

gs.Component_RotateAnimation = Component_RotateAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEseUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLG1DQUFDLElBQUQ7SUFDVCw0REFBQSxTQUFBO0lBRUEsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixpQkFBZ0IsSUFBSSxDQUFFLGVBQXRCO0lBQ2QsSUFBQyxDQUFBLFFBQUQsR0FBWTtFQUpIOzs7QUFNYjs7Ozs7O3NDQUtBLFlBQUEsR0FBYyxTQUFBO1dBQ1Y7TUFBQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BQVQ7O0VBRFU7OztBQUdkOzs7Ozs7c0NBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSixvREFBQTtJQUNBLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7QUFBOEIsYUFBOUI7O0lBRUEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLENBQUE7SUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsR0FBZ0IsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUV4QixJQUFHLENBQUksSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUFaLElBQTBCLENBQUksSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUF6QztNQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixHQUFnQixJQUFJLENBQUMsS0FBTCxDQUFXLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBbkI7bURBQ2hCLElBQUMsQ0FBQSxTQUFVLElBQUMsQ0FBQSxRQUFRLGVBRnhCOztFQVJJOzs7QUFZUjs7Ozs7Ozs7Ozs7c0NBVUEsS0FBQSxHQUFPLFNBQUMsU0FBRCxFQUFZLEtBQVosRUFBbUIsUUFBbkIsRUFBNkIsVUFBN0IsRUFBeUMsUUFBekM7SUFDSCxJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsR0FBZSxVQUFBLElBQWMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFZLENBQUEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFmO0lBQ3BELElBQUMsQ0FBQSxRQUFELEdBQVk7SUFFWixJQUFHLFNBQUEsS0FBYSxDQUFoQjtNQUNJLEtBQUEsR0FBUSxDQUFDLE1BRGI7O0lBR0EsSUFBRyxRQUFBLEtBQVksQ0FBWixJQUFpQixXQUFXLENBQUMsWUFBWSxDQUFDLElBQTdDO01BQ0ksSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFSLElBQWlCLEtBQUEsR0FBUTttREFDekIsSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVEsZUFGeEI7S0FBQSxNQUFBO2FBSUksSUFBQyxDQUFBLE1BQU0sQ0FBQyxVQUFSLENBQW1CLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBM0IsRUFBa0MsQ0FBQyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsR0FBZ0IsS0FBQSxHQUFRLFFBQXpCLENBQUEsR0FBcUMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUEvRSxFQUFzRixRQUF0RixFQUpKOztFQVBHOzs7O0dBbkQ2QixFQUFFLENBQUM7O0FBZ0UzQyxFQUFFLENBQUMseUJBQUgsR0FBK0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9Sb3RhdGVBbmltYXRpb25cbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIENvbXBvbmVudF9Sb3RhdGVBbmltYXRpb24gZXh0ZW5kcyBncy5Db21wb25lbnRfQW5pbWF0aW9uXG4gICAgIyMjKlxuICAgICogRXhlY3V0ZXMgYSByb3RhdGUtYW5pbWF0aW9uIG9uIGEgZ2FtZS1vYmplY3QuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9Sb3RhdGVBbmltYXRpb25cbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudF9BbmltYXRpb25cbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgQGVhc2luZyA9IG5ldyBncy5FYXNpbmcobnVsbCwgZGF0YT8uZWFzaW5nKVxuICAgICAgICBAY2FsbGJhY2sgPSBudWxsXG4gICAgXG4gICAgIyMjKlxuICAgICogU2VyaWFsaXplcyB0aGUgcm90YXRlLWFuaW1hdGlvbiBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAjIyMgICAgICBcbiAgICB0b0RhdGFCdW5kbGU6IC0+XG4gICAgICAgIGVhc2luZzogQGVhc2luZ1xuICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIHJvdGF0ZS1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCB1cGRhdGVcbiAgICAjIyMgICAgICBcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgaWYgbm90IEBlYXNpbmcuaXNSdW5uaW5nIHRoZW4gcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBAZWFzaW5nLnVwZGF0ZVZhbHVlKClcbiAgICAgICAgXG4gICAgICAgIEBvYmplY3QuYW5nbGUgPSBAZWFzaW5nLnZhbHVlXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmcgYW5kIG5vdCBAZWFzaW5nLmlzRW5kbGVzc1xuICAgICAgICAgICAgQG9iamVjdC5hbmdsZSA9IE1hdGgucm91bmQoQG9iamVjdC5hbmdsZSlcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcblxuICAgICMjIypcbiAgICAqIFN0YXJ0cyB0aGUgcm90YXRlLWFuaW1hdGlvbi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHN0YXJ0XG4gICAgKiBAcGFyYW0ge2dzLlJvdGF0aW9uRGlyZWN0aW9ufSBkaXJlY3Rpb24gVGhlIHJvdGF0aW9uIGRpcmVjdGlvbi5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBzcGVlZCBUaGUgcm90YXRpb24gc3BlZWQgaW4gZGVncmVlcyBwZXIgZnJhbWUuXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIGluIGZyYW1lcy5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBlYXNpbmdUeXBlIFRoZSBlYXNpbmctdHlwZS5cbiAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gQW4gb3B0aW9uYWwgY2FsbGJhY2sgY2FsbGVkIGlmIHRoZSBhbmltYXRpb24gaXMgZmluaXNoZWQuIFxuICAgICMjIyBcbiAgICBzdGFydDogKGRpcmVjdGlvbiwgc3BlZWQsIGR1cmF0aW9uLCBlYXNpbmdUeXBlLCBjYWxsYmFjaykgLT5cbiAgICAgICAgQGVhc2luZy50eXBlID0gZWFzaW5nVHlwZSB8fCBncy5FYXNpbmdzLkVBU0VfTElORUFSW2dzLkVhc2luZ1R5cGVzLkVBU0VfSU5dXG4gICAgICAgIEBjYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgICAgIFxuICAgICAgICBpZiBkaXJlY3Rpb24gPT0gMVxuICAgICAgICAgICAgc3BlZWQgPSAtc3BlZWRcbiAgICAgICAgXG4gICAgICAgIGlmIGR1cmF0aW9uID09IDAgb3IgR2FtZU1hbmFnZXIudGVtcFNldHRpbmdzLnNraXBcbiAgICAgICAgICAgIEBvYmplY3QuYW5nbGUgKz0gc3BlZWQgKiBkdXJhdGlvblxuICAgICAgICAgICAgQGNhbGxiYWNrPyhAb2JqZWN0LCB0aGlzKVxuICAgICAgICBlbHNlXG4gICAgICAgICAgICBAZWFzaW5nLnN0YXJ0VmFsdWUoQG9iamVjdC5hbmdsZSwgKEBvYmplY3QuYW5nbGUgKyBzcGVlZCAqIGR1cmF0aW9uKSAtIEBvYmplY3QuYW5nbGUsIGR1cmF0aW9uKVxuICAgICAgICBcbmdzLkNvbXBvbmVudF9Sb3RhdGVBbmltYXRpb24gPSBDb21wb25lbnRfUm90YXRlQW5pbWF0aW9uIl19
//# sourceURL=Component_RotateAnimation_92.js
var Component_FrameAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_FrameAnimation = (function(superClass) {
  extend(Component_FrameAnimation, superClass);


  /**
  * Executes a classic image-frame animation defined in Database. The image in regular
  * contains multiple sub-images (frames) which are then animated
  * by modifying the <b>srcRect</b> property of the game object.
  *
  * @module gs
  * @class Component_FrameAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
  * @param {Object} record - The animation database-record.
   */

  function Component_FrameAnimation(record) {
    Component_FrameAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The database record.
    * @property record
    * @type Object
     */
    this.record = null;

    /**
    * The name of the animation defined in Database.
    * @property name
    * @type string
     */
    this.name = null;

    /**
    * The amount of frames on x-axis.
    * @property framesX
    * @type number
     */
    this.framesX = 1;

    /**
    * The amount of frames on y-axis.
    * @property framesY
    * @type number
     */
    this.framesY = 1;

    /**
    * The frame-range to animation like only Frame 4 - 6 for example.
    * @property frameRange
    * @type gs.Range
     */
    this.frameRange = {
      start: 0,
      end: 0
    };

    /**
    * The frame-range used if the animation gets repeated.
    * @property repetitionFrameRange
    * @type gs.Range
     */
    this.repetitionFrameRange = this.frameRange;

    /**
    * The amount of frames to animate.
    * @property frameCount
    * @type number
    * @protected
     */
    this.frameCount = 1;

    /**
    * The graphic used as image for the animation.
    * @property graphic
    * @type Object
     */
    this.graphic = null;

    /**
    * Indicates if the animation repeats.
    * @property repeat
    * @type boolean
     */
    this.repeat = false;

    /**
    * The position of the animation on the target-object.
    * @property framesY
    * @type gs.AnimationPosition
     */
    this.position = 0;

    /**
    * The duration of a single frame.
    * @property frameDuration
    * @type number
    * @protected
     */
    this.frameDuration = 10;

    /**
    * A frame-counter needed for animation-process.
    * @property frameDuration
    * @type number
    * @protected
     */
    this.frameCounter = 0;

    /**
    * The duration of the animation.
    * @property frameDuration
    * @type number
     */
    this.duration = 10;

    /**
    * Indicates if the animation is currently running.
    * @property isRunning
    * @type boolean
     */
    this.isRunning = false;

    /**
    * Stores frame/pattern-offset.
    * @property patternOffset
    * @type number
    * @protected
     */
    this.patternOffset = this.frameRange.start;

    /**
    * Stores current frame/pattern
    * @property patternOffset
    * @type number
    * @protected
     */
    this.pattern = this.patternOffset;

    /**
    * Indicates if its still the first run of the animation.
    * @property firstRun
    * @type boolean
    * @protected
     */
    this.firstRun = true;
    if (record != null) {
      this.refresh(record);
      this.start();
    }
  }


  /**
  * Serializes the frame-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_FrameAnimation.prototype.toDataBundle = function() {
    return {
      name: this.name,
      framesX: this.framesX,
      framesY: this.framesY,
      frameRange: this.frameRange,
      repetitionFrameRange: this.repetitionFrameRange,
      frameCount: this.frameCount,
      graphic: this.graphic,
      repeat: this.repeat,
      position: this.position,
      frameDuration: this.frameDuration,
      frameCounter: this.frameCounter,
      duration: this.duration,
      isRunning: this.isRunning,
      patternOffset: this.patternOffset,
      pattern: this.pattern,
      firstRun: this.firstRun
    };
  };


  /**
  * Refreshes the animation from the specified database-record.
  *
  * @method refresh
  * @param {Object} record - The animation database-record.
   */

  Component_FrameAnimation.prototype.refresh = function(record) {

    /**
    * The images to animate through.
    * @property images
    * @type string[]
     */
    this.name = record.name;
    this.framesX = record.framesX || 1;
    this.framesY = record.framesY || 1;
    this.frameRange = {
      start: Math.min(record.frameRange.start, record.frameRange.end),
      end: Math.max(record.frameRange.start, record.frameRange.end)
    };
    this.repetitionFrameRange = record.useRepetitionFrameRange && (record.repetitionFrameRange != null) ? record.repetitionFrameRange : this.frameRange;
    this.frameCount = (this.frameRange.end - this.frameRange.start) + 1;
    this.graphic = record.graphic;
    this.repeat = record.repeat || false;
    this.position = record.position;
    this.frameDuration = record.duration != null ? Math.round(record.duration / this.frameCount) : 10;
    this.frameCounter = 0;
    this.duration = record.duration || 10;
    this.isRunning = false;
    this.patternOffset = this.frameRange.start;
    this.pattern = this.patternOffset;
    return this.firstRun = true;
  };


  /**
  * Starts the frame-animation.
  *
  * @method start
   */

  Component_FrameAnimation.prototype.start = function(callback) {
    this.callback = callback;
    this.isRunning = true;
    this.firstRun = true;
    this.frameCounter = 0;
    this.frameCount = (this.frameRange.end - this.frameRange.start) + 1;
    this.frameDuration = Math.round(this.duration / this.frameCount);
    return this.patternOffset = this.frameRange.start;
  };


  /**
  * Updates the frame-animation.
  *
  * @method update
   */

  Component_FrameAnimation.prototype.update = function() {
    var bitmap, column, frameHeight, frameWidth, row;
    Component_FrameAnimation.__super__.update.apply(this, arguments);
    if (!this.isRunning) {
      return;
    }
    if (this.frameCounter >= this.duration) {
      if (this.repeat) {
        this.firstRun = false;
        this.frameCounter = 0;
        this.frameCount = (this.repetitionFrameRange.end - this.repetitionFrameRange.start) + 1;
        this.frameDuration = Math.ceil(this.duration / this.frameCount);
        this.patternOffset = this.repetitionFrameRange.start;
      } else {
        this.isRunning = false;
        if (typeof this.onFinish === "function") {
          this.onFinish(this);
        }
        if (typeof this.callback === "function") {
          this.callback(this.object, this);
        }
        return;
      }
    }
    this.pattern = this.patternOffset + Math.floor(this.frameCounter / this.frameDuration);
    this.frameCounter++;
    if (this.object != null) {
      bitmap = this.object.bitmap || ResourceManager.getBitmap((this.object.imageFolder || "Graphics/Pictures") + "/" + this.object.image);
      if (bitmap != null) {
        frameWidth = Math.floor(bitmap.width / this.framesX);
        frameHeight = Math.floor(bitmap.height / this.framesY);
        column = this.pattern % this.framesX;
        row = Math.floor(this.pattern / this.framesX);
        this.object.srcRect.set(column * frameWidth, row * frameHeight, frameWidth, frameHeight);
        this.object.dstRect.width = this.object.srcRect.width;
        return this.object.dstRect.height = this.object.srcRect.height;
      }
    }
  };

  return Component_FrameAnimation;

})(gs.Component_Animation);

window.Component_FrameAnimation = Component_FrameAnimation;

gs.Component_FrameAnimation = Component_FrameAnimation;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_FrameAnimation_104.js
var Component_ZoomAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ZoomAnimation = (function(superClass) {
  extend(Component_ZoomAnimation, superClass);


  /**
  * Executes a zoom-animation on a game-object.
  *
  * @module gs
  * @class Component_ZoomAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_ZoomAnimation(data) {
    Component_ZoomAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The easing-object used for the animation.
    * @property easing
    * @type gs.Easing
     */
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
  }


  /**
  * Serializes the zoom-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_ZoomAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing
    };
  };


  /**
  * Updates the zoom-animation.
  *
  * @method update
   */

  Component_ZoomAnimation.prototype.update = function() {
    Component_ZoomAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updatePosition();
    this.object.zoom.x = this.easing.x;
    this.object.zoom.y = this.easing.y;
    if (!this.easing.isRunning) {
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Starts the zoom-animation.
  *
  * @method zoomTo
  * @param {number} x The x-axis zoom-factor.
  * @param {number} y The y-axis zoom-factor.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_ZoomAnimation.prototype.start = function(x, y, duration, easingType, callback) {
    this.callback = callback;
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    if (duration === 0) {
      this.object.zoom.x = x;
      this.object.zoom.y = y;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      return this.easing.start(this.object.zoom.x, this.object.zoom.y, x, y, duration);
    }
  };

  return Component_ZoomAnimation;

})(gs.Component_Animation);

gs.Component_ZoomAnimation = Component_ZoomAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsdUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLGlDQUFDLElBQUQ7SUFDVCwwREFBQSxTQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQVYsaUJBQWdCLElBQUksQ0FBRSxlQUF0QjtFQVJMOzs7QUFVYjs7Ozs7O29DQUtBLFlBQUEsR0FBYyxTQUFBO1dBQ1Y7TUFBQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BQVQ7O0VBRFU7OztBQUdkOzs7Ozs7b0NBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSixxREFBQSxTQUFBO0lBRUEsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjtBQUE4QixhQUE5Qjs7SUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLGNBQVIsQ0FBQTtJQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQWIsR0FBaUIsSUFBQyxDQUFBLE1BQU0sQ0FBQztJQUN6QixJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFiLEdBQWlCLElBQUMsQ0FBQSxNQUFNLENBQUM7SUFFekIsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjttREFDSSxJQUFDLENBQUEsU0FBVSxJQUFDLENBQUEsUUFBUSxlQUR4Qjs7RUFUSTs7O0FBWVI7Ozs7Ozs7Ozs7O29DQVVBLEtBQUEsR0FBTyxTQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sUUFBUCxFQUFpQixVQUFqQixFQUE2QixRQUE3QjtJQUNILElBQUMsQ0FBQSxRQUFELEdBQVk7SUFDWixJQUFDLENBQUEsTUFBTSxDQUFDLElBQVIsR0FBZSxVQUFBLElBQWMsRUFBRSxDQUFDLE9BQU8sQ0FBQyxXQUFZLENBQUEsRUFBRSxDQUFDLFdBQVcsQ0FBQyxPQUFmO0lBQ3BELElBQUcsUUFBQSxLQUFZLENBQWY7TUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFiLEdBQWlCO01BQ2pCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQWIsR0FBaUI7bURBQ2pCLElBQUMsQ0FBQSxTQUFVLElBQUMsQ0FBQSxRQUFRLGVBSHhCO0tBQUEsTUFBQTthQUtJLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixDQUFjLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQTNCLEVBQThCLElBQUMsQ0FBQSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQTNDLEVBQThDLENBQTlDLEVBQWlELENBQWpELEVBQW9ELFFBQXBELEVBTEo7O0VBSEc7Ozs7R0F2RDJCLEVBQUUsQ0FBQzs7QUFrRXpDLEVBQUUsQ0FBQyx1QkFBSCxHQUE2QiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogQ29tcG9uZW50X1pvb21BbmltYXRpb25cbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIENvbXBvbmVudF9ab29tQW5pbWF0aW9uIGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICMjIypcbiAgICAqIEV4ZWN1dGVzIGEgem9vbS1hbmltYXRpb24gb24gYSBnYW1lLW9iamVjdC5cbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgQ29tcG9uZW50X1pvb21BbmltYXRpb25cbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudF9BbmltYXRpb25cbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBlYXNpbmctb2JqZWN0IHVzZWQgZm9yIHRoZSBhbmltYXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IGVhc2luZ1xuICAgICAgICAqIEB0eXBlIGdzLkVhc2luZ1xuICAgICAgICAjIyNcbiAgICAgICAgQGVhc2luZyA9IG5ldyBncy5FYXNpbmcobnVsbCwgZGF0YT8uZWFzaW5nKVxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSB6b29tLWFuaW1hdGlvbiBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAjIyNcbiAgICB0b0RhdGFCdW5kbGU6IC0+XG4gICAgICAgIGVhc2luZzogQGVhc2luZ1xuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSB6b29tLWFuaW1hdGlvbi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjI1xuICAgIHVwZGF0ZTogLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIGlmIG5vdCBAZWFzaW5nLmlzUnVubmluZyB0aGVuIHJldHVyblxuICAgICAgICBcbiAgICAgICAgQGVhc2luZy51cGRhdGVQb3NpdGlvbigpXG4gICAgICAgIEBvYmplY3Quem9vbS54ID0gQGVhc2luZy54XG4gICAgICAgIEBvYmplY3Quem9vbS55ID0gQGVhc2luZy55XG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmdcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICBcbiAgICAjIyMqXG4gICAgKiBTdGFydHMgdGhlIHpvb20tYW5pbWF0aW9uLlxuICAgICpcbiAgICAqIEBtZXRob2Qgem9vbVRvXG4gICAgKiBAcGFyYW0ge251bWJlcn0geCBUaGUgeC1heGlzIHpvb20tZmFjdG9yLlxuICAgICogQHBhcmFtIHtudW1iZXJ9IHkgVGhlIHktYXhpcyB6b29tLWZhY3Rvci5cbiAgICAqIEBwYXJhbSB7bnVtYmVyfSBkdXJhdGlvbiBUaGUgZHVyYXRpb24gaW4gZnJhbWVzLlxuICAgICogQHBhcmFtIHtPYmplY3R9IGVhc2luZ1R5cGUgVGhlIGVhc2luZy10eXBlLlxuICAgICogQHBhcmFtIHtmdW5jdGlvbn0gW2NhbGxiYWNrXSBBbiBvcHRpb25hbCBjYWxsYmFjayBjYWxsZWQgaWYgYmxlbmRpbmcgaXMgZmluaXNoZWQuIFxuICAgICMjIyAgICBcbiAgICBzdGFydDogKHgsIHksIGR1cmF0aW9uLCBlYXNpbmdUeXBlLCBjYWxsYmFjaykgLT5cbiAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgQGVhc2luZy50eXBlID0gZWFzaW5nVHlwZSB8fCBncy5FYXNpbmdzLkVBU0VfTElORUFSW2dzLkVhc2luZ1R5cGVzLkVBU0VfSU5dXG4gICAgICAgIGlmIGR1cmF0aW9uID09IDBcbiAgICAgICAgICAgIEBvYmplY3Quem9vbS54ID0geFxuICAgICAgICAgICAgQG9iamVjdC56b29tLnkgPSB5XG4gICAgICAgICAgICBAY2FsbGJhY2s/KEBvYmplY3QsIHRoaXMpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBlYXNpbmcuc3RhcnQoQG9iamVjdC56b29tLngsIEBvYmplY3Quem9vbS55LCB4LCB5LCBkdXJhdGlvbilcblxuICAgICAgICBcbmdzLkNvbXBvbmVudF9ab29tQW5pbWF0aW9uID0gQ29tcG9uZW50X1pvb21BbmltYXRpb24iXX0=
//# sourceURL=Component_ZoomAnimation_113.js
var Component_ColorAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ColorAnimation = (function(superClass) {
  extend(Component_ColorAnimation, superClass);


  /**
  * Executes a color-animation on a game-object.
  *
  * @module gs
  * @class Component_MoveAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_ColorAnimation(data) {
    Component_ColorAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The easing-object used for the animation.
    * @property easing
    * @type gs.Easing
     */
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);

    /**
    * The start-color.
    * @property sourceColor
    * @type gs.Color
    * @protected
     */
    this.sourceColor = (data != null ? data.sourceColor : void 0) || new Color();

    /**
    * The end-color.
    * @property targetColor
    * @type gs.Color
    * @protected
     */
    this.targetColor = (data != null ? data.targetColor : void 0) || new Color();
  }


  /**
  * Serializes the color-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_ColorAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing,
      sourceColor: this.sourceColor,
      targetColor: this.targetColor
    };
  };


  /**
  * Updates the color-animation
  *
  * @method update
   */

  Component_ColorAnimation.prototype.update = function() {
    var a;
    Component_ColorAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    a = this.easing.value;
    this.object.color.red = Math.floor((this.sourceColor.red * a + this.targetColor.red * (255 - a)) / 255);
    this.object.color.green = Math.floor((this.sourceColor.green * a + this.targetColor.green * (255 - a)) / 255);
    this.object.color.blue = Math.floor((this.sourceColor.blue * a + this.targetColor.blue * (255 - a)) / 255);
    this.object.color.alpha = Math.floor((this.sourceColor.alpha * a + this.targetColor.alpha * (255 - a)) / 255);
    if (!this.easing.isRunning) {
      this.object.color = this.targetColor;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * Starts the color-animation.
  *
  * @method colorTo
  * @param {Color} color The target color.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback-function called when the animation is finished.
   */

  Component_ColorAnimation.prototype.start = function(color, duration, easingType, callback) {
    this.callback = callback;
    this.easing.type = easingType;
    if (this.object.color.red === color.red && this.object.color.green === color.green && this.object.color.blue === color.blue && this.object.color.alpha === color.alpha) {
      if (typeof this.callback === "function") {
        this.callback(this.object, this);
      }
    }
    if (duration === 0) {
      this.object.color = color;
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    } else {
      this.sourceColor = new Color(this.object.color);
      this.targetColor = color;
      return this.easing.startValue(255, -255, duration);
    }
  };

  return Component_ColorAnimation;

})(gs.Component_Animation);

gs.Component_ColorAnimation = Component_ColorAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsd0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLGtDQUFDLElBQUQ7SUFDVCwyREFBQSxTQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsTUFBSCxDQUFVLElBQVYsaUJBQWdCLElBQUksQ0FBRSxlQUF0Qjs7QUFFZDs7Ozs7O0lBTUEsSUFBQyxDQUFBLFdBQUQsbUJBQWUsSUFBSSxDQUFFLHFCQUFOLElBQXlCLElBQUEsS0FBQSxDQUFBOztBQUV4Qzs7Ozs7O0lBTUEsSUFBQyxDQUFBLFdBQUQsbUJBQWUsSUFBSSxDQUFFLHFCQUFOLElBQXlCLElBQUEsS0FBQSxDQUFBO0VBeEIvQjs7O0FBMEJiOzs7Ozs7cUNBS0EsWUFBQSxHQUFjLFNBQUE7V0FDVjtNQUFBLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFBVDtNQUNBLFdBQUEsRUFBYSxJQUFDLENBQUEsV0FEZDtNQUVBLFdBQUEsRUFBYSxJQUFDLENBQUEsV0FGZDs7RUFEVTs7O0FBT2Q7Ozs7OztxQ0FLQSxNQUFBLEdBQVEsU0FBQTtBQUNKLFFBQUE7SUFBQSxzREFBQSxTQUFBO0lBRUEsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjtBQUE4QixhQUE5Qjs7SUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVIsQ0FBQTtJQUNBLENBQUEsR0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDO0lBRVosSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBZCxHQUFvQixJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxHQUFiLEdBQW1CLENBQW5CLEdBQXVCLElBQUMsQ0FBQSxXQUFXLENBQUMsR0FBYixHQUFtQixDQUFDLEdBQUEsR0FBTSxDQUFQLENBQTNDLENBQUEsR0FBd0QsR0FBbkU7SUFDcEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBZCxHQUFzQixJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxLQUFiLEdBQXFCLENBQXJCLEdBQXlCLElBQUMsQ0FBQSxXQUFXLENBQUMsS0FBYixHQUFxQixDQUFDLEdBQUEsR0FBTSxDQUFQLENBQS9DLENBQUEsR0FBNEQsR0FBdkU7SUFDdEIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBZCxHQUFxQixJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxJQUFiLEdBQW9CLENBQXBCLEdBQXdCLElBQUMsQ0FBQSxXQUFXLENBQUMsSUFBYixHQUFvQixDQUFDLEdBQUEsR0FBTSxDQUFQLENBQTdDLENBQUEsR0FBMEQsR0FBckU7SUFDckIsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBZCxHQUFzQixJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsSUFBQyxDQUFBLFdBQVcsQ0FBQyxLQUFiLEdBQXFCLENBQXJCLEdBQXlCLElBQUMsQ0FBQSxXQUFXLENBQUMsS0FBYixHQUFxQixDQUFDLEdBQUEsR0FBTSxDQUFQLENBQS9DLENBQUEsR0FBNEQsR0FBdkU7SUFFdEIsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjtNQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixHQUFnQixJQUFDLENBQUE7bURBQ2pCLElBQUMsQ0FBQSxTQUFVLElBQUMsQ0FBQSxRQUFRLGVBRnhCOztFQWJJOzs7QUFpQlI7Ozs7Ozs7Ozs7cUNBU0EsS0FBQSxHQUFPLFNBQUMsS0FBRCxFQUFRLFFBQVIsRUFBa0IsVUFBbEIsRUFBOEIsUUFBOUI7SUFDSCxJQUFDLENBQUEsUUFBRCxHQUFZO0lBQ1osSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLEdBQWU7SUFFZixJQUFHLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLEdBQWQsS0FBcUIsS0FBSyxDQUFDLEdBQTNCLElBQW1DLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQWQsS0FBdUIsS0FBSyxDQUFDLEtBQWhFLElBQ0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBZCxLQUFzQixLQUFLLENBQUMsSUFEN0IsSUFDc0MsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBZCxLQUF1QixLQUFLLENBQUMsS0FEdEU7O1FBRUcsSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVE7T0FGdkI7O0lBSUEsSUFBRyxRQUFBLEtBQVksQ0FBZjtNQUNJLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixHQUFnQjttREFDaEIsSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVEsZUFGeEI7S0FBQSxNQUFBO01BSUksSUFBQyxDQUFBLFdBQUQsR0FBbUIsSUFBQSxLQUFBLENBQU0sSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFkO01BQ25CLElBQUMsQ0FBQSxXQUFELEdBQWU7YUFDZixJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBbUIsR0FBbkIsRUFBd0IsQ0FBQyxHQUF6QixFQUE4QixRQUE5QixFQU5KOztFQVJHOzs7O0dBL0U0QixFQUFFLENBQUM7O0FBK0YxQyxFQUFFLENBQUMsd0JBQUgsR0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9Db2xvckFuaW1hdGlvblxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X0NvbG9yQW5pbWF0aW9uIGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICMjIypcbiAgICAqIEV4ZWN1dGVzIGEgY29sb3ItYW5pbWF0aW9uIG9uIGEgZ2FtZS1vYmplY3QuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIENvbXBvbmVudF9Nb3ZlQW5pbWF0aW9uXG4gICAgKiBAZXh0ZW5kcyBncy5Db21wb25lbnRfQW5pbWF0aW9uXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAoZGF0YSkgLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgZWFzaW5nLW9iamVjdCB1c2VkIGZvciB0aGUgYW5pbWF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSBlYXNpbmdcbiAgICAgICAgKiBAdHlwZSBncy5FYXNpbmdcbiAgICAgICAgIyMjXG4gICAgICAgIEBlYXNpbmcgPSBuZXcgZ3MuRWFzaW5nKG51bGwsIGRhdGE/LmVhc2luZylcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgc3RhcnQtY29sb3IuXG4gICAgICAgICogQHByb3BlcnR5IHNvdXJjZUNvbG9yXG4gICAgICAgICogQHR5cGUgZ3MuQ29sb3JcbiAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICMjI1xuICAgICAgICBAc291cmNlQ29sb3IgPSBkYXRhPy5zb3VyY2VDb2xvciB8fCBuZXcgQ29sb3IoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBlbmQtY29sb3IuXG4gICAgICAgICogQHByb3BlcnR5IHRhcmdldENvbG9yXG4gICAgICAgICogQHR5cGUgZ3MuQ29sb3JcbiAgICAgICAgKiBAcHJvdGVjdGVkXG4gICAgICAgICMjI1xuICAgICAgICBAdGFyZ2V0Q29sb3IgPSBkYXRhPy50YXJnZXRDb2xvciB8fCBuZXcgQ29sb3IoKVxuICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSBjb2xvci1hbmltYXRpb24gaW50byBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgdG9EYXRhQnVuZGxlXG4gICAgIyMjICAgIFxuICAgIHRvRGF0YUJ1bmRsZTogLT5cbiAgICAgICAgZWFzaW5nOiBAZWFzaW5nLFxuICAgICAgICBzb3VyY2VDb2xvcjogQHNvdXJjZUNvbG9yLFxuICAgICAgICB0YXJnZXRDb2xvcjogQHRhcmdldENvbG9yXG4gICAgIFxuICAgICBcbiBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSBjb2xvci1hbmltYXRpb25cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjIyAgICBcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmcgdGhlbiByZXR1cm5cbiAgICAgICAgXG4gICAgICAgIEBlYXNpbmcudXBkYXRlVmFsdWUoKVxuICAgICAgICBhID0gQGVhc2luZy52YWx1ZVxuICAgIFxuICAgICAgICBAb2JqZWN0LmNvbG9yLnJlZCA9IE1hdGguZmxvb3IoKEBzb3VyY2VDb2xvci5yZWQgKiBhICsgQHRhcmdldENvbG9yLnJlZCAqICgyNTUgLSBhKSkgLyAyNTUpXG4gICAgICAgIEBvYmplY3QuY29sb3IuZ3JlZW4gPSBNYXRoLmZsb29yKChAc291cmNlQ29sb3IuZ3JlZW4gKiBhICsgQHRhcmdldENvbG9yLmdyZWVuICogKDI1NSAtIGEpKSAvIDI1NSlcbiAgICAgICAgQG9iamVjdC5jb2xvci5ibHVlID0gTWF0aC5mbG9vcigoQHNvdXJjZUNvbG9yLmJsdWUgKiBhICsgQHRhcmdldENvbG9yLmJsdWUgKiAoMjU1IC0gYSkpIC8gMjU1KVxuICAgICAgICBAb2JqZWN0LmNvbG9yLmFscGhhID0gTWF0aC5mbG9vcigoQHNvdXJjZUNvbG9yLmFscGhhICogYSArIEB0YXJnZXRDb2xvci5hbHBoYSAqICgyNTUgLSBhKSkgLyAyNTUpXG5cbiAgICAgICAgaWYgbm90IEBlYXNpbmcuaXNSdW5uaW5nXG4gICAgICAgICAgICBAb2JqZWN0LmNvbG9yID0gQHRhcmdldENvbG9yXG4gICAgICAgICAgICBAY2FsbGJhY2s/KEBvYmplY3QsIHRoaXMpXG4gICAgXG4gICAgIyMjKlxuICAgICogU3RhcnRzIHRoZSBjb2xvci1hbmltYXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCBjb2xvclRvXG4gICAgKiBAcGFyYW0ge0NvbG9yfSBjb2xvciBUaGUgdGFyZ2V0IGNvbG9yLlxuICAgICogQHBhcmFtIHtudW1iZXJ9IGR1cmF0aW9uIFRoZSBkdXJhdGlvbiBpbiBmcmFtZXMuXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZWFzaW5nVHlwZSBUaGUgZWFzaW5nLXR5cGUuXG4gICAgKiBAcGFyYW0ge2Z1bmN0aW9ufSBbY2FsbGJhY2tdIEFuIG9wdGlvbmFsIGNhbGxiYWNrLWZ1bmN0aW9uIGNhbGxlZCB3aGVuIHRoZSBhbmltYXRpb24gaXMgZmluaXNoZWQuXG4gICAgIyMjICAgICAgICAgIFxuICAgIHN0YXJ0OiAoY29sb3IsIGR1cmF0aW9uLCBlYXNpbmdUeXBlLCBjYWxsYmFjaykgLT5cbiAgICAgICAgQGNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgICAgQGVhc2luZy50eXBlID0gZWFzaW5nVHlwZVxuICAgICAgICBcbiAgICAgICAgaWYgQG9iamVjdC5jb2xvci5yZWQgPT0gY29sb3IucmVkIGFuZCBAb2JqZWN0LmNvbG9yLmdyZWVuID09IGNvbG9yLmdyZWVuIGFuZFxuICAgICAgICAgICAgQG9iamVjdC5jb2xvci5ibHVlID09IGNvbG9yLmJsdWUgYW5kIEBvYmplY3QuY29sb3IuYWxwaGEgPT0gY29sb3IuYWxwaGFcbiAgICAgICAgICAgQGNhbGxiYWNrPyhAb2JqZWN0LCB0aGlzKVxuICAgIFxuICAgICAgICBpZiBkdXJhdGlvbiA9PSAwXG4gICAgICAgICAgICBAb2JqZWN0LmNvbG9yID0gY29sb3JcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNvdXJjZUNvbG9yID0gbmV3IENvbG9yKEBvYmplY3QuY29sb3IpXG4gICAgICAgICAgICBAdGFyZ2V0Q29sb3IgPSBjb2xvclxuICAgICAgICAgICAgQGVhc2luZy5zdGFydFZhbHVlKDI1NSwgLTI1NSwgZHVyYXRpb24pXG4gICAgICAgIFxuZ3MuQ29tcG9uZW50X0NvbG9yQW5pbWF0aW9uID0gQ29tcG9uZW50X0NvbG9yQW5pbWF0aW9uIl19
//# sourceURL=Component_ColorAnimation_114.js
var Component_ShakeAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ShakeAnimation = (function(superClass) {
  extend(Component_ShakeAnimation, superClass);


  /**
  * Executes a horizontal shake-animation on a game-object.
  *
  * @module gs
  * @class Component_ShakeAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_ShakeAnimation(data) {
    var ref;
    Component_ShakeAnimation.__super__.constructor.apply(this, arguments);
    this.easingX = new gs.Easing(null, data != null ? data.easingX : void 0);
    this.easingY = new gs.Easing(null, data != null ? data.easingY : void 0);
    this.range = (data != null ? data.range : void 0) || {
      x: 0,
      y: 0
    };
    this.speed = (data != null ? data.speed : void 0) || 0;
    this.callback = null;
    this.isRunning = (ref = data != null ? data.isRunning : void 0) != null ? ref : false;
    this.duration = (data != null ? data.duration : void 0) || 0;
  }


  /**
  * Serializes the shake-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_ShakeAnimation.prototype.toDataBundle = function() {
    return {
      easingX: this.easingX,
      easingY: this.easingY,
      range: this.range,
      duration: this.duration,
      speed: this.speed,
      isRunning: this.isRunning
    };
  };


  /**
  * Skips the animation. That is used to skip an animation if the user
  * wants to skip very fast through a visual novel scene.
  *
  * @method skip
   */

  Component_ShakeAnimation.prototype.skip = function() {
    if (this.easingX.duration > 1) {
      this.easingX.duration = 1;
      this.easingX.time = 0;
    }
    if (this.easingY.duration > 1) {
      this.easingY.duration = 1;
      return this.easingY.time = 0;
    }
  };


  /**
  * Starts the shake-animation.
  *
  * @method start
  * @param {gs.Range} range The horizontal shake-range.
  * @param {number} speed The shake-speed.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if the animation is finished.
   */

  Component_ShakeAnimation.prototype.start = function(range, speed, duration, easing, callback) {
    this.range = range;
    this.easingX.type = easing;
    this.easingY.type = easing;
    this.speed = speed;
    this.duration = duration;
    this.callback = callback;
    this.isRunning = true;
    this.startOffset = {
      x: this.object.offset.x,
      y: this.object.offset.y
    };
    if (range.x !== 0) {
      this.easingX.startValue(this.startOffset.x, range.x, Math.max(range.x / speed, 1));
    }
    if (range.y !== 0) {
      return this.easingY.startValue(this.startOffset.y, range.y, Math.max(range.y / speed, 1));
    }
  };


  /**
  * Updates the shake-animation.
  *
  * @method update
   */

  Component_ShakeAnimation.prototype.update = function() {
    Component_ShakeAnimation.__super__.update.call(this);
    if (this.duration === 0 && this.isRunning) {
      this.easingX.isRunning = false;
      this.easingY.isRunning = false;
      this.object.offset.x = 0;
      this.object.offset.y = 0;
      this.isRunning = false;
      if (typeof this.callback === "function") {
        this.callback(this.object, this);
      }
    }
    if (!this.isRunning) {
      return;
    }
    this.easingX.updateValue();
    this.easingY.updateValue();
    if (this.easingY.isRunning) {
      this.object.offset.y = Math.round(this.easingY.value);
    }
    if (this.easingX.isRunning) {
      this.object.offset.x = Math.round(this.easingX.value);
    }
    if (!this.easingX.isRunning) {
      this.easingX.startValue(this.object.offset.x, (this.object.offset.x > 0 ? -(this.range.x * 2) : this.range.x * 2), Math.max(this.range.x * 2 / this.speed, 2));
    }
    if (!this.easingY.isRunning) {
      this.easingY.startValue(this.object.offset.y, (this.object.offset.y > 0 ? -(this.range.y * 2) : this.range.y * 2), Math.max(this.range.y * 2 / this.speed, 2));
    }
    return this.duration--;
  };

  return Component_ShakeAnimation;

})(gs.Component_Animation);

gs.Component_ShakeAnimation = Component_ShakeAnimation;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Component_ShakeAnimation_121.js
var Component_ImageAnimation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Component_ImageAnimation = (function(superClass) {
  extend(Component_ImageAnimation, superClass);


  /**
  * Executes a image-based animation.
  *
  * @module gs
  * @class Component_ImageAnimation
  * @extends gs.Component_Animation
  * @memberof gs
  * @constructor
   */

  function Component_ImageAnimation(data) {
    Component_ImageAnimation.__super__.constructor.apply(this, arguments);

    /**
    * The images to animate through.
    * @property images
    * @type string[]
     */
    this.images = (data != null ? data.images : void 0) || [];

    /**
    * The easing-object used for the animation.
    * @property easing
    * @type gs.Easing
     */
    this.easing = new gs.Easing(null, data != null ? data.easing : void 0);
  }


  /**
  * Serializes the image-animation into a data-bundle.
  *
  * @method toDataBundle
   */

  Component_ImageAnimation.prototype.toDataBundle = function() {
    return {
      easing: this.easing,
      images: this.images
    };
  };


  /**
  * Updates the image-animation.
  *
  * @method update
   */

  Component_ImageAnimation.prototype.update = function() {
    Component_ImageAnimation.__super__.update.apply(this, arguments);
    if (!this.easing.isRunning) {
      return;
    }
    this.easing.updateValue();
    this.object.image = this.images[Math.round(this.easing.value)];
    if (!this.easing.isRunning) {
      return typeof this.callback === "function" ? this.callback(this.object, this) : void 0;
    }
  };


  /**
  * A simple image animation runs from left to right using the game object's
  * image-property.
  *
  * @method changeImages
  * @param {Array} images An array of image names.
  * @param {number} duration The duration in frames.
  * @param {Object} easingType The easing-type.
  * @param {function} [callback] An optional callback called if blending is finished.
   */

  Component_ImageAnimation.prototype.start = function(images, duration, easingType, callback) {
    this.callback = callback;
    this.images = images;
    this.easing.type = easingType || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_IN];
    return this.easing.startValue(0, images.length - 1, duration);
  };

  return Component_ImageAnimation;

})(gs.Component_Animation);

gs.Component_ImageAnimation = Component_ImageAnimation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsd0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLGtDQUFDLElBQUQ7SUFDVCwyREFBQSxTQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELG1CQUFVLElBQUksQ0FBRSxnQkFBTixJQUFnQjs7QUFFMUI7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixpQkFBZ0IsSUFBSSxDQUFFLGVBQXRCO0VBZkw7OztBQWlCYjs7Ozs7O3FDQUtBLFlBQUEsR0FBYyxTQUFBO1dBQ1Y7TUFBQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BQVQ7TUFDQSxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BRFQ7O0VBRFU7OztBQUlkOzs7Ozs7cUNBS0EsTUFBQSxHQUFRLFNBQUE7SUFDSixzREFBQSxTQUFBO0lBQ0EsSUFBRyxDQUFJLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FBZjtBQUE4QixhQUE5Qjs7SUFFQSxJQUFDLENBQUEsTUFBTSxDQUFDLFdBQVIsQ0FBQTtJQUNBLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBUixHQUFnQixJQUFDLENBQUEsTUFBTyxDQUFBLElBQUksQ0FBQyxLQUFMLENBQVcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFuQixDQUFBO0lBRXhCLElBQUcsQ0FBSSxJQUFDLENBQUEsTUFBTSxDQUFDLFNBQWY7bURBQ0ksSUFBQyxDQUFBLFNBQVUsSUFBQyxDQUFBLFFBQVEsZUFEeEI7O0VBUEk7OztBQVVSOzs7Ozs7Ozs7OztxQ0FVQSxLQUFBLEdBQU8sU0FBQyxNQUFELEVBQVMsUUFBVCxFQUFtQixVQUFuQixFQUErQixRQUEvQjtJQUNILElBQUMsQ0FBQSxRQUFELEdBQVk7SUFDWixJQUFDLENBQUEsTUFBRCxHQUFVO0lBQ1YsSUFBQyxDQUFBLE1BQU0sQ0FBQyxJQUFSLEdBQWUsVUFBQSxJQUFjLEVBQUUsQ0FBQyxPQUFPLENBQUMsV0FBWSxDQUFBLEVBQUUsQ0FBQyxXQUFXLENBQUMsT0FBZjtXQUNwRCxJQUFDLENBQUEsTUFBTSxDQUFDLFVBQVIsQ0FBbUIsQ0FBbkIsRUFBc0IsTUFBTSxDQUFDLE1BQVAsR0FBYyxDQUFwQyxFQUF1QyxRQUF2QztFQUpHOzs7O0dBN0Q0QixFQUFFLENBQUM7O0FBbUUxQyxFQUFFLENBQUMsd0JBQUgsR0FBOEIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IENvbXBvbmVudF9JbWFnZUFuaW1hdGlvblxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgQ29tcG9uZW50X0ltYWdlQW5pbWF0aW9uIGV4dGVuZHMgZ3MuQ29tcG9uZW50X0FuaW1hdGlvblxuICAgICMjIypcbiAgICAqIEV4ZWN1dGVzIGEgaW1hZ2UtYmFzZWQgYW5pbWF0aW9uLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBDb21wb25lbnRfSW1hZ2VBbmltYXRpb25cbiAgICAqIEBleHRlbmRzIGdzLkNvbXBvbmVudF9BbmltYXRpb25cbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBpbWFnZXMgdG8gYW5pbWF0ZSB0aHJvdWdoLlxuICAgICAgICAqIEBwcm9wZXJ0eSBpbWFnZXNcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdbXVxuICAgICAgICAjIyNcbiAgICAgICAgQGltYWdlcyA9IGRhdGE/LmltYWdlcyB8fCBbXVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBlYXNpbmctb2JqZWN0IHVzZWQgZm9yIHRoZSBhbmltYXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IGVhc2luZ1xuICAgICAgICAqIEB0eXBlIGdzLkVhc2luZ1xuICAgICAgICAjIyNcbiAgICAgICAgQGVhc2luZyA9IG5ldyBncy5FYXNpbmcobnVsbCwgZGF0YT8uZWFzaW5nKVxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSBpbWFnZS1hbmltYXRpb24gaW50byBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgdG9EYXRhQnVuZGxlXG4gICAgIyMjXG4gICAgdG9EYXRhQnVuZGxlOiAtPlxuICAgICAgICBlYXNpbmc6IEBlYXNpbmcsXG4gICAgICAgIGltYWdlczogQGltYWdlc1xuICAgICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIGltYWdlLWFuaW1hdGlvbi5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHVwZGF0ZVxuICAgICMjIyBcbiAgICB1cGRhdGU6IC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIGlmIG5vdCBAZWFzaW5nLmlzUnVubmluZyB0aGVuIHJldHVyblxuICBcbiAgICAgICAgQGVhc2luZy51cGRhdGVWYWx1ZSgpXG4gICAgICAgIEBvYmplY3QuaW1hZ2UgPSBAaW1hZ2VzW01hdGgucm91bmQoQGVhc2luZy52YWx1ZSldXG4gICAgICAgIFxuICAgICAgICBpZiBub3QgQGVhc2luZy5pc1J1bm5pbmdcbiAgICAgICAgICAgIEBjYWxsYmFjaz8oQG9iamVjdCwgdGhpcylcbiAgICBcbiAgICAjIyMqXG4gICAgKiBBIHNpbXBsZSBpbWFnZSBhbmltYXRpb24gcnVucyBmcm9tIGxlZnQgdG8gcmlnaHQgdXNpbmcgdGhlIGdhbWUgb2JqZWN0J3NcbiAgICAqIGltYWdlLXByb3BlcnR5LlxuICAgICpcbiAgICAqIEBtZXRob2QgY2hhbmdlSW1hZ2VzXG4gICAgKiBAcGFyYW0ge0FycmF5fSBpbWFnZXMgQW4gYXJyYXkgb2YgaW1hZ2UgbmFtZXMuXG4gICAgKiBAcGFyYW0ge251bWJlcn0gZHVyYXRpb24gVGhlIGR1cmF0aW9uIGluIGZyYW1lcy5cbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBlYXNpbmdUeXBlIFRoZSBlYXNpbmctdHlwZS5cbiAgICAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gQW4gb3B0aW9uYWwgY2FsbGJhY2sgY2FsbGVkIGlmIGJsZW5kaW5nIGlzIGZpbmlzaGVkLiBcbiAgICAjIyMgICAgICAgICBcbiAgICBzdGFydDogKGltYWdlcywgZHVyYXRpb24sIGVhc2luZ1R5cGUsIGNhbGxiYWNrKSAtPlxuICAgICAgICBAY2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgICBAaW1hZ2VzID0gaW1hZ2VzXG4gICAgICAgIEBlYXNpbmcudHlwZSA9IGVhc2luZ1R5cGUgfHwgZ3MuRWFzaW5ncy5FQVNFX0xJTkVBUltncy5FYXNpbmdUeXBlcy5FQVNFX0lOXVxuICAgICAgICBAZWFzaW5nLnN0YXJ0VmFsdWUoMCwgaW1hZ2VzLmxlbmd0aC0xLCBkdXJhdGlvbilcbiAgICAgICAgXG5ncy5Db21wb25lbnRfSW1hZ2VBbmltYXRpb24gPSBDb21wb25lbnRfSW1hZ2VBbmltYXRpb24iXX0=
//# sourceURL=Component_ImageAnimation_129.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Objects_52.js
var Object_Base;

Object_Base = (function() {

  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */
  Object_Base.prototype.onDataBundleRestore = function(data, context) {
    if (this.id) {
      return window["$" + this.id] = this;
    }
  };

  Object_Base.accessors("group", {
    set: function(g) {
      var ref;
      this.group_ = g;
      return (ref = gs.ObjectManager.current) != null ? ref.addToGroup(this, g) : void 0;
    },
    get: function() {
      return this.group_;
    }
  });

  Object_Base.accessors("order", {
    set: function(o) {
      var ref;
      if (o !== this.order_) {
        this.order_ = o;
        return (ref = this.parent) != null ? ref.needsSort = true : void 0;
      }
    },
    get: function() {
      return this.order_;
    }
  });

  Object_Base.accessors("needsUpdate", {
    set: function(v) {
      var parent;
      this.needsUpdate_ = v;
      parent = this.parent;
      while (parent) {
        parent.needsUpdate_ = true;
        parent = parent.parent;
      }
      if (v) {
        return this.requestSubUpdate();
      }
    },
    get: function() {
      return this.needsUpdate_ || SceneManager.scene.preparing;
    }
  });

  Object_Base.prototype.requestSubUpdate = function() {
    var j, len, object, ref;
    ref = this.subObjects;
    for (j = 0, len = ref.length; j < len; j++) {
      object = ref[j];
      if (object) {
        object.needsUpdate_ = true;
        object.requestSubUpdate();
      }
    }
    return null;
  };

  Object_Base.accessors("needsFullUpdate", {
    set: function(v) {
      var j, len, object, ref, results;
      this.needsUpdate = v;
      if (v) {
        ref = this.subObjects;
        results = [];
        for (j = 0, len = ref.length; j < len; j++) {
          object = ref[j];
          results.push(object.needsFullUpdate = v);
        }
        return results;
      }
    },
    get: function() {
      return this.needsUpdate_;
    }
  });


  /**
  * The base class for all game objects. A game object itself doesn't implement
  * any game logic but uses components and sub-objects for that.
  *
  * @module gs
  * @class Object_Base
  * @memberof gs
  * @constructor
   */

  function Object_Base() {

    /**
    * @property subObjects
    * @type gs.Object_Base[]
    * @default []
    * A list of game-objects grouped under this game object.
     */
    var ref;
    this.subObjects = [];

    /**
    * @property components
    * @type gs.Component[]
    * @default []
    * A list of components defining the logic/behavior and appearance of the game object.
     */
    this.components = [];

    /**
    * @property componentsById
    * @type Object
    * @default []
    * All associated components by their ID.
     */
    this.componentsById = {};

    /**
    * @property disposed
    * @type boolean
    * @default false
    * Indicates if the game object id disposed. A disposed game object cannot be used anymore.
     */
    this.disposed = false;

    /**
    * @property active
    * @default true
    * Indicates if the game object is active. An inactive game object will not be updated.
     */
    this.active = true;
    this.input = false;

    /**
    * @property id
    * @type string
    * @default null
    * The game object's UID (Unique ID)
     */
    this.id = null;

    /**
    * @property group
    * @default null
    * @type string
    * The game object's group. To get all object's of a specific group the gs.ObjectManager.objectsByGroup property can be used.
     */
    this.group = null;

    /**
    * @property parent
    * @type gs.Object_Base
    * @default null
    * The parent object if the game object is a sub-object of another game object.
     */
    this.parent = null;

    /**
    * @property order
    * @type number
    * @default 0
    * Controls the update-order. The smaller the value the earlier the game object is updated before other game objects are updated.
     */
    this.order = 0;

    /**
    * @property rIndex
    * @type number
    * @default 0
    * Holds the render-index if the game object has a graphical representation on screen. The render-index is the
    * index of the game object's graphic-object(gs.GraphicObject) in the current list of graphic-objects. The render-index
    * is read-only. Setting the render-index to a certain value has no effect.
     */
    this.rIndex = 0;

    /**
    * @property needsSort
    * @type boolean
    * @default true
    * Indicates if the list of sub-objects needs to be sorted by order because of a change.
     */
    this.needsSort = true;

    /**
    * @property needsSort
    * @type boolean
    * @default true
    * Indicates if the UI object needs to be updated.
     */
    this.needsUpdate = true;
    if ((ref = gs.ObjectManager.current) != null) {
      ref.registerObject(this);
    }
  }


  /**
  * Disposes the object with all its components and sub-objects. A disposed object will be
  * removed from the parent automatically.
  *
  * @method dispose
   */

  Object_Base.prototype.dispose = function() {
    var ref;
    if (!this.disposed) {
      this.disposed = true;
      this.disposeComponents();
      this.disposeObjects();
      if ((ref = gs.ObjectManager.current) != null) {
        ref.unregisterObject(this);
      }
    }
    return null;
  };


  /**
  * Disposes all sub-objects.
  *
  * @method disposeObjects
  * @protected
   */

  Object_Base.prototype.disposeObjects = function() {
    var j, len, ref, results, subObject;
    ref = this.subObjects;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      subObject = ref[j];
      results.push(subObject != null ? typeof subObject.dispose === "function" ? subObject.dispose() : void 0 : void 0);
    }
    return results;
  };


  /**
  * Disposes all components
  *
  * @method disposeComponents
  * @protected
   */

  Object_Base.prototype.disposeComponents = function() {
    var component, j, len, ref, results;
    ref = this.components;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      component = ref[j];
      results.push(component != null ? typeof component.dispose === "function" ? component.dispose() : void 0 : void 0);
    }
    return results;
  };


  /**
  * Calls setup-routine on all compontents.
  *
  * @method setup
   */

  Object_Base.prototype.setup = function() {
    var component, j, len, ref;
    ref = this.components;
    for (j = 0, len = ref.length; j < len; j++) {
      component = ref[j];
      component.setup();
    }
    this.initialized = true;
    return null;
  };


  /**
  * Deserializes components from a data-bundle object.
  * 
  * @method componentsFromDataBundle
  * @param {Object} data The data-bundle object.
   */

  Object_Base.prototype.componentsFromDataBundle = function(data) {
    var component, componentObject, j, len, ref;
    if (data != null ? data.components : void 0) {
      ref = data.components;
      for (j = 0, len = ref.length; j < len; j++) {
        component = ref[j];
        componentObject = new gs[component.className](component);
        this.addComponent(componentObject);
      }
      delete data.components;
    }
    return null;
  };


  /**
  * Serializes components of a specified type to a data-bundle. A component
  * needs to implement the toDataBundle method for correct serialization.
  *
  * @method componentsToDataBundle
  * @param {String} type - A component class name.
  * @return A data bundle.
   */

  Object_Base.prototype.componentsToDataBundle = function(type) {
    var bundle, component, components, j, len, ref;
    components = [];
    ref = this.components;
    for (j = 0, len = ref.length; j < len; j++) {
      component = ref[j];
      if (component instanceof type) {
        if (component.toDataBundle == null) {
          continue;
        }
        bundle = component.toDataBundle();
        bundle.className = component.constructor.name;
        components.push(bundle);
      }
    }
    return components;
  };


  /**
  * Starts a full-refresh on all sub-objects
  *
  * @method fullRefresh
   */

  Object_Base.prototype.fullRefresh = function() {
    var j, len, object, ref;
    ref = this.subObjects;
    for (j = 0, len = ref.length; j < len; j++) {
      object = ref[j];
      if (object) {
        object.needsUpdate = true;
        object.fullRefresh();
      }
    }
    return null;
  };


  /**
  * Updates the object with all parent- and sub-objects. 
  *
  * @method fullUpdate
   */

  Object_Base.prototype.fullUpdate = function() {
    var j, len, object, parent, ref, results;
    parent = this;
    while (parent !== null) {
      parent.update();
      parent = parent.parent;
    }
    ref = this.subObjects;
    results = [];
    for (j = 0, len = ref.length; j < len; j++) {
      object = ref[j];
      results.push(object != null ? object.update() : void 0);
    }
    return results;
  };


  /**
  * Updates the object and all its components. This method is
  * called automatically by the parent or ObjectManager so in regular it is 
  * not necessary to call it manually.
  *
  * @method update
   */

  Object_Base.prototype.update = function() {
    var component, i;
    i = 0;
    while (i < this.components.length) {
      component = this.components[i];
      if (!component.disposed) {
        component.update();
        i++;
      } else {
        this.components.splice(i, 1);
      }
    }
    if (this.input) {
      Input.clear();
    }
    this.input = false;
    return null;
  };


  /**
  * Searches for the first component with the specified class name.
  *
  * @method findComponent
  * @param {String} name The class name of the component.
  * @return {Component} The component or null if a component with the specified class name cannot be found.
   */

  Object_Base.prototype.findComponent = function(name) {
    return this.components.first(function(v) {
      return v.constructor.name === name;
    });
  };


  /**
  * Searches for all components with the specified class name.
  *
  * @method findComponents
  * @param {String} name The class name of the components.
  * @return {Array} The components or null if no component with the specified class name has been found.
   */

  Object_Base.prototype.findComponents = function(name) {
    return this.components.where(function(v) {
      return v.constructor.name === name;
    });
  };


  /**
  * Searches for the component with the specified ID.
  *
  * @method findComponentById
  * @param {String} id The unique identifier of the component.
  * @return {Component} The component or null if a component with the specified ID cannot be found.
   */

  Object_Base.prototype.findComponentById = function(id) {
    return this.componentsById[id];
  };


  /**
  * Adds an object to the list of sub-objects.
  *
  * @method addObject
  * @param {Object_Base} object The object which should be added.
   */

  Object_Base.prototype.addObject = function(object) {
    var ref, ref1;
    if ((ref = gs.ObjectManager.current) != null) {
      ref.remove(object);
    }
    if ((ref1 = object.parent) != null) {
      ref1.removeObject(object);
    }
    object.parent = this;
    this.subObjects.push(object);
    this.needsSort = true;
    this.needsUpdate = true;
    if (object.id != null) {
      return gs.ObjectManager.current.setObjectById(object, object.id);
    }
  };


  /**
  * Inserts an object into the list of sub-objects at the specified index.
  *
  * @method insertObject
  * @param {Object_Base} object The object which should be inserted.
  * @param {Number} index The index.
   */

  Object_Base.prototype.insertObject = function(object, index) {
    var ref;
    gs.ObjectManager.current.remove(object);
    if ((ref = object.parent) != null) {
      ref.removeObject(object);
    }
    object.parent = this;
    this.subObjects.splice(index, 0, object);
    if (object.id != null) {
      return gs.ObjectManager.current.setObjectById(object, object.id);
    }
  };


  /**
  * Sets sub-object at the specified index.
  *
  * @method setObject
  * @param {Object_Base} object The object.
  * @param {Number} index The index.
   */

  Object_Base.prototype.setObject = function(object, index) {
    var ref;
    if (object) {
      gs.ObjectManager.current.remove(object);
      if ((ref = object.parent) != null) {
        ref.removeObject(object);
      }
      object.parent = this;
    }
    this.subObjects[index] = object;
    if ((object != null ? object.id : void 0) != null) {
      return gs.ObjectManager.current.setObjectById(object, object.id);
    }
  };


  /**
  * Removes the specified object from the list of sub-objects.
  *
  * @method removeObject
  * @param {Object_Base} object The object which should be removed.
   */

  Object_Base.prototype.removeObject = function(object) {
    this.subObjects.remove(object);
    object.parent = null;
    return this.needsUpdate = true;
  };


  /**
  * Erases the object at the specified index. The list size
  * will not be changed but the the value at the index will be set to null.
  *
  * @method eraseObject
  * @param {Number} object The object which should be erased.
   */

  Object_Base.prototype.eraseObject = function(index) {
    var object;
    object = this.subObjects[index];
    if (object != null) {
      object.parent = null;
    }
    return this.subObjects[index] = null;
  };


  /**
  * Adds the specified component to the object.
  *
  * @method addComponent
  * @param {Component} component The component
  * @param {String} id An optional unique identifier for the component.
   */

  Object_Base.prototype.addComponent = function(component, id) {
    component.object = this;
    this.components.push(component);
    if (id != null) {
      return this.componentsById[id] = component;
    }
  };


  /**
  * Inserts a component at the specified index.
  *
  * @method insertComponent
  * @param {Component} component The component.
  * @param {Number} index The index.
  * @param {String} id An optional unique identifier for the component.
   */

  Object_Base.prototype.insertComponent = function(component, index, id) {
    component.object = this;
    this.components.splice(index, 0, component);
    if (id != null) {
      return this.componentsById[id] = component;
    }
  };


  /**
  * Removes a component from the object.
  *
  * @method removeComponent
  * @param {Component} component The component to remove.
   */

  Object_Base.prototype.removeComponent = function(component) {
    this.components.remove(component);
    if (typeof id !== "undefined" && id !== null) {
      return delete this.componentsById[id];
    }
  };

  return Object_Base;

})();

gs.Object_Base = Object_Base;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUE7O0FBQU07O0FBQ0Y7Ozs7Ozs7O3dCQVFBLG1CQUFBLEdBQXFCLFNBQUMsSUFBRCxFQUFPLE9BQVA7SUFDakIsSUFBRyxJQUFDLENBQUEsRUFBSjthQUNJLE1BQU8sQ0FBQSxHQUFBLEdBQUksSUFBQyxDQUFBLEVBQUwsQ0FBUCxHQUFrQixLQUR0Qjs7RUFEaUI7O0VBV3JCLFdBQUMsQ0FBQSxTQUFELENBQVcsT0FBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtBQUNELFVBQUE7TUFBQSxJQUFDLENBQUEsTUFBRCxHQUFVOzJEQUNjLENBQUUsVUFBMUIsQ0FBcUMsSUFBckMsRUFBMkMsQ0FBM0M7SUFGQyxDQUFMO0lBSUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUpMO0dBREo7O0VBY0EsV0FBQyxDQUFBLFNBQUQsQ0FBVyxPQUFYLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO0FBQ0QsVUFBQTtNQUFBLElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxNQUFUO1FBQ0ksSUFBQyxDQUFBLE1BQUQsR0FBVTtnREFDSCxDQUFFLFNBQVQsR0FBcUIsY0FGekI7O0lBREMsQ0FBTDtJQUlBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBO0lBQUosQ0FKTDtHQURKOztFQWVBLFdBQUMsQ0FBQSxTQUFELENBQVcsYUFBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtBQUNELFVBQUE7TUFBQSxJQUFDLENBQUEsWUFBRCxHQUFnQjtNQUVoQixNQUFBLEdBQVMsSUFBQyxDQUFBO0FBQ1YsYUFBTSxNQUFOO1FBQ0ksTUFBTSxDQUFDLFlBQVAsR0FBc0I7UUFDdEIsTUFBQSxHQUFTLE1BQU0sQ0FBQztNQUZwQjtNQVNBLElBQUcsQ0FBSDtlQUNJLElBQUMsQ0FBQSxnQkFBRCxDQUFBLEVBREo7O0lBYkMsQ0FBTDtJQWVBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBLFlBQUQsSUFBaUIsWUFBWSxDQUFDLEtBQUssQ0FBQztJQUF2QyxDQWZMO0dBREo7O3dCQWtCQSxnQkFBQSxHQUFrQixTQUFBO0FBQ2QsUUFBQTtBQUFBO0FBQUEsU0FBQSxxQ0FBQTs7TUFDSSxJQUFHLE1BQUg7UUFDSSxNQUFNLENBQUMsWUFBUCxHQUFzQjtRQUN0QixNQUFNLENBQUMsZ0JBQVAsQ0FBQSxFQUZKOztBQURKO0FBS0EsV0FBTztFQU5POztFQWNsQixXQUFDLENBQUEsU0FBRCxDQUFXLGlCQUFYLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO0FBQ0QsVUFBQTtNQUFBLElBQUMsQ0FBQSxXQUFELEdBQWU7TUFDZixJQUFHLENBQUg7QUFDSTtBQUFBO2FBQUEscUNBQUE7O3VCQUNJLE1BQU0sQ0FBQyxlQUFQLEdBQXlCO0FBRDdCO3VCQURKOztJQUZDLENBQUw7SUFLQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQTtJQUFKLENBTEw7R0FESjs7O0FBUUE7Ozs7Ozs7Ozs7RUFTYSxxQkFBQTs7QUFDVDs7Ozs7O0FBQUEsUUFBQTtJQU1BLElBQUMsQ0FBQSxVQUFELEdBQWM7O0FBRWQ7Ozs7OztJQU1BLElBQUMsQ0FBQSxVQUFELEdBQWM7O0FBRWQ7Ozs7OztJQU1BLElBQUMsQ0FBQSxjQUFELEdBQWtCOztBQUVsQjs7Ozs7O0lBTUEsSUFBQyxDQUFBLFFBQUQsR0FBWTs7QUFFWjs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFVO0lBRVYsSUFBQyxDQUFBLEtBQUQsR0FBUzs7QUFFVDs7Ozs7O0lBTUEsSUFBQyxDQUFBLEVBQUQsR0FBTTs7QUFFTjs7Ozs7O0lBTUEsSUFBQyxDQUFBLEtBQUQsR0FBUzs7QUFFVDs7Ozs7O0lBTUEsSUFBQyxDQUFBLE1BQUQsR0FBVTs7QUFFVjs7Ozs7O0lBTUEsSUFBQyxDQUFBLEtBQUQsR0FBUzs7QUFFVDs7Ozs7Ozs7SUFRQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7Ozs7SUFNQSxJQUFDLENBQUEsU0FBRCxHQUFhOztBQUViOzs7Ozs7SUFNQSxJQUFDLENBQUEsV0FBRCxHQUFlOztTQUdTLENBQUUsY0FBMUIsQ0FBeUMsSUFBekM7O0VBckdTOzs7QUF1R2I7Ozs7Ozs7d0JBTUEsT0FBQSxHQUFTLFNBQUE7QUFDTCxRQUFBO0lBQUEsSUFBRyxDQUFJLElBQUMsQ0FBQSxRQUFSO01BQ0ksSUFBQyxDQUFBLFFBQUQsR0FBWTtNQUNaLElBQUMsQ0FBQSxpQkFBRCxDQUFBO01BQ0EsSUFBQyxDQUFBLGNBQUQsQ0FBQTs7V0FFd0IsQ0FBRSxnQkFBMUIsQ0FBMkMsSUFBM0M7T0FMSjs7QUFPQSxXQUFPO0VBUkY7OztBQVVUOzs7Ozs7O3dCQU1BLGNBQUEsR0FBZ0IsU0FBQTtBQUNaLFFBQUE7QUFBQTtBQUFBO1NBQUEscUNBQUE7O2lGQUNJLFNBQVMsQ0FBRTtBQURmOztFQURZOzs7QUFJaEI7Ozs7Ozs7d0JBTUEsaUJBQUEsR0FBbUIsU0FBQTtBQUNmLFFBQUE7QUFBQTtBQUFBO1NBQUEscUNBQUE7O2lGQUNJLFNBQVMsQ0FBRTtBQURmOztFQURlOzs7QUFJbkI7Ozs7Ozt3QkFLQSxLQUFBLEdBQU8sU0FBQTtBQUNILFFBQUE7QUFBQTtBQUFBLFNBQUEscUNBQUE7O01BQ0ksU0FBUyxDQUFDLEtBQVYsQ0FBQTtBQURKO0lBR0EsSUFBQyxDQUFBLFdBQUQsR0FBZTtBQUNmLFdBQU87RUFMSjs7O0FBT1A7Ozs7Ozs7d0JBTUEsd0JBQUEsR0FBMEIsU0FBQyxJQUFEO0FBQ3RCLFFBQUE7SUFBQSxtQkFBRyxJQUFJLENBQUUsbUJBQVQ7QUFDSTtBQUFBLFdBQUEscUNBQUE7O1FBQ0ksZUFBQSxHQUFzQixJQUFBLEVBQUcsQ0FBQSxTQUFTLENBQUMsU0FBVixDQUFILENBQXdCLFNBQXhCO1FBQ3RCLElBQUMsQ0FBQSxZQUFELENBQWMsZUFBZDtBQUZKO01BR0EsT0FBTyxJQUFJLENBQUMsV0FKaEI7O0FBTUEsV0FBTztFQVBlOzs7QUFTMUI7Ozs7Ozs7Ozt3QkFRQSxzQkFBQSxHQUF3QixTQUFDLElBQUQ7QUFDcEIsUUFBQTtJQUFBLFVBQUEsR0FBYTtBQUNiO0FBQUEsU0FBQSxxQ0FBQTs7TUFDSSxJQUFHLFNBQUEsWUFBcUIsSUFBeEI7UUFDSSxJQUFnQiw4QkFBaEI7QUFBQSxtQkFBQTs7UUFDQSxNQUFBLEdBQVMsU0FBUyxDQUFDLFlBQVYsQ0FBQTtRQUNULE1BQU0sQ0FBQyxTQUFQLEdBQW1CLFNBQVMsQ0FBQyxXQUFXLENBQUM7UUFDekMsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsTUFBaEIsRUFKSjs7QUFESjtBQU1BLFdBQU87RUFSYTs7O0FBVXhCOzs7Ozs7d0JBS0EsV0FBQSxHQUFhLFNBQUE7QUFDVCxRQUFBO0FBQUE7QUFBQSxTQUFBLHFDQUFBOztNQUNJLElBQUcsTUFBSDtRQUNJLE1BQU0sQ0FBQyxXQUFQLEdBQXFCO1FBQ3JCLE1BQU0sQ0FBQyxXQUFQLENBQUEsRUFGSjs7QUFESjtBQUtBLFdBQU87RUFORTs7O0FBUWI7Ozs7Ozt3QkFLQSxVQUFBLEdBQVksU0FBQTtBQUNSLFFBQUE7SUFBQSxNQUFBLEdBQVM7QUFDVCxXQUFNLE1BQUEsS0FBVSxJQUFoQjtNQUNJLE1BQU0sQ0FBQyxNQUFQLENBQUE7TUFDQSxNQUFBLEdBQVMsTUFBTSxDQUFDO0lBRnBCO0FBSUE7QUFBQTtTQUFBLHFDQUFBOztvQ0FDSSxNQUFNLENBQUUsTUFBUixDQUFBO0FBREo7O0VBTlE7OztBQVNaOzs7Ozs7Ozt3QkFPQSxNQUFBLEdBQVEsU0FBQTtBQUNKLFFBQUE7SUFBQSxDQUFBLEdBQUk7QUFDSixXQUFNLENBQUEsR0FBSSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQXRCO01BQ0ksU0FBQSxHQUFZLElBQUMsQ0FBQSxVQUFXLENBQUEsQ0FBQTtNQUN4QixJQUFHLENBQUksU0FBUyxDQUFDLFFBQWpCO1FBQ0ksU0FBUyxDQUFDLE1BQVYsQ0FBQTtRQUNBLENBQUEsR0FGSjtPQUFBLE1BQUE7UUFJSSxJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosQ0FBbUIsQ0FBbkIsRUFBc0IsQ0FBdEIsRUFKSjs7SUFGSjtJQVNBLElBQUcsSUFBQyxDQUFBLEtBQUo7TUFBZSxLQUFLLENBQUMsS0FBTixDQUFBLEVBQWY7O0lBQ0EsSUFBQyxDQUFBLEtBQUQsR0FBUztBQUVULFdBQU87RUFkSDs7O0FBZ0JSOzs7Ozs7Ozt3QkFPQSxhQUFBLEdBQWUsU0FBQyxJQUFEO1dBQVUsSUFBQyxDQUFBLFVBQVUsQ0FBQyxLQUFaLENBQWtCLFNBQUMsQ0FBRDthQUFPLENBQUMsQ0FBQyxXQUFXLENBQUMsSUFBZCxLQUFzQjtJQUE3QixDQUFsQjtFQUFWOzs7QUFFZjs7Ozs7Ozs7d0JBT0EsY0FBQSxHQUFnQixTQUFDLElBQUQ7V0FBVSxJQUFDLENBQUEsVUFBVSxDQUFDLEtBQVosQ0FBa0IsU0FBQyxDQUFEO2FBQU8sQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFkLEtBQXNCO0lBQTdCLENBQWxCO0VBQVY7OztBQUVoQjs7Ozs7Ozs7d0JBT0EsaUJBQUEsR0FBbUIsU0FBQyxFQUFEO1dBQVEsSUFBQyxDQUFBLGNBQWUsQ0FBQSxFQUFBO0VBQXhCOzs7QUFFbkI7Ozs7Ozs7d0JBTUEsU0FBQSxHQUFXLFNBQUMsTUFBRDtBQUNQLFFBQUE7O1NBQXdCLENBQUUsTUFBMUIsQ0FBaUMsTUFBakM7OztVQUNhLENBQUUsWUFBZixDQUE0QixNQUE1Qjs7SUFDQSxNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUNoQixJQUFDLENBQUEsVUFBVSxDQUFDLElBQVosQ0FBaUIsTUFBakI7SUFDQSxJQUFDLENBQUEsU0FBRCxHQUFhO0lBQ2IsSUFBQyxDQUFBLFdBQUQsR0FBZTtJQUVmLElBQUcsaUJBQUg7YUFDSSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxhQUF6QixDQUF1QyxNQUF2QyxFQUErQyxNQUFNLENBQUMsRUFBdEQsRUFESjs7RUFSTzs7O0FBV1g7Ozs7Ozs7O3dCQU9BLFlBQUEsR0FBYSxTQUFDLE1BQUQsRUFBUyxLQUFUO0FBQ1QsUUFBQTtJQUFBLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLE1BQXpCLENBQWdDLE1BQWhDOztTQUNhLENBQUUsWUFBZixDQUE0QixNQUE1Qjs7SUFDQSxNQUFNLENBQUMsTUFBUCxHQUFnQjtJQUNoQixJQUFDLENBQUEsVUFBVSxDQUFDLE1BQVosQ0FBbUIsS0FBbkIsRUFBMEIsQ0FBMUIsRUFBNkIsTUFBN0I7SUFFQSxJQUFHLGlCQUFIO2FBQ0ksRUFBRSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsYUFBekIsQ0FBdUMsTUFBdkMsRUFBK0MsTUFBTSxDQUFDLEVBQXRELEVBREo7O0VBTlM7OztBQVNiOzs7Ozs7Ozt3QkFPQSxTQUFBLEdBQVcsU0FBQyxNQUFELEVBQVMsS0FBVDtBQUNQLFFBQUE7SUFBQSxJQUFHLE1BQUg7TUFDSSxFQUFFLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxNQUF6QixDQUFnQyxNQUFoQzs7V0FDYSxDQUFFLFlBQWYsQ0FBNEIsTUFBNUI7O01BQ0EsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsS0FIcEI7O0lBS0EsSUFBQyxDQUFBLFVBQVcsQ0FBQSxLQUFBLENBQVosR0FBcUI7SUFFckIsSUFBRyw2Q0FBSDthQUNJLEVBQUUsQ0FBQyxhQUFhLENBQUMsT0FBTyxDQUFDLGFBQXpCLENBQXVDLE1BQXZDLEVBQStDLE1BQU0sQ0FBQyxFQUF0RCxFQURKOztFQVJPOzs7QUFXWDs7Ozs7Ozt3QkFNQSxZQUFBLEdBQWMsU0FBQyxNQUFEO0lBQ1YsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLENBQW1CLE1BQW5CO0lBQ0EsTUFBTSxDQUFDLE1BQVAsR0FBZ0I7V0FDaEIsSUFBQyxDQUFBLFdBQUQsR0FBZTtFQUhMOzs7QUFLZDs7Ozs7Ozs7d0JBT0EsV0FBQSxHQUFhLFNBQUMsS0FBRDtBQUNULFFBQUE7SUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLFVBQVcsQ0FBQSxLQUFBOztNQUNyQixNQUFNLENBQUUsTUFBUixHQUFpQjs7V0FDakIsSUFBQyxDQUFBLFVBQVcsQ0FBQSxLQUFBLENBQVosR0FBcUI7RUFIWjs7O0FBS2I7Ozs7Ozs7O3dCQU9BLFlBQUEsR0FBYyxTQUFDLFNBQUQsRUFBWSxFQUFaO0lBQ1YsU0FBUyxDQUFDLE1BQVYsR0FBbUI7SUFDbkIsSUFBQyxDQUFBLFVBQVUsQ0FBQyxJQUFaLENBQWlCLFNBQWpCO0lBQ0EsSUFBRyxVQUFIO2FBQ0ksSUFBQyxDQUFBLGNBQWUsQ0FBQSxFQUFBLENBQWhCLEdBQXNCLFVBRDFCOztFQUhVOzs7QUFLZDs7Ozs7Ozs7O3dCQVFBLGVBQUEsR0FBaUIsU0FBQyxTQUFELEVBQVksS0FBWixFQUFtQixFQUFuQjtJQUNiLFNBQVMsQ0FBQyxNQUFWLEdBQW1CO0lBQ25CLElBQUMsQ0FBQSxVQUFVLENBQUMsTUFBWixDQUFtQixLQUFuQixFQUEwQixDQUExQixFQUE2QixTQUE3QjtJQUNBLElBQUcsVUFBSDthQUNJLElBQUMsQ0FBQSxjQUFlLENBQUEsRUFBQSxDQUFoQixHQUFzQixVQUQxQjs7RUFIYTs7O0FBTWpCOzs7Ozs7O3dCQU1BLGVBQUEsR0FBaUIsU0FBQyxTQUFEO0lBQ2IsSUFBQyxDQUFBLFVBQVUsQ0FBQyxNQUFaLENBQW1CLFNBQW5CO0lBQ0EsSUFBRyx3Q0FBSDthQUNJLE9BQU8sSUFBQyxDQUFBLGNBQWUsQ0FBQSxFQUFBLEVBRDNCOztFQUZhOzs7Ozs7QUFLckIsRUFBRSxDQUFDLFdBQUgsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9CYXNlXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfQmFzZVxuICAgICMjIypcbiAgICAqIENhbGxlZCBpZiB0aGlzIG9iamVjdCBpbnN0YW5jZSBpcyByZXN0b3JlZCBmcm9tIGEgZGF0YS1idW5kbGUuIEl0IGNhbiBiZSB1c2VkXG4gICAgKiByZS1hc3NpZ24gZXZlbnQtaGFuZGxlciwgYW5vbnltb3VzIGZ1bmN0aW9ucywgZXRjLlxuICAgICogXG4gICAgKiBAbWV0aG9kIG9uRGF0YUJ1bmRsZVJlc3RvcmUuXG4gICAgKiBAcGFyYW0gT2JqZWN0IGRhdGEgLSBUaGUgZGF0YS1idW5kbGVcbiAgICAqIEBwYXJhbSBncy5PYmplY3RDb2RlY0NvbnRleHQgY29udGV4dCAtIFRoZSBjb2RlYy1jb250ZXh0LlxuICAgICMjI1xuICAgIG9uRGF0YUJ1bmRsZVJlc3RvcmU6IChkYXRhLCBjb250ZXh0KSAtPlxuICAgICAgICBpZiBAaWRcbiAgICAgICAgICAgIHdpbmRvd1tcIiRcIitAaWRdID0gdGhpc1xuICAgICAgICAgICAgXG4gICAgXG4gICAgI1xuICAgICMgR2V0cyBvciBzZXRzIHRoZSBncm91cCB0aGUgb2JqZWN0IGJlbG9uZ3MgdG8uXG4gICAgI1xuICAgICMgQHByb3BlcnR5IGdyb3VwXG4gICAgIyBAdHlwZSBzdHJpbmdcbiAgICAjXG4gICAgQGFjY2Vzc29ycyBcImdyb3VwXCIsIFxuICAgICAgICBzZXQ6IChnKSAtPiBcbiAgICAgICAgICAgIEBncm91cF8gPSBnXG4gICAgICAgICAgICBncy5PYmplY3RNYW5hZ2VyLmN1cnJlbnQ/LmFkZFRvR3JvdXAodGhpcywgZylcbiAgICAgICAgICAgIFxuICAgICAgICBnZXQ6IC0+IEBncm91cF9cbiAgICAgICAgXG4gICAgI1xuICAgICMgR2V0cyBvciBzZXRzIHRoZSBvcmRlci1pbmRleCBvZiB0aGUgb2JqZWN0LiBUaGUgbG93ZXIgdGhlIGluZGV4LCB0aGVcbiAgICAjIGVhcmxpZXIgdGhlIG9iamVjdCB3aWxsIGJlIHVwZGF0ZWQgaW4gYSBsaXN0IG9mIHN1Yi1vYmplY3RzLlxuICAgICNcbiAgICAjIEBwcm9wZXJ0eSBvcmRlclxuICAgICMgQHR5cGUgbnVtYmVyXG4gICAgI1xuICAgIEBhY2Nlc3NvcnMgXCJvcmRlclwiLFxuICAgICAgICBzZXQ6IChvKSAtPlxuICAgICAgICAgICAgaWYgbyAhPSBAb3JkZXJfXG4gICAgICAgICAgICAgICAgQG9yZGVyXyA9IG9cbiAgICAgICAgICAgICAgICBAcGFyZW50Py5uZWVkc1NvcnQgPSB0cnVlXG4gICAgICAgIGdldDogLT4gQG9yZGVyX1xuICAgICAgICBcbiAgICAjXG4gICAgIyBHZXRzIG9yIHNldHMgaWYgYW4gb2JqZWN0cyBuZWVkcyBhbiB1cGRhdGUuIElmIHRydWUsIHRoZSBwYXJlbnQgd2lsbCB1cGRhdGVcbiAgICAjIHRoZSBvYmplY3QgaW4gdGhlIG5leHQgdXBkYXRlIGFuZCByZXNldHMgdGhlIG5lZWRzVXBkYXRlIHByb3BlcnR5IGJhY2tcbiAgICAjIHRvIGZhbHNlLlxuICAgICNcbiAgICAjIEBwcm9wZXJ0eSBuZWVkc1VwZGF0ZVxuICAgICMgQHR5cGUgYm9vbGVhblxuICAgICNcbiAgICBAYWNjZXNzb3JzIFwibmVlZHNVcGRhdGVcIiwgXG4gICAgICAgIHNldDogKHYpIC0+XG4gICAgICAgICAgICBAbmVlZHNVcGRhdGVfID0gdlxuICAgICAgICAgICAgXG4gICAgICAgICAgICBwYXJlbnQgPSBAcGFyZW50XG4gICAgICAgICAgICB3aGlsZSBwYXJlbnRcbiAgICAgICAgICAgICAgICBwYXJlbnQubmVlZHNVcGRhdGVfID0geWVzXG4gICAgICAgICAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgI2lmIHZcbiAgICAgICAgICAgICMgICAgQHBhcmVudD8ubmVlZHNVcGRhdGUgPSB5ZXNcbiAgICAgICAgICAgICNpZiB2XG4gICAgICAgICAgICAjICAgIGZvciBvYmplY3QgaW4gQHN1Yk9iamVjdHNcbiAgICAgICAgICAgICMgICAgICAgIG9iamVjdC5uZWVkc1VwZGF0ZV8gPSB2XG4gICAgICAgICAgICBpZiB2XG4gICAgICAgICAgICAgICAgQHJlcXVlc3RTdWJVcGRhdGUoKVxuICAgICAgICBnZXQ6IC0+IEBuZWVkc1VwZGF0ZV8gfHwgU2NlbmVNYW5hZ2VyLnNjZW5lLnByZXBhcmluZ1xuICAgICAgICBcbiAgICByZXF1ZXN0U3ViVXBkYXRlOiAtPlxuICAgICAgICBmb3Igb2JqZWN0IGluIEBzdWJPYmplY3RzXG4gICAgICAgICAgICBpZiBvYmplY3RcbiAgICAgICAgICAgICAgICBvYmplY3QubmVlZHNVcGRhdGVfID0geWVzXG4gICAgICAgICAgICAgICAgb2JqZWN0LnJlcXVlc3RTdWJVcGRhdGUoKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICNcbiAgICAjIEdldHMgb3Igc2V0cyBpZiBhbiBvYmplY3QgbmVlZHMgYSBmdWxsIHVwZGF0ZS4gQSBmdWxsIHVwZGF0ZSB0cmlnZ2Vyc1xuICAgICMgYW4gdXBkYXRlIGZvciBhbGwgc3ViLW9iamVjdHMgcmVjdXJzaXZlbHkuIFxuICAgICNcbiAgICAjIEBwcm9wZXJ0eSBuZWVkc0Z1bGxVcGRhdGVcbiAgICAjIEB0eXBlIGJvb2xlYW5cbiAgICAjXG4gICAgQGFjY2Vzc29ycyBcIm5lZWRzRnVsbFVwZGF0ZVwiLCBcbiAgICAgICAgc2V0OiAodikgLT5cbiAgICAgICAgICAgIEBuZWVkc1VwZGF0ZSA9IHZcbiAgICAgICAgICAgIGlmIHZcbiAgICAgICAgICAgICAgICBmb3Igb2JqZWN0IGluIEBzdWJPYmplY3RzXG4gICAgICAgICAgICAgICAgICAgIG9iamVjdC5uZWVkc0Z1bGxVcGRhdGUgPSB2XG4gICAgICAgIGdldDogLT4gQG5lZWRzVXBkYXRlX1xuICAgICAgICAgICAgXG4gICAgIyMjKlxuICAgICogVGhlIGJhc2UgY2xhc3MgZm9yIGFsbCBnYW1lIG9iamVjdHMuIEEgZ2FtZSBvYmplY3QgaXRzZWxmIGRvZXNuJ3QgaW1wbGVtZW50XG4gICAgKiBhbnkgZ2FtZSBsb2dpYyBidXQgdXNlcyBjb21wb25lbnRzIGFuZCBzdWItb2JqZWN0cyBmb3IgdGhhdC5cbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgT2JqZWN0X0Jhc2VcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6ICgpIC0+XG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgc3ViT2JqZWN0c1xuICAgICAgICAqIEB0eXBlIGdzLk9iamVjdF9CYXNlW11cbiAgICAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAgICAqIEEgbGlzdCBvZiBnYW1lLW9iamVjdHMgZ3JvdXBlZCB1bmRlciB0aGlzIGdhbWUgb2JqZWN0LlxuICAgICAgICAjIyNcbiAgICAgICAgQHN1Yk9iamVjdHMgPSBbXVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBjb21wb25lbnRzXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50W11cbiAgICAgICAgKiBAZGVmYXVsdCBbXVxuICAgICAgICAqIEEgbGlzdCBvZiBjb21wb25lbnRzIGRlZmluaW5nIHRoZSBsb2dpYy9iZWhhdmlvciBhbmQgYXBwZWFyYW5jZSBvZiB0aGUgZ2FtZSBvYmplY3QuXG4gICAgICAgICMjI1xuICAgICAgICBAY29tcG9uZW50cyA9IFtdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IGNvbXBvbmVudHNCeUlkXG4gICAgICAgICogQHR5cGUgT2JqZWN0XG4gICAgICAgICogQGRlZmF1bHQgW11cbiAgICAgICAgKiBBbGwgYXNzb2NpYXRlZCBjb21wb25lbnRzIGJ5IHRoZWlyIElELlxuICAgICAgICAjIyNcbiAgICAgICAgQGNvbXBvbmVudHNCeUlkID0ge31cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgZGlzcG9zZWRcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICogQGRlZmF1bHQgZmFsc2VcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGdhbWUgb2JqZWN0IGlkIGRpc3Bvc2VkLiBBIGRpc3Bvc2VkIGdhbWUgb2JqZWN0IGNhbm5vdCBiZSB1c2VkIGFueW1vcmUuXG4gICAgICAgICMjI1xuICAgICAgICBAZGlzcG9zZWQgPSBub1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBhY3RpdmVcbiAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSBnYW1lIG9iamVjdCBpcyBhY3RpdmUuIEFuIGluYWN0aXZlIGdhbWUgb2JqZWN0IHdpbGwgbm90IGJlIHVwZGF0ZWQuXG4gICAgICAgICMjI1xuICAgICAgICBAYWN0aXZlID0geWVzXG4gICAgICAgIFxuICAgICAgICBAaW5wdXQgPSBub1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBpZFxuICAgICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiBUaGUgZ2FtZSBvYmplY3QncyBVSUQgKFVuaXF1ZSBJRClcbiAgICAgICAgIyMjXG4gICAgICAgIEBpZCA9IG51bGwgXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IGdyb3VwXG4gICAgICAgICogQGRlZmF1bHQgbnVsbFxuICAgICAgICAqIEB0eXBlIHN0cmluZ1xuICAgICAgICAqIFRoZSBnYW1lIG9iamVjdCdzIGdyb3VwLiBUbyBnZXQgYWxsIG9iamVjdCdzIG9mIGEgc3BlY2lmaWMgZ3JvdXAgdGhlIGdzLk9iamVjdE1hbmFnZXIub2JqZWN0c0J5R3JvdXAgcHJvcGVydHkgY2FuIGJlIHVzZWQuXG4gICAgICAgICMjI1xuICAgICAgICBAZ3JvdXAgPSBudWxsIFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBwYXJlbnRcbiAgICAgICAgKiBAdHlwZSBncy5PYmplY3RfQmFzZVxuICAgICAgICAqIEBkZWZhdWx0IG51bGxcbiAgICAgICAgKiBUaGUgcGFyZW50IG9iamVjdCBpZiB0aGUgZ2FtZSBvYmplY3QgaXMgYSBzdWItb2JqZWN0IG9mIGFub3RoZXIgZ2FtZSBvYmplY3QuXG4gICAgICAgICMjI1xuICAgICAgICBAcGFyZW50ID0gbnVsbFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBvcmRlclxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAqIEBkZWZhdWx0IDBcbiAgICAgICAgKiBDb250cm9scyB0aGUgdXBkYXRlLW9yZGVyLiBUaGUgc21hbGxlciB0aGUgdmFsdWUgdGhlIGVhcmxpZXIgdGhlIGdhbWUgb2JqZWN0IGlzIHVwZGF0ZWQgYmVmb3JlIG90aGVyIGdhbWUgb2JqZWN0cyBhcmUgdXBkYXRlZC5cbiAgICAgICAgIyMjXG4gICAgICAgIEBvcmRlciA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBAcHJvcGVydHkgckluZGV4XG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQGRlZmF1bHQgMFxuICAgICAgICAqIEhvbGRzIHRoZSByZW5kZXItaW5kZXggaWYgdGhlIGdhbWUgb2JqZWN0IGhhcyBhIGdyYXBoaWNhbCByZXByZXNlbnRhdGlvbiBvbiBzY3JlZW4uIFRoZSByZW5kZXItaW5kZXggaXMgdGhlXG4gICAgICAgICogaW5kZXggb2YgdGhlIGdhbWUgb2JqZWN0J3MgZ3JhcGhpYy1vYmplY3QoZ3MuR3JhcGhpY09iamVjdCkgaW4gdGhlIGN1cnJlbnQgbGlzdCBvZiBncmFwaGljLW9iamVjdHMuIFRoZSByZW5kZXItaW5kZXhcbiAgICAgICAgKiBpcyByZWFkLW9ubHkuIFNldHRpbmcgdGhlIHJlbmRlci1pbmRleCB0byBhIGNlcnRhaW4gdmFsdWUgaGFzIG5vIGVmZmVjdC5cbiAgICAgICAgIyMjXG4gICAgICAgIEBySW5kZXggPSAwXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQHByb3BlcnR5IG5lZWRzU29ydFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgKiBAZGVmYXVsdCB0cnVlXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSBsaXN0IG9mIHN1Yi1vYmplY3RzIG5lZWRzIHRvIGJlIHNvcnRlZCBieSBvcmRlciBiZWNhdXNlIG9mIGEgY2hhbmdlLlxuICAgICAgICAjIyNcbiAgICAgICAgQG5lZWRzU29ydCA9IHllc1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEBwcm9wZXJ0eSBuZWVkc1NvcnRcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICogQGRlZmF1bHQgdHJ1ZVxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgVUkgb2JqZWN0IG5lZWRzIHRvIGJlIHVwZGF0ZWQuXG4gICAgICAgICMjI1xuICAgICAgICBAbmVlZHNVcGRhdGUgPSB5ZXNcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBncy5PYmplY3RNYW5hZ2VyLmN1cnJlbnQ/LnJlZ2lzdGVyT2JqZWN0KHRoaXMpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIERpc3Bvc2VzIHRoZSBvYmplY3Qgd2l0aCBhbGwgaXRzIGNvbXBvbmVudHMgYW5kIHN1Yi1vYmplY3RzLiBBIGRpc3Bvc2VkIG9iamVjdCB3aWxsIGJlXG4gICAgKiByZW1vdmVkIGZyb20gdGhlIHBhcmVudCBhdXRvbWF0aWNhbGx5LlxuICAgICpcbiAgICAqIEBtZXRob2QgZGlzcG9zZVxuICAgICMjI1xuICAgIGRpc3Bvc2U6IC0+XG4gICAgICAgIGlmIG5vdCBAZGlzcG9zZWRcbiAgICAgICAgICAgIEBkaXNwb3NlZCA9IHllc1xuICAgICAgICAgICAgQGRpc3Bvc2VDb21wb25lbnRzKClcbiAgICAgICAgICAgIEBkaXNwb3NlT2JqZWN0cygpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICBncy5PYmplY3RNYW5hZ2VyLmN1cnJlbnQ/LnVucmVnaXN0ZXJPYmplY3QodGhpcylcbiAgICAgICAgXG4gICAgICAgIHJldHVybiBudWxsXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIERpc3Bvc2VzIGFsbCBzdWItb2JqZWN0cy5cbiAgICAqXG4gICAgKiBAbWV0aG9kIGRpc3Bvc2VPYmplY3RzXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgIyMjXG4gICAgZGlzcG9zZU9iamVjdHM6IC0+XG4gICAgICAgIGZvciBzdWJPYmplY3QgaW4gQHN1Yk9iamVjdHNcbiAgICAgICAgICAgIHN1Yk9iamVjdD8uZGlzcG9zZT8oKVxuICAgICAgICAgICAgXG4gICAgIyMjKlxuICAgICogRGlzcG9zZXMgYWxsIGNvbXBvbmVudHNcbiAgICAqXG4gICAgKiBAbWV0aG9kIGRpc3Bvc2VDb21wb25lbnRzXG4gICAgKiBAcHJvdGVjdGVkXG4gICAgIyMjXG4gICAgZGlzcG9zZUNvbXBvbmVudHM6IC0+XG4gICAgICAgIGZvciBjb21wb25lbnQgaW4gQGNvbXBvbmVudHNcbiAgICAgICAgICAgIGNvbXBvbmVudD8uZGlzcG9zZT8oKVxuICAgICAgIFxuICAgICMjIypcbiAgICAqIENhbGxzIHNldHVwLXJvdXRpbmUgb24gYWxsIGNvbXBvbnRlbnRzLlxuICAgICpcbiAgICAqIEBtZXRob2Qgc2V0dXBcbiAgICAjIyNcbiAgICBzZXR1cDogLT5cbiAgICAgICAgZm9yIGNvbXBvbmVudCBpbiBAY29tcG9uZW50c1xuICAgICAgICAgICAgY29tcG9uZW50LnNldHVwKClcbiAgICAgICAgICAgIFxuICAgICAgICBAaW5pdGlhbGl6ZWQgPSB5ZXNcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogRGVzZXJpYWxpemVzIGNvbXBvbmVudHMgZnJvbSBhIGRhdGEtYnVuZGxlIG9iamVjdC5cbiAgICAqIFxuICAgICogQG1ldGhvZCBjb21wb25lbnRzRnJvbURhdGFCdW5kbGVcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIFRoZSBkYXRhLWJ1bmRsZSBvYmplY3QuXG4gICAgIyMjXG4gICAgY29tcG9uZW50c0Zyb21EYXRhQnVuZGxlOiAoZGF0YSkgLT5cbiAgICAgICAgaWYgZGF0YT8uY29tcG9uZW50c1xuICAgICAgICAgICAgZm9yIGNvbXBvbmVudCBpbiBkYXRhLmNvbXBvbmVudHNcbiAgICAgICAgICAgICAgICBjb21wb25lbnRPYmplY3QgPSBuZXcgZ3NbY29tcG9uZW50LmNsYXNzTmFtZV0oY29tcG9uZW50KVxuICAgICAgICAgICAgICAgIEBhZGRDb21wb25lbnQoY29tcG9uZW50T2JqZWN0KVxuICAgICAgICAgICAgZGVsZXRlIGRhdGEuY29tcG9uZW50c1xuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIGNvbXBvbmVudHMgb2YgYSBzcGVjaWZpZWQgdHlwZSB0byBhIGRhdGEtYnVuZGxlLiBBIGNvbXBvbmVudFxuICAgICogbmVlZHMgdG8gaW1wbGVtZW50IHRoZSB0b0RhdGFCdW5kbGUgbWV0aG9kIGZvciBjb3JyZWN0IHNlcmlhbGl6YXRpb24uXG4gICAgKlxuICAgICogQG1ldGhvZCBjb21wb25lbnRzVG9EYXRhQnVuZGxlXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIEEgY29tcG9uZW50IGNsYXNzIG5hbWUuXG4gICAgKiBAcmV0dXJuIEEgZGF0YSBidW5kbGUuXG4gICAgIyMjXG4gICAgY29tcG9uZW50c1RvRGF0YUJ1bmRsZTogKHR5cGUpIC0+XG4gICAgICAgIGNvbXBvbmVudHMgPSBbXVxuICAgICAgICBmb3IgY29tcG9uZW50IGluIEBjb21wb25lbnRzXG4gICAgICAgICAgICBpZiBjb21wb25lbnQgaW5zdGFuY2VvZiB0eXBlXG4gICAgICAgICAgICAgICAgY29udGludWUgdW5sZXNzIGNvbXBvbmVudC50b0RhdGFCdW5kbGU/XG4gICAgICAgICAgICAgICAgYnVuZGxlID0gY29tcG9uZW50LnRvRGF0YUJ1bmRsZSgpXG4gICAgICAgICAgICAgICAgYnVuZGxlLmNsYXNzTmFtZSA9IGNvbXBvbmVudC5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgICAgICAgICAgICAgY29tcG9uZW50cy5wdXNoKGJ1bmRsZSlcbiAgICAgICAgcmV0dXJuIGNvbXBvbmVudHNcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogU3RhcnRzIGEgZnVsbC1yZWZyZXNoIG9uIGFsbCBzdWItb2JqZWN0c1xuICAgICpcbiAgICAqIEBtZXRob2QgZnVsbFJlZnJlc2hcbiAgICAjIyNcbiAgICBmdWxsUmVmcmVzaDogLT5cbiAgICAgICAgZm9yIG9iamVjdCBpbiBAc3ViT2JqZWN0c1xuICAgICAgICAgICAgaWYgb2JqZWN0XG4gICAgICAgICAgICAgICAgb2JqZWN0Lm5lZWRzVXBkYXRlID0geWVzXG4gICAgICAgICAgICAgICAgb2JqZWN0LmZ1bGxSZWZyZXNoKClcbiAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gbnVsbFxuICAgIFxuICAgICMjIypcbiAgICAqIFVwZGF0ZXMgdGhlIG9iamVjdCB3aXRoIGFsbCBwYXJlbnQtIGFuZCBzdWItb2JqZWN0cy4gXG4gICAgKlxuICAgICogQG1ldGhvZCBmdWxsVXBkYXRlXG4gICAgIyMjXG4gICAgZnVsbFVwZGF0ZTogLT5cbiAgICAgICAgcGFyZW50ID0gdGhpc1xuICAgICAgICB3aGlsZSBwYXJlbnQgIT0gbnVsbFxuICAgICAgICAgICAgcGFyZW50LnVwZGF0ZSgpXG4gICAgICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50XG4gICAgICAgICAgICBcbiAgICAgICAgZm9yIG9iamVjdCBpbiBAc3ViT2JqZWN0c1xuICAgICAgICAgICAgb2JqZWN0Py51cGRhdGUoKVxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBVcGRhdGVzIHRoZSBvYmplY3QgYW5kIGFsbCBpdHMgY29tcG9uZW50cy4gVGhpcyBtZXRob2QgaXNcbiAgICAqIGNhbGxlZCBhdXRvbWF0aWNhbGx5IGJ5IHRoZSBwYXJlbnQgb3IgT2JqZWN0TWFuYWdlciBzbyBpbiByZWd1bGFyIGl0IGlzIFxuICAgICogbm90IG5lY2Vzc2FyeSB0byBjYWxsIGl0IG1hbnVhbGx5LlxuICAgICpcbiAgICAqIEBtZXRob2QgdXBkYXRlXG4gICAgIyMjXG4gICAgdXBkYXRlOiAtPlxuICAgICAgICBpID0gMFxuICAgICAgICB3aGlsZSBpIDwgQGNvbXBvbmVudHMubGVuZ3RoXG4gICAgICAgICAgICBjb21wb25lbnQgPSBAY29tcG9uZW50c1tpXVxuICAgICAgICAgICAgaWYgbm90IGNvbXBvbmVudC5kaXNwb3NlZFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudC51cGRhdGUoKVxuICAgICAgICAgICAgICAgIGkrK1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIEBjb21wb25lbnRzLnNwbGljZShpLCAxKVxuXG5cbiAgICAgICAgaWYgQGlucHV0IHRoZW4gSW5wdXQuY2xlYXIoKVxuICAgICAgICBAaW5wdXQgPSBub1xuICAgICAgICBcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICAgICAgICAgIFxuICAgICMjIypcbiAgICAqIFNlYXJjaGVzIGZvciB0aGUgZmlyc3QgY29tcG9uZW50IHdpdGggdGhlIHNwZWNpZmllZCBjbGFzcyBuYW1lLlxuICAgICpcbiAgICAqIEBtZXRob2QgZmluZENvbXBvbmVudFxuICAgICogQHBhcmFtIHtTdHJpbmd9IG5hbWUgVGhlIGNsYXNzIG5hbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNvbXBvbmVudCBvciBudWxsIGlmIGEgY29tcG9uZW50IHdpdGggdGhlIHNwZWNpZmllZCBjbGFzcyBuYW1lIGNhbm5vdCBiZSBmb3VuZC5cbiAgICAjIyNcbiAgICBmaW5kQ29tcG9uZW50OiAobmFtZSkgLT4gQGNvbXBvbmVudHMuZmlyc3QgKHYpIC0+IHYuY29uc3RydWN0b3IubmFtZSA9PSBuYW1lXG4gICAgXG4gICAgIyMjKlxuICAgICogU2VhcmNoZXMgZm9yIGFsbCBjb21wb25lbnRzIHdpdGggdGhlIHNwZWNpZmllZCBjbGFzcyBuYW1lLlxuICAgICpcbiAgICAqIEBtZXRob2QgZmluZENvbXBvbmVudHNcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIFRoZSBjbGFzcyBuYW1lIG9mIHRoZSBjb21wb25lbnRzLlxuICAgICogQHJldHVybiB7QXJyYXl9IFRoZSBjb21wb25lbnRzIG9yIG51bGwgaWYgbm8gY29tcG9uZW50IHdpdGggdGhlIHNwZWNpZmllZCBjbGFzcyBuYW1lIGhhcyBiZWVuIGZvdW5kLlxuICAgICMjI1xuICAgIGZpbmRDb21wb25lbnRzOiAobmFtZSkgLT4gQGNvbXBvbmVudHMud2hlcmUgKHYpIC0+IHYuY29uc3RydWN0b3IubmFtZSA9PSBuYW1lXG4gICAgXG4gICAgIyMjKlxuICAgICogU2VhcmNoZXMgZm9yIHRoZSBjb21wb25lbnQgd2l0aCB0aGUgc3BlY2lmaWVkIElELlxuICAgICpcbiAgICAqIEBtZXRob2QgZmluZENvbXBvbmVudEJ5SWRcbiAgICAqIEBwYXJhbSB7U3RyaW5nfSBpZCBUaGUgdW5pcXVlIGlkZW50aWZpZXIgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAqIEByZXR1cm4ge0NvbXBvbmVudH0gVGhlIGNvbXBvbmVudCBvciBudWxsIGlmIGEgY29tcG9uZW50IHdpdGggdGhlIHNwZWNpZmllZCBJRCBjYW5ub3QgYmUgZm91bmQuXG4gICAgIyMjXG4gICAgZmluZENvbXBvbmVudEJ5SWQ6IChpZCkgLT4gQGNvbXBvbmVudHNCeUlkW2lkXVxuICAgIFxuICAgICMjIypcbiAgICAqIEFkZHMgYW4gb2JqZWN0IHRvIHRoZSBsaXN0IG9mIHN1Yi1vYmplY3RzLlxuICAgICpcbiAgICAqIEBtZXRob2QgYWRkT2JqZWN0XG4gICAgKiBAcGFyYW0ge09iamVjdF9CYXNlfSBvYmplY3QgVGhlIG9iamVjdCB3aGljaCBzaG91bGQgYmUgYWRkZWQuXG4gICAgIyMjXG4gICAgYWRkT2JqZWN0OiAob2JqZWN0KSAtPlxuICAgICAgICBncy5PYmplY3RNYW5hZ2VyLmN1cnJlbnQ/LnJlbW92ZShvYmplY3QpXG4gICAgICAgIG9iamVjdC5wYXJlbnQ/LnJlbW92ZU9iamVjdChvYmplY3QpXG4gICAgICAgIG9iamVjdC5wYXJlbnQgPSB0aGlzXG4gICAgICAgIEBzdWJPYmplY3RzLnB1c2gob2JqZWN0KVxuICAgICAgICBAbmVlZHNTb3J0ID0geWVzXG4gICAgICAgIEBuZWVkc1VwZGF0ZSA9IHllc1xuICAgIFxuICAgICAgICBpZiBvYmplY3QuaWQ/XG4gICAgICAgICAgICBncy5PYmplY3RNYW5hZ2VyLmN1cnJlbnQuc2V0T2JqZWN0QnlJZChvYmplY3QsIG9iamVjdC5pZClcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogSW5zZXJ0cyBhbiBvYmplY3QgaW50byB0aGUgbGlzdCBvZiBzdWItb2JqZWN0cyBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LlxuICAgICpcbiAgICAqIEBtZXRob2QgaW5zZXJ0T2JqZWN0XG4gICAgKiBAcGFyYW0ge09iamVjdF9CYXNlfSBvYmplY3QgVGhlIG9iamVjdCB3aGljaCBzaG91bGQgYmUgaW5zZXJ0ZWQuXG4gICAgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggVGhlIGluZGV4LlxuICAgICMjI1xuICAgIGluc2VydE9iamVjdDoob2JqZWN0LCBpbmRleCkgLT5cbiAgICAgICAgZ3MuT2JqZWN0TWFuYWdlci5jdXJyZW50LnJlbW92ZShvYmplY3QpXG4gICAgICAgIG9iamVjdC5wYXJlbnQ/LnJlbW92ZU9iamVjdChvYmplY3QpXG4gICAgICAgIG9iamVjdC5wYXJlbnQgPSB0aGlzXG4gICAgICAgIEBzdWJPYmplY3RzLnNwbGljZShpbmRleCwgMCwgb2JqZWN0KVxuICAgICAgXG4gICAgICAgIGlmIG9iamVjdC5pZD9cbiAgICAgICAgICAgIGdzLk9iamVjdE1hbmFnZXIuY3VycmVudC5zZXRPYmplY3RCeUlkKG9iamVjdCwgb2JqZWN0LmlkKVxuICAgICAgICAgICAgXG4gICAgIyMjKlxuICAgICogU2V0cyBzdWItb2JqZWN0IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAgKlxuICAgICogQG1ldGhvZCBzZXRPYmplY3RcbiAgICAqIEBwYXJhbSB7T2JqZWN0X0Jhc2V9IG9iamVjdCBUaGUgb2JqZWN0LlxuICAgICogQHBhcmFtIHtOdW1iZXJ9IGluZGV4IFRoZSBpbmRleC5cbiAgICAjIyNcbiAgICBzZXRPYmplY3Q6IChvYmplY3QsIGluZGV4KSAtPlxuICAgICAgICBpZiBvYmplY3RcbiAgICAgICAgICAgIGdzLk9iamVjdE1hbmFnZXIuY3VycmVudC5yZW1vdmUob2JqZWN0KVxuICAgICAgICAgICAgb2JqZWN0LnBhcmVudD8ucmVtb3ZlT2JqZWN0KG9iamVjdClcbiAgICAgICAgICAgIG9iamVjdC5wYXJlbnQgPSB0aGlzXG4gICAgICAgICAgICBcbiAgICAgICAgQHN1Yk9iamVjdHNbaW5kZXhdID0gb2JqZWN0XG4gICAgICBcbiAgICAgICAgaWYgb2JqZWN0Py5pZD9cbiAgICAgICAgICAgIGdzLk9iamVjdE1hbmFnZXIuY3VycmVudC5zZXRPYmplY3RCeUlkKG9iamVjdCwgb2JqZWN0LmlkKVxuICAgIFxuICAgICMjIypcbiAgICAqIFJlbW92ZXMgdGhlIHNwZWNpZmllZCBvYmplY3QgZnJvbSB0aGUgbGlzdCBvZiBzdWItb2JqZWN0cy5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHJlbW92ZU9iamVjdFxuICAgICogQHBhcmFtIHtPYmplY3RfQmFzZX0gb2JqZWN0IFRoZSBvYmplY3Qgd2hpY2ggc2hvdWxkIGJlIHJlbW92ZWQuXG4gICAgIyMjXG4gICAgcmVtb3ZlT2JqZWN0OiAob2JqZWN0KSAtPlxuICAgICAgICBAc3ViT2JqZWN0cy5yZW1vdmUob2JqZWN0KVxuICAgICAgICBvYmplY3QucGFyZW50ID0gbnVsbFxuICAgICAgICBAbmVlZHNVcGRhdGUgPSB5ZXNcbiAgICBcbiAgICAjIyMqXG4gICAgKiBFcmFzZXMgdGhlIG9iamVjdCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4LiBUaGUgbGlzdCBzaXplXG4gICAgKiB3aWxsIG5vdCBiZSBjaGFuZ2VkIGJ1dCB0aGUgdGhlIHZhbHVlIGF0IHRoZSBpbmRleCB3aWxsIGJlIHNldCB0byBudWxsLlxuICAgICpcbiAgICAqIEBtZXRob2QgZXJhc2VPYmplY3RcbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBvYmplY3QgVGhlIG9iamVjdCB3aGljaCBzaG91bGQgYmUgZXJhc2VkLlxuICAgICMjI1xuICAgIGVyYXNlT2JqZWN0OiAoaW5kZXgpIC0+XG4gICAgICAgIG9iamVjdCA9IEBzdWJPYmplY3RzW2luZGV4XVxuICAgICAgICBvYmplY3Q/LnBhcmVudCA9IG51bGxcbiAgICAgICAgQHN1Yk9iamVjdHNbaW5kZXhdID0gbnVsbFxuICAgIFxuICAgICMjIypcbiAgICAqIEFkZHMgdGhlIHNwZWNpZmllZCBjb21wb25lbnQgdG8gdGhlIG9iamVjdC5cbiAgICAqXG4gICAgKiBAbWV0aG9kIGFkZENvbXBvbmVudFxuICAgICogQHBhcmFtIHtDb21wb25lbnR9IGNvbXBvbmVudCBUaGUgY29tcG9uZW50XG4gICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgQW4gb3B0aW9uYWwgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb21wb25lbnQuXG4gICAgIyMjXG4gICAgYWRkQ29tcG9uZW50OiAoY29tcG9uZW50LCBpZCkgLT4gXG4gICAgICAgIGNvbXBvbmVudC5vYmplY3QgPSB0aGlzXG4gICAgICAgIEBjb21wb25lbnRzLnB1c2goY29tcG9uZW50KVxuICAgICAgICBpZiBpZD9cbiAgICAgICAgICAgIEBjb21wb25lbnRzQnlJZFtpZF0gPSBjb21wb25lbnRcbiAgICAjIyMqXG4gICAgKiBJbnNlcnRzIGEgY29tcG9uZW50IGF0IHRoZSBzcGVjaWZpZWQgaW5kZXguXG4gICAgKlxuICAgICogQG1ldGhvZCBpbnNlcnRDb21wb25lbnRcbiAgICAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGNvbXBvbmVudC5cbiAgICAqIEBwYXJhbSB7TnVtYmVyfSBpbmRleCBUaGUgaW5kZXguXG4gICAgKiBAcGFyYW0ge1N0cmluZ30gaWQgQW4gb3B0aW9uYWwgdW5pcXVlIGlkZW50aWZpZXIgZm9yIHRoZSBjb21wb25lbnQuXG4gICAgIyMjICAgIFxuICAgIGluc2VydENvbXBvbmVudDogKGNvbXBvbmVudCwgaW5kZXgsIGlkKSAtPlxuICAgICAgICBjb21wb25lbnQub2JqZWN0ID0gdGhpc1xuICAgICAgICBAY29tcG9uZW50cy5zcGxpY2UoaW5kZXgsIDAsIGNvbXBvbmVudClcbiAgICAgICAgaWYgaWQ/XG4gICAgICAgICAgICBAY29tcG9uZW50c0J5SWRbaWRdID0gY29tcG9uZW50XG4gICAgXG4gICAgIyMjKlxuICAgICogUmVtb3ZlcyBhIGNvbXBvbmVudCBmcm9tIHRoZSBvYmplY3QuXG4gICAgKlxuICAgICogQG1ldGhvZCByZW1vdmVDb21wb25lbnRcbiAgICAqIEBwYXJhbSB7Q29tcG9uZW50fSBjb21wb25lbnQgVGhlIGNvbXBvbmVudCB0byByZW1vdmUuXG4gICAgIyMjICBcbiAgICByZW1vdmVDb21wb25lbnQ6IChjb21wb25lbnQpIC0+IFxuICAgICAgICBAY29tcG9uZW50cy5yZW1vdmUoY29tcG9uZW50KVxuICAgICAgICBpZiBpZD9cbiAgICAgICAgICAgIGRlbGV0ZSBAY29tcG9uZW50c0J5SWRbaWRdXG5cbmdzLk9iamVjdF9CYXNlID0gT2JqZWN0X0Jhc2UiXX0=
//# sourceURL=Object_Base_6.js
var Object_Visual,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Visual = (function(superClass) {
  extend(Object_Visual, superClass);


  /**
  * The base class for all regular visual game objects. 
  *
  * @module 
  * @class Object_Visual
  * @extends gs.Object_Base
  * @memberof vn
  * @constructor
   */

  function Object_Visual(data) {
    Object_Visual.__super__.constructor.call(this);

    /**
    * Indiciates if the game object is visible on screen.
    * @property visible
    * @type boolean
     */
    this.visible = true;

    /**
    * The object's destination rectangle on screen.
    * @property dstRect
    * @type gs.Rect
     */
    this.dstRect = new Rect(data != null ? data.x : void 0, data != null ? data.y : void 0);

    /**
    * The object's origin.
    * @property origin
    * @type gs.Point
     */
    this.origin = new gs.Point(0, 0);

    /**
    * The object's offset.
    * @property offset
    * @type gs.Point
     */
    this.offset = new gs.Point(0, 0);

    /**
    * The object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner
    * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1
    * places the object with its lower-right corner.
    * @property anchor
    * @type gs.Point
     */
    this.anchor = new gs.Point(0.0, 0.0);

    /**
    * The object's zoom-setting for x and y axis. The default value is
    * { x: 1.0, y: 1.0 }
    * @property zoom
    * @type gs.Point
     */
    this.zoom = (data != null ? data.zoom : void 0) || new gs.Point(1.0, 1.0);

    /**
    * The object's z-index controls rendering-order/image-overlapping. An object with a smaller z-index is rendered
    * before an object with a larger index. For example: To make sure a game object is always on top of the screen, it
    * should have the largest z-index of all game objects.
    * @property zIndex
    * @type number
     */
    this.zIndex = 700;

    /**
    * The object's blend mode controls how the blending of the object's visual representation is calculated.
    * @property blendMode
    * @type number
    * @default gs.BlendMode.NORMAL
     */
    this.blendMode = gs.BlendMode.NORMAL;

    /**
    * The object's viewport.
    * @property viewport
    * @type gs.Viewport
     */
    this.viewport = Graphics.viewport;

    /**
    * The object's motion-blur settings.
    * @property motionBlur
    * @type gs.MotionBlur
     */
    this.motionBlur = new gs.MotionBlur();

    /**
    * The object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.
    * @property opacity
    * @type number
     */
    this.opacity = 255;
  }


  /**
  * Restores the game object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_Visual.prototype.restore = function(data) {
    if (data.components) {
      this.componentsFromDataBundle(data);
    }
    Object.mixin(this, data);
    this.dstRect = gs.Rect.fromObject(data.dstRect);
    return this.motionBlur = gs.MotionBlur.fromObject(data.motionBlur);
  };

  return Object_Visual;

})(gs.Object_Base);

gs.Object_Visual = Object_Visual;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsYUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7O0VBU2EsdUJBQUMsSUFBRDtJQUNULDZDQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7O0FBRVg7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLElBQUEsZ0JBQUssSUFBSSxDQUFFLFVBQVgsaUJBQWMsSUFBSSxDQUFFLFVBQXBCOztBQUVmOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsS0FBSCxDQUFTLENBQVQsRUFBWSxDQUFaOztBQUVkOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsS0FBSCxDQUFTLENBQVQsRUFBWSxDQUFaOztBQUVkOzs7Ozs7O0lBT0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxLQUFILENBQVMsR0FBVCxFQUFjLEdBQWQ7O0FBRWQ7Ozs7OztJQU1BLElBQUMsQ0FBQSxJQUFELG1CQUFRLElBQUksQ0FBRSxjQUFOLElBQWtCLElBQUEsRUFBRSxDQUFDLEtBQUgsQ0FBUyxHQUFULEVBQWMsR0FBZDs7QUFFMUI7Ozs7Ozs7SUFPQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7Ozs7SUFNQSxJQUFDLENBQUEsU0FBRCxHQUFhLEVBQUUsQ0FBQyxTQUFTLENBQUM7O0FBRTFCOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVksUUFBUSxDQUFDOztBQUVyQjs7Ozs7SUFLQSxJQUFDLENBQUEsVUFBRCxHQUFrQixJQUFBLEVBQUUsQ0FBQyxVQUFILENBQUE7O0FBRWxCOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7RUFwRkY7OztBQXNGYjs7Ozs7OzswQkFNQSxPQUFBLEdBQVMsU0FBQyxJQUFEO0lBQ0wsSUFBRyxJQUFJLENBQUMsVUFBUjtNQUNJLElBQUMsQ0FBQSx3QkFBRCxDQUEwQixJQUExQixFQURKOztJQUdBLE1BQU0sQ0FBQyxLQUFQLENBQWEsSUFBYixFQUFtQixJQUFuQjtJQUVBLElBQUMsQ0FBQSxPQUFELEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFSLENBQW1CLElBQUksQ0FBQyxPQUF4QjtXQUNYLElBQUMsQ0FBQSxVQUFELEdBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFkLENBQXlCLElBQUksQ0FBQyxVQUE5QjtFQVBUOzs7O0dBdEdlLEVBQUUsQ0FBQzs7QUErRy9CLEVBQUUsQ0FBQyxhQUFILEdBQW1CIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfVmlzdWFsXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfVmlzdWFsIGV4dGVuZHMgZ3MuT2JqZWN0X0Jhc2VcbiAgICAjIyMqXG4gICAgKiBUaGUgYmFzZSBjbGFzcyBmb3IgYWxsIHJlZ3VsYXIgdmlzdWFsIGdhbWUgb2JqZWN0cy4gXG4gICAgKlxuICAgICogQG1vZHVsZSBcbiAgICAqIEBjbGFzcyBPYmplY3RfVmlzdWFsXG4gICAgKiBAZXh0ZW5kcyBncy5PYmplY3RfQmFzZVxuICAgICogQG1lbWJlcm9mIHZuXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKGRhdGEpIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2lhdGVzIGlmIHRoZSBnYW1lIG9iamVjdCBpcyB2aXNpYmxlIG9uIHNjcmVlbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdmlzaWJsZVxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXNpYmxlID0geWVzXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGRlc3RpbmF0aW9uIHJlY3RhbmdsZSBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IGRzdFJlY3RcbiAgICAgICAgKiBAdHlwZSBncy5SZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAZHN0UmVjdCA9IG5ldyBSZWN0KGRhdGE/LngsIGRhdGE/LnkpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIG9yaWdpbi5cbiAgICAgICAgKiBAcHJvcGVydHkgb3JpZ2luXG4gICAgICAgICogQHR5cGUgZ3MuUG9pbnRcbiAgICAgICAgIyMjXG4gICAgICAgIEBvcmlnaW4gPSBuZXcgZ3MuUG9pbnQoMCwgMClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3Mgb2Zmc2V0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBvZmZzZXRcbiAgICAgICAgKiBAdHlwZSBncy5Qb2ludFxuICAgICAgICAjIyNcbiAgICAgICAgQG9mZnNldCA9IG5ldyBncy5Qb2ludCgwLCAwKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyBhbmNob3ItcG9pbnQuIEZvciBleGFtcGxlOiBBbiBhbmNob3ItcG9pbnQgd2l0aCAwLDAgcGxhY2VzIHRoZSBvYmplY3Qgd2l0aCBpdHMgdG9wLWxlZnQgY29ybmVyXG4gICAgICAgICogYXQgaXRzIHBvc2l0aW9uIGJ1dCB3aXRoIGFuIDAuNSwgMC41IGFuY2hvci1wb2ludCB0aGUgb2JqZWN0IGlzIHBsYWNlZCB3aXRoIGl0cyBjZW50ZXIuIEFuIGFuY2hvci1wb2ludCBvZiAxLDFcbiAgICAgICAgKiBwbGFjZXMgdGhlIG9iamVjdCB3aXRoIGl0cyBsb3dlci1yaWdodCBjb3JuZXIuXG4gICAgICAgICogQHByb3BlcnR5IGFuY2hvclxuICAgICAgICAqIEB0eXBlIGdzLlBvaW50XG4gICAgICAgICMjI1xuICAgICAgICBAYW5jaG9yID0gbmV3IGdzLlBvaW50KDAuMCwgMC4wKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyB6b29tLXNldHRpbmcgZm9yIHggYW5kIHkgYXhpcy4gVGhlIGRlZmF1bHQgdmFsdWUgaXNcbiAgICAgICAgKiB7IHg6IDEuMCwgeTogMS4wIH1cbiAgICAgICAgKiBAcHJvcGVydHkgem9vbVxuICAgICAgICAqIEB0eXBlIGdzLlBvaW50XG4gICAgICAgICMjI1xuICAgICAgICBAem9vbSA9IGRhdGE/Lnpvb20gfHwgbmV3IGdzLlBvaW50KDEuMCwgMS4wKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyB6LWluZGV4IGNvbnRyb2xzIHJlbmRlcmluZy1vcmRlci9pbWFnZS1vdmVybGFwcGluZy4gQW4gb2JqZWN0IHdpdGggYSBzbWFsbGVyIHotaW5kZXggaXMgcmVuZGVyZWRcbiAgICAgICAgKiBiZWZvcmUgYW4gb2JqZWN0IHdpdGggYSBsYXJnZXIgaW5kZXguIEZvciBleGFtcGxlOiBUbyBtYWtlIHN1cmUgYSBnYW1lIG9iamVjdCBpcyBhbHdheXMgb24gdG9wIG9mIHRoZSBzY3JlZW4sIGl0XG4gICAgICAgICogc2hvdWxkIGhhdmUgdGhlIGxhcmdlc3Qgei1pbmRleCBvZiBhbGwgZ2FtZSBvYmplY3RzLlxuICAgICAgICAqIEBwcm9wZXJ0eSB6SW5kZXhcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEB6SW5kZXggPSA3MDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgYmxlbmQgbW9kZSBjb250cm9scyBob3cgdGhlIGJsZW5kaW5nIG9mIHRoZSBvYmplY3QncyB2aXN1YWwgcmVwcmVzZW50YXRpb24gaXMgY2FsY3VsYXRlZC5cbiAgICAgICAgKiBAcHJvcGVydHkgYmxlbmRNb2RlXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICogQGRlZmF1bHQgZ3MuQmxlbmRNb2RlLk5PUk1BTFxuICAgICAgICAjIyNcbiAgICAgICAgQGJsZW5kTW9kZSA9IGdzLkJsZW5kTW9kZS5OT1JNQUxcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3Mgdmlld3BvcnQuXG4gICAgICAgICogQHByb3BlcnR5IHZpZXdwb3J0XG4gICAgICAgICogQHR5cGUgZ3MuVmlld3BvcnRcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aWV3cG9ydCA9IEdyYXBoaWNzLnZpZXdwb3J0XG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIG1vdGlvbi1ibHVyIHNldHRpbmdzLlxuICAgICAgICAqIEBwcm9wZXJ0eSBtb3Rpb25CbHVyXG4gICAgICAgICogQHR5cGUgZ3MuTW90aW9uQmx1clxuICAgICAgICAjIyNcbiAgICAgICAgQG1vdGlvbkJsdXIgPSBuZXcgZ3MuTW90aW9uQmx1cigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIG9wYWNpdHkgdG8gY29udHJvbCB0cmFuc3BhcmVuY3kuIEZvciBleGFtcGxlOiAwID0gVHJhbnNwYXJlbnQsIDI1NSA9IE9wYXF1ZSwgMTI4ID0gU2VtaS1UcmFuc3BhcmVudC5cbiAgICAgICAgKiBAcHJvcGVydHkgb3BhY2l0eVxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQG9wYWNpdHkgPSAyNTVcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogUmVzdG9yZXMgdGhlIGdhbWUgb2JqZWN0IGZyb20gYSBkYXRhLWJ1bmRsZS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHJlc3RvcmVcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gVGhlIGRhdGEtYnVuZGxlLlxuICAgICMjIyAgICBcbiAgICByZXN0b3JlOiAoZGF0YSkgLT5cbiAgICAgICAgaWYgZGF0YS5jb21wb25lbnRzXG4gICAgICAgICAgICBAY29tcG9uZW50c0Zyb21EYXRhQnVuZGxlKGRhdGEpXG4gICAgICAgICAgICBcbiAgICAgICAgT2JqZWN0Lm1peGluKHRoaXMsIGRhdGEpXG4gICAgICAgIFxuICAgICAgICBAZHN0UmVjdCA9IGdzLlJlY3QuZnJvbU9iamVjdChkYXRhLmRzdFJlY3QpXG4gICAgICAgIEBtb3Rpb25CbHVyID0gZ3MuTW90aW9uQmx1ci5mcm9tT2JqZWN0KGRhdGEubW90aW9uQmx1cilcbiAgICAgICAgXG5ncy5PYmplY3RfVmlzdWFsID0gT2JqZWN0X1Zpc3VhbCJdfQ==
//# sourceURL=Object_Visual_25.js
var Object_Background,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Background = (function(superClass) {
  extend(Object_Background, superClass);

  Object_Background.objectCodecBlackList = ["parent"];


  /**
  * A game object used for backgrounds in a scene.
  *
  * @module vn
  * @class Object_Background
  * @extends gs.Object_Visual
  * @memberof vn
  * @constructor
   */

  function Object_Background(parent, data) {
    Object_Background.__super__.constructor.call(this, data);
    this.zIndex = 0;

    /**
    * The object's source rectangle. It controls which part of the object's image is used
    * for visual presentation.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect();

    /**
    * The object's mask to execute masking-effects on it.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * The rotation-angle of the background in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * Contains different kinds of effects which can be activated for the object.
    * @property effects
    * @type Object
     */
    this.effects = {
      wobble: new gs.WobbleEffect()

      /**
      * The object's image used for visual presentation.
      * @property image
      * @type string
       */
    };
    this.image = "";

    /**
    * The color tone of the object used for the visual presentation.
    * @property tone
    * @type gs.Tone
     */
    this.tone = new Tone(0, 0, 0, 0);

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_TilingPlane();
    this.visual.imageFolder = "Graphics/Backgrounds";
    this.addComponent(this.visual);
    this.addComponent(this.animator);
    this.componentsFromDataBundle(data);
  }


  /**
  * Restores the game object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_Background.prototype.restore = function(data) {
    Object_Background.__super__.restore.call(this, data);
    this.srcRect = gs.Rect.fromObject(data.srcRect);
    this.mask = gs.Mask.fromObject(data.mask);
    return this.visual.looping = data.looping;
  };


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Background.prototype.toDataBundle = function() {
    var components, result;
    components = this.componentsToDataBundle(gs.Component_Animation);
    result = {
      dstRect: this.dstRect,
      srcRect: this.srcRect,
      opacity: this.opacity,
      origin: this.origin,
      zIndex: this.zIndex,
      mask: this.mask.toDataBundle(),
      motionBlur: this.motionBlur,
      zoom: this.zoom,
      angle: this.angle,
      anchor: this.anchor,
      offset: this.offset,
      mirror: this.mirror,
      tone: this.tone,
      image: this.image,
      looping: this.visual.looping,
      components: components
    };
    return result;
  };

  return Object_Background;

})(gs.Object_Visual);

vn.Object_Background = Object_Background;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsaUJBQUE7RUFBQTs7O0FBQU07OztFQUNGLGlCQUFDLENBQUEsb0JBQUQsR0FBd0IsQ0FBQyxRQUFEOzs7QUFFeEI7Ozs7Ozs7Ozs7RUFTYSwyQkFBQyxNQUFELEVBQVMsSUFBVDtJQUNULG1EQUFNLElBQU47SUFDQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7Ozs7SUFNQSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsSUFBQSxDQUFBOztBQUVmOzs7OztJQUtBLElBQUMsQ0FBQSxJQUFELEdBQVksSUFBQSxFQUFFLENBQUMsSUFBSCxDQUFBOztBQUVaOzs7Ozs7SUFNQSxJQUFDLENBQUEsS0FBRCxHQUFTOztBQUVUOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7TUFBQSxNQUFBLEVBQVksSUFBQSxFQUFFLENBQUMsWUFBSCxDQUFBOztBQUV2Qjs7OztTQUZXOztJQU9YLElBQUMsQ0FBQSxLQUFELEdBQVM7O0FBRVQ7Ozs7O0lBS0EsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLElBQUEsQ0FBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxDQUFkOztBQUVaOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLGtCQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMscUJBQUgsQ0FBQTtJQUNkLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQjtJQUV0QixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtJQUNBLElBQUMsQ0FBQSx3QkFBRCxDQUEwQixJQUExQjtFQWpFUzs7O0FBcUViOzs7Ozs7OzhCQU1BLE9BQUEsR0FBUyxTQUFDLElBQUQ7SUFDTCwrQ0FBTSxJQUFOO0lBRUEsSUFBQyxDQUFBLE9BQUQsR0FBVyxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVIsQ0FBbUIsSUFBSSxDQUFDLE9BQXhCO0lBQ1gsSUFBQyxDQUFBLElBQUQsR0FBUSxFQUFFLENBQUMsSUFBSSxDQUFDLFVBQVIsQ0FBbUIsSUFBSSxDQUFDLElBQXhCO1dBQ1IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQUFSLEdBQWtCLElBQUksQ0FBQztFQUxsQjs7O0FBUVQ7Ozs7Ozs7OEJBTUEsWUFBQSxHQUFjLFNBQUE7QUFDVixRQUFBO0lBQUEsVUFBQSxHQUFhLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixFQUFFLENBQUMsbUJBQTNCO0lBRWIsTUFBQSxHQUFTO01BQ0wsT0FBQSxFQUFTLElBQUMsQ0FBQSxPQURMO01BRUwsT0FBQSxFQUFTLElBQUMsQ0FBQSxPQUZMO01BR0wsT0FBQSxFQUFTLElBQUMsQ0FBQSxPQUhMO01BSUwsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQUpKO01BS0wsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQUxKO01BTUwsSUFBQSxFQUFNLElBQUMsQ0FBQSxJQUFJLENBQUMsWUFBTixDQUFBLENBTkQ7TUFPTCxVQUFBLEVBQVksSUFBQyxDQUFBLFVBUFI7TUFRTCxJQUFBLEVBQU0sSUFBQyxDQUFBLElBUkY7TUFTTCxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBVEg7TUFVTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BVko7TUFXTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BWEo7TUFZTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BWko7TUFhTCxJQUFBLEVBQU0sSUFBQyxDQUFBLElBYkY7TUFjTCxLQUFBLEVBQU8sSUFBQyxDQUFBLEtBZEg7TUFlTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxPQWZaO01BZ0JMLFVBQUEsRUFBWSxVQWhCUDs7QUFtQlQsV0FBTztFQXRCRzs7OztHQXJHYyxFQUFFLENBQUM7O0FBOEhuQyxFQUFFLENBQUMsaUJBQUgsR0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9CYWNrZ3JvdW5kXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfQmFja2dyb3VuZCBleHRlbmRzIGdzLk9iamVjdF9WaXN1YWxcbiAgICBAb2JqZWN0Q29kZWNCbGFja0xpc3QgPSBbXCJwYXJlbnRcIl1cbiAgICBcbiAgICAjIyMqXG4gICAgKiBBIGdhbWUgb2JqZWN0IHVzZWQgZm9yIGJhY2tncm91bmRzIGluIGEgc2NlbmUuXG4gICAgKlxuICAgICogQG1vZHVsZSB2blxuICAgICogQGNsYXNzIE9iamVjdF9CYWNrZ3JvdW5kXG4gICAgKiBAZXh0ZW5kcyBncy5PYmplY3RfVmlzdWFsXG4gICAgKiBAbWVtYmVyb2Ygdm5cbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAocGFyZW50LCBkYXRhKSAtPlxuICAgICAgICBzdXBlcihkYXRhKVxuICAgICAgICBAekluZGV4ID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyBzb3VyY2UgcmVjdGFuZ2xlLiBJdCBjb250cm9scyB3aGljaCBwYXJ0IG9mIHRoZSBvYmplY3QncyBpbWFnZSBpcyB1c2VkXG4gICAgICAgICogZm9yIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IHNyY1JlY3RcbiAgICAgICAgKiBAdHlwZSBncy5SZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KClcblxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIG1hc2sgdG8gZXhlY3V0ZSBtYXNraW5nLWVmZmVjdHMgb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IG1hc2tcbiAgICAgICAgKiBAdHlwZSBncy5NYXNrXG4gICAgICAgICMjI1xuICAgICAgICBAbWFzayA9IG5ldyBncy5NYXNrKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgcm90YXRpb24tYW5nbGUgb2YgdGhlIGJhY2tncm91bmQgaW4gZGVncmVlcy4gVGhlIHJvdGF0aW9uIGNlbnRlciBkZXBlbmRzIG9uIHRoZVxuICAgICAgICAqIGFuY2hvci1wb2ludC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5nbGVcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmdsZSA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBDb250YWlucyBkaWZmZXJlbnQga2luZHMgb2YgZWZmZWN0cyB3aGljaCBjYW4gYmUgYWN0aXZhdGVkIGZvciB0aGUgb2JqZWN0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBlZmZlY3RzXG4gICAgICAgICogQHR5cGUgT2JqZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAZWZmZWN0cyA9IHdvYmJsZTogbmV3IGdzLldvYmJsZUVmZmVjdCgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGltYWdlIHVzZWQgZm9yIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IGltYWdlXG4gICAgICAgICogQHR5cGUgc3RyaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAaW1hZ2UgPSBcIlwiXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGNvbG9yIHRvbmUgb2YgdGhlIG9iamVjdCB1c2VkIGZvciB0aGUgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdG9uZVxuICAgICAgICAqIEB0eXBlIGdzLlRvbmVcbiAgICAgICAgIyMjXG4gICAgICAgIEB0b25lID0gbmV3IFRvbmUoMCwgMCwgMCwgMClcblxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQ29tcG9uZW50X0FuaW1hdG9yKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9TcHJpdGVcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXN1YWwgPSBuZXcgZ3MuQ29tcG9uZW50X1RpbGluZ1BsYW5lKClcbiAgICAgICAgQHZpc3VhbC5pbWFnZUZvbGRlciA9IFwiR3JhcGhpY3MvQmFja2dyb3VuZHNcIlxuICAgICAgICBcbiAgICAgICAgQGFkZENvbXBvbmVudChAdmlzdWFsKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBhbmltYXRvcilcbiAgICAgICAgQGNvbXBvbmVudHNGcm9tRGF0YUJ1bmRsZShkYXRhKVxuICAgICAgICBcbiAgICAgICAgI0B1cGRhdGUoKVxuICAgIFxuICAgICMjIypcbiAgICAqIFJlc3RvcmVzIHRoZSBnYW1lIG9iamVjdCBmcm9tIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCByZXN0b3JlXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhLWJ1bmRsZS5cbiAgICAjIyMgICAgXG4gICAgcmVzdG9yZTogKGRhdGEpIC0+XG4gICAgICAgIHN1cGVyKGRhdGEpXG4gICAgICAgIFxuICAgICAgICBAc3JjUmVjdCA9IGdzLlJlY3QuZnJvbU9iamVjdChkYXRhLnNyY1JlY3QpXG4gICAgICAgIEBtYXNrID0gZ3MuTWFzay5mcm9tT2JqZWN0KGRhdGEubWFzaylcbiAgICAgICAgQHZpc3VhbC5sb29waW5nID0gZGF0YS5sb29waW5nXG4gICAgICAgIFxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSBvYmplY3QgaW50byBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgdG9EYXRhQnVuZGxlXG4gICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBkYXRhLWJ1bmRsZS5cbiAgICAjIyMgXG4gICAgdG9EYXRhQnVuZGxlOiAtPlxuICAgICAgICBjb21wb25lbnRzID0gQGNvbXBvbmVudHNUb0RhdGFCdW5kbGUoZ3MuQ29tcG9uZW50X0FuaW1hdGlvbilcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgZHN0UmVjdDogQGRzdFJlY3QsXG4gICAgICAgICAgICBzcmNSZWN0OiBAc3JjUmVjdCxcbiAgICAgICAgICAgIG9wYWNpdHk6IEBvcGFjaXR5LFxuICAgICAgICAgICAgb3JpZ2luOiBAb3JpZ2luLFxuICAgICAgICAgICAgekluZGV4OiBAekluZGV4LFxuICAgICAgICAgICAgbWFzazogQG1hc2sudG9EYXRhQnVuZGxlKCksXG4gICAgICAgICAgICBtb3Rpb25CbHVyOiBAbW90aW9uQmx1cixcbiAgICAgICAgICAgIHpvb206IEB6b29tLFxuICAgICAgICAgICAgYW5nbGU6IEBhbmdsZSxcbiAgICAgICAgICAgIGFuY2hvcjogQGFuY2hvcixcbiAgICAgICAgICAgIG9mZnNldDogQG9mZnNldCxcbiAgICAgICAgICAgIG1pcnJvcjogQG1pcnJvcixcbiAgICAgICAgICAgIHRvbmU6IEB0b25lLFxuICAgICAgICAgICAgaW1hZ2U6IEBpbWFnZSxcbiAgICAgICAgICAgIGxvb3Bpbmc6IEB2aXN1YWwubG9vcGluZyxcbiAgICAgICAgICAgIGNvbXBvbmVudHM6IGNvbXBvbmVudHNcbiAgICAgICAgfVxuICAgIFxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgXG4gICAgXG52bi5PYmplY3RfQmFja2dyb3VuZCA9IE9iamVjdF9CYWNrZ3JvdW5kIl19
//# sourceURL=Object_Background_31.js
var Object_Picture,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Picture = (function(superClass) {
  extend(Object_Picture, superClass);

  Object_Picture.objectCodecBlackList = ["parent"];


  /**
  * A game object used for pictures in a scene.
  *
  * @module gs
  * @class Object_Picture
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Picture(parent, data) {
    Object_Picture.__super__.constructor.call(this, data);

    /**
    * The object's source rectangle. It controls which part of the object's image is used
    * for visual presentation.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect();

    /**
    * The object's mask to execute masking-effects on it.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * Indicates if the object's visual presentation should be mirrored horizontally.
    * @property mirror
    * @type boolean
     */
    this.mirror = false;

    /**
    * The object's image used for visual presentation.
    * @property image
    * @type string
     */
    this.image = "";

    /**
    * The rotation-angle of the picture in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The color tone of the object used for the visual presentation.
    * @property tone
    * @type gs.Tone
     */
    this.tone = new Tone(0, 0, 0, 0);

    /**
    * The color of the object used for the visual presentation.
    * @property color
    * @type gs.Color
     */
    this.color = new Color(255, 255, 255, 0);

    /**
    * Contains different kinds of effects which can be activated for the object.
    * @property effects
    * @type Object
     */
    this.effects = {
      wobble: new gs.WobbleEffect()

      /**
      * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
      * @property animator
      * @type vn.Component_Animator
       */
    };
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite();
    this.addComponent(this.visual);
    this.addComponent(this.animator);
    this.componentsFromDataBundle(data);
    this.update();
  }


  /**
  * Restores the game object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_Picture.prototype.restore = function(data) {
    Object_Picture.__super__.restore.call(this, data);
    this.srcRect = gs.Rect.fromObject(data.srcRect);
    this.mask = gs.Mask.fromObject(data.mask);
    return this.motionBlur = gs.MotionBlur.fromObject(data.motionBlur);
  };


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Picture.prototype.toDataBundle = function() {
    var components, result;
    components = this.componentsToDataBundle(gs.Component_Animation);
    result = {
      dstRect: this.dstRect,
      srcRect: this.srcRect,
      opacity: this.opacity,
      origin: this.origin,
      zIndex: this.zIndex,
      mask: this.mask.toDataBundle(),
      motionBlur: this.motionBlur,
      zoom: this.zoom,
      angle: this.angle,
      anchor: this.anchor,
      offset: this.offset,
      mirror: this.mirror,
      image: this.image,
      components: components
    };
    return result;
  };

  return Object_Picture;

})(gs.Object_Visual);

gs.Object_Picture = Object_Picture;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsY0FBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRDs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2Esd0JBQUMsTUFBRCxFQUFTLElBQVQ7SUFDVCxnREFBTSxJQUFOOztBQUVBOzs7Ozs7SUFNQSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsSUFBQSxDQUFBOztBQUVmOzs7OztJQUtBLElBQUMsQ0FBQSxJQUFELEdBQVksSUFBQSxFQUFFLENBQUMsSUFBSCxDQUFBOztBQUVaOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQVU7O0FBRVY7Ozs7O0lBS0EsSUFBQyxDQUFBLEtBQUQsR0FBUzs7QUFFVDs7Ozs7O0lBTUEsSUFBQyxDQUFBLEtBQUQsR0FBUzs7QUFFVDs7Ozs7SUFLQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsSUFBQSxDQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBWCxFQUFjLENBQWQ7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLEtBQUQsR0FBYSxJQUFBLEtBQUEsQ0FBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixFQUFxQixDQUFyQjs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsT0FBRCxHQUFXO01BQUEsTUFBQSxFQUFZLElBQUEsRUFBRSxDQUFDLFlBQUgsQ0FBQTs7QUFFdkI7Ozs7U0FGVzs7SUFPWCxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyxrQkFBSCxDQUFBOztBQUVoQjs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsRUFBRSxDQUFDLGdCQUFILENBQUE7SUFHZCxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtJQUNBLElBQUMsQ0FBQSx3QkFBRCxDQUEwQixJQUExQjtJQUVBLElBQUMsQ0FBQSxNQUFELENBQUE7RUFoRlM7OztBQWtGYjs7Ozs7OzsyQkFNQSxPQUFBLEdBQVMsU0FBQyxJQUFEO0lBQ0wsNENBQU0sSUFBTjtJQUVBLElBQUMsQ0FBQSxPQUFELEdBQVcsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFSLENBQW1CLElBQUksQ0FBQyxPQUF4QjtJQUNYLElBQUMsQ0FBQSxJQUFELEdBQVEsRUFBRSxDQUFDLElBQUksQ0FBQyxVQUFSLENBQW1CLElBQUksQ0FBQyxJQUF4QjtXQUNSLElBQUMsQ0FBQSxVQUFELEdBQWMsRUFBRSxDQUFDLFVBQVUsQ0FBQyxVQUFkLENBQXlCLElBQUksQ0FBQyxVQUE5QjtFQUxUOzs7QUFPVDs7Ozs7OzsyQkFNQSxZQUFBLEdBQWMsU0FBQTtBQUNWLFFBQUE7SUFBQSxVQUFBLEdBQWEsSUFBQyxDQUFBLHNCQUFELENBQXdCLEVBQUUsQ0FBQyxtQkFBM0I7SUFFYixNQUFBLEdBQVM7TUFDTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BREw7TUFFTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BRkw7TUFHTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BSEw7TUFJTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BSko7TUFLTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BTEo7TUFNTCxJQUFBLEVBQU0sSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQUEsQ0FORDtNQU9MLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFQUjtNQVFMLElBQUEsRUFBTSxJQUFDLENBQUEsSUFSRjtNQVNMLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FUSDtNQVVMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFWSjtNQVdMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFYSjtNQVlMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFaSjtNQWFMLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FiSDtNQWNMLFVBQUEsRUFBWSxVQWRQOztBQWlCVCxXQUFPO0VBcEJHOzs7O0dBakhXLEVBQUUsQ0FBQzs7QUF1SWhDLEVBQUUsQ0FBQyxjQUFILEdBQW9CIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfUGljdHVyZVxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X1BpY3R1cmUgZXh0ZW5kcyBncy5PYmplY3RfVmlzdWFsXG4gICAgQG9iamVjdENvZGVjQmxhY2tMaXN0ID0gW1wicGFyZW50XCJdXG4gICBcbiAgICAjIyMqXG4gICAgKiBBIGdhbWUgb2JqZWN0IHVzZWQgZm9yIHBpY3R1cmVzIGluIGEgc2NlbmUuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIE9iamVjdF9QaWN0dXJlXG4gICAgKiBAZXh0ZW5kcyBncy5PYmplY3RfVmlzdWFsXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAocGFyZW50LCBkYXRhKSAtPlxuICAgICAgICBzdXBlcihkYXRhKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyBzb3VyY2UgcmVjdGFuZ2xlLiBJdCBjb250cm9scyB3aGljaCBwYXJ0IG9mIHRoZSBvYmplY3QncyBpbWFnZSBpcyB1c2VkXG4gICAgICAgICogZm9yIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IHNyY1JlY3RcbiAgICAgICAgKiBAdHlwZSBncy5SZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgbWFzayB0byBleGVjdXRlIG1hc2tpbmctZWZmZWN0cyBvbiBpdC5cbiAgICAgICAgKiBAcHJvcGVydHkgbWFza1xuICAgICAgICAqIEB0eXBlIGdzLk1hc2tcbiAgICAgICAgIyMjXG4gICAgICAgIEBtYXNrID0gbmV3IGdzLk1hc2soKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgb2JqZWN0J3MgdmlzdWFsIHByZXNlbnRhdGlvbiBzaG91bGQgYmUgbWlycm9yZWQgaG9yaXpvbnRhbGx5LlxuICAgICAgICAqIEBwcm9wZXJ0eSBtaXJyb3JcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICMjI1xuICAgICAgICBAbWlycm9yID0gZmFsc2VcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgaW1hZ2UgdXNlZCBmb3IgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgaW1hZ2VcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgICAgIyMjXG4gICAgICAgIEBpbWFnZSA9IFwiXCJcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgcm90YXRpb24tYW5nbGUgb2YgdGhlIHBpY3R1cmUgaW4gZGVncmVlcy4gVGhlIHJvdGF0aW9uIGNlbnRlciBkZXBlbmRzIG9uIHRoZVxuICAgICAgICAqIGFuY2hvci1wb2ludC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5nbGVcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmdsZSA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY29sb3IgdG9uZSBvZiB0aGUgb2JqZWN0IHVzZWQgZm9yIHRoZSB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSB0b25lXG4gICAgICAgICogQHR5cGUgZ3MuVG9uZVxuICAgICAgICAjIyNcbiAgICAgICAgQHRvbmUgPSBuZXcgVG9uZSgwLCAwLCAwLCAwKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBjb2xvciBvZiB0aGUgb2JqZWN0IHVzZWQgZm9yIHRoZSB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSBjb2xvclxuICAgICAgICAqIEB0eXBlIGdzLkNvbG9yXG4gICAgICAgICMjI1xuICAgICAgICBAY29sb3IgPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDI1NSwgMClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBDb250YWlucyBkaWZmZXJlbnQga2luZHMgb2YgZWZmZWN0cyB3aGljaCBjYW4gYmUgYWN0aXZhdGVkIGZvciB0aGUgb2JqZWN0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBlZmZlY3RzXG4gICAgICAgICogQHR5cGUgT2JqZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAZWZmZWN0cyA9IHdvYmJsZTogbmV3IGdzLldvYmJsZUVmZmVjdCgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQ29tcG9uZW50X0FuaW1hdG9yKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9TcHJpdGVcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXN1YWwgPSBuZXcgZ3MuQ29tcG9uZW50X1Nwcml0ZSgpXG4gICAgICAgIFxuXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHZpc3VhbClcbiAgICAgICAgQGFkZENvbXBvbmVudChAYW5pbWF0b3IpXG4gICAgICAgIEBjb21wb25lbnRzRnJvbURhdGFCdW5kbGUoZGF0YSlcbiAgICAgICAgXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICBcbiAgICAjIyMqXG4gICAgKiBSZXN0b3JlcyB0aGUgZ2FtZSBvYmplY3QgZnJvbSBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgcmVzdG9yZVxuICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBUaGUgZGF0YS1idW5kbGUuXG4gICAgIyMjICAgIFxuICAgIHJlc3RvcmU6IChkYXRhKSAtPlxuICAgICAgICBzdXBlcihkYXRhKVxuICAgICAgICBcbiAgICAgICAgQHNyY1JlY3QgPSBncy5SZWN0LmZyb21PYmplY3QoZGF0YS5zcmNSZWN0KVxuICAgICAgICBAbWFzayA9IGdzLk1hc2suZnJvbU9iamVjdChkYXRhLm1hc2spXG4gICAgICAgIEBtb3Rpb25CbHVyID0gZ3MuTW90aW9uQmx1ci5mcm9tT2JqZWN0KGRhdGEubW90aW9uQmx1cilcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogU2VyaWFsaXplcyB0aGUgb2JqZWN0IGludG8gYSBkYXRhLWJ1bmRsZS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHRvRGF0YUJ1bmRsZVxuICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgZGF0YS1idW5kbGUuXG4gICAgIyMjICAgIFxuICAgIHRvRGF0YUJ1bmRsZTogLT5cbiAgICAgICAgY29tcG9uZW50cyA9IEBjb21wb25lbnRzVG9EYXRhQnVuZGxlKGdzLkNvbXBvbmVudF9BbmltYXRpb24pXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIGRzdFJlY3Q6IEBkc3RSZWN0LFxuICAgICAgICAgICAgc3JjUmVjdDogQHNyY1JlY3QsXG4gICAgICAgICAgICBvcGFjaXR5OiBAb3BhY2l0eSxcbiAgICAgICAgICAgIG9yaWdpbjogQG9yaWdpbixcbiAgICAgICAgICAgIHpJbmRleDogQHpJbmRleCxcbiAgICAgICAgICAgIG1hc2s6IEBtYXNrLnRvRGF0YUJ1bmRsZSgpLFxuICAgICAgICAgICAgbW90aW9uQmx1cjogQG1vdGlvbkJsdXIsXG4gICAgICAgICAgICB6b29tOiBAem9vbSxcbiAgICAgICAgICAgIGFuZ2xlOiBAYW5nbGUsXG4gICAgICAgICAgICBhbmNob3I6IEBhbmNob3IsXG4gICAgICAgICAgICBvZmZzZXQ6IEBvZmZzZXQsXG4gICAgICAgICAgICBtaXJyb3I6IEBtaXJyb3IsXG4gICAgICAgICAgICBpbWFnZTogQGltYWdlLFxuICAgICAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50c1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG5ncy5PYmplY3RfUGljdHVyZSA9IE9iamVjdF9QaWN0dXJlIl19
//# sourceURL=Object_Picture_51.js
var Object_Character,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Character = (function(superClass) {
  extend(Object_Character, superClass);

  Object_Character.objectCodecBlackList = ["parent"];


  /**
  * A game object for a visual novel character. 
  *
  * @module vn
  * @class Object_Character
  * @extends gs.Object_Visual
  * @memberof vn
  * @constructor
   */

  function Object_Character(record, data) {
    var ref, ref1;
    Object_Character.__super__.constructor.call(this, data);

    /**
    * The object's source rectangle on screen.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect();

    /**
    * The object's z-index.
    * @property zIndex
    * @type number
     */
    this.zIndex = 200;

    /**
    * The object's mask.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * Indicates if the object's visual presentation should be mirrored horizontally.
    * @property mirror
    * @type boolean
     */
    this.mirror = (ref = data != null ? data.mirror : void 0) != null ? ref : false;

    /**
    * The object's image used for visual presentation.
    * @property image
    * @type string
     */
    this.image = "";

    /**
    * The ID of the character-record used.
    * @property rid
    * @type number
     */
    this.rid = (data != null ? data.id : void 0) || ((ref1 = record != null ? record.index : void 0) != null ? ref1 : -1);

    /**
    * The character's expression(database-record)
    * @property expression
    * @type Object
     */
    this.expression = RecordManager.characterExpressions[(data != null ? data.expressionId : void 0) || 0];

    /**
    * The character's behavior component which contains the character-specific logic.
    * @property behavior
    * @type vn.Component_CharacterBehavior
     */
    this.behavior = new vn.Component_CharacterBehavior();
    this.logic = this.behavior;

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite();
    this.visual.imageFolder = "Graphics/Characters";
    this.addComponent(this.logic);
    this.addComponent(this.visual);
    this.addComponent(this.animator);
    this.componentsFromDataBundle(data);
  }


  /**
  * Restores the game object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_Character.prototype.restore = function(data) {
    Object_Character.__super__.restore.call(this, data);
    this.srcRect = gs.Rect.fromObject(data.srcRect);
    this.mask = gs.Mask.fromObject(data.mask);
    this.motionBlur = gs.MotionBlur.fromObject(data.motionBlur);
    return this.expression = RecordManager.characterExpressions[(data != null ? data.expressionId : void 0) || 0];
  };


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Character.prototype.toDataBundle = function() {
    var components;
    components = this.componentsToDataBundle(gs.Component_Animation);
    return {
      rid: this.rid,
      dstRect: this.dstRect,
      srcRect: this.srcRect,
      opacity: this.opacity,
      zoom: this.zoom,
      angle: this.angle,
      anchor: this.anchor,
      zIndex: this.zIndex,
      offset: this.offset,
      motionBlur: this.motionBlur,
      mask: this.mask.toDataBundle(),
      mirror: this.mirror,
      expressionId: this.expression.index,
      components: components
    };
  };

  return Object_Character;

})(gs.Object_Visual);

vn.Object_Character = Object_Character;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Object_Character_55.js
var Object_Viewport,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Viewport = (function(superClass) {
  extend(Object_Viewport, superClass);

  Object_Viewport.objectCodecBlackList = ["parent"];


  /**
  * A game object used for viewports.
  *
  * @module gs
  * @class Object_Viewport
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Viewport(viewport) {
    Object_Viewport.__super__.constructor.apply(this, arguments);
    if (viewport) {
      this.dstRect = new Rect(viewport.rect.x, viewport.rect.y, viewport.rect.width, viewport.rect.height);
    } else {
      this.dstRect = new Rect(0, 0, Graphics.width, Graphics.height);
    }

    /**
    * Contains different kinds of effects which can be activated for the object.
    * @property effects
    * @type Object
     */
    this.effects = {
      wobble: new gs.WobbleEffect()

      /**
      * The color tone of the object used for the visual presentation.
      * @property tone
      * @type gs.Tone
       */
    };
    this.tone = new Tone(0, 0, 0, 0);

    /**
    * The color of the object used for the visual presentation.
    * @property color
    * @type gs.Color
     */
    this.color = new Color(255, 255, 255, 0);

    /**
    * The rotation-angle of the picture in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Viewport(viewport);
    this.addComponent(this.visual);
    this.addComponent(this.animator);
  }


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Viewport.prototype.toDataBundle = function() {
    var components, result;
    components = this.componentsToDataBundle(gs.Component_Animation);
    result = {
      dstRect: this.dstRect,
      origin: this.origin,
      zIndex: this.zIndex,
      motionBlur: this.motionBlur,
      zoom: this.zoom,
      angle: this.angle,
      anchor: this.anchor,
      offset: this.offset,
      tone: this.tone,
      image: this.image,
      components: components
    };
    return result;
  };

  return Object_Viewport;

})(gs.Object_Visual);

gs.Object_Viewport = Object_Viewport;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZUFBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsZUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRDs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2EseUJBQUMsUUFBRDtJQUNULGtEQUFBLFNBQUE7SUFFQSxJQUFHLFFBQUg7TUFDSSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsSUFBQSxDQUFLLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBbkIsRUFBc0IsUUFBUSxDQUFDLElBQUksQ0FBQyxDQUFwQyxFQUF1QyxRQUFRLENBQUMsSUFBSSxDQUFDLEtBQXJELEVBQTRELFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBMUUsRUFEbkI7S0FBQSxNQUFBO01BR0ksSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLElBQUEsQ0FBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLFFBQVEsQ0FBQyxLQUFwQixFQUEyQixRQUFRLENBQUMsTUFBcEMsRUFIbkI7OztBQUtBOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7TUFBQSxNQUFBLEVBQVksSUFBQSxFQUFFLENBQUMsWUFBSCxDQUFBOztBQUV2Qjs7OztTQUZXOztJQU9YLElBQUMsQ0FBQSxJQUFELEdBQVksSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxDQUFYLEVBQWMsQ0FBZDs7QUFFWjs7Ozs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFhLElBQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQXFCLENBQXJCOztBQUViOzs7Ozs7SUFNQSxJQUFDLENBQUEsS0FBRCxHQUFTOztBQUVUOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLGtCQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsa0JBQUgsQ0FBc0IsUUFBdEI7SUFFZCxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtFQXBEUzs7O0FBd0RiOzs7Ozs7OzRCQU1BLFlBQUEsR0FBYyxTQUFBO0FBQ1YsUUFBQTtJQUFBLFVBQUEsR0FBYSxJQUFDLENBQUEsc0JBQUQsQ0FBd0IsRUFBRSxDQUFDLG1CQUEzQjtJQUViLE1BQUEsR0FBUztNQUNMLE9BQUEsRUFBUyxJQUFDLENBQUEsT0FETDtNQUVMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFGSjtNQUdMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFISjtNQUlMLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFKUjtNQUtMLElBQUEsRUFBTSxJQUFDLENBQUEsSUFMRjtNQU1MLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FOSDtNQU9MLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFQSjtNQVFMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFSSjtNQVNMLElBQUEsRUFBTSxJQUFDLENBQUEsSUFURjtNQVVMLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FWSDtNQVdMLFVBQUEsRUFBWSxVQVhQOztBQWNULFdBQU87RUFqQkc7Ozs7R0ExRVksRUFBRSxDQUFDOztBQTZGakMsRUFBRSxDQUFDLGVBQUgsR0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9WaWV3cG9ydFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X1ZpZXdwb3J0IGV4dGVuZHMgZ3MuT2JqZWN0X1Zpc3VhbFxuICAgIEBvYmplY3RDb2RlY0JsYWNrTGlzdCA9IFtcInBhcmVudFwiXVxuICAgIFxuICAgICMjIypcbiAgICAqIEEgZ2FtZSBvYmplY3QgdXNlZCBmb3Igdmlld3BvcnRzLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBPYmplY3RfVmlld3BvcnRcbiAgICAqIEBleHRlbmRzIGdzLk9iamVjdF9WaXN1YWxcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6ICh2aWV3cG9ydCkgLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgIGlmIHZpZXdwb3J0XG4gICAgICAgICAgICBAZHN0UmVjdCA9IG5ldyBSZWN0KHZpZXdwb3J0LnJlY3QueCwgdmlld3BvcnQucmVjdC55LCB2aWV3cG9ydC5yZWN0LndpZHRoLCB2aWV3cG9ydC5yZWN0LmhlaWdodClcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGRzdFJlY3QgPSBuZXcgUmVjdCgwLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0KVxuICAgICAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBDb250YWlucyBkaWZmZXJlbnQga2luZHMgb2YgZWZmZWN0cyB3aGljaCBjYW4gYmUgYWN0aXZhdGVkIGZvciB0aGUgb2JqZWN0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBlZmZlY3RzXG4gICAgICAgICogQHR5cGUgT2JqZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAZWZmZWN0cyA9IHdvYmJsZTogbmV3IGdzLldvYmJsZUVmZmVjdCgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGNvbG9yIHRvbmUgb2YgdGhlIG9iamVjdCB1c2VkIGZvciB0aGUgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdG9uZVxuICAgICAgICAqIEB0eXBlIGdzLlRvbmVcbiAgICAgICAgIyMjXG4gICAgICAgIEB0b25lID0gbmV3IFRvbmUoMCwgMCwgMCwgMClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY29sb3Igb2YgdGhlIG9iamVjdCB1c2VkIGZvciB0aGUgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgY29sb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db2xvclxuICAgICAgICAjIyNcbiAgICAgICAgQGNvbG9yID0gbmV3IENvbG9yKDI1NSwgMjU1LCAyNTUsIDApXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHJvdGF0aW9uLWFuZ2xlIG9mIHRoZSBwaWN0dXJlIGluIGRlZ3JlZXMuIFRoZSByb3RhdGlvbiBjZW50ZXIgZGVwZW5kcyBvbiB0aGVcbiAgICAgICAgKiBhbmNob3ItcG9pbnQuXG4gICAgICAgICogQHByb3BlcnR5IGFuZ2xlXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAYW5nbGUgPSAwXG5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyBhbmltYXRvci1jb21wb25lbnQgdG8gZXhlY3V0ZSBkaWZmZXJlbnQga2luZCBvZiBhbmltYXRpb25zIGxpa2UgbW92ZSwgcm90YXRlLCBldGMuIG9uIGl0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBhbmltYXRvclxuICAgICAgICAqIEB0eXBlIHZuLkNvbXBvbmVudF9BbmltYXRvclxuICAgICAgICAjIyNcbiAgICAgICAgQGFuaW1hdG9yID0gbmV3IGdzLkNvbXBvbmVudF9BbmltYXRvcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIHZpc3VhbC1jb21wb25lbnQgdG8gZGlzcGxheSB0aGUgZ2FtZSBvYmplY3Qgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSB2aXN1YWxcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfU3ByaXRlXG4gICAgICAgICMjI1xuICAgICAgICBAdmlzdWFsID0gbmV3IGdzLkNvbXBvbmVudF9WaWV3cG9ydCh2aWV3cG9ydClcbiAgICAgICAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHZpc3VhbClcbiAgICAgICAgQGFkZENvbXBvbmVudChAYW5pbWF0b3IpXG4gICAgICAgIFxuICAgICAgICAjQHVwZGF0ZSgpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFNlcmlhbGl6ZXMgdGhlIG9iamVjdCBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRhdGEtYnVuZGxlLlxuICAgICMjIyBcbiAgICB0b0RhdGFCdW5kbGU6IC0+XG4gICAgICAgIGNvbXBvbmVudHMgPSBAY29tcG9uZW50c1RvRGF0YUJ1bmRsZShncy5Db21wb25lbnRfQW5pbWF0aW9uKVxuICAgICAgICAgICAgICAgIFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICBkc3RSZWN0OiBAZHN0UmVjdCxcbiAgICAgICAgICAgIG9yaWdpbjogQG9yaWdpbixcbiAgICAgICAgICAgIHpJbmRleDogQHpJbmRleCxcbiAgICAgICAgICAgIG1vdGlvbkJsdXI6IEBtb3Rpb25CbHVyLFxuICAgICAgICAgICAgem9vbTogQHpvb20sXG4gICAgICAgICAgICBhbmdsZTogQGFuZ2xlLFxuICAgICAgICAgICAgYW5jaG9yOiBAYW5jaG9yLFxuICAgICAgICAgICAgb2Zmc2V0OiBAb2Zmc2V0LFxuICAgICAgICAgICAgdG9uZTogQHRvbmUsXG4gICAgICAgICAgICBpbWFnZTogQGltYWdlLFxuICAgICAgICAgICAgY29tcG9uZW50czogY29tcG9uZW50c1xuICAgICAgICB9XG4gICAgXG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG5ncy5PYmplY3RfVmlld3BvcnQgPSBPYmplY3RfVmlld3BvcnQiXX0=
//# sourceURL=Object_Viewport_72.js
var Object_Layout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Layout = (function(superClass) {
  extend(Object_Layout, superClass);


  /**
  * A layout object defines a new UI layout game scene. A UI layout scene
  * displays in-game UI and let the user interact with it. For example: The
  * title screen, the game menu, etc. 
  *
  * @module gs
  * @class Object_Layout
  * @extends gs.Object_Base
  * @memberof gs
  * @constructor
   */

  function Object_Layout(layoutName) {
    Object_Layout.__super__.constructor.call(this);

    /**
    * Indicates that the UI layout is still in prepare-state and not ready.
    * @property preparing
    * @type boolean
     */
    this.preparing = true;

    /**
    * The layout descriptor.
    * @property layoutData
    * @type Object
     */
    this.layoutName = layoutName;
    this.layoutData = ui.UiFactory.layouts[layoutName];

    /**
    * The behavior-component for the UI layour specific behavior.
    * @property behavior
    * @type gs.Component_LayoutSceneBehavior
     */
    this.behavior = new gs.Component_LayoutSceneBehavior();

    /**
    * Indicates if the UI layout is visible.
    * @property visible
    * @type boolean
     */
    this.visible = true;

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.Component_EventEmitter();
    this.addComponent(new gs.Component_InputHandler());
    this.addComponent(this.behavior);
  }

  return Object_Layout;

})(gs.Object_Base);

gs.Object_Layout = Object_Layout;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsYUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7Ozs7RUFXYSx1QkFBQyxVQUFEO0lBQ1QsNkNBQUE7O0FBR0E7Ozs7O0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYTs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsVUFBRCxHQUFjO0lBQ2QsSUFBQyxDQUFBLFVBQUQsR0FBYyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQVEsQ0FBQSxVQUFBOztBQUVuQzs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyw2QkFBSCxDQUFBOztBQUVoQjs7Ozs7SUFLQSxJQUFDLENBQUEsT0FBRCxHQUFXOztBQUVYOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsc0JBQUgsQ0FBQTtJQUVkLElBQUMsQ0FBQSxZQUFELENBQWtCLElBQUEsRUFBRSxDQUFDLHNCQUFILENBQUEsQ0FBbEI7SUFDQSxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxRQUFmO0VBekNTOzs7O0dBWlcsRUFBRSxDQUFDOztBQXdEL0IsRUFBRSxDQUFDLGFBQUgsR0FBbUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9MYXlvdXRcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9MYXlvdXQgZXh0ZW5kcyBncy5PYmplY3RfQmFzZVxuICAgICMjIypcbiAgICAqIEEgbGF5b3V0IG9iamVjdCBkZWZpbmVzIGEgbmV3IFVJIGxheW91dCBnYW1lIHNjZW5lLiBBIFVJIGxheW91dCBzY2VuZVxuICAgICogZGlzcGxheXMgaW4tZ2FtZSBVSSBhbmQgbGV0IHRoZSB1c2VyIGludGVyYWN0IHdpdGggaXQuIEZvciBleGFtcGxlOiBUaGVcbiAgICAqIHRpdGxlIHNjcmVlbiwgdGhlIGdhbWUgbWVudSwgZXRjLiBcbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgT2JqZWN0X0xheW91dFxuICAgICogQGV4dGVuZHMgZ3MuT2JqZWN0X0Jhc2VcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChsYXlvdXROYW1lKSAtPlxuICAgICAgICBzdXBlcigpXG4gICAgICAgICNzdXBlcihudWxsLCBudWxsLCBncy5TY2VuZU1hbmFnZXIpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogSW5kaWNhdGVzIHRoYXQgdGhlIFVJIGxheW91dCBpcyBzdGlsbCBpbiBwcmVwYXJlLXN0YXRlIGFuZCBub3QgcmVhZHkuXG4gICAgICAgICogQHByb3BlcnR5IHByZXBhcmluZ1xuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEBwcmVwYXJpbmcgPSB5ZXNcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgbGF5b3V0IGRlc2NyaXB0b3IuXG4gICAgICAgICogQHByb3BlcnR5IGxheW91dERhdGFcbiAgICAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgICAgIyMjXG4gICAgICAgIEBsYXlvdXROYW1lID0gbGF5b3V0TmFtZVxuICAgICAgICBAbGF5b3V0RGF0YSA9IHVpLlVpRmFjdG9yeS5sYXlvdXRzW2xheW91dE5hbWVdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGJlaGF2aW9yLWNvbXBvbmVudCBmb3IgdGhlIFVJIGxheW91ciBzcGVjaWZpYyBiZWhhdmlvci5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfTGF5b3V0U2NlbmVCZWhhdmlvclxuICAgICAgICAjIyNcbiAgICAgICAgQGJlaGF2aW9yID0gbmV3IGdzLkNvbXBvbmVudF9MYXlvdXRTY2VuZUJlaGF2aW9yKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIFVJIGxheW91dCBpcyB2aXNpYmxlLlxuICAgICAgICAqIEBwcm9wZXJ0eSB2aXNpYmxlXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQHZpc2libGUgPSB5ZXNcbiBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEFuIGV2ZW50LWVtaXR0ZXIgdG8gZW1pdCBldmVudHMuXG4gICAgICAgICogQHByb3BlcnR5IGV2ZW50c1xuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9FdmVudEVtaXR0ZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBldmVudHMgPSBuZXcgZ3MuQ29tcG9uZW50X0V2ZW50RW1pdHRlcigpXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KG5ldyBncy5Db21wb25lbnRfSW5wdXRIYW5kbGVyKCkpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGJlaGF2aW9yKVxuICAgICAgICBcbiAgICAgICAgXG5ncy5PYmplY3RfTGF5b3V0ID0gT2JqZWN0X0xheW91dCJdfQ==
//# sourceURL=Object_Layout_79.js
var Object_Video,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Video = (function(superClass) {
  extend(Object_Video, superClass);

  Object_Video.objectCodecBlackList = ["parent"];


  /**
  * A game object used for custom texts in a scene.
  *
  * @module gs
  * @class Object_Video
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Video(data) {
    Object_Video.__super__.constructor.apply(this, arguments);

    /**
    * The object's source rectangle. It controls which part of the object's image is used
    * for visual presentation.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect();

    /**
    * The object's mask to execute masking-effects on it.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * Indicates if the object's visual presentation should be mirrored horizontally.
    * @property mirror
    * @type boolean
     */
    this.mirror = false;

    /**
    * The name of the video resource used for the visual presentation.
    * @property video
    * @type string
     */
    this.video = "";

    /**
    * Indicates if the video should be looped. The default is <b>false</b>
    * @property loop
    * @type boolean
     */
    this.loop = false;

    /**
    * The rotation-angle of the picture in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The color tone of the object used for the visual presentation.
    * @property tone
    * @type gs.Tone
     */
    this.tone = new Tone(0, 0, 0, 0);

    /**
    * The color of the object used for the visual presentation.
    * @property color
    * @type gs.Color
     */
    this.color = new Color(255, 255, 255, 0);

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite();
    this.addComponent(this.visual);
    this.addComponent(this.animator);
    this.componentsFromDataBundle(data);
    this.update();
  }


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Video.prototype.toDataBundle = function() {
    var components, result;
    components = this.componentsToDataBundle(gs.Component_Animation);
    result = {
      components: components,
      visible: this.visible,
      dstRect: this.dstRect,
      srcRect: this.srcRect,
      opacity: this.opacity,
      origin: this.origin,
      zIndex: this.zIndex,
      mask: this.mask.toDataBundle(),
      motionBlur: this.motionBlur,
      zoom: this.zoom,
      angle: this.angle,
      anchor: this.anchor,
      offset: this.offset,
      mirror: this.mirror,
      video: this.video,
      loop: this.loop
    };
    return result;
  };

  return Object_Video;

})(gs.Object_Visual);

gs.Object_Video = Object_Video;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsWUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRDs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2Esc0JBQUMsSUFBRDtJQUNULCtDQUFBLFNBQUE7O0FBRUE7Ozs7OztJQU1BLElBQUMsQ0FBQSxPQUFELEdBQWUsSUFBQSxJQUFBLENBQUE7O0FBRWY7Ozs7O0lBS0EsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLEVBQUUsQ0FBQyxJQUFILENBQUE7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBVTs7QUFFVjs7Ozs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFTOztBQUVUOzs7OztJQUtBLElBQUMsQ0FBQSxJQUFELEdBQVE7O0FBRVI7Ozs7OztJQU1BLElBQUMsQ0FBQSxLQUFELEdBQVM7O0FBRVQ7Ozs7O0lBS0EsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLElBQUEsQ0FBSyxDQUFMLEVBQVEsQ0FBUixFQUFXLENBQVgsRUFBYyxDQUFkOztBQUVaOzs7OztJQUtBLElBQUMsQ0FBQSxLQUFELEdBQWEsSUFBQSxLQUFBLENBQU0sR0FBTixFQUFXLEdBQVgsRUFBZ0IsR0FBaEIsRUFBcUIsQ0FBckI7O0FBRWI7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsa0JBQUgsQ0FBQTs7QUFFaEI7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxnQkFBSCxDQUFBO0lBRWQsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWY7SUFDQSxJQUFDLENBQUEsd0JBQUQsQ0FBMEIsSUFBMUI7SUFDQSxJQUFDLENBQUEsTUFBRCxDQUFBO0VBOUVTOzs7QUFnRmI7Ozs7Ozs7eUJBTUEsWUFBQSxHQUFjLFNBQUE7QUFDVixRQUFBO0lBQUEsVUFBQSxHQUFhLElBQUMsQ0FBQSxzQkFBRCxDQUF3QixFQUFFLENBQUMsbUJBQTNCO0lBRWIsTUFBQSxHQUFTO01BQ0wsVUFBQSxFQUFZLFVBRFA7TUFFTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BRkw7TUFHTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BSEw7TUFJTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BSkw7TUFLTCxPQUFBLEVBQVMsSUFBQyxDQUFBLE9BTEw7TUFNTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BTko7TUFPTCxNQUFBLEVBQVEsSUFBQyxDQUFBLE1BUEo7TUFRTCxJQUFBLEVBQU0sSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQUEsQ0FSRDtNQVNMLFVBQUEsRUFBWSxJQUFDLENBQUEsVUFUUjtNQVVMLElBQUEsRUFBTSxJQUFDLENBQUEsSUFWRjtNQVdMLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FYSDtNQVlMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFaSjtNQWFMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFiSjtNQWNMLE1BQUEsRUFBUSxJQUFDLENBQUEsTUFkSjtNQWVMLEtBQUEsRUFBTyxJQUFDLENBQUEsS0FmSDtNQWdCTCxJQUFBLEVBQU0sSUFBQyxDQUFBLElBaEJGOztBQW1CVCxXQUFPO0VBdEJHOzs7O0dBbEdTLEVBQUUsQ0FBQzs7QUEwSDlCLEVBQUUsQ0FBQyxZQUFILEdBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfVmlkZW9cbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9WaWRlbyBleHRlbmRzIGdzLk9iamVjdF9WaXN1YWxcbiAgICBAb2JqZWN0Q29kZWNCbGFja0xpc3QgPSBbXCJwYXJlbnRcIl1cbiAgICBcbiAgICAjIyMqXG4gICAgKiBBIGdhbWUgb2JqZWN0IHVzZWQgZm9yIGN1c3RvbSB0ZXh0cyBpbiBhIHNjZW5lLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBPYmplY3RfVmlkZW9cbiAgICAqIEBleHRlbmRzIGdzLk9iamVjdF9WaXN1YWxcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyBzb3VyY2UgcmVjdGFuZ2xlLiBJdCBjb250cm9scyB3aGljaCBwYXJ0IG9mIHRoZSBvYmplY3QncyBpbWFnZSBpcyB1c2VkXG4gICAgICAgICogZm9yIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IHNyY1JlY3RcbiAgICAgICAgKiBAdHlwZSBncy5SZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgbWFzayB0byBleGVjdXRlIG1hc2tpbmctZWZmZWN0cyBvbiBpdC5cbiAgICAgICAgKiBAcHJvcGVydHkgbWFza1xuICAgICAgICAqIEB0eXBlIGdzLk1hc2tcbiAgICAgICAgIyMjXG4gICAgICAgIEBtYXNrID0gbmV3IGdzLk1hc2soKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgb2JqZWN0J3MgdmlzdWFsIHByZXNlbnRhdGlvbiBzaG91bGQgYmUgbWlycm9yZWQgaG9yaXpvbnRhbGx5LlxuICAgICAgICAqIEBwcm9wZXJ0eSBtaXJyb3JcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICMjI1xuICAgICAgICBAbWlycm9yID0gZmFsc2VcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgbmFtZSBvZiB0aGUgdmlkZW8gcmVzb3VyY2UgdXNlZCBmb3IgdGhlIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IHZpZGVvXG4gICAgICAgICogQHR5cGUgc3RyaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAdmlkZW8gPSBcIlwiXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSB2aWRlbyBzaG91bGQgYmUgbG9vcGVkLiBUaGUgZGVmYXVsdCBpcyA8Yj5mYWxzZTwvYj5cbiAgICAgICAgKiBAcHJvcGVydHkgbG9vcFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEBsb29wID0gbm9cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgcm90YXRpb24tYW5nbGUgb2YgdGhlIHBpY3R1cmUgaW4gZGVncmVlcy4gVGhlIHJvdGF0aW9uIGNlbnRlciBkZXBlbmRzIG9uIHRoZVxuICAgICAgICAqIGFuY2hvci1wb2ludC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5nbGVcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmdsZSA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY29sb3IgdG9uZSBvZiB0aGUgb2JqZWN0IHVzZWQgZm9yIHRoZSB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSB0b25lXG4gICAgICAgICogQHR5cGUgZ3MuVG9uZVxuICAgICAgICAjIyNcbiAgICAgICAgQHRvbmUgPSBuZXcgVG9uZSgwLCAwLCAwLCAwKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBjb2xvciBvZiB0aGUgb2JqZWN0IHVzZWQgZm9yIHRoZSB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSBjb2xvclxuICAgICAgICAqIEB0eXBlIGdzLkNvbG9yXG4gICAgICAgICMjI1xuICAgICAgICBAY29sb3IgPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDI1NSwgMClcblxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQ29tcG9uZW50X0FuaW1hdG9yKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9TcHJpdGVcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXN1YWwgPSBuZXcgZ3MuQ29tcG9uZW50X1Nwcml0ZSgpXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEB2aXN1YWwpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGFuaW1hdG9yKVxuICAgICAgICBAY29tcG9uZW50c0Zyb21EYXRhQnVuZGxlKGRhdGEpXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSBvYmplY3QgaW50byBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgdG9EYXRhQnVuZGxlXG4gICAgKiBAcmV0dXJuIHtPYmplY3R9IFRoZSBkYXRhLWJ1bmRsZS5cbiAgICAjIyMgICAgIFxuICAgIHRvRGF0YUJ1bmRsZTogLT5cbiAgICAgICAgY29tcG9uZW50cyA9IEBjb21wb25lbnRzVG9EYXRhQnVuZGxlKGdzLkNvbXBvbmVudF9BbmltYXRpb24pXG4gICAgICAgIFxuICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzLFxuICAgICAgICAgICAgdmlzaWJsZTogQHZpc2libGUsXG4gICAgICAgICAgICBkc3RSZWN0OiBAZHN0UmVjdCxcbiAgICAgICAgICAgIHNyY1JlY3Q6IEBzcmNSZWN0LFxuICAgICAgICAgICAgb3BhY2l0eTogQG9wYWNpdHksXG4gICAgICAgICAgICBvcmlnaW46IEBvcmlnaW4sXG4gICAgICAgICAgICB6SW5kZXg6IEB6SW5kZXgsXG4gICAgICAgICAgICBtYXNrOiBAbWFzay50b0RhdGFCdW5kbGUoKSxcbiAgICAgICAgICAgIG1vdGlvbkJsdXI6IEBtb3Rpb25CbHVyLFxuICAgICAgICAgICAgem9vbTogQHpvb20sXG4gICAgICAgICAgICBhbmdsZTogQGFuZ2xlLFxuICAgICAgICAgICAgYW5jaG9yOiBAYW5jaG9yLFxuICAgICAgICAgICAgb2Zmc2V0OiBAb2Zmc2V0LFxuICAgICAgICAgICAgbWlycm9yOiBAbWlycm9yLFxuICAgICAgICAgICAgdmlkZW86IEB2aWRlbyxcbiAgICAgICAgICAgIGxvb3A6IEBsb29wXG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICAgIFxuZ3MuT2JqZWN0X1ZpZGVvID0gT2JqZWN0X1ZpZGVvIl19
//# sourceURL=Object_Video_88.js
var Object_Scene,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Scene = (function(superClass) {
  extend(Object_Scene, superClass);

  Object_Scene.accessors("visible", {
    set: function(v) {
      if (v !== this.visible_) {
        this.visible_ = v;
        this.needsUpdate = true;
        return this.fullRefresh();
      }
    },
    get: function() {
      return this.visible_ && (!this.parent || this.parent.visible);
    }
  });


  /**
  * A scene object manages a whole visual novel scene with backgrounds, characters,
  * messages, etc.
  *
  * @module vn
  * @class Object_Scene
  * @extends gs.Object_Base
  * @memberof vn
  * @constructor
   */

  function Object_Scene() {
    Object_Scene.__super__.constructor.call(this);

    /**
    * Indicates that the scene is still in prepare-state and not ready yet.
    * @property preparing
    * @type boolean
     */
    this.preparing = true;

    /**
    * The behavior-component for the VN scene specific behavior.
    * @property behavior
    * @type gs.Component_GameSceneBehavior
     */
    this.behavior = new vn.Component_GameSceneBehavior();

    /**
    * An interpreter to execute the commands of scene.
    * @property interpreter
    * @type gs.Component_CommandInterpreter
     */
    this.interpreter = new gs.Component_CommandInterpreter();

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.Component_EventEmitter();

    /**
    * Contains all background objects of the scene.
    * @property backgroundContainer
    * @type gs.Object_Container
     */
    this.backgroundContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.NULL);

    /**
    * Contains all character objects of the scene.
    * @property characterContainer
    * @type gs.Object_Container
     */
    this.characterContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.REMOVE);

    /**
    * Contains all picture objects of the scene.
    * @property pictureContainer
    * @type gs.Object_Container
     */
    this.pictureContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.NULL);

    /**
    * Contains all video objects of the scene.
    * @property videoContainer
    * @type gs.Object_Container
     */
    this.videoContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.NULL);

    /**
    * Contains all text objects of the scene.
    * @property textContainer
    * @type gs.Object_Container
     */
    this.textContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.NULL);

    /**
    * Contains all hotspot objects of the scene.
    * @property hotspotContainer
    * @type gs.Object_Container
     */
    this.hotspotContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.NULL);

    /**
    * Contains all common events which are running parallel/auto to the scene.
    * @property commonEventContainer
    * @type gs.Object_Container
     */
    this.commonEventContainer = new gs.Object_Container(gs.ContainerDisposeBehavior.NULL);
    this.characterContainer.visible = true;

    /**
    * All picture objects as array. That is the same like accessing the <b>subObjects</b> of the
    * container object.
    * @property pictures
    * @type gs.Object_Picture[]
    * @readOnly
     */
    this.pictures = this.pictureContainer.subObjects;

    /**
    * All video objects as array. That is the same like accessing the <b>subObjects</b> of the
    * container object.
    * @property videos
    * @type gs.Object_Video[]
    * @readOnly
     */
    this.videos = this.videoContainer.subObjects;

    /**
    * All text objects as array. That is the same like accessing the <b>subObjects</b> of the
    * container object.
    * @property texts
    * @type gs.Object_Text[]
    * @readOnly
     */
    this.texts = this.textContainer.subObjects;

    /**
    * All character objects as array. That is the same like accessing the <b>subObjects</b> of the
    * container object.
    * @property characters
    * @type gs.Object_Character[]
    * @readOnly
     */
    this.characters = this.characterContainer.subObjects;

    /**
    * All backgrounds as array. That is the same like accessing the <b>subObjects</b> of the
    * container object.
    * @property backgrounds
    * @type gs.Object_Background[]
    * @readOnly
     */
    this.backgrounds = this.backgroundContainer.subObjects;

    /**
    * All hotspot objects as array. That is the same like accessing the <b>subObjects</b> of the
    * container object.
    * @property hotspots
    * @type gs.Object_Hotspot[]
    * @readOnly
     */
    this.hotspots = this.hotspotContainer.subObjects;

    /**
    * All message areas as array.
    * @property messageAreas
    * @type vn.MessageArea[]
    * @readOnly
     */
    this.messageAreas = [];

    /**
    * A timer object used for choices with time-limit.
    * @property choiceTimer
    * @type gs.Object_Timer
     */
    this.choiceTimer = new gs.Object_Timer();

    /**
    * Indicates if the UI layout is visible.
    * @property visible
    * @type boolean
     */
    this.visible = true;

    /**
    * @property visible_
    * @type boolean
    * @protected
     */
    this.visible_ = true;

    /**
    * The game settings.
    * @property settings
    * @type Object
     */
    this.settings = GameManager.settings;

    /**
    * Temporary settings like skip, etc.
    * @property tempSettings
    * @type Object
     */
    this.tempSettings = GameManager.settings;

    /**
    * Contains all data necessary to construct the scene.
    * @property sceneData
    * @type Object
     */
    this.sceneData = GameManager.sceneData;
    this.addObject(this.backgroundContainer);
    this.addObject(this.characterContainer);
    this.addObject(this.pictureContainer);
    this.addObject(this.textContainer);
    this.addObject(this.videoContainer);
    this.addObject(this.hotspotContainer);
    this.addObject(this.commonEventContainer);
    this.addObject(this.choiceTimer);
    this.addComponent(new gs.Component_InputHandler());
    this.addComponent(this.behavior);
    this.addComponent(this.interpreter);
  }

  return Object_Scene;

})(gs.Object_Base);

vn.Object_Scene = Object_Scene;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Object_Scene_106.js
var Object_Live2DCharacter,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Live2DCharacter = (function(superClass) {
  extend(Object_Live2DCharacter, superClass);

  Object_Live2DCharacter.objectCodecBlackList = ["parent"];


  /**
  * A game object for an animated Live2D visual novel character. 
  *
  * @module gs
  * @class Object_Live2DCharacter
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Live2DCharacter(record, data) {
    Object_Live2DCharacter.__super__.constructor.call(this, data);
    this.zIndex = 200;

    /**
    * The ID of the character-record used.
    * @property rid
    * @type number
     */
    this.rid = (data != null ? data.id : void 0) || (record != null ? record.index : void 0) || -1;

    /**
    * The rotation-angle of the character in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The Live2D model used for the visual presentation.
    * @property model
    * @type gs.Live2DModel
     */
    this.model = data != null ? ResourceManager.getLive2DModel("Live2D/" + data.modelName) : null;

    /**
    * The resource name of a Live2D model used for the visual presentation.
    * @property modelName
    * @type string
     */
    this.modelName = data != null ? data.modelName : void 0;

    /**
    * The Live2D motion.
    * @property motion
    * @type gs.Live2DMotion
     */
    this.motion = (data != null ? data.motion : void 0) || {
      name: "",
      loop: true

      /**
      * The Live2D motion group.
      * @property motion
      * @type gs.Live2DMotionGroup
       */
    };
    this.motionGroup = data != null ? data.motionGroup : void 0;

    /**
    * The Live2D expression.
    * @property expression
    * @type gs.Live2DExpression
     */
    this.expression = (data != null ? data.expression : void 0) || {
      name: ""

      /**
      * The character's behavior component which contains the character-specific logic.
      * @property behavior
      * @type vn.Component_CharacterBehavior
       */
    };
    this.behavior = new vn.Component_CharacterBehavior();
    this.logic = this.behavior;

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Live2D();
    this.visual.modelFolder = "Live2D";
    this.addComponent(this.logic);
    this.addComponent(this.visual);
    this.addComponent(this.animator);
    this.update();
  }


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Live2DCharacter.prototype.toDataBundle = function() {
    return {
      rid: this.rid,
      x: this.dstRect.x,
      y: this.dstRect.y,
      opacity: this.opacity,
      offset: this.offset,
      zoom: this.zoom,
      origin: this.origin,
      mirror: this.mirror,
      expression: this.expression,
      modelName: this.modelName,
      motion: this.motion,
      motionGroup: this.motionGroup,
      expression: this.expression
    };
  };

  return Object_Live2DCharacter;

})(gs.Object_Visual);

vn.Object_Live2DCharacter = Object_Live2DCharacter;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsc0JBQUE7RUFBQTs7O0FBQU07OztFQUNGLHNCQUFDLENBQUEsb0JBQUQsR0FBd0IsQ0FBQyxRQUFEOzs7QUFFeEI7Ozs7Ozs7Ozs7RUFTYSxnQ0FBQyxNQUFELEVBQVMsSUFBVDtJQUNULHdEQUFNLElBQU47SUFDQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7OztJQUtBLElBQUMsQ0FBQSxHQUFELG1CQUFPLElBQUksQ0FBRSxZQUFOLHNCQUFZLE1BQU0sQ0FBRSxlQUFwQixJQUE2QixDQUFDOztBQUVyQzs7Ozs7O0lBTUEsSUFBQyxDQUFBLEtBQUQsR0FBUzs7QUFFVDs7Ozs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFZLFlBQUgsR0FBYyxlQUFlLENBQUMsY0FBaEIsQ0FBK0IsU0FBQSxHQUFVLElBQUksQ0FBQyxTQUE5QyxDQUFkLEdBQThFOztBQUV2Rjs7Ozs7SUFLQSxJQUFDLENBQUEsU0FBRCxrQkFBYSxJQUFJLENBQUU7O0FBRW5COzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELG1CQUFVLElBQUksQ0FBRSxnQkFBTixJQUFnQjtNQUFBLElBQUEsRUFBTSxFQUFOO01BQVUsSUFBQSxFQUFNOztBQUUxQzs7OztTQUYwQjs7SUFPMUIsSUFBQyxDQUFBLFdBQUQsa0JBQWUsSUFBSSxDQUFFOztBQUVyQjs7Ozs7SUFLQSxJQUFDLENBQUEsVUFBRCxtQkFBYyxJQUFJLENBQUUsb0JBQU4sSUFBb0I7TUFBQSxJQUFBLEVBQU07O0FBRXhDOzs7O1NBRmtDOztJQU9sQyxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQywyQkFBSCxDQUFBO0lBQ2hCLElBQUMsQ0FBQSxLQUFELEdBQVMsSUFBQyxDQUFBOztBQUVWOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLGtCQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsZ0JBQUgsQ0FBQTtJQUNkLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQjtJQUV0QixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxLQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWY7SUFFQSxJQUFDLENBQUEsTUFBRCxDQUFBO0VBakZTOzs7QUFvRmI7Ozs7Ozs7bUNBTUEsWUFBQSxHQUFjLFNBQUE7V0FDVjtNQUFBLEdBQUEsRUFBSyxJQUFDLENBQUEsR0FBTjtNQUNBLENBQUEsRUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLENBRFo7TUFFQSxDQUFBLEVBQUcsSUFBQyxDQUFBLE9BQU8sQ0FBQyxDQUZaO01BR0EsT0FBQSxFQUFTLElBQUMsQ0FBQSxPQUhWO01BSUEsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQUpUO01BS0EsSUFBQSxFQUFNLElBQUMsQ0FBQSxJQUxQO01BTUEsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQU5UO01BT0EsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQVBUO01BUUEsVUFBQSxFQUFZLElBQUMsQ0FBQSxVQVJiO01BU0EsU0FBQSxFQUFXLElBQUMsQ0FBQSxTQVRaO01BVUEsTUFBQSxFQUFRLElBQUMsQ0FBQSxNQVZUO01BV0EsV0FBQSxFQUFhLElBQUMsQ0FBQSxXQVhkO01BWUEsVUFBQSxFQUFZLElBQUMsQ0FBQSxVQVpiOztFQURVOzs7O0dBdEdtQixFQUFFLENBQUM7O0FBdUh4QyxFQUFFLENBQUMsc0JBQUgsR0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9MaXZlMkRDaGFyYWN0ZXJcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9MaXZlMkRDaGFyYWN0ZXIgZXh0ZW5kcyBncy5PYmplY3RfVmlzdWFsXG4gICAgQG9iamVjdENvZGVjQmxhY2tMaXN0ID0gW1wicGFyZW50XCJdXG4gICAgXG4gICAgIyMjKlxuICAgICogQSBnYW1lIG9iamVjdCBmb3IgYW4gYW5pbWF0ZWQgTGl2ZTJEIHZpc3VhbCBub3ZlbCBjaGFyYWN0ZXIuIFxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBPYmplY3RfTGl2ZTJEQ2hhcmFjdGVyXG4gICAgKiBAZXh0ZW5kcyBncy5PYmplY3RfVmlzdWFsXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAocmVjb3JkLCBkYXRhKSAtPlxuICAgICAgICBzdXBlcihkYXRhKVxuICAgICAgICBAekluZGV4ID0gMjAwXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIElEIG9mIHRoZSBjaGFyYWN0ZXItcmVjb3JkIHVzZWQuXG4gICAgICAgICogQHByb3BlcnR5IHJpZFxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQHJpZCA9IGRhdGE/LmlkIHx8IHJlY29yZD8uaW5kZXggfHwgLTFcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgcm90YXRpb24tYW5nbGUgb2YgdGhlIGNoYXJhY3RlciBpbiBkZWdyZWVzLiBUaGUgcm90YXRpb24gY2VudGVyIGRlcGVuZHMgb24gdGhlXG4gICAgICAgICogYW5jaG9yLXBvaW50LlxuICAgICAgICAqIEBwcm9wZXJ0eSBhbmdsZVxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQGFuZ2xlID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBMaXZlMkQgbW9kZWwgdXNlZCBmb3IgdGhlIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IG1vZGVsXG4gICAgICAgICogQHR5cGUgZ3MuTGl2ZTJETW9kZWxcbiAgICAgICAgIyMjXG4gICAgICAgIEBtb2RlbCA9IGlmIGRhdGE/IHRoZW4gUmVzb3VyY2VNYW5hZ2VyLmdldExpdmUyRE1vZGVsKFwiTGl2ZTJELyN7ZGF0YS5tb2RlbE5hbWV9XCIpIGVsc2UgbnVsbFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSByZXNvdXJjZSBuYW1lIG9mIGEgTGl2ZTJEIG1vZGVsIHVzZWQgZm9yIHRoZSB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSBtb2RlbE5hbWVcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdcbiAgICAgICAgIyMjXG4gICAgICAgIEBtb2RlbE5hbWUgPSBkYXRhPy5tb2RlbE5hbWVcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgTGl2ZTJEIG1vdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgbW90aW9uXG4gICAgICAgICogQHR5cGUgZ3MuTGl2ZTJETW90aW9uXG4gICAgICAgICMjI1xuICAgICAgICBAbW90aW9uID0gZGF0YT8ubW90aW9uIHx8IG5hbWU6IFwiXCIsIGxvb3A6IHllc1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBMaXZlMkQgbW90aW9uIGdyb3VwLlxuICAgICAgICAqIEBwcm9wZXJ0eSBtb3Rpb25cbiAgICAgICAgKiBAdHlwZSBncy5MaXZlMkRNb3Rpb25Hcm91cFxuICAgICAgICAjIyNcbiAgICAgICAgQG1vdGlvbkdyb3VwID0gZGF0YT8ubW90aW9uR3JvdXBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgTGl2ZTJEIGV4cHJlc3Npb24uXG4gICAgICAgICogQHByb3BlcnR5IGV4cHJlc3Npb25cbiAgICAgICAgKiBAdHlwZSBncy5MaXZlMkRFeHByZXNzaW9uXG4gICAgICAgICMjI1xuICAgICAgICBAZXhwcmVzc2lvbiA9IGRhdGE/LmV4cHJlc3Npb24gfHwgbmFtZTogXCJcIiAjUmVjb3JkTWFuYWdlci5jaGFyYWN0ZXJFeHByZXNzaW9uc1tkYXRhPy5leHByZXNzaW9uSWQgfHwgMF1cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY2hhcmFjdGVyJ3MgYmVoYXZpb3IgY29tcG9uZW50IHdoaWNoIGNvbnRhaW5zIHRoZSBjaGFyYWN0ZXItc3BlY2lmaWMgbG9naWMuXG4gICAgICAgICogQHByb3BlcnR5IGJlaGF2aW9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0NoYXJhY3RlckJlaGF2aW9yXG4gICAgICAgICMjI1xuICAgICAgICBAYmVoYXZpb3IgPSBuZXcgdm4uQ29tcG9uZW50X0NoYXJhY3RlckJlaGF2aW9yKClcbiAgICAgICAgQGxvZ2ljID0gQGJlaGF2aW9yXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQ29tcG9uZW50X0FuaW1hdG9yKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9TcHJpdGVcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXN1YWwgPSBuZXcgZ3MuQ29tcG9uZW50X0xpdmUyRCgpXG4gICAgICAgIEB2aXN1YWwubW9kZWxGb2xkZXIgPSBcIkxpdmUyRFwiXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEBsb2dpYylcbiAgICAgICAgQGFkZENvbXBvbmVudChAdmlzdWFsKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBhbmltYXRvcilcbiAgICAgICAgXG4gICAgICAgIEB1cGRhdGUoKVxuICAgICAgICBcbiAgICAgIFxuICAgICMjIypcbiAgICAqIFNlcmlhbGl6ZXMgdGhlIG9iamVjdCBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRhdGEtYnVuZGxlLlxuICAgICMjIyAgICBcbiAgICB0b0RhdGFCdW5kbGU6IC0+IFxuICAgICAgICByaWQ6IEByaWQsIFxuICAgICAgICB4OiBAZHN0UmVjdC54LCBcbiAgICAgICAgeTogQGRzdFJlY3QueSwgXG4gICAgICAgIG9wYWNpdHk6IEBvcGFjaXR5LFxuICAgICAgICBvZmZzZXQ6IEBvZmZzZXQsXG4gICAgICAgIHpvb206IEB6b29tLFxuICAgICAgICBvcmlnaW46IEBvcmlnaW4sXG4gICAgICAgIG1pcnJvcjogQG1pcnJvciwgXG4gICAgICAgIGV4cHJlc3Npb246IEBleHByZXNzaW9uLCBcbiAgICAgICAgbW9kZWxOYW1lOiBAbW9kZWxOYW1lLFxuICAgICAgICBtb3Rpb246IEBtb3Rpb24sXG4gICAgICAgIG1vdGlvbkdyb3VwOiBAbW90aW9uR3JvdXAsXG4gICAgICAgIGV4cHJlc3Npb246IEBleHByZXNzaW9uXG4gICAgICAgIFxuICAgICAgICBcblxudm4uT2JqZWN0X0xpdmUyRENoYXJhY3RlciA9IE9iamVjdF9MaXZlMkRDaGFyYWN0ZXIiXX0=
//# sourceURL=Object_Live2DCharacter_108.js
var Object_CommonEvent,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_CommonEvent = (function(superClass) {
  extend(Object_CommonEvent, superClass);

  Object_CommonEvent.objectCodecBlackList = ["record", "commands", "parent"];


  /**
  * Called if this object instance is restored from a data-bundle. It can be used
  * re-assign event-handler, anonymous functions, etc.
  * 
  * @method onDataBundleRestore.
  * @param Object data - The data-bundle
  * @param gs.ObjectCodecContext context - The codec-context.
   */

  Object_CommonEvent.prototype.onDataBundleRestore = function(data, context) {
    var ref;
    if (this.rid != null) {
      this.record = RecordManager.commonEvents[this.rid];
      if ((ref = this.interpreter) != null) {
        ref.object = this;
      }
      return this.commands = this.record.commands;
    }
  };


  /**
  * A common-event object handles a single common event defined in the
  * database. Common events can run parallel to the actual scene content
  * or can be just called from a scene to execute a common piece of logic.
  *
  * @module gs
  * @class Object_CommonEvent
  * @extends gs.Object_Base
  * @memberof gs
  * @constructor
   */

  function Object_CommonEvent(data) {
    Object_CommonEvent.__super__.constructor.call(this);

    /**
    * The common event database record.
    * @property record
    * @type Object
     */
    this.record = null;

    /**
    * The behavior component to add common-event specific behavior to the object.
    * @property behavior
    * @type gs.Component_CommonEventBehavior
     */
    this.behavior = new gs.Component_CommonEventBehavior();

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.Component_EventEmitter();

    /**
    * An interpreter to execute the commands of the common event.
    * @property interpreter
    * @type gs.Component_CommandInterpreter
     */
    this.interpreter = null;
    this.events.object = this;
    if (data) {
      this.restore(data);
    } else {
      this.addComponent(this.behavior);
    }
  }


  /**
  * Serializes the common-event into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_CommonEvent.prototype.toDataBundle = function() {
    var ref;
    this.commands = this.record.commands;
    return {
      behavior: this.behavior.toDataBundle(),
      interpreter: (ref = this.interpreter) != null ? ref.toDataBundle() : void 0,
      recordId: this.record.index
    };
  };


  /**
  * Restores the common-event from a data-bundle
  *
  * @method restore
  * @param {Object} bundle- The data-bundle.
   */

  Object_CommonEvent.prototype.restore = function(data) {
    if (this.behavior != null) {
      this.removeComponent(this.behavior);
    }
    this.behavior = new gs.Component_CommonEventBehavior();
    this.addComponent(this.behavior);
    this.record = RecordManager.commonEvents[data.recordId];
    this.behavior.restore(data.behavior);
    if (data.interpreter && this.interpreter) {
      this.interpreter.restore(data.interpreter);
      this.interpreter.context.set(this.record.id, this.record);
      return this.commands = this.record.commands;
    }
  };

  return Object_CommonEvent;

})(gs.Object_Base);

gs.Object_CommonEvent = Object_CommonEvent;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsa0JBQUE7RUFBQTs7O0FBQU07OztFQUNGLGtCQUFDLENBQUEsb0JBQUQsR0FBd0IsQ0FBQyxRQUFELEVBQVcsVUFBWCxFQUF1QixRQUF2Qjs7O0FBRXhCOzs7Ozs7Ozs7K0JBUUEsbUJBQUEsR0FBcUIsU0FBQyxJQUFELEVBQU8sT0FBUDtBQUNqQixRQUFBO0lBQUEsSUFBRyxnQkFBSDtNQUNJLElBQUMsQ0FBQSxNQUFELEdBQVUsYUFBYSxDQUFDLFlBQWEsQ0FBQSxJQUFDLENBQUEsR0FBRDs7V0FDekIsQ0FBRSxNQUFkLEdBQXVCOzthQUN2QixJQUFDLENBQUEsUUFBRCxHQUFZLElBQUMsQ0FBQSxNQUFNLENBQUMsU0FIeEI7O0VBRGlCOzs7QUFPckI7Ozs7Ozs7Ozs7OztFQVdhLDRCQUFDLElBQUQ7SUFDVCxrREFBQTs7QUFFQTs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLDZCQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsc0JBQUgsQ0FBQTs7QUFFZDs7Ozs7SUFLQSxJQUFDLENBQUEsV0FBRCxHQUFlO0lBRWYsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCO0lBRWpCLElBQUcsSUFBSDtNQUNJLElBQUMsQ0FBQSxPQUFELENBQVMsSUFBVCxFQURKO0tBQUEsTUFBQTtNQUdJLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWYsRUFISjs7RUFqQ1M7OztBQXNDYjs7Ozs7OzsrQkFNQSxZQUFBLEdBQWMsU0FBQTtBQUNWLFFBQUE7SUFBQSxJQUFDLENBQUEsUUFBRCxHQUFZLElBQUMsQ0FBQSxNQUFNLENBQUM7QUFDcEIsV0FBTztNQUNILFFBQUEsRUFBVSxJQUFDLENBQUEsUUFBUSxDQUFDLFlBQVYsQ0FBQSxDQURQO01BRUgsV0FBQSx3Q0FBeUIsQ0FBRSxZQUFkLENBQUEsVUFGVjtNQUdILFFBQUEsRUFBVSxJQUFDLENBQUEsTUFBTSxDQUFDLEtBSGY7O0VBRkc7OztBQVFkOzs7Ozs7OytCQU1BLE9BQUEsR0FBUyxTQUFDLElBQUQ7SUFDTCxJQUFHLHFCQUFIO01BQ0ksSUFBQyxDQUFBLGVBQUQsQ0FBaUIsSUFBQyxDQUFBLFFBQWxCLEVBREo7O0lBR0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsNkJBQUgsQ0FBQTtJQUNoQixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxRQUFmO0lBQ0EsSUFBQyxDQUFBLE1BQUQsR0FBVSxhQUFhLENBQUMsWUFBYSxDQUFBLElBQUksQ0FBQyxRQUFMO0lBRXJDLElBQUMsQ0FBQSxRQUFRLENBQUMsT0FBVixDQUFrQixJQUFJLENBQUMsUUFBdkI7SUFDQSxJQUFHLElBQUksQ0FBQyxXQUFMLElBQXFCLElBQUMsQ0FBQSxXQUF6QjtNQUNJLElBQUMsQ0FBQSxXQUFXLENBQUMsT0FBYixDQUFxQixJQUFJLENBQUMsV0FBMUI7TUFDQSxJQUFDLENBQUEsV0FBVyxDQUFDLE9BQU8sQ0FBQyxHQUFyQixDQUF5QixJQUFDLENBQUEsTUFBTSxDQUFDLEVBQWpDLEVBQXFDLElBQUMsQ0FBQSxNQUF0QzthQUNBLElBQUMsQ0FBQSxRQUFELEdBQVksSUFBQyxDQUFBLE1BQU0sQ0FBQyxTQUh4Qjs7RUFUSzs7OztHQXZGb0IsRUFBRSxDQUFDOztBQXlHcEMsRUFBRSxDQUFDLGtCQUFILEdBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfQ29tbW9uRXZlbnRcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9Db21tb25FdmVudCBleHRlbmRzIGdzLk9iamVjdF9CYXNlXG4gICAgQG9iamVjdENvZGVjQmxhY2tMaXN0ID0gW1wicmVjb3JkXCIsIFwiY29tbWFuZHNcIiwgXCJwYXJlbnRcIl1cbiAgICBcbiAgICAjIyMqXG4gICAgKiBDYWxsZWQgaWYgdGhpcyBvYmplY3QgaW5zdGFuY2UgaXMgcmVzdG9yZWQgZnJvbSBhIGRhdGEtYnVuZGxlLiBJdCBjYW4gYmUgdXNlZFxuICAgICogcmUtYXNzaWduIGV2ZW50LWhhbmRsZXIsIGFub255bW91cyBmdW5jdGlvbnMsIGV0Yy5cbiAgICAqIFxuICAgICogQG1ldGhvZCBvbkRhdGFCdW5kbGVSZXN0b3JlLlxuICAgICogQHBhcmFtIE9iamVjdCBkYXRhIC0gVGhlIGRhdGEtYnVuZGxlXG4gICAgKiBAcGFyYW0gZ3MuT2JqZWN0Q29kZWNDb250ZXh0IGNvbnRleHQgLSBUaGUgY29kZWMtY29udGV4dC5cbiAgICAjIyNcbiAgICBvbkRhdGFCdW5kbGVSZXN0b3JlOiAoZGF0YSwgY29udGV4dCkgLT5cbiAgICAgICAgaWYgQHJpZD9cbiAgICAgICAgICAgIEByZWNvcmQgPSBSZWNvcmRNYW5hZ2VyLmNvbW1vbkV2ZW50c1tAcmlkXVxuICAgICAgICAgICAgQGludGVycHJldGVyPy5vYmplY3QgPSB0aGlzXG4gICAgICAgICAgICBAY29tbWFuZHMgPSBAcmVjb3JkLmNvbW1hbmRzXG5cbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogQSBjb21tb24tZXZlbnQgb2JqZWN0IGhhbmRsZXMgYSBzaW5nbGUgY29tbW9uIGV2ZW50IGRlZmluZWQgaW4gdGhlXG4gICAgKiBkYXRhYmFzZS4gQ29tbW9uIGV2ZW50cyBjYW4gcnVuIHBhcmFsbGVsIHRvIHRoZSBhY3R1YWwgc2NlbmUgY29udGVudFxuICAgICogb3IgY2FuIGJlIGp1c3QgY2FsbGVkIGZyb20gYSBzY2VuZSB0byBleGVjdXRlIGEgY29tbW9uIHBpZWNlIG9mIGxvZ2ljLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBPYmplY3RfQ29tbW9uRXZlbnRcbiAgICAqIEBleHRlbmRzIGdzLk9iamVjdF9CYXNlXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAoZGF0YSkgLT5cbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBjb21tb24gZXZlbnQgZGF0YWJhc2UgcmVjb3JkLlxuICAgICAgICAqIEBwcm9wZXJ0eSByZWNvcmRcbiAgICAgICAgKiBAdHlwZSBPYmplY3RcbiAgICAgICAgIyMjXG4gICAgICAgIEByZWNvcmQgPSBudWxsXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGJlaGF2aW9yIGNvbXBvbmVudCB0byBhZGQgY29tbW9uLWV2ZW50IHNwZWNpZmljIGJlaGF2aW9yIHRvIHRoZSBvYmplY3QuXG4gICAgICAgICogQHByb3BlcnR5IGJlaGF2aW9yXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0NvbW1vbkV2ZW50QmVoYXZpb3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBiZWhhdmlvciA9IG5ldyBncy5Db21wb25lbnRfQ29tbW9uRXZlbnRCZWhhdmlvcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQW4gZXZlbnQtZW1pdHRlciB0byBlbWl0IGV2ZW50cy5cbiAgICAgICAgKiBAcHJvcGVydHkgZXZlbnRzXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0V2ZW50RW1pdHRlclxuICAgICAgICAjIyNcbiAgICAgICAgQGV2ZW50cyA9IG5ldyBncy5Db21wb25lbnRfRXZlbnRFbWl0dGVyKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBBbiBpbnRlcnByZXRlciB0byBleGVjdXRlIHRoZSBjb21tYW5kcyBvZiB0aGUgY29tbW9uIGV2ZW50LlxuICAgICAgICAqIEBwcm9wZXJ0eSBpbnRlcnByZXRlclxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9Db21tYW5kSW50ZXJwcmV0ZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBpbnRlcnByZXRlciA9IG51bGxcbiAgICAgICAgXG4gICAgICAgIEBldmVudHMub2JqZWN0ID0gdGhpc1xuICAgICAgICBcbiAgICAgICAgaWYgZGF0YVxuICAgICAgICAgICAgQHJlc3RvcmUoZGF0YSlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQGFkZENvbXBvbmVudChAYmVoYXZpb3IpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFNlcmlhbGl6ZXMgdGhlIGNvbW1vbi1ldmVudCBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRhdGEtYnVuZGxlLlxuICAgICMjIyAgXG4gICAgdG9EYXRhQnVuZGxlOiAtPlxuICAgICAgICBAY29tbWFuZHMgPSBAcmVjb3JkLmNvbW1hbmRzXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBiZWhhdmlvcjogQGJlaGF2aW9yLnRvRGF0YUJ1bmRsZSgpLFxuICAgICAgICAgICAgaW50ZXJwcmV0ZXI6IEBpbnRlcnByZXRlcj8udG9EYXRhQnVuZGxlKCksXG4gICAgICAgICAgICByZWNvcmRJZDogQHJlY29yZC5pbmRleFxuICAgICAgICB9XG4gICAgICAgXG4gICAgIyMjKlxuICAgICogUmVzdG9yZXMgdGhlIGNvbW1vbi1ldmVudCBmcm9tIGEgZGF0YS1idW5kbGVcbiAgICAqXG4gICAgKiBAbWV0aG9kIHJlc3RvcmVcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBidW5kbGUtIFRoZSBkYXRhLWJ1bmRsZS5cbiAgICAjIyMgICAgIFxuICAgIHJlc3RvcmU6IChkYXRhKSAtPlxuICAgICAgICBpZiBAYmVoYXZpb3I/XG4gICAgICAgICAgICBAcmVtb3ZlQ29tcG9uZW50KEBiZWhhdmlvcilcbiAgICAgICAgICAgIFxuICAgICAgICBAYmVoYXZpb3IgPSBuZXcgZ3MuQ29tcG9uZW50X0NvbW1vbkV2ZW50QmVoYXZpb3IoKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBiZWhhdmlvcilcbiAgICAgICAgQHJlY29yZCA9IFJlY29yZE1hbmFnZXIuY29tbW9uRXZlbnRzW2RhdGEucmVjb3JkSWRdXG4gICAgICAgIFxuICAgICAgICBAYmVoYXZpb3IucmVzdG9yZShkYXRhLmJlaGF2aW9yKVxuICAgICAgICBpZiBkYXRhLmludGVycHJldGVyIGFuZCBAaW50ZXJwcmV0ZXJcbiAgICAgICAgICAgIEBpbnRlcnByZXRlci5yZXN0b3JlKGRhdGEuaW50ZXJwcmV0ZXIpXG4gICAgICAgICAgICBAaW50ZXJwcmV0ZXIuY29udGV4dC5zZXQoQHJlY29yZC5pZCwgQHJlY29yZClcbiAgICAgICAgICAgIEBjb21tYW5kcyA9IEByZWNvcmQuY29tbWFuZHNcbiAgICAgICBcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICBcbiAgICAgICAgXG5ncy5PYmplY3RfQ29tbW9uRXZlbnQgPSBPYmplY3RfQ29tbW9uRXZlbnQiXX0=
//# sourceURL=Object_CommonEvent_116.js
var Object_Hotspot,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Hotspot = (function(superClass) {
  extend(Object_Hotspot, superClass);

  Object_Hotspot.objectCodecBlackList = ["parent"];


  /**
  * A hotspot object to define an area on the screen which can respond
  * to user-actions like mouse/touch actions. A hotspot can have multiple
  * images for different states like hovered, selected, etc.
  *
  * @module gs
  * @class Object_Hotspot
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Hotspot() {
    Object_Hotspot.__super__.constructor.apply(this, arguments);

    /**
    * The object's source rectangle. It controls which part of the object's image is used
    * for visual presentation.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect();

    /**
    * The object's mask to execute masking-effects on it.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * Indicates if the object's visual presentation should be mirrored horizontally.
    * @property mirror
    * @type boolean
     */
    this.mirror = false;

    /**
    * The object's image used for visual presentation.
    * @property image
    * @type string
     */
    this.image = "";

    /**
    * The rotation-angle of the picture in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The color tone of the object used for the visual presentation.
    * @property tone
    * @type gs.Tone
     */
    this.tone = new Tone(0, 0, 0, 0);

    /**
    * The color of the object used for the visual presentation.
    * @property color
    * @type gs.Color
     */
    this.color = new Color(255, 255, 255, 0);

    /**
    * Contains different kinds of effects which can be activated for the object.
    * @property effects
    * @type Object
     */
    this.effects = {
      wobble: new gs.WobbleEffect()

      /**
      * Indicates if the hotspot is selectable by mouse/touch.
      * @property selectable
      * @type boolean
       */
    };
    this.selectable = true;

    /**
    * Indicates if the hotspot is enabled. A disabled hotspot will not fire any events/actions.
    * @property enabled.
    * @type boolean
     */
    this.enabled = true;

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite();

    /**
    * The object's image-handling.
    * @property imageHandling
    * @type gs.ImageHandling
     */
    this.imageHandling = 0;

    /**
    * A behavior-component to hotspot-specific behavior to the object.
    * @property behavior
    * @type gs.Component_HotspotBehavior
     */
    this.behavior = new gs.Component_HotspotBehavior();
    this.behavior.imageHandling = this.imageHandling;

    /**
    * The hotspot's target. The target it optional but if set the hotspot follows
    * the target. For example: A hotspot could be follow moving picture.
    * @property target
    * @type gs.Object_Visual
     */
    this.target = null;

    /**
    * The names of the images for the different states of the hotspot. At least one image
    * needs to be set. The other ones are optional and used for the following:<br>
    *
    * - 0 = Base (Required)
    * - 1 = Hovered
    * - 2 = Unselected
    * - 3 = Selected
    * - 4 = Selected Hovered
    * @property images
    * @type string[]
     */
    this.images = [];

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.EventEmitter();
    this.addComponent(this.events);
    this.addComponent(this.behavior);
    this.addComponent(this.visual);
  }

  return Object_Hotspot;

})(gs.Object_Visual);

gs.Object_Hotspot = Object_Hotspot;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsY0FBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRDs7O0FBRXhCOzs7Ozs7Ozs7Ozs7RUFXYSx3QkFBQTtJQUNULGlEQUFBLFNBQUE7O0FBRUE7Ozs7OztJQU1BLElBQUMsQ0FBQSxPQUFELEdBQWUsSUFBQSxJQUFBLENBQUE7O0FBRWY7Ozs7O0lBS0EsSUFBQyxDQUFBLElBQUQsR0FBWSxJQUFBLEVBQUUsQ0FBQyxJQUFILENBQUE7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBVTs7QUFFVjs7Ozs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFTOztBQUVUOzs7Ozs7SUFNQSxJQUFDLENBQUEsS0FBRCxHQUFTOztBQUVUOzs7OztJQUtBLElBQUMsQ0FBQSxJQUFELEdBQVksSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxDQUFYLEVBQWMsQ0FBZDs7QUFFWjs7Ozs7SUFLQSxJQUFDLENBQUEsS0FBRCxHQUFhLElBQUEsS0FBQSxDQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLEVBQXFCLENBQXJCOztBQUViOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7TUFBQSxNQUFBLEVBQVksSUFBQSxFQUFFLENBQUMsWUFBSCxDQUFBOztBQUV2Qjs7OztTQUZXOztJQU9YLElBQUMsQ0FBQSxVQUFELEdBQWM7O0FBRWQ7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBVzs7QUFFWDs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsRUFBRSxDQUFDLGdCQUFILENBQUE7O0FBRWQ7Ozs7O0lBS0EsSUFBQyxDQUFBLGFBQUQsR0FBaUI7O0FBRWpCOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLHlCQUFILENBQUE7SUFDaEIsSUFBQyxDQUFBLFFBQVEsQ0FBQyxhQUFWLEdBQTBCLElBQUMsQ0FBQTs7QUFFM0I7Ozs7OztJQU1BLElBQUMsQ0FBQSxNQUFELEdBQVU7O0FBRVY7Ozs7Ozs7Ozs7OztJQVlBLElBQUMsQ0FBQSxNQUFELEdBQVU7O0FBRVY7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxZQUFILENBQUE7SUFFZCxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLE1BQWY7RUFoSVM7Ozs7R0FkWSxFQUFFLENBQUM7O0FBaUpoQyxFQUFFLENBQUMsY0FBSCxHQUFvQiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogT2JqZWN0X0hvdHNwb3RcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9Ib3RzcG90IGV4dGVuZHMgZ3MuT2JqZWN0X1Zpc3VhbFxuICAgIEBvYmplY3RDb2RlY0JsYWNrTGlzdCA9IFtcInBhcmVudFwiXVxuICAgIFxuICAgICMjIypcbiAgICAqIEEgaG90c3BvdCBvYmplY3QgdG8gZGVmaW5lIGFuIGFyZWEgb24gdGhlIHNjcmVlbiB3aGljaCBjYW4gcmVzcG9uZFxuICAgICogdG8gdXNlci1hY3Rpb25zIGxpa2UgbW91c2UvdG91Y2ggYWN0aW9ucy4gQSBob3RzcG90IGNhbiBoYXZlIG11bHRpcGxlXG4gICAgKiBpbWFnZXMgZm9yIGRpZmZlcmVudCBzdGF0ZXMgbGlrZSBob3ZlcmVkLCBzZWxlY3RlZCwgZXRjLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBPYmplY3RfSG90c3BvdFxuICAgICogQGV4dGVuZHMgZ3MuT2JqZWN0X1Zpc3VhbFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKCkgLT5cbiAgICAgICAgc3VwZXJcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3Mgc291cmNlIHJlY3RhbmdsZS4gSXQgY29udHJvbHMgd2hpY2ggcGFydCBvZiB0aGUgb2JqZWN0J3MgaW1hZ2UgaXMgdXNlZFxuICAgICAgICAqIGZvciB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSBzcmNSZWN0XG4gICAgICAgICogQHR5cGUgZ3MuUmVjdFxuICAgICAgICAjIyNcbiAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIG1hc2sgdG8gZXhlY3V0ZSBtYXNraW5nLWVmZmVjdHMgb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IG1hc2tcbiAgICAgICAgKiBAdHlwZSBncy5NYXNrXG4gICAgICAgICMjI1xuICAgICAgICBAbWFzayA9IG5ldyBncy5NYXNrKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIG9iamVjdCdzIHZpc3VhbCBwcmVzZW50YXRpb24gc2hvdWxkIGJlIG1pcnJvcmVkIGhvcml6b250YWxseS5cbiAgICAgICAgKiBAcHJvcGVydHkgbWlycm9yXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQG1pcnJvciA9IGZhbHNlXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGltYWdlIHVzZWQgZm9yIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IGltYWdlXG4gICAgICAgICogQHR5cGUgc3RyaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAaW1hZ2UgPSBcIlwiXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHJvdGF0aW9uLWFuZ2xlIG9mIHRoZSBwaWN0dXJlIGluIGRlZ3JlZXMuIFRoZSByb3RhdGlvbiBjZW50ZXIgZGVwZW5kcyBvbiB0aGVcbiAgICAgICAgKiBhbmNob3ItcG9pbnQuXG4gICAgICAgICogQHByb3BlcnR5IGFuZ2xlXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAYW5nbGUgPSAwXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGNvbG9yIHRvbmUgb2YgdGhlIG9iamVjdCB1c2VkIGZvciB0aGUgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdG9uZVxuICAgICAgICAqIEB0eXBlIGdzLlRvbmVcbiAgICAgICAgIyMjXG4gICAgICAgIEB0b25lID0gbmV3IFRvbmUoMCwgMCwgMCwgMClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY29sb3Igb2YgdGhlIG9iamVjdCB1c2VkIGZvciB0aGUgdmlzdWFsIHByZXNlbnRhdGlvbi5cbiAgICAgICAgKiBAcHJvcGVydHkgY29sb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db2xvclxuICAgICAgICAjIyNcbiAgICAgICAgQGNvbG9yID0gbmV3IENvbG9yKDI1NSwgMjU1LCAyNTUsIDApXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQ29udGFpbnMgZGlmZmVyZW50IGtpbmRzIG9mIGVmZmVjdHMgd2hpY2ggY2FuIGJlIGFjdGl2YXRlZCBmb3IgdGhlIG9iamVjdC5cbiAgICAgICAgKiBAcHJvcGVydHkgZWZmZWN0c1xuICAgICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAgICAjIyNcbiAgICAgICAgQGVmZmVjdHMgPSB3b2JibGU6IG5ldyBncy5Xb2JibGVFZmZlY3QoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgaG90c3BvdCBpcyBzZWxlY3RhYmxlIGJ5IG1vdXNlL3RvdWNoLlxuICAgICAgICAqIEBwcm9wZXJ0eSBzZWxlY3RhYmxlXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQHNlbGVjdGFibGUgPSB5ZXNcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGhvdHNwb3QgaXMgZW5hYmxlZC4gQSBkaXNhYmxlZCBob3RzcG90IHdpbGwgbm90IGZpcmUgYW55IGV2ZW50cy9hY3Rpb25zLlxuICAgICAgICAqIEBwcm9wZXJ0eSBlbmFibGVkLlxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEBlbmFibGVkID0geWVzXG5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyB2aXN1YWwtY29tcG9uZW50IHRvIGRpc3BsYXkgdGhlIGdhbWUgb2JqZWN0IG9uIHNjcmVlbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdmlzdWFsXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X1Nwcml0ZVxuICAgICAgICAjIyNcbiAgICAgICAgQHZpc3VhbCA9IG5ldyBncy5Db21wb25lbnRfU3ByaXRlKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgaW1hZ2UtaGFuZGxpbmcuXG4gICAgICAgICogQHByb3BlcnR5IGltYWdlSGFuZGxpbmdcbiAgICAgICAgKiBAdHlwZSBncy5JbWFnZUhhbmRsaW5nXG4gICAgICAgICMjI1xuICAgICAgICBAaW1hZ2VIYW5kbGluZyA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBBIGJlaGF2aW9yLWNvbXBvbmVudCB0byBob3RzcG90LXNwZWNpZmljIGJlaGF2aW9yIHRvIHRoZSBvYmplY3QuXG4gICAgICAgICogQHByb3BlcnR5IGJlaGF2aW9yXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0hvdHNwb3RCZWhhdmlvclxuICAgICAgICAjIyNcbiAgICAgICAgQGJlaGF2aW9yID0gbmV3IGdzLkNvbXBvbmVudF9Ib3RzcG90QmVoYXZpb3IoKVxuICAgICAgICBAYmVoYXZpb3IuaW1hZ2VIYW5kbGluZyA9IEBpbWFnZUhhbmRsaW5nXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGhvdHNwb3QncyB0YXJnZXQuIFRoZSB0YXJnZXQgaXQgb3B0aW9uYWwgYnV0IGlmIHNldCB0aGUgaG90c3BvdCBmb2xsb3dzXG4gICAgICAgICogdGhlIHRhcmdldC4gRm9yIGV4YW1wbGU6IEEgaG90c3BvdCBjb3VsZCBiZSBmb2xsb3cgbW92aW5nIHBpY3R1cmUuXG4gICAgICAgICogQHByb3BlcnR5IHRhcmdldFxuICAgICAgICAqIEB0eXBlIGdzLk9iamVjdF9WaXN1YWxcbiAgICAgICAgIyMjXG4gICAgICAgIEB0YXJnZXQgPSBudWxsXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG5hbWVzIG9mIHRoZSBpbWFnZXMgZm9yIHRoZSBkaWZmZXJlbnQgc3RhdGVzIG9mIHRoZSBob3RzcG90LiBBdCBsZWFzdCBvbmUgaW1hZ2VcbiAgICAgICAgKiBuZWVkcyB0byBiZSBzZXQuIFRoZSBvdGhlciBvbmVzIGFyZSBvcHRpb25hbCBhbmQgdXNlZCBmb3IgdGhlIGZvbGxvd2luZzo8YnI+XG4gICAgICAgICpcbiAgICAgICAgKiAtIDAgPSBCYXNlIChSZXF1aXJlZClcbiAgICAgICAgKiAtIDEgPSBIb3ZlcmVkXG4gICAgICAgICogLSAyID0gVW5zZWxlY3RlZFxuICAgICAgICAqIC0gMyA9IFNlbGVjdGVkXG4gICAgICAgICogLSA0ID0gU2VsZWN0ZWQgSG92ZXJlZFxuICAgICAgICAqIEBwcm9wZXJ0eSBpbWFnZXNcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdbXVxuICAgICAgICAjIyNcbiAgICAgICAgQGltYWdlcyA9IFtdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQW4gZXZlbnQtZW1pdHRlciB0byBlbWl0IGV2ZW50cy5cbiAgICAgICAgKiBAcHJvcGVydHkgZXZlbnRzXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0V2ZW50RW1pdHRlclxuICAgICAgICAjIyNcbiAgICAgICAgQGV2ZW50cyA9IG5ldyBncy5FdmVudEVtaXR0ZXIoKTtcbiAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGV2ZW50cylcbiAgICAgICAgQGFkZENvbXBvbmVudChAYmVoYXZpb3IpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHZpc3VhbClcbiAgICAgICAgXG4gICAgICAgIFxuZ3MuT2JqZWN0X0hvdHNwb3QgPSBPYmplY3RfSG90c3BvdCJdfQ==
//# sourceURL=Object_Hotspot_122.js
var Object_Animation,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Animation = (function(superClass) {
  extend(Object_Animation, superClass);


  /**
  * A game object used for animations.
  *
  * @module gs
  * @class Object_Animation
  * @extends gs.Object_Picture
  * @memberof gs
  * @constructor
   */

  function Object_Animation(record) {
    var component;
    Object_Animation.__super__.constructor.call(this);
    this.image = record != null ? record.graphic.name : void 0;
    component = new gs.Component_FrameAnimation(record);
    this.addComponent(component);
  }

  return Object_Animation;

})(gs.Object_Picture);

gs.Object_Animation = Object_Animation;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZ0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLDBCQUFDLE1BQUQ7QUFDVCxRQUFBO0lBQUEsZ0RBQUE7SUFFQSxJQUFDLENBQUEsS0FBRCxvQkFBUyxNQUFNLENBQUUsT0FBTyxDQUFDO0lBRXpCLFNBQUEsR0FBZ0IsSUFBQSxFQUFFLENBQUMsd0JBQUgsQ0FBNEIsTUFBNUI7SUFDaEIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxTQUFkO0VBTlM7Ozs7R0FWYyxFQUFFLENBQUM7O0FBbUJsQyxFQUFFLENBQUMsZ0JBQUgsR0FBc0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9BbmltYXRpb25cbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9BbmltYXRpb24gZXh0ZW5kcyBncy5PYmplY3RfUGljdHVyZVxuICAgICMjIypcbiAgICAqIEEgZ2FtZSBvYmplY3QgdXNlZCBmb3IgYW5pbWF0aW9ucy5cbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgT2JqZWN0X0FuaW1hdGlvblxuICAgICogQGV4dGVuZHMgZ3MuT2JqZWN0X1BpY3R1cmVcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChyZWNvcmQpIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIEBpbWFnZSA9IHJlY29yZD8uZ3JhcGhpYy5uYW1lXG4gICAgICAgICAgICBcbiAgICAgICAgY29tcG9uZW50ID0gbmV3IGdzLkNvbXBvbmVudF9GcmFtZUFuaW1hdGlvbihyZWNvcmQpXG4gICAgICAgIEBhZGRDb21wb25lbnQoY29tcG9uZW50KVxuICAgICAgICAgICAgXG4gICAgICAgICAgICBcbmdzLk9iamVjdF9BbmltYXRpb24gPSBPYmplY3RfQW5pbWF0aW9uIl19
//# sourceURL=Object_Animation_127.js
var Object_Container,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Container = (function(superClass) {
  extend(Object_Container, superClass);


  /**
  * A game object which can contain other game objects.
  *
  * @module gs
  * @class Object_Container
  * @extends gs.Object_Base
  * @memberof gs
  * @constructor
   */

  function Object_Container(disposeBehavior) {
    Object_Container.__super__.constructor.apply(this, arguments);

    /**
    * The container's behavior component.
    * @property behavior
    * @type behavior
     */
    this.behavior = new gs.Component_Container(disposeBehavior);
    this.addComponent(this.behavior);
  }

  return Object_Container;

})(gs.Object_Base);

gs.Object_Container = Object_Container;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZ0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7OztFQVNhLDBCQUFDLGVBQUQ7SUFDVCxtREFBQSxTQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLG1CQUFILENBQXVCLGVBQXZCO0lBQ2hCLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWY7RUFUUzs7OztHQVZjLEVBQUUsQ0FBQzs7QUFxQmxDLEVBQUUsQ0FBQyxnQkFBSCxHQUFzQiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogT2JqZWN0X0NvbnRhaW5lclxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X0NvbnRhaW5lciBleHRlbmRzIGdzLk9iamVjdF9CYXNlXG4gICAgIyMjKlxuICAgICogQSBnYW1lIG9iamVjdCB3aGljaCBjYW4gY29udGFpbiBvdGhlciBnYW1lIG9iamVjdHMuXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIE9iamVjdF9Db250YWluZXJcbiAgICAqIEBleHRlbmRzIGdzLk9iamVjdF9CYXNlXG4gICAgKiBAbWVtYmVyb2YgZ3NcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAoZGlzcG9zZUJlaGF2aW9yKSAtPlxuICAgICAgICBzdXBlclxuICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGNvbnRhaW5lcidzIGJlaGF2aW9yIGNvbXBvbmVudC5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSBiZWhhdmlvclxuICAgICAgICAjIyNcbiAgICAgICAgQGJlaGF2aW9yID0gbmV3IGdzLkNvbXBvbmVudF9Db250YWluZXIoZGlzcG9zZUJlaGF2aW9yKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBiZWhhdmlvcilcbiAgICAgICAgXG5ncy5PYmplY3RfQ29udGFpbmVyID0gT2JqZWN0X0NvbnRhaW5lciJdfQ==
//# sourceURL=Object_Container_138.js
var Object_Text,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Text = (function(superClass) {
  extend(Object_Text, superClass);

  Object_Text.objectCodecBlackList = ["parent"];


  /**
  * A game object used for custom texts in a scene.
  *
  * @module gs
  * @class Object_Text
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Text(data) {
    Object_Text.__super__.constructor.apply(this, arguments);

    /**
    * The object's bitmap used for visual presentation.
    * @property bitmap
    * @type gs.Bitmap
     */
    this.bitmap = null;

    /**
    * The font used for the text.
    * @property font
    * @type gs.Font
     */
    this.font = new Font(gs.Fonts.TEXT);

    /**
    * Indicates if word-wrap is enabled. If <b>true</b> line-breaks are automatically added.
    * @property wordWrap
    * @type boolean
     */
    this.wordWrap = false;

    /**
    * The object's source rectangle. It controls which part of the object's image is used
    * for visual presentation.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect();

    /**
    * The object's mask to execute masking-effects on it.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * Indicates if the object's visual presentation should be mirrored horizontally.
    * @property mirror
    * @type boolean
     */
    this.mirror = false;

    /**
    * The text to display.
    * @property text
    * @type string
     */
    this.text = "";

    /**
    * The rotation-angle of the picture in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The color tone of the object used for the visual presentation.
    * @property tone
    * @type gs.Tone
     */
    this.tone = new Tone(0, 0, 0, 0);

    /**
    * The color of the object used for the visual presentation.
    * @property color
    * @type gs.Color
     */
    this.color = new Color(255, 255, 255, 0);

    /**
    * The text-renderer used to render the text.
    * @property textRenderer
    * @type gs.Component_TextRenderer
     */
    this.textRenderer = new gs.Component_TextRenderer();
    this.textRenderer.object = this;

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type gs.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite(false);

    /**
    * The object's behavior component for the text-specific behavior.
    * @property behavior
    * @type gs.Component_TextBehavior
     */
    this.behavior = new gs.Component_TextBehavior();
    this.addComponent(this.visual);
    this.addComponent(this.behavior);
    this.addComponent(this.animator);
    this.componentsFromDataBundle(data);
  }


  /**
  * Restores the game object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_Text.prototype.restore = function(data) {
    Object_Text.__super__.restore.call(this, data);
    this.srcRect = gs.Rect.fromObject(data.srcRect);
    return this.mask = gs.Mask.fromObject(data.mask);
  };


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Text.prototype.toDataBundle = function() {
    var components, result;
    components = this.componentsToDataBundle(gs.Component_Animation);
    result = {
      components: components,
      dstRect: this.dstRect,
      srcRect: this.srcRect,
      opacity: this.opacity,
      origin: this.origin,
      offset: this.offset,
      anchor: this.anchor,
      zIndex: this.zIndex,
      mask: this.mask.toDataBundle(),
      motionBlur: this.motionBlur,
      zoom: this.zoom,
      angle: this.angle,
      mirror: this.mirror,
      text: this.text,
      formatting: this.formatting
    };
    return result;
  };

  return Object_Text;

})(gs.Object_Visual);

gs.Object_Text = Object_Text;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Object_Text_144.js
var Object_ImageMap,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_ImageMap = (function(superClass) {
  extend(Object_ImageMap, superClass);

  Object_ImageMap.objectCodecBlackList = ["parent"];


  /**
  * An image-map object to display an image-map on screen. 
  *
  * @module gs
  * @class Object_ImageMap
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_ImageMap() {
    Object_ImageMap.__super__.constructor.apply(this, arguments);

    /**
    * The names of the images used for the different states of the image-map.<br>
    *
    * - 0 = Ground Image
    * - 1 = Hovered
    * - 2 = Unselected
    * - 3 = Selected
    * - 4 = Selected Hovered
    *
    * @property images
    * @type string[]
     */
    this.images = [];

    /**
    * The hotspot data of the image-map. Each entry is a single hotspot on the image-map.
    * @property hotspots
    * @type gs.ImageMapHotspot[]
     */
    this.hotspots = [];

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.Component_EventEmitter();

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_ImageMap
     */
    this.visual = new gs.Component_ImageMap();
    this.addComponent(this.animator);
    this.addComponent(this.visual);
    this.addComponent(this.events);
  }

  return Object_ImageMap;

})(gs.Object_Visual);

gs.Object_ImageMap = Object_ImageMap;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZUFBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsZUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRDs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2EseUJBQUE7SUFDVCxrREFBQSxTQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7SUFZQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVk7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxzQkFBSCxDQUFBOztBQUVkOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLGtCQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsa0JBQUgsQ0FBQTtJQUVkLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWY7SUFDQSxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtFQS9DUzs7OztHQVphLEVBQUUsQ0FBQzs7QUE2RGpDLEVBQUUsQ0FBQyxlQUFILEdBQXFCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfSW1hZ2VNYXBcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9JbWFnZU1hcCBleHRlbmRzIGdzLk9iamVjdF9WaXN1YWxcbiAgICBAb2JqZWN0Q29kZWNCbGFja0xpc3QgPSBbXCJwYXJlbnRcIl1cbiAgICBcbiAgICAjIyMqXG4gICAgKiBBbiBpbWFnZS1tYXAgb2JqZWN0IHRvIGRpc3BsYXkgYW4gaW1hZ2UtbWFwIG9uIHNjcmVlbi4gXG4gICAgKlxuICAgICogQG1vZHVsZSBnc1xuICAgICogQGNsYXNzIE9iamVjdF9JbWFnZU1hcFxuICAgICogQGV4dGVuZHMgZ3MuT2JqZWN0X1Zpc3VhbFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogLT5cbiAgICAgICAgc3VwZXJcblxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG5hbWVzIG9mIHRoZSBpbWFnZXMgdXNlZCBmb3IgdGhlIGRpZmZlcmVudCBzdGF0ZXMgb2YgdGhlIGltYWdlLW1hcC48YnI+XG4gICAgICAgICpcbiAgICAgICAgKiAtIDAgPSBHcm91bmQgSW1hZ2VcbiAgICAgICAgKiAtIDEgPSBIb3ZlcmVkXG4gICAgICAgICogLSAyID0gVW5zZWxlY3RlZFxuICAgICAgICAqIC0gMyA9IFNlbGVjdGVkXG4gICAgICAgICogLSA0ID0gU2VsZWN0ZWQgSG92ZXJlZFxuICAgICAgICAqXG4gICAgICAgICogQHByb3BlcnR5IGltYWdlc1xuICAgICAgICAqIEB0eXBlIHN0cmluZ1tdXG4gICAgICAgICMjI1xuICAgICAgICBAaW1hZ2VzID0gW11cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgaG90c3BvdCBkYXRhIG9mIHRoZSBpbWFnZS1tYXAuIEVhY2ggZW50cnkgaXMgYSBzaW5nbGUgaG90c3BvdCBvbiB0aGUgaW1hZ2UtbWFwLlxuICAgICAgICAqIEBwcm9wZXJ0eSBob3RzcG90c1xuICAgICAgICAqIEB0eXBlIGdzLkltYWdlTWFwSG90c3BvdFtdXG4gICAgICAgICMjI1xuICAgICAgICBAaG90c3BvdHMgPSBbXVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEFuIGV2ZW50LWVtaXR0ZXIgdG8gZW1pdCBldmVudHMuXG4gICAgICAgICogQHByb3BlcnR5IGV2ZW50c1xuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9FdmVudEVtaXR0ZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBldmVudHMgPSBuZXcgZ3MuQ29tcG9uZW50X0V2ZW50RW1pdHRlcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQ29tcG9uZW50X0FuaW1hdG9yKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9JbWFnZU1hcFxuICAgICAgICAjIyNcbiAgICAgICAgQHZpc3VhbCA9IG5ldyBncy5Db21wb25lbnRfSW1hZ2VNYXAoKVxuICAgICAgICBcbiAgICAgICAgQGFkZENvbXBvbmVudChAYW5pbWF0b3IpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHZpc3VhbClcbiAgICAgICAgQGFkZENvbXBvbmVudChAZXZlbnRzKVxuICAgICAgICBcbmdzLk9iamVjdF9JbWFnZU1hcCA9IE9iamVjdF9JbWFnZU1hcCJdfQ==
//# sourceURL=Object_ImageMap_146.js
var Object_Timer,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Timer = (function(superClass) {
  extend(Object_Timer, superClass);

  Object_Timer.objectCodecBlackList = ["parent"];


  /**
  * A timer object. A timer can be used as a regular timer or as a stop-watch.
  *
  * @module gs
  * @class Object_Timer
  * @extends gs.Object_Base
  * @memberof gs
  * @constructor
   */

  function Object_Timer(data) {
    Object_Timer.__super__.constructor.call(this);

    /**
    * The current seconds.
    * @property seconds
    * @type number
     */
    this.seconds = 0;

    /**
    * The current minutes.
    * @property seconds
    * @type number
     */
    this.minutes = 0;

    /**
    * Indicates if the timer runs like a stop-watch.
    * @property stopWatch
    * @type boolean
     */
    this.stopWatch = false;

    /**
    * A behavior-component to add timer-specific behavior to the object.
    * @property behavior
    * @type gs.Component_Timer
     */
    this.behavior = null;

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.EventEmitter();
    this.addComponent(this.events);
    if (data != null) {
      this.componentsFromDataBundle(data);
    } else {
      this.behavior = new gs.Component_Timer();
      this.addComponent(this.behavior);
    }
  }


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Timer.prototype.toDataBundle = function() {
    var components, result;
    components = this.componentsToDataBundle(gs.Component_Timer);
    result = {
      stopWatch: this.stopWatch,
      minutes: this.minutes,
      seconds: this.seconds,
      components: components
    };
    return result;
  };

  Object_Timer.prototype.restore = function(dataBundle) {};

  return Object_Timer;

})(gs.Object_Base);

gs.Object_Timer = Object_Timer;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsWUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRDs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2Esc0JBQUMsSUFBRDtJQUNULDRDQUFBOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7O0FBRVg7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBVzs7QUFFWDs7Ozs7SUFLQSxJQUFDLENBQUEsU0FBRCxHQUFhOztBQUViOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVk7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxZQUFILENBQUE7SUFFZCxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBRUEsSUFBRyxZQUFIO01BQ0ksSUFBQyxDQUFBLHdCQUFELENBQTBCLElBQTFCLEVBREo7S0FBQSxNQUFBO01BR0ksSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsZUFBSCxDQUFBO01BQ2hCLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWYsRUFKSjs7RUF4Q1M7OztBQThDYjs7Ozs7Ozt5QkFNQSxZQUFBLEdBQWMsU0FBQTtBQUNWLFFBQUE7SUFBQSxVQUFBLEdBQWEsSUFBQyxDQUFBLHNCQUFELENBQXdCLEVBQUUsQ0FBQyxlQUEzQjtJQUViLE1BQUEsR0FBUztNQUNMLFNBQUEsRUFBVyxJQUFDLENBQUEsU0FEUDtNQUVMLE9BQUEsRUFBUyxJQUFDLENBQUEsT0FGTDtNQUdMLE9BQUEsRUFBUyxJQUFDLENBQUEsT0FITDtNQUlMLFVBQUEsRUFBWSxVQUpQOztBQU9ULFdBQU87RUFWRzs7eUJBWWQsT0FBQSxHQUFTLFNBQUMsVUFBRCxHQUFBOzs7O0dBNUVjLEVBQUUsQ0FBQzs7QUFpRjlCLEVBQUUsQ0FBQyxZQUFILEdBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfVGltZXJcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9UaW1lciBleHRlbmRzIGdzLk9iamVjdF9CYXNlXG4gICAgQG9iamVjdENvZGVjQmxhY2tMaXN0ID0gW1wicGFyZW50XCJdXG4gICAgXG4gICAgIyMjKlxuICAgICogQSB0aW1lciBvYmplY3QuIEEgdGltZXIgY2FuIGJlIHVzZWQgYXMgYSByZWd1bGFyIHRpbWVyIG9yIGFzIGEgc3RvcC13YXRjaC5cbiAgICAqXG4gICAgKiBAbW9kdWxlIGdzXG4gICAgKiBAY2xhc3MgT2JqZWN0X1RpbWVyXG4gICAgKiBAZXh0ZW5kcyBncy5PYmplY3RfQmFzZVxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKGRhdGEpIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY3VycmVudCBzZWNvbmRzLlxuICAgICAgICAqIEBwcm9wZXJ0eSBzZWNvbmRzXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAc2Vjb25kcyA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY3VycmVudCBtaW51dGVzLlxuICAgICAgICAqIEBwcm9wZXJ0eSBzZWNvbmRzXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAbWludXRlcyA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRpbWVyIHJ1bnMgbGlrZSBhIHN0b3Atd2F0Y2guXG4gICAgICAgICogQHByb3BlcnR5IHN0b3BXYXRjaFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEBzdG9wV2F0Y2ggPSBub1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEEgYmVoYXZpb3ItY29tcG9uZW50IHRvIGFkZCB0aW1lci1zcGVjaWZpYyBiZWhhdmlvciB0byB0aGUgb2JqZWN0LlxuICAgICAgICAqIEBwcm9wZXJ0eSBiZWhhdmlvclxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9UaW1lclxuICAgICAgICAjIyNcbiAgICAgICAgQGJlaGF2aW9yID0gbnVsbFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEFuIGV2ZW50LWVtaXR0ZXIgdG8gZW1pdCBldmVudHMuXG4gICAgICAgICogQHByb3BlcnR5IGV2ZW50c1xuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9FdmVudEVtaXR0ZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBldmVudHMgPSBuZXcgZ3MuRXZlbnRFbWl0dGVyKClcbiAgICAgICAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGV2ZW50cylcbiAgICAgICAgXG4gICAgICAgIGlmIGRhdGE/XG4gICAgICAgICAgICBAY29tcG9uZW50c0Zyb21EYXRhQnVuZGxlKGRhdGEpXG4gICAgICAgIGVsc2VcbiAgICAgICAgICAgIEBiZWhhdmlvciA9IG5ldyBncy5Db21wb25lbnRfVGltZXIoKVxuICAgICAgICAgICAgQGFkZENvbXBvbmVudChAYmVoYXZpb3IpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFNlcmlhbGl6ZXMgdGhlIG9iamVjdCBpbnRvIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCB0b0RhdGFCdW5kbGVcbiAgICAqIEByZXR1cm4ge09iamVjdH0gVGhlIGRhdGEtYnVuZGxlLlxuICAgICMjIyAgICBcbiAgICB0b0RhdGFCdW5kbGU6IC0+XG4gICAgICAgIGNvbXBvbmVudHMgPSBAY29tcG9uZW50c1RvRGF0YUJ1bmRsZShncy5Db21wb25lbnRfVGltZXIpXG4gICAgICAgICAgICAgICAgXG4gICAgICAgIHJlc3VsdCA9IHtcbiAgICAgICAgICAgIHN0b3BXYXRjaDogQHN0b3BXYXRjaCxcbiAgICAgICAgICAgIG1pbnV0ZXM6IEBtaW51dGVzLFxuICAgICAgICAgICAgc2Vjb25kczogQHNlY29uZHMsXG4gICAgICAgICAgICBjb21wb25lbnRzOiBjb21wb25lbnRzXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgcmV0dXJuIHJlc3VsdFxuICAgICAgICBcbiAgICByZXN0b3JlOiAoZGF0YUJ1bmRsZSkgLT5cbiAgICAgICAgXG4gICAgICAgIFxuICAgIFxuICAgICAgICBcbmdzLk9iamVjdF9UaW1lciA9IE9iamVjdF9UaW1lciJdfQ==
//# sourceURL=Object_Timer_148.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=UI_153.js
var Object_UIElement,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_UIElement = (function(superClass) {
  extend(Object_UIElement, superClass);

  Object_UIElement.accessors("image", {
    set: function(image) {
      if (image !== this.image_) {
        this.image_ = image;
        return this.needsUpdate = true;
      }
    },
    get: function() {
      return this.image_;
    }
  });

  Object_UIElement.accessors("opacity", {
    set: function(opacity) {
      if (opacity !== this.opacity_) {
        this.opacity_ = opacity;
        return this.needsUpdate = true;
      }
    },
    get: function() {
      return this.opacity_;
    }
  });

  Object_UIElement.accessors("clipRect", {
    set: function(clipRect) {
      if (clipRect !== this.clipRect_) {
        this.clipRect_ = clipRect;
        return this.needsUpdate = true;
      }
    },
    get: function() {
      return this.clipRect_;
    }
  });

  Object_UIElement.accessors("visible", {
    set: function(v) {
      if (v !== this.visible_) {
        this.visible_ = v;
        this.needsUpdate = true;
        return this.fullRefresh();
      }
    },
    get: function() {
      return this.visible_ && (!this.parent || this.parent.visible);
    }
  });


  /**
  * The base class for all In-Game UI objects.
  *
  * @module ui
  * @class Object_UIElement
  * @extends gs.Object_Base
  * @memberof ui
  * @constructor
   */

  function Object_UIElement() {
    Object_UIElement.__super__.constructor.call(this);
    this.id = "";

    /**
    * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object
    * will not change any binding-targets for the current binding-execution period.
    * @property breakBindingChain
    * @type boolean
     */
    this.breakBindingChain = false;
    this.numbers = new Array(10);
    this.data = new Array(10);
    this.controlsByStyle = new Array(ui.UIManager.stylesById.length);
    this.parentsByStyle = new Array(ui.UIManager.stylesById.length);
    this.styles = [];
    this.activeStyles = [];
    this.focusable = false;

    /**
    * The UI object's destination rectangle on screen.
    * @property dstRect
    * @type ui.Component_UIElementRectangle
     */
    this.dstRect = new ui.UIElementRectangle(this);

    /**
    * The UI object's margin. The margin defines an extra space around the UI object. 
    * The default is { left: 0, top: 0, right: 0, bottom: 0 }.
    * @property margin
    * @type ui.Space
     */
    this.margin = new ui.Space(0, 0, 0, 0);

    /**
    * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.
    * @property padding
    * @type ui.Space
     */
    this.padding = new ui.Space(0, 0, 0, 0);

    /**
    * The UI object's alignment.
    * @property alignment
    * @type ui.Alignment
     */
    this.alignment = 0;

    /**
    * Indicates if the UI object is visible on screen.
    * @property visible
    * @type boolean
     */
    this.visible = true;

    /**
    * Indicates if the UI object is enabled and responds to user actions.
    * @property enabled
    * @type boolean
     */
    this.enabled = true;

    /**
    * The UI object's origin.
    * @property origin
    * @type gs.Vector2
     */
    this.origin = new ui.UIElementPoint(this);

    /**
    * The UI object's offset.
    * @property offset
    * @type gs.Vector2
     */
    this.offset = new ui.UIElementPoint(this);

    /**
    * The UI object's opacity to control transparency. For example: 0 = Transparent, 255 = Opaque, 128 = Semi-Transparent.
    * @property opacity
    * @type number
     */
    this.opacity = 255;

    /**
    * The UI object's resize behavior.
    * @property resizable
    * @type boolean
     */
    this.resizable = false;

    /**
    * The UI object's anchor-point. For example: An anchor-point with 0,0 places the object with its top-left corner
    * at its position but with an 0.5, 0.5 anchor-point the object is placed with its center. An anchor-point of 1,1
    * places the object with its lower-right corner.
    * @property anchor
    * @type gs.Point
     */
    this.anchor = new gs.Point(0.0, 0.0);

    /**
    * The UI object's zoom-setting for x and y axis. The default value is
    * { x: 1.0, y: 1.0 }
    * @property zoom
    * @type gs.Point
     */
    this.zoom = new gs.Point(1.0, 1.0);

    /**
    * The UI object's color.
    * @property color
    * @type gs.Color
     */
    this.color = new Color(255, 255, 255, 0);

    /**
    * The UI object's mask for masking-effects.
    * @property mask
    * @type gs.Mask
     */
    this.mask = new gs.Mask();

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.EventEmitter();

    /**
    * The update-behavior of the UI object. The default is ui.UpdateBehavior.NORMAL.
    * @property updateBehavior
    * @type ui.UpdateBehavior
     */
    this.updateBehavior = ui.UpdateBehavior.NORMAL;

    /**
    * @property image_
    * @type string
    * @protected
     */
    this.image_ = null;

    /**
    * The object's clip-rect for visual presentation.
    * @property clipRect_
    * @type gs.Rect
    * @protected
     */
    this.clipRect_ = null;

    /**
    * @property visible_
    * @type boolean
    * @protected
     */
    this.visible_ = true;
    this.addComponent(this.events);
  }


  /**
  * Restores the object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_UIElement.prototype.restore = function(data) {
    this.anchor = new gs.Point(data.anchor.x, data.anchor.y);
    this.offset = new gs.Point(data.offset.x, data.offset.y);
    this.dstRect.x = data.x;
    this.dstRect.y = data.y;
    this.opacity = data.opacity;
    this.zoom = new gs.Point(data.zoom.x, data.zoom.y);
    this.angle = data.angle;
    this.zIndex = data.zIndex;
    this.visible_ = data.visible;
    return this.rid = data.rid;
  };


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_UIElement.prototype.toDataBundle = function() {
    return {
      rid: this.rid,
      x: this.dstRect.x,
      y: this.dstRect.y,
      opacity: this.opacity,
      zoom: this.zoom,
      angle: this.angle,
      anchor: {
        x: this.anchor.x,
        y: this.anchor.y
      },
      zIndex: this.zIndex,
      offset: {
        x: this.offset.x,
        y: this.offset.y
      },
      visible: this.visible_
    };
  };

  return Object_UIElement;

})(gs.Object_Base);

ui.Object_UIElement = Object_UIElement;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Object_UIElement_10.js
var Object_GridLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_GridLayout = (function(superClass) {
  extend(Object_GridLayout, superClass);


  /**
  * A grid-layout which layouts all it sub-objects
  * in a grid of rows and columns.
  *
  * @module ui
  * @class Object_GridLayout
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_GridLayout(x, y, width, height, rows, columns) {
    Object_GridLayout.__super__.constructor.call(this);
    this.dstRect.set(x || 0, y || 0, width || 1, height || 1);

    /**
    * Indicates if the layout is resizable.
    * @property resizable
    * @type boolean
     */
    this.resizable = false;

    /**
    * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Animator();

    /**
    * The layout's sub-objects.
    * @property controls
    * @type ui.Object_UIElement[]
     */
    this.controls = [];

    /**
    * Number of rows for the grid.
    * @property rows
    * @type number
     */
    this.rows = rows;

    /**
    * Number of columns for the grid.
    * @property columns
    * @type number
     */
    this.columns = columns;

    /**
    * The spacing between the cells of the grid.
    * @property cellSpacing
    * @type ui.Spacing
     */
    this.cellSpacing = [0, 0, 0, 0];

    /**
    * Indicates if the layouts resizes to fit its content.
    * @property sizeToFit
    * @type boolean
     */
    this.sizeToFit = false;

    /**
    * The behavior component to add grid-layout specific behavior.
    * @property behavior
    * @type gs.Component_GridLayoutBehavior
     */
    this.behavior = new gs.Component_GridLayoutBehavior();
    this.addComponent(this.behavior);
  }

  return Object_GridLayout;

})(ui.Object_UIElement);

ui.Object_GridLayout = Object_GridLayout;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsaUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7RUFVYSwyQkFBQyxDQUFELEVBQUksQ0FBSixFQUFPLEtBQVAsRUFBYyxNQUFkLEVBQXNCLElBQXRCLEVBQTRCLE9BQTVCO0lBQ1QsaURBQUE7SUFDQSxJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsQ0FBYSxDQUFBLElBQUssQ0FBbEIsRUFBcUIsQ0FBQSxJQUFLLENBQTFCLEVBQTZCLEtBQUEsSUFBUyxDQUF0QyxFQUF5QyxNQUFBLElBQVUsQ0FBbkQ7O0FBRUE7Ozs7O0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYTs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyxRQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVk7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLElBQUQsR0FBUTs7QUFFUjs7Ozs7SUFLQSxJQUFDLENBQUEsT0FBRCxHQUFXOztBQUVYOzs7OztJQUtBLElBQUMsQ0FBQSxXQUFELEdBQWUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWOztBQUVmOzs7OztJQUtBLElBQUMsQ0FBQSxTQUFELEdBQWE7O0FBRWI7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsNEJBQUgsQ0FBQTtJQUVoQixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxRQUFmO0VBNURTOzs7O0dBWGUsRUFBRSxDQUFDOztBQXlFbkMsRUFBRSxDQUFDLGlCQUFILEdBQXVCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfR3JpZExheW91dFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X0dyaWRMYXlvdXQgZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgIyMjKlxuICAgICogQSBncmlkLWxheW91dCB3aGljaCBsYXlvdXRzIGFsbCBpdCBzdWItb2JqZWN0c1xuICAgICogaW4gYSBncmlkIG9mIHJvd3MgYW5kIGNvbHVtbnMuXG4gICAgKlxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIE9iamVjdF9HcmlkTGF5b3V0XG4gICAgKiBAZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgKiBAbWVtYmVyb2YgdWlcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjIyAgXG4gICAgY29uc3RydWN0b3I6ICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCByb3dzLCBjb2x1bW5zKSAtPlxuICAgICAgICBzdXBlcigpXG4gICAgICAgIEBkc3RSZWN0LnNldCh4IHx8IDAsIHkgfHwgMCwgd2lkdGggfHwgMSwgaGVpZ2h0IHx8IDEgKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgbGF5b3V0IGlzIHJlc2l6YWJsZS5cbiAgICAgICAgKiBAcHJvcGVydHkgcmVzaXphYmxlXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQHJlc2l6YWJsZSA9IG5vXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQW5pbWF0b3IoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBsYXlvdXQncyBzdWItb2JqZWN0cy5cbiAgICAgICAgKiBAcHJvcGVydHkgY29udHJvbHNcbiAgICAgICAgKiBAdHlwZSB1aS5PYmplY3RfVUlFbGVtZW50W11cbiAgICAgICAgIyMjXG4gICAgICAgIEBjb250cm9scyA9IFtdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogTnVtYmVyIG9mIHJvd3MgZm9yIHRoZSBncmlkLlxuICAgICAgICAqIEBwcm9wZXJ0eSByb3dzXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAcm93cyA9IHJvd3NcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBOdW1iZXIgb2YgY29sdW1ucyBmb3IgdGhlIGdyaWQuXG4gICAgICAgICogQHByb3BlcnR5IGNvbHVtbnNcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBjb2x1bW5zID0gY29sdW1uc1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBzcGFjaW5nIGJldHdlZW4gdGhlIGNlbGxzIG9mIHRoZSBncmlkLlxuICAgICAgICAqIEBwcm9wZXJ0eSBjZWxsU3BhY2luZ1xuICAgICAgICAqIEB0eXBlIHVpLlNwYWNpbmdcbiAgICAgICAgIyMjXG4gICAgICAgIEBjZWxsU3BhY2luZyA9IFswLCAwLCAwLCAwXVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgbGF5b3V0cyByZXNpemVzIHRvIGZpdCBpdHMgY29udGVudC5cbiAgICAgICAgKiBAcHJvcGVydHkgc2l6ZVRvRml0XG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQHNpemVUb0ZpdCA9IG5vXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGJlaGF2aW9yIGNvbXBvbmVudCB0byBhZGQgZ3JpZC1sYXlvdXQgc3BlY2lmaWMgYmVoYXZpb3IuXG4gICAgICAgICogQHByb3BlcnR5IGJlaGF2aW9yXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0dyaWRMYXlvdXRCZWhhdmlvclxuICAgICAgICAjIyNcbiAgICAgICAgQGJlaGF2aW9yID0gbmV3IGdzLkNvbXBvbmVudF9HcmlkTGF5b3V0QmVoYXZpb3IoKVxuICAgICAgICBcbiAgICAgICAgQGFkZENvbXBvbmVudChAYmVoYXZpb3IpXG4gICAgICAgIFxudWkuT2JqZWN0X0dyaWRMYXlvdXQgPSBPYmplY3RfR3JpZExheW91dCJdfQ==
//# sourceURL=Object_GridLayout_27.js
var Object_Hotspot,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Hotspot = (function(superClass) {
  extend(Object_Hotspot, superClass);

  Object.defineProperty(Object_Hotspot.prototype, "selected", {
    set: function(v) {
      return this.behavior.selected = v;
    },
    get: function() {
      return this.behavior.selected;
    }
  });


  /**
  * A hotspot object to define an area on the screen which can respond
  * to user-actions like mouse/touch actions. A hotspot can have multiple
  * images for different states like hovered, selected, etc.
  *
  * @module ui
  * @class Object_Hotspot
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_Hotspot(imageName, imageHandling, flipX) {
    Object_Hotspot.__super__.constructor.apply(this, arguments);

    /**
    * The UI object's source rectangle on screen.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = null;

    /**
    * The UI object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Frame
     */
    this.visual = new gs.Component_Sprite();

    /**
    * The object's image-handling.
    * @property imageHandling
    * @type gs.ImageHandling
     */
    this.imageHandling = imageHandling != null ? imageHandling : 1;

    /**
    * A behavior-component to hotspot-specific behavior to the object.
    * @property behavior
    * @type gs.Component_HotspotBehavior
     */
    this.behavior = new gs.Component_HotspotBehavior();
    this.behavior.imageHandling = this.imageHandling;

    /**
    * The UI object's bitmap used for visual presentation.
    * @property bitmap
    * @type gs.Bitmap
     */
    this.bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + imageName);
    if (this.bitmap != null) {
      if (this.imageHandling === 1) {
        this.srcRect = new Rect(0, this.bitmap.height / 2, this.bitmap.width, this.bitmap.height / 2);
      } else {
        this.srcRect = new Rect(0, 0, this.bitmap.width || 1, this.bitmap.height || 1);
      }
      this.dstRect.set(0, 0, this.srcRect.width || 1, this.srcRect.height || 1);
    } else {
      this.srcRect = new Rect(0, 0, 1, 1);
      this.dstRect.set(0, 0, 1, 1);
    }
    if (flipX) {
      this.visual.mirror = true;
    }
    this.addComponent(this.behavior);
    this.addComponent(this.visual);
  }

  return Object_Hotspot;

})(ui.Object_UIElement);

ui.Object_Hotspot = Object_Hotspot;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsTUFBTSxDQUFDLGNBQVAsQ0FBc0IsY0FBYyxDQUFDLFNBQXJDLEVBQWdELFVBQWhELEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO2FBQU8sSUFBQyxDQUFBLFFBQVEsQ0FBQyxRQUFWLEdBQXFCO0lBQTVCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQSxRQUFRLENBQUM7SUFBYixDQURMO0dBREo7OztBQUtBOzs7Ozs7Ozs7Ozs7RUFXYSx3QkFBQyxTQUFELEVBQVksYUFBWixFQUEyQixLQUEzQjtJQUNULGlEQUFBLFNBQUE7O0FBRUE7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBVzs7QUFFWDs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsRUFBRSxDQUFDLGdCQUFILENBQUE7O0FBRWQ7Ozs7O0lBS0EsSUFBQyxDQUFBLGFBQUQsMkJBQWlCLGdCQUFnQjs7QUFFakM7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMseUJBQUgsQ0FBQTtJQUNoQixJQUFDLENBQUEsUUFBUSxDQUFDLGFBQVYsR0FBMEIsSUFBQyxDQUFBOztBQUUzQjs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFVLGVBQWUsQ0FBQyxTQUFoQixDQUEwQixvQkFBQSxHQUFxQixTQUEvQztJQUVWLElBQUcsbUJBQUg7TUFDSSxJQUFHLElBQUMsQ0FBQSxhQUFELEtBQWtCLENBQXJCO1FBQ0ksSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLElBQUEsQ0FBSyxDQUFMLEVBQVEsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCLENBQXpCLEVBQTRCLElBQUMsQ0FBQSxNQUFNLENBQUMsS0FBcEMsRUFBMkMsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLEdBQWlCLENBQTVELEVBRG5CO09BQUEsTUFBQTtRQUdJLElBQUMsQ0FBQSxPQUFELEdBQWUsSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxJQUFDLENBQUEsTUFBTSxDQUFDLEtBQVIsSUFBaUIsQ0FBNUIsRUFBK0IsSUFBQyxDQUFBLE1BQU0sQ0FBQyxNQUFSLElBQWtCLENBQWpELEVBSG5COztNQUlBLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBbUIsSUFBQyxDQUFBLE9BQU8sQ0FBQyxLQUFULElBQWtCLENBQXJDLEVBQXdDLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxJQUFtQixDQUEzRCxFQUxKO0tBQUEsTUFBQTtNQU9JLElBQUMsQ0FBQSxPQUFELEdBQWUsSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFRLENBQVIsRUFBVyxDQUFYLEVBQWMsQ0FBZDtNQUNmLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFhLENBQWIsRUFBZ0IsQ0FBaEIsRUFBb0IsQ0FBcEIsRUFBd0IsQ0FBeEIsRUFSSjs7SUFVQSxJQUFHLEtBQUg7TUFDSSxJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsR0FBaUIsS0FEckI7O0lBR0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLE1BQWY7RUFyRFM7Ozs7R0FqQlksRUFBRSxDQUFDOztBQXdFaEMsRUFBRSxDQUFDLGNBQUgsR0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9Ib3RzcG90XG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfSG90c3BvdCBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoT2JqZWN0X0hvdHNwb3QucHJvdG90eXBlLCBcInNlbGVjdGVkXCIsXG4gICAgICAgIHNldDogKHYpIC0+IEBiZWhhdmlvci5zZWxlY3RlZCA9IHZcbiAgICAgICAgZ2V0OiAtPiBAYmVoYXZpb3Iuc2VsZWN0ZWRcbiAgICApXG4gICAgXG4gICAgIyMjKlxuICAgICogQSBob3RzcG90IG9iamVjdCB0byBkZWZpbmUgYW4gYXJlYSBvbiB0aGUgc2NyZWVuIHdoaWNoIGNhbiByZXNwb25kXG4gICAgKiB0byB1c2VyLWFjdGlvbnMgbGlrZSBtb3VzZS90b3VjaCBhY3Rpb25zLiBBIGhvdHNwb3QgY2FuIGhhdmUgbXVsdGlwbGVcbiAgICAqIGltYWdlcyBmb3IgZGlmZmVyZW50IHN0YXRlcyBsaWtlIGhvdmVyZWQsIHNlbGVjdGVkLCBldGMuXG4gICAgKlxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIE9iamVjdF9Ib3RzcG90XG4gICAgKiBAZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgKiBAbWVtYmVyb2YgdWlcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjIyBcbiAgICBjb25zdHJ1Y3RvcjogKGltYWdlTmFtZSwgaW1hZ2VIYW5kbGluZywgZmxpcFgpIC0+XG4gICAgICAgIHN1cGVyXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIHNvdXJjZSByZWN0YW5nbGUgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSBzcmNSZWN0XG4gICAgICAgICogQHR5cGUgZ3MuUmVjdFxuICAgICAgICAjIyNcbiAgICAgICAgQHNyY1JlY3QgPSBudWxsXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIHZpc3VhbC1jb21wb25lbnQgdG8gZGlzcGxheSB0aGUgZ2FtZSBvYmplY3Qgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSB2aXN1YWxcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfRnJhbWVcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXN1YWwgPSBuZXcgZ3MuQ29tcG9uZW50X1Nwcml0ZSgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIGltYWdlLWhhbmRsaW5nLlxuICAgICAgICAqIEBwcm9wZXJ0eSBpbWFnZUhhbmRsaW5nXG4gICAgICAgICogQHR5cGUgZ3MuSW1hZ2VIYW5kbGluZ1xuICAgICAgICAjIyNcbiAgICAgICAgQGltYWdlSGFuZGxpbmcgPSBpbWFnZUhhbmRsaW5nID8gMVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEEgYmVoYXZpb3ItY29tcG9uZW50IHRvIGhvdHNwb3Qtc3BlY2lmaWMgYmVoYXZpb3IgdG8gdGhlIG9iamVjdC5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfSG90c3BvdEJlaGF2aW9yXG4gICAgICAgICMjI1xuICAgICAgICBAYmVoYXZpb3IgPSBuZXcgZ3MuQ29tcG9uZW50X0hvdHNwb3RCZWhhdmlvcigpXG4gICAgICAgIEBiZWhhdmlvci5pbWFnZUhhbmRsaW5nID0gQGltYWdlSGFuZGxpbmdcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3MgYml0bWFwIHVzZWQgZm9yIHZpc3VhbCBwcmVzZW50YXRpb24uXG4gICAgICAgICogQHByb3BlcnR5IGJpdG1hcFxuICAgICAgICAqIEB0eXBlIGdzLkJpdG1hcFxuICAgICAgICAjIyNcbiAgICAgICAgQGJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoXCJHcmFwaGljcy9QaWN0dXJlcy8je2ltYWdlTmFtZX1cIilcbiAgICAgICAgXG4gICAgICAgIGlmIEBiaXRtYXA/XG4gICAgICAgICAgICBpZiBAaW1hZ2VIYW5kbGluZyA9PSAxXG4gICAgICAgICAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgwLCBAYml0bWFwLmhlaWdodCAvIDIsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0IC8gMilcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIEBiaXRtYXAud2lkdGggfHwgMSwgQGJpdG1hcC5oZWlnaHQgfHwgMSlcbiAgICAgICAgICAgIEBkc3RSZWN0LnNldCgwLCAwLCBAc3JjUmVjdC53aWR0aCB8fCAxLCBAc3JjUmVjdC5oZWlnaHQgfHwgMSlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCAxLCAxKVxuICAgICAgICAgICAgQGRzdFJlY3Quc2V0KDAsIDAsICAxLCAgMSlcbiAgICAgICAgICAgIFxuICAgICAgICBpZiBmbGlwWFxuICAgICAgICAgICAgQHZpc3VhbC5taXJyb3IgPSB5ZXNcbiAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGJlaGF2aW9yKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEB2aXN1YWwpXG4gICAgICAgIFxudWkuT2JqZWN0X0hvdHNwb3QgPSBPYmplY3RfSG90c3BvdCJdfQ==
//# sourceURL=Object_Hotspot_32.js
var Object_Image,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Image = (function(superClass) {
  extend(Object_Image, superClass);


  /**
  * An UI image object to display an image on screen.
  *
  * @module ui
  * @class Object_Image
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_Image(imageName, imageHandling) {
    Object_Image.__super__.constructor.apply(this, arguments);

    /**
    * The UI object's source rectangle on screen.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = null;

    /**
    * The UI object's rotation-angle in degrees. The rotation center depends on the
    * anchor-point.
    * @property angle
    * @type number
     */
    this.angle = 0;

    /**
    * The UI object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite();

    /**
    * The UI object's bitmap used for visual presentation.
    * @property bitmap
    * @type gs.Bitmap
     */
    if (imageName && imageName[0] === "$") {
      this.bitmap = ResourceManager.getBitmap(imageName);
    } else {
      this.bitmap = ResourceManager.getBitmap("Graphics/Pictures/" + imageName);
    }
    if (this.bitmap != null) {
      if (imageHandling === 1) {
        this.srcRect = new Rect(0, this.bitmap.height / 2, this.bitmap.width, this.bitmap.height / 2);
      } else {
        this.srcRect = new Rect(0, 0, this.bitmap.width || 1, this.bitmap.height || 1);
      }
      this.dstRect.set(0, 0, this.srcRect.width || 1, this.srcRect.height || 1);
    } else {
      this.srcRect = new Rect(0, 0, 1, 1);
      this.dstRect.set(0, 0, 1, 1);
    }
    this.addComponent(this.visual);
  }

  return Object_Image;

})(ui.Object_UIElement);

ui.Object_Image = Object_Image;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7O0VBU2Esc0JBQUMsU0FBRCxFQUFZLGFBQVo7SUFDVCwrQ0FBQSxTQUFBOztBQUdBOzs7OztJQUtBLElBQUMsQ0FBQSxPQUFELEdBQVc7O0FBRVg7Ozs7OztJQU1BLElBQUMsQ0FBQSxLQUFELEdBQVM7O0FBRVQ7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxnQkFBSCxDQUFBOztBQUVkOzs7OztJQUtBLElBQUcsU0FBQSxJQUFhLFNBQVUsQ0FBQSxDQUFBLENBQVYsS0FBZ0IsR0FBaEM7TUFDSSxJQUFDLENBQUEsTUFBRCxHQUFVLGVBQWUsQ0FBQyxTQUFoQixDQUEwQixTQUExQixFQURkO0tBQUEsTUFBQTtNQUdJLElBQUMsQ0FBQSxNQUFELEdBQVUsZUFBZSxDQUFDLFNBQWhCLENBQTBCLG9CQUFBLEdBQXFCLFNBQS9DLEVBSGQ7O0lBS0EsSUFBRyxtQkFBSDtNQUNJLElBQUcsYUFBQSxLQUFpQixDQUFwQjtRQUNJLElBQUMsQ0FBQSxPQUFELEdBQWUsSUFBQSxJQUFBLENBQUssQ0FBTCxFQUFRLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixDQUF6QixFQUE0QixJQUFDLENBQUEsTUFBTSxDQUFDLEtBQXBDLEVBQTJDLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixHQUFpQixDQUE1RCxFQURuQjtPQUFBLE1BQUE7UUFHSSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsSUFBQSxDQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsSUFBQyxDQUFBLE1BQU0sQ0FBQyxLQUFSLElBQWlCLENBQTVCLEVBQStCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixJQUFrQixDQUFqRCxFQUhuQjs7TUFJQSxJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLElBQUMsQ0FBQSxPQUFPLENBQUMsS0FBVCxJQUFrQixDQUFyQyxFQUF3QyxJQUFDLENBQUEsT0FBTyxDQUFDLE1BQVQsSUFBbUIsQ0FBM0QsRUFMSjtLQUFBLE1BQUE7TUFPSSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsSUFBQSxDQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBWCxFQUFjLENBQWQ7TUFDZixJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsQ0FBYSxDQUFiLEVBQWdCLENBQWhCLEVBQW1CLENBQW5CLEVBQXNCLENBQXRCLEVBUko7O0lBVUEsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtFQTlDUzs7OztHQVZVLEVBQUUsQ0FBQzs7QUEwRDlCLEVBQUUsQ0FBQyxZQUFILEdBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfSW1hZ2VcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9JbWFnZSBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICAjIyMqXG4gICAgKiBBbiBVSSBpbWFnZSBvYmplY3QgdG8gZGlzcGxheSBhbiBpbWFnZSBvbiBzY3JlZW4uXG4gICAgKlxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIE9iamVjdF9JbWFnZVxuICAgICogQGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICogQG1lbWJlcm9mIHVpXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyMgIFxuICAgIGNvbnN0cnVjdG9yOiAoaW1hZ2VOYW1lLCBpbWFnZUhhbmRsaW5nKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3Mgc291cmNlIHJlY3RhbmdsZSBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHNyY1JlY3RcbiAgICAgICAgKiBAdHlwZSBncy5SZWN0XG4gICAgICAgICMjI1xuICAgICAgICBAc3JjUmVjdCA9IG51bGxcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3Mgcm90YXRpb24tYW5nbGUgaW4gZGVncmVlcy4gVGhlIHJvdGF0aW9uIGNlbnRlciBkZXBlbmRzIG9uIHRoZVxuICAgICAgICAqIGFuY2hvci1wb2ludC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5nbGVcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmdsZSA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9TcHJpdGVcbiAgICAgICAgIyMjXG4gICAgICAgIEB2aXN1YWwgPSBuZXcgZ3MuQ29tcG9uZW50X1Nwcml0ZSgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIGJpdG1hcCB1c2VkIGZvciB2aXN1YWwgcHJlc2VudGF0aW9uLlxuICAgICAgICAqIEBwcm9wZXJ0eSBiaXRtYXBcbiAgICAgICAgKiBAdHlwZSBncy5CaXRtYXBcbiAgICAgICAgIyMjXG4gICAgICAgIGlmIGltYWdlTmFtZSAmJiBpbWFnZU5hbWVbMF0gPT0gXCIkXCJcbiAgICAgICAgICAgIEBiaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKGltYWdlTmFtZSlcbiAgICAgICAgZWxzZSAgICBcbiAgICAgICAgICAgIEBiaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKFwiR3JhcGhpY3MvUGljdHVyZXMvI3tpbWFnZU5hbWV9XCIpXG4gICAgICAgIFxuICAgICAgICBpZiBAYml0bWFwP1xuICAgICAgICAgICAgaWYgaW1hZ2VIYW5kbGluZyA9PSAxXG4gICAgICAgICAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgwLCBAYml0bWFwLmhlaWdodCAvIDIsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0IC8gMilcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIEBiaXRtYXAud2lkdGggfHwgMSwgQGJpdG1hcC5oZWlnaHQgfHwgMSlcbiAgICAgICAgICAgIEBkc3RSZWN0LnNldCgwLCAwLCBAc3JjUmVjdC53aWR0aCB8fCAxLCBAc3JjUmVjdC5oZWlnaHQgfHwgMSlcbiAgICAgICAgZWxzZVxuICAgICAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCAxLCAxKVxuICAgICAgICAgICAgQGRzdFJlY3Quc2V0KDAsIDAsIDEsIDEpXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEB2aXN1YWwpXG4gICAgICAgIFxudWkuT2JqZWN0X0ltYWdlID0gT2JqZWN0X0ltYWdlIl19
//# sourceURL=Object_Image_45.js
var Object_Message,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Message = (function(superClass) {
  extend(Object_Message, superClass);

  Object_Message.objectCodecBlackList = ["parent", "controlsByStyle", "parentsByStyle", "styles", "activeStyles"];


  /**
  * A message object to display game messages on screen.
  *
  * @module ui
  * @class Object_Message
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_Message() {
    Object_Message.__super__.constructor.apply(this, arguments);
    this.visible = false;

    /**
    * The font used for the message text.
    * @property font
    * @type gs.Font
     */
    this.font = new Font("Verdana", Math.round(9 / 240 * Graphics.height));
    this.font.border = false;
    this.font.borderColor = new Color(0, 0, 0);

    /**
    * The text-renderer used to render the message text.
    * @property textRenderer
    * @type gs.Component_MessageTextRenderer
     */
    this.textRenderer = new gs.Component_MessageTextRenderer();

    /**
    * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type gs.Component_Animator
     */
    this.animator = new gs.Animator();

    /**
    * The UI object's source rectangle on screen.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = new Rect(0, 0, 1, 1);
    this.message = new vn.Component_MessageBehavior();

    /**
    * The UI object's component to add message-specific behavior.
    * @property behavior
    * @type vn.Component_MessageBehavior
     */
    this.behavior = this.message;
    this.addComponent(this.animator);
    this.addComponent(this.textRenderer);
    this.addComponent(this.message);
  }


  /**
  * Restores the object from a data-bundle.
  *
  * @method restore
  * @param {Object} data - The data-bundle.
   */

  Object_Message.prototype.restore = function(data) {
    Object_Message.__super__.restore.call(this, data);
    this.font = new Font(data.font.name, data.font.size);
    this.font.restore(data.font);
    this.dstRect.width = data.width;
    return this.dstRect.height = data.height;
  };


  /**
  * Serializes the object into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} The data-bundle.
   */

  Object_Message.prototype.toDataBundle = function() {
    var bundle;
    bundle = Object_Message.__super__.toDataBundle.call(this);
    bundle.font = this.font.toDataBundle();
    bundle.width = this.dstRect.width;
    bundle.height = this.dstRect.height;
    return bundle;
  };

  return Object_Message;

})(ui.Object_UIElement);

ui.Object_Message = Object_Message;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsY0FBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsY0FBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRCxFQUFXLGlCQUFYLEVBQThCLGdCQUE5QixFQUFnRCxRQUFoRCxFQUEwRCxjQUExRDs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2Esd0JBQUE7SUFDVCxpREFBQSxTQUFBO0lBQ0EsSUFBQyxDQUFBLE9BQUQsR0FBVzs7QUFFWDs7Ozs7SUFLQSxJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsSUFBQSxDQUFLLFNBQUwsRUFBZ0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFBLEdBQUksR0FBSixHQUFVLFFBQVEsQ0FBQyxNQUE5QixDQUFoQjtJQUNaLElBQUMsQ0FBQSxJQUFJLENBQUMsTUFBTixHQUFlO0lBQ2YsSUFBQyxDQUFBLElBQUksQ0FBQyxXQUFOLEdBQXdCLElBQUEsS0FBQSxDQUFNLENBQU4sRUFBUyxDQUFULEVBQVksQ0FBWjs7QUFFeEI7Ozs7O0lBS0EsSUFBQyxDQUFBLFlBQUQsR0FBb0IsSUFBQSxFQUFFLENBQUMsNkJBQUgsQ0FBQTs7QUFFcEI7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsUUFBSCxDQUFBOztBQUVoQjs7Ozs7SUFLQSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsSUFBQSxDQUFLLENBQUwsRUFBUSxDQUFSLEVBQVcsQ0FBWCxFQUFjLENBQWQ7SUFFZixJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsRUFBRSxDQUFDLHlCQUFILENBQUE7O0FBRWY7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBWSxJQUFDLENBQUE7SUFFYixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxRQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsWUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLE9BQWY7RUE3Q1M7OztBQWdEYjs7Ozs7OzsyQkFNQSxPQUFBLEdBQVMsU0FBQyxJQUFEO0lBQ0wsNENBQU0sSUFBTjtJQUNBLElBQUMsQ0FBQSxJQUFELEdBQVksSUFBQSxJQUFBLENBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFmLEVBQXFCLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBL0I7SUFDWixJQUFDLENBQUEsSUFBSSxDQUFDLE9BQU4sQ0FBYyxJQUFJLENBQUMsSUFBbkI7SUFDQSxJQUFDLENBQUEsT0FBTyxDQUFDLEtBQVQsR0FBaUIsSUFBSSxDQUFDO1dBQ3RCLElBQUMsQ0FBQSxPQUFPLENBQUMsTUFBVCxHQUFrQixJQUFJLENBQUM7RUFMbEI7OztBQU9UOzs7Ozs7OzJCQU1BLFlBQUEsR0FBYyxTQUFBO0FBQ1YsUUFBQTtJQUFBLE1BQUEsR0FBUywrQ0FBQTtJQUVULE1BQU0sQ0FBQyxJQUFQLEdBQWMsSUFBQyxDQUFBLElBQUksQ0FBQyxZQUFOLENBQUE7SUFDZCxNQUFNLENBQUMsS0FBUCxHQUFlLElBQUMsQ0FBQSxPQUFPLENBQUM7SUFDeEIsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsSUFBQyxDQUFBLE9BQU8sQ0FBQztBQUV6QixXQUFPO0VBUEc7Ozs7R0EvRVcsRUFBRSxDQUFDOztBQXdGaEMsRUFBRSxDQUFDLGNBQUgsR0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9NZXNzYWdlXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfTWVzc2FnZSBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICBAb2JqZWN0Q29kZWNCbGFja0xpc3QgPSBbXCJwYXJlbnRcIiwgXCJjb250cm9sc0J5U3R5bGVcIiwgXCJwYXJlbnRzQnlTdHlsZVwiLCBcInN0eWxlc1wiLCBcImFjdGl2ZVN0eWxlc1wiXVxuICAgIFxuICAgICMjIypcbiAgICAqIEEgbWVzc2FnZSBvYmplY3QgdG8gZGlzcGxheSBnYW1lIG1lc3NhZ2VzIG9uIHNjcmVlbi5cbiAgICAqXG4gICAgKiBAbW9kdWxlIHVpXG4gICAgKiBAY2xhc3MgT2JqZWN0X01lc3NhZ2VcbiAgICAqIEBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICAqIEBtZW1iZXJvZiB1aVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjIFxuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBAdmlzaWJsZSA9IG5vXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGZvbnQgdXNlZCBmb3IgdGhlIG1lc3NhZ2UgdGV4dC5cbiAgICAgICAgKiBAcHJvcGVydHkgZm9udFxuICAgICAgICAqIEB0eXBlIGdzLkZvbnRcbiAgICAgICAgIyMjXG4gICAgICAgIEBmb250ID0gbmV3IEZvbnQoXCJWZXJkYW5hXCIsIE1hdGgucm91bmQoOSAvIDI0MCAqIEdyYXBoaWNzLmhlaWdodCkpXG4gICAgICAgIEBmb250LmJvcmRlciA9IG5vXG4gICAgICAgIEBmb250LmJvcmRlckNvbG9yID0gbmV3IENvbG9yKDAsIDAsIDApXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHRleHQtcmVuZGVyZXIgdXNlZCB0byByZW5kZXIgdGhlIG1lc3NhZ2UgdGV4dC5cbiAgICAgICAgKiBAcHJvcGVydHkgdGV4dFJlbmRlcmVyXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X01lc3NhZ2VUZXh0UmVuZGVyZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEB0ZXh0UmVuZGVyZXIgPSBuZXcgZ3MuQ29tcG9uZW50X01lc3NhZ2VUZXh0UmVuZGVyZXIoKVxuXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3MgYW5pbWF0b3ItY29tcG9uZW50IHRvIGV4ZWN1dGUgZGlmZmVyZW50IGtpbmQgb2YgYW5pbWF0aW9ucyBsaWtlIG1vdmUsIHJvdGF0ZSwgZXRjLiBvbiBpdC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5pbWF0b3JcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfQW5pbWF0b3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmltYXRvciA9IG5ldyBncy5BbmltYXRvcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIHNvdXJjZSByZWN0YW5nbGUgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSBzcmNSZWN0XG4gICAgICAgICogQHR5cGUgZ3MuUmVjdFxuICAgICAgICAjIyNcbiAgICAgICAgQHNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCAxLCAxKVxuICAgICAgICBcbiAgICAgICAgQG1lc3NhZ2UgPSBuZXcgdm4uQ29tcG9uZW50X01lc3NhZ2VCZWhhdmlvcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIGNvbXBvbmVudCB0byBhZGQgbWVzc2FnZS1zcGVjaWZpYyBiZWhhdmlvci5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSB2bi5Db21wb25lbnRfTWVzc2FnZUJlaGF2aW9yXG4gICAgICAgICMjI1xuICAgICAgICBAYmVoYXZpb3IgPSBAbWVzc2FnZVxuICAgICAgICBcbiAgICAgICAgQGFkZENvbXBvbmVudChAYW5pbWF0b3IpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHRleHRSZW5kZXJlcilcbiAgICAgICAgQGFkZENvbXBvbmVudChAbWVzc2FnZSlcbiAgICAgICAgXG4gICAgXG4gICAgIyMjKlxuICAgICogUmVzdG9yZXMgdGhlIG9iamVjdCBmcm9tIGEgZGF0YS1idW5kbGUuXG4gICAgKlxuICAgICogQG1ldGhvZCByZXN0b3JlXG4gICAgKiBAcGFyYW0ge09iamVjdH0gZGF0YSAtIFRoZSBkYXRhLWJ1bmRsZS5cbiAgICAjIyMgICBcbiAgICByZXN0b3JlOiAoZGF0YSkgLT5cbiAgICAgICAgc3VwZXIoZGF0YSlcbiAgICAgICAgQGZvbnQgPSBuZXcgRm9udChkYXRhLmZvbnQubmFtZSwgZGF0YS5mb250LnNpemUpXG4gICAgICAgIEBmb250LnJlc3RvcmUoZGF0YS5mb250KVxuICAgICAgICBAZHN0UmVjdC53aWR0aCA9IGRhdGEud2lkdGhcbiAgICAgICAgQGRzdFJlY3QuaGVpZ2h0ID0gZGF0YS5oZWlnaHRcbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogU2VyaWFsaXplcyB0aGUgb2JqZWN0IGludG8gYSBkYXRhLWJ1bmRsZS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIHRvRGF0YUJ1bmRsZVxuICAgICogQHJldHVybiB7T2JqZWN0fSBUaGUgZGF0YS1idW5kbGUuXG4gICAgIyMjICAgXG4gICAgdG9EYXRhQnVuZGxlOiAtPiBcbiAgICAgICAgYnVuZGxlID0gc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgYnVuZGxlLmZvbnQgPSBAZm9udC50b0RhdGFCdW5kbGUoKVxuICAgICAgICBidW5kbGUud2lkdGggPSBAZHN0UmVjdC53aWR0aFxuICAgICAgICBidW5kbGUuaGVpZ2h0ID0gQGRzdFJlY3QuaGVpZ2h0XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYnVuZGxlXG4gICAgICAgIFxudWkuT2JqZWN0X01lc3NhZ2UgPSBPYmplY3RfTWVzc2FnZSJdfQ==
//# sourceURL=Object_Message_59.js
var Object_Panel,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Panel = (function(superClass) {
  extend(Object_Panel, superClass);


  /**
  * An UI panel object display a colored rectangle area on screen or can also
  * be completely transparent. A panel can be modal to block all user-input
  * for UI object placed behind it. 
  * 
  * So for example: To make a confirmation dialog
  * like "Do you really want to exit?" a panel is useful to avoid that the user
  * can click on other UI elements behind the confirmation dialog.
  *
  * @module ui
  * @class Object_Panel
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_Panel(x, y, width, height) {
    Object_Panel.__super__.constructor.call(this);
    this.dstRect.set(x || 0, y || 0, width || 100, height || 100);

    /**
    * The UI object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Quad
     */
    this.visual = new gs.Component_Quad();

    /**
    * Indicates if the panel is modal. A modal panel blocks all user-input for UI objects
    * behind the panel.
    * @property modal
    * @type boolean
     */
    this.modal = false;
    this.addComponent(this.visual);
    this.addComponent(new gs.Component_PanelBehavior());
  }

  return Object_Panel;

})(ui.Object_UIElement);

ui.Object_Panel = Object_Panel;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7Ozs7Ozs7O0VBZWEsc0JBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxLQUFQLEVBQWMsTUFBZDtJQUNULDRDQUFBO0lBQ0EsSUFBQyxDQUFBLE9BQU8sQ0FBQyxHQUFULENBQWEsQ0FBQSxJQUFLLENBQWxCLEVBQXFCLENBQUEsSUFBSyxDQUExQixFQUE2QixLQUFBLElBQVMsR0FBdEMsRUFBMkMsTUFBQSxJQUFVLEdBQXJEOztBQUVBOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsY0FBSCxDQUFBOztBQUVkOzs7Ozs7SUFNQSxJQUFDLENBQUEsS0FBRCxHQUFTO0lBRVQsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWtCLElBQUEsRUFBRSxDQUFDLHVCQUFILENBQUEsQ0FBbEI7RUFwQlM7Ozs7R0FoQlUsRUFBRSxDQUFDOztBQXNDOUIsRUFBRSxDQUFDLFlBQUgsR0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9QYW5lbFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X1BhbmVsIGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICMjIypcbiAgICAqIEFuIFVJIHBhbmVsIG9iamVjdCBkaXNwbGF5IGEgY29sb3JlZCByZWN0YW5nbGUgYXJlYSBvbiBzY3JlZW4gb3IgY2FuIGFsc29cbiAgICAqIGJlIGNvbXBsZXRlbHkgdHJhbnNwYXJlbnQuIEEgcGFuZWwgY2FuIGJlIG1vZGFsIHRvIGJsb2NrIGFsbCB1c2VyLWlucHV0XG4gICAgKiBmb3IgVUkgb2JqZWN0IHBsYWNlZCBiZWhpbmQgaXQuIFxuICAgICogXG4gICAgKiBTbyBmb3IgZXhhbXBsZTogVG8gbWFrZSBhIGNvbmZpcm1hdGlvbiBkaWFsb2dcbiAgICAqIGxpa2UgXCJEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZXhpdD9cIiBhIHBhbmVsIGlzIHVzZWZ1bCB0byBhdm9pZCB0aGF0IHRoZSB1c2VyXG4gICAgKiBjYW4gY2xpY2sgb24gb3RoZXIgVUkgZWxlbWVudHMgYmVoaW5kIHRoZSBjb25maXJtYXRpb24gZGlhbG9nLlxuICAgICpcbiAgICAqIEBtb2R1bGUgdWlcbiAgICAqIEBjbGFzcyBPYmplY3RfUGFuZWxcbiAgICAqIEBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICAqIEBtZW1iZXJvZiB1aVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjICBcbiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIHdpZHRoLCBoZWlnaHQpIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgQGRzdFJlY3Quc2V0KHggfHwgMCwgeSB8fCAwLCB3aWR0aCB8fCAxMDAsIGhlaWdodCB8fCAxMDApXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIHZpc3VhbC1jb21wb25lbnQgdG8gZGlzcGxheSB0aGUgZ2FtZSBvYmplY3Qgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSB2aXN1YWxcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfUXVhZFxuICAgICAgICAjIyNcbiAgICAgICAgQHZpc3VhbCA9IG5ldyBncy5Db21wb25lbnRfUXVhZCgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSBwYW5lbCBpcyBtb2RhbC4gQSBtb2RhbCBwYW5lbCBibG9ja3MgYWxsIHVzZXItaW5wdXQgZm9yIFVJIG9iamVjdHNcbiAgICAgICAgKiBiZWhpbmQgdGhlIHBhbmVsLlxuICAgICAgICAqIEBwcm9wZXJ0eSBtb2RhbFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEBtb2RhbCA9IG5vXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEB2aXN1YWwpXG4gICAgICAgIEBhZGRDb21wb25lbnQobmV3IGdzLkNvbXBvbmVudF9QYW5lbEJlaGF2aW9yKCkpXG4gICAgICAgIFxudWkuT2JqZWN0X1BhbmVsID0gT2JqZWN0X1BhbmVsIl19
//# sourceURL=Object_Panel_67.js
var Object_FreeLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_FreeLayout = (function(superClass) {
  extend(Object_FreeLayout, superClass);

  Object_FreeLayout.accessors("zIndex", {
    set: function(v) {
      return this.zIndex_ = v;
    },
    get: function() {
      return (this.zIndex_ || 0) + (!this.parent ? 0 : this.parent.zIndex || 0);
    }
  });


  /**
  * A free-layout which layouts all sub-objects at their specified positions. 
  * So that kind of layout allows each sub-object to be freely positioned.
  *
  * @module ui
  * @class Object_FreeLayout
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_FreeLayout(x, y, width, height) {
    Object_FreeLayout.__super__.constructor.call(this);
    this.dstRect.set(x || 0, y || 0, width || 1, height || 1);

    /**
    * Indicates if the layout is resizable.
    * @property resizable
    * @type boolean
     */
    this.resizable = false;

    /**
    * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Animator();

    /**
    * The layout's sub-objects.
    * @property controls
    * @type ui.Object_UIElement[]
     */
    this.controls = [];

    /**
    * The behavior component to add free-layout specific behavior.
    * @property behavior
    * @type gs.Component_FreeLayoutBehavior
     */
    this.behavior = new gs.Component_FreeLayoutBehavior();

    /**
    * Indicates if the layouts resizes to fit its content.
    * @property sizeToFit
    * @type boolean
     */
    this.sizeToFit = false;
    this.addComponent(this.behavior);
    this.addComponent(this.animator);
  }

  return Object_FreeLayout;

})(ui.Object_UIElement);

ui.Object_FreeLayout = Object_FreeLayout;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsaUJBQUE7RUFBQTs7O0FBQU07OztFQUNGLGlCQUFDLENBQUEsU0FBRCxDQUFXLFFBQVgsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFDLENBQUQ7YUFBTyxJQUFDLENBQUEsT0FBRCxHQUFXO0lBQWxCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQTthQUFHLENBQUMsSUFBQyxDQUFBLE9BQUQsSUFBWSxDQUFiLENBQUEsR0FBa0IsQ0FBSSxDQUFDLElBQUMsQ0FBQSxNQUFMLEdBQWlCLENBQWpCLEdBQXdCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixJQUFrQixDQUEzQztJQUFyQixDQURMO0dBREo7OztBQUlBOzs7Ozs7Ozs7OztFQVVhLDJCQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sS0FBUCxFQUFjLE1BQWQ7SUFDVCxpREFBQTtJQUVBLElBQUMsQ0FBQSxPQUFPLENBQUMsR0FBVCxDQUFhLENBQUEsSUFBSyxDQUFsQixFQUFxQixDQUFBLElBQUssQ0FBMUIsRUFBNkIsS0FBQSxJQUFTLENBQXRDLEVBQXlDLE1BQUEsSUFBVSxDQUFuRDs7QUFFQTs7Ozs7SUFLQSxJQUFDLENBQUEsU0FBRCxHQUFhOztBQUViOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLFFBQUgsQ0FBQTs7QUFFaEI7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBWTs7QUFFWjs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyw0QkFBSCxDQUFBOztBQUVoQjs7Ozs7SUFLQSxJQUFDLENBQUEsU0FBRCxHQUFhO0lBRWIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLFFBQWY7RUF6Q1M7Ozs7R0FmZSxFQUFFLENBQUM7O0FBMkRuQyxFQUFFLENBQUMsaUJBQUgsR0FBdUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9GcmVlTGF5b3V0XG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfRnJlZUxheW91dCBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICBAYWNjZXNzb3JzIFwiekluZGV4XCIsIFxuICAgICAgICBzZXQ6ICh2KSAtPiBAekluZGV4XyA9IHYsIFxuICAgICAgICBnZXQ6IC0+IChAekluZGV4XyB8fCAwKSArIChpZiAhQHBhcmVudCB0aGVuIDAgZWxzZSBAcGFyZW50LnpJbmRleCB8fCAwKVxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBBIGZyZWUtbGF5b3V0IHdoaWNoIGxheW91dHMgYWxsIHN1Yi1vYmplY3RzIGF0IHRoZWlyIHNwZWNpZmllZCBwb3NpdGlvbnMuIFxuICAgICogU28gdGhhdCBraW5kIG9mIGxheW91dCBhbGxvd3MgZWFjaCBzdWItb2JqZWN0IHRvIGJlIGZyZWVseSBwb3NpdGlvbmVkLlxuICAgICpcbiAgICAqIEBtb2R1bGUgdWlcbiAgICAqIEBjbGFzcyBPYmplY3RfRnJlZUxheW91dFxuICAgICogQGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICogQG1lbWJlcm9mIHVpXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyMgIFxuICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgd2lkdGgsIGhlaWdodCkgLT5cbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgQGRzdFJlY3Quc2V0KHggfHwgMCwgeSB8fCAwLCB3aWR0aCB8fCAxLCBoZWlnaHQgfHwgMSApXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSBsYXlvdXQgaXMgcmVzaXphYmxlLlxuICAgICAgICAqIEBwcm9wZXJ0eSByZXNpemFibGVcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICMjI1xuICAgICAgICBAcmVzaXphYmxlID0gbm9cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3MgYW5pbWF0b3ItY29tcG9uZW50IHRvIGV4ZWN1dGUgZGlmZmVyZW50IGtpbmQgb2YgYW5pbWF0aW9ucyBsaWtlIG1vdmUsIHJvdGF0ZSwgZXRjLiBvbiBpdC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5pbWF0b3JcbiAgICAgICAgKiBAdHlwZSB2bi5Db21wb25lbnRfQW5pbWF0b3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmltYXRvciA9IG5ldyBncy5BbmltYXRvcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGxheW91dCdzIHN1Yi1vYmplY3RzLlxuICAgICAgICAqIEBwcm9wZXJ0eSBjb250cm9sc1xuICAgICAgICAqIEB0eXBlIHVpLk9iamVjdF9VSUVsZW1lbnRbXVxuICAgICAgICAjIyNcbiAgICAgICAgQGNvbnRyb2xzID0gW11cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgYmVoYXZpb3IgY29tcG9uZW50IHRvIGFkZCBmcmVlLWxheW91dCBzcGVjaWZpYyBiZWhhdmlvci5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfRnJlZUxheW91dEJlaGF2aW9yXG4gICAgICAgICMjI1xuICAgICAgICBAYmVoYXZpb3IgPSBuZXcgZ3MuQ29tcG9uZW50X0ZyZWVMYXlvdXRCZWhhdmlvcigpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSBsYXlvdXRzIHJlc2l6ZXMgdG8gZml0IGl0cyBjb250ZW50LlxuICAgICAgICAqIEBwcm9wZXJ0eSBzaXplVG9GaXRcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICMjI1xuICAgICAgICBAc2l6ZVRvRml0ID0gbm9cbiAgICAgICAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGJlaGF2aW9yKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBhbmltYXRvcilcbiAgICAgICAgXG4gICAgICAgIFxudWkuT2JqZWN0X0ZyZWVMYXlvdXQgPSBPYmplY3RfRnJlZUxheW91dCJdfQ==
//# sourceURL=Object_FreeLayout_81.js
var Object_Frame,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Frame = (function(superClass) {
  extend(Object_Frame, superClass);


  /**
  * An UI frame object to display an frame on screen useful for buttons, windows, etc.
  *
  * @module ui
  * @class Object_Frame
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_Frame(skin) {
    Object_Frame.__super__.constructor.apply(this, arguments);
    this.image = skin || GameManager.windowSkin;

    /**
    * The UI object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Frame
     */
    this.visual = new gs.Component_Frame();

    /**
    * The thickness of the frame/border in pixels. Default is 16.
    * @property frameThickness
    * @type number
     */
    this.frameThickness = 16;

    /**
    * The corner-size of the frame in pixels. Default is 16(16x16 pixel).
    * @property frameCornerSize
    * @type number
     */
    this.frameCornerSize = 16;
    this.addComponent(this.visual);
  }

  return Object_Frame;

})(ui.Object_UIElement);

ui.Object_Frame = Object_Frame;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7O0VBU2Esc0JBQUMsSUFBRDtJQUNULCtDQUFBLFNBQUE7SUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTLElBQUEsSUFBUSxXQUFXLENBQUM7O0FBRTdCOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsZUFBSCxDQUFBOztBQUdkOzs7OztJQUtBLElBQUMsQ0FBQSxjQUFELEdBQWtCOztBQUVsQjs7Ozs7SUFLQSxJQUFDLENBQUEsZUFBRCxHQUFtQjtJQUVuQixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0VBMUJTOzs7O0dBVlUsRUFBRSxDQUFDOztBQXNDOUIsRUFBRSxDQUFDLFlBQUgsR0FBa0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9GcmFtZVxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X0ZyYW1lIGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICMjIypcbiAgICAqIEFuIFVJIGZyYW1lIG9iamVjdCB0byBkaXNwbGF5IGFuIGZyYW1lIG9uIHNjcmVlbiB1c2VmdWwgZm9yIGJ1dHRvbnMsIHdpbmRvd3MsIGV0Yy5cbiAgICAqXG4gICAgKiBAbW9kdWxlIHVpXG4gICAgKiBAY2xhc3MgT2JqZWN0X0ZyYW1lXG4gICAgKiBAZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgKiBAbWVtYmVyb2YgdWlcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjIyAgXG4gICAgY29uc3RydWN0b3I6IChza2luKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBAaW1hZ2UgPSBza2luIHx8IEdhbWVNYW5hZ2VyLndpbmRvd1NraW5cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3MgdmlzdWFsLWNvbXBvbmVudCB0byBkaXNwbGF5IHRoZSBnYW1lIG9iamVjdCBvbiBzY3JlZW4uXG4gICAgICAgICogQHByb3BlcnR5IHZpc3VhbFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9GcmFtZVxuICAgICAgICAjIyNcbiAgICAgICAgQHZpc3VhbCA9IG5ldyBncy5Db21wb25lbnRfRnJhbWUoKVxuICAgICAgICBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgdGhpY2tuZXNzIG9mIHRoZSBmcmFtZS9ib3JkZXIgaW4gcGl4ZWxzLiBEZWZhdWx0IGlzIDE2LlxuICAgICAgICAqIEBwcm9wZXJ0eSBmcmFtZVRoaWNrbmVzc1xuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQGZyYW1lVGhpY2tuZXNzID0gMTZcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgY29ybmVyLXNpemUgb2YgdGhlIGZyYW1lIGluIHBpeGVscy4gRGVmYXVsdCBpcyAxNigxNngxNiBwaXhlbCkuXG4gICAgICAgICogQHByb3BlcnR5IGZyYW1lQ29ybmVyU2l6ZVxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQGZyYW1lQ29ybmVyU2l6ZSA9IDE2XG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEB2aXN1YWwpXG4gICAgICAgIFxudWkuT2JqZWN0X0ZyYW1lID0gT2JqZWN0X0ZyYW1lIl19
//# sourceURL=Object_Frame_95.js
var Object_Text,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Text = (function(superClass) {
  extend(Object_Text, superClass);

  Object_Text.accessors("text", {
    set: function(v) {
      if (v !== this.text_) {
        this.text_ = v;
        return this.needsUpdate = true;
      }
    },
    get: function() {
      return this.text_;
    }
  });

  Object_Text.accessors("visible", {
    set: function(v) {
      if (v !== this.visible_) {
        this.visible_ = v;
        this.needsUpdate = true;
        return this.fullRefresh();
      }
    },
    get: function() {
      return this.visible_ && (!this.parent || this.parent.visible);
    }
  });


  /**
  * A UI object to display text on screen.
  *
  * @module ui
  * @class Object_Text
  * @extends gs.Object_Text
  * @memberof ui
  * @constructor
   */

  function Object_Text() {
    Object_Text.__super__.constructor.call(this);

    /**
    * Indicates if that UI object will break the binding-chain. If <b>true</b> the UI object
    * will not change any binding-targets for the current binding-execution period.
    * @property breakBindingChain
    * @type boolean
     */
    this.breakBindingChain = false;
    this.dstRect = new ui.UIElementRectangle(this);
    this.wordWrap = true;
    this.controlsByStyle = new Array(ui.UIManager.stylesById.length);
    this.styles = [];
    this.activeStyles = [];
    this.data = new Array(10);

    /**
    * The UI object's padding. The default is { left: 0, top: 0, right: 0, bottom: 0 }.
    * @property padding
    * @type ui.Space
     */
    this.padding = new ui.Space(0, 0, 0, 0);

    /**
    * The UI object's margin. The margin defines an extra space around the UI object. 
    * The default is { left: 0, top: 0, right: 0, bottom: 0 }.
    * @property margin
    * @type Object
     */
    this.margin = new ui.Space(0, 0, 0, 0);

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.EventEmitter();
    this.addComponent(this.events);
  }

  return Object_Text;

})(gs.Object_Text);

ui.Object_Text = Object_Text;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsV0FBQTtFQUFBOzs7QUFBTTs7O0VBTUYsV0FBQyxDQUFBLFNBQUQsQ0FBVyxNQUFYLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBRyxDQUFBLEtBQUssSUFBQyxDQUFBLEtBQVQ7UUFDSSxJQUFDLENBQUEsS0FBRCxHQUFTO2VBQ1QsSUFBQyxDQUFBLFdBQUQsR0FBZSxLQUZuQjs7SUFEQyxDQUFMO0lBS0EsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUxMO0dBREo7O0VBUUEsV0FBQyxDQUFBLFNBQUQsQ0FBVyxTQUFYLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBRyxDQUFBLEtBQUssSUFBQyxDQUFBLFFBQVQ7UUFDSSxJQUFDLENBQUEsUUFBRCxHQUFZO1FBQ1osSUFBQyxDQUFBLFdBQUQsR0FBZTtlQUNmLElBQUMsQ0FBQSxXQUFELENBQUEsRUFISjs7SUFEQyxDQUFMO0lBTUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUEsUUFBRCxJQUFjLENBQUMsQ0FBQyxJQUFDLENBQUEsTUFBRixJQUFZLElBQUMsQ0FBQSxNQUFNLENBQUMsT0FBckI7SUFBakIsQ0FOTDtHQURKOzs7QUFTQTs7Ozs7Ozs7OztFQVNhLHFCQUFBO0lBQ1QsMkNBQUE7O0FBRUE7Ozs7OztJQU1BLElBQUMsQ0FBQSxpQkFBRCxHQUFxQjtJQUNyQixJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsRUFBRSxDQUFDLGtCQUFILENBQXNCLElBQXRCO0lBQ2YsSUFBQyxDQUFBLFFBQUQsR0FBWTtJQUNaLElBQUMsQ0FBQSxlQUFELEdBQXVCLElBQUEsS0FBQSxDQUFNLEVBQUUsQ0FBQyxTQUFTLENBQUMsVUFBVSxDQUFDLE1BQTlCO0lBQ3ZCLElBQUMsQ0FBQSxNQUFELEdBQVU7SUFDVixJQUFDLENBQUEsWUFBRCxHQUFnQjtJQUNoQixJQUFDLENBQUEsSUFBRCxHQUFZLElBQUEsS0FBQSxDQUFNLEVBQU47O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBZSxJQUFBLEVBQUUsQ0FBQyxLQUFILENBQVMsQ0FBVCxFQUFZLENBQVosRUFBZSxDQUFmLEVBQWtCLENBQWxCOztBQUVmOzs7Ozs7SUFNQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsRUFBRSxDQUFDLEtBQUgsQ0FBUyxDQUFULEVBQVksQ0FBWixFQUFlLENBQWYsRUFBa0IsQ0FBbEI7O0FBRWQ7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxZQUFILENBQUE7SUFDZCxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0VBdENTOzs7O0dBaENTLEVBQUUsQ0FBQzs7QUF3RTdCLEVBQUUsQ0FBQyxXQUFILEdBQWlCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfVGV4dFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X1RleHQgZXh0ZW5kcyBncy5PYmplY3RfVGV4dFxuICAgICNcbiAgICAjIFRoZSB0ZXh0IHRvIGRpc3BsYXkuXG4gICAgIyBAcHJvcGVydHkgdGV4dFxuICAgICMgQHR5cGUgc3RyaW5nXG4gICAgI1xuICAgIEBhY2Nlc3NvcnMgXCJ0ZXh0XCIsIFxuICAgICAgICBzZXQ6ICh2KSAtPiBcbiAgICAgICAgICAgIGlmIHYgIT0gQHRleHRfXG4gICAgICAgICAgICAgICAgQHRleHRfID0gdlxuICAgICAgICAgICAgICAgIEBuZWVkc1VwZGF0ZSA9IHllc1xuICAgICAgICAgICAgXG4gICAgICAgIGdldDogLT4gQHRleHRfXG4gICAgICAgIFxuICAgIEBhY2Nlc3NvcnMgXCJ2aXNpYmxlXCIsIFxuICAgICAgICBzZXQ6ICh2KSAtPiBcbiAgICAgICAgICAgIGlmIHYgIT0gQHZpc2libGVfXG4gICAgICAgICAgICAgICAgQHZpc2libGVfID0gdlxuICAgICAgICAgICAgICAgIEBuZWVkc1VwZGF0ZSA9IHllc1xuICAgICAgICAgICAgICAgIEBmdWxsUmVmcmVzaCgpXG4gICAgICAgICAgICBcbiAgICAgICAgZ2V0OiAtPiBAdmlzaWJsZV8gYW5kICghQHBhcmVudCBvciBAcGFyZW50LnZpc2libGUpXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIEEgVUkgb2JqZWN0IHRvIGRpc3BsYXkgdGV4dCBvbiBzY3JlZW4uXG4gICAgKlxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIE9iamVjdF9UZXh0XG4gICAgKiBAZXh0ZW5kcyBncy5PYmplY3RfVGV4dFxuICAgICogQG1lbWJlcm9mIHVpXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyMgXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhhdCBVSSBvYmplY3Qgd2lsbCBicmVhayB0aGUgYmluZGluZy1jaGFpbi4gSWYgPGI+dHJ1ZTwvYj4gdGhlIFVJIG9iamVjdFxuICAgICAgICAqIHdpbGwgbm90IGNoYW5nZSBhbnkgYmluZGluZy10YXJnZXRzIGZvciB0aGUgY3VycmVudCBiaW5kaW5nLWV4ZWN1dGlvbiBwZXJpb2QuXG4gICAgICAgICogQHByb3BlcnR5IGJyZWFrQmluZGluZ0NoYWluXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQGJyZWFrQmluZGluZ0NoYWluID0gbm9cbiAgICAgICAgQGRzdFJlY3QgPSBuZXcgdWkuVUlFbGVtZW50UmVjdGFuZ2xlKHRoaXMpXG4gICAgICAgIEB3b3JkV3JhcCA9IHllc1xuICAgICAgICBAY29udHJvbHNCeVN0eWxlID0gbmV3IEFycmF5KHVpLlVJTWFuYWdlci5zdHlsZXNCeUlkLmxlbmd0aClcbiAgICAgICAgQHN0eWxlcyA9IFtdXG4gICAgICAgIEBhY3RpdmVTdHlsZXMgPSBbXVxuICAgICAgICBAZGF0YSA9IG5ldyBBcnJheSgxMClcblxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIHBhZGRpbmcuIFRoZSBkZWZhdWx0IGlzIHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwIH0uXG4gICAgICAgICogQHByb3BlcnR5IHBhZGRpbmdcbiAgICAgICAgKiBAdHlwZSB1aS5TcGFjZVxuICAgICAgICAjIyNcbiAgICAgICAgQHBhZGRpbmcgPSBuZXcgdWkuU3BhY2UoMCwgMCwgMCwgMClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0J3MgbWFyZ2luLiBUaGUgbWFyZ2luIGRlZmluZXMgYW4gZXh0cmEgc3BhY2UgYXJvdW5kIHRoZSBVSSBvYmplY3QuIFxuICAgICAgICAqIFRoZSBkZWZhdWx0IGlzIHsgbGVmdDogMCwgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwIH0uXG4gICAgICAgICogQHByb3BlcnR5IG1hcmdpblxuICAgICAgICAqIEB0eXBlIE9iamVjdFxuICAgICAgICAjIyNcbiAgICAgICAgQG1hcmdpbiA9IG5ldyB1aS5TcGFjZSgwLCAwLCAwLCAwKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEFuIGV2ZW50LWVtaXR0ZXIgdG8gZW1pdCBldmVudHMuXG4gICAgICAgICogQHByb3BlcnR5IGV2ZW50c1xuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9FdmVudEVtaXR0ZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEBldmVudHMgPSBuZXcgZ3MuRXZlbnRFbWl0dGVyKClcbiAgICAgICAgQGFkZENvbXBvbmVudChAZXZlbnRzKVxuICAgICAgICBcbnVpLk9iamVjdF9UZXh0ID0gT2JqZWN0X1RleHQiXX0=
//# sourceURL=Object_Text_98.js
var Object_StackLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_StackLayout = (function(superClass) {
  extend(Object_StackLayout, superClass);

  Object_StackLayout.accessors("zIndex", {
    set: function(v) {
      return this.zIndex_ = v;
    },
    get: function() {
      return (this.zIndex_ || 0) + (!this.parent ? 0 : this.parent.zIndex || 0);
    }
  });

  Object_StackLayout.accessors("scrollOffsetY", {
    set: function(v) {
      if (v !== this.scrollOffsetY_) {
        this.scrollOffsetY_ = v;
        return this.needsFullUpdate = true;
      }
    },
    get: function() {
      return this.scrollOffsetY_;
    }
  });


  /**
  * A stack-layout which layouts all it sub-objects
  * like a stack vertically or horizontally.
  * 
  * @module ui
  * @class Object_StackLayout
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_StackLayout(x, y, width, height, orientation) {
    Object_StackLayout.__super__.constructor.call(this);
    this.dstRect.set(x || 0, y || 0, width || 1, height || 1);

    /**
    * Indicates if the layout is resizable.
    * @property resizable
    * @type boolean
     */
    this.resizable = false;

    /**
    * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Animator();

    /**
    * The layout's sub-objects.
    * @property controls
    * @type ui.Object_UIElement[]
     */
    this.controls = [];

    /**
    * The stack-layout's orientation. 
    * @property orientation
    * @type gs.Orientation
     */
    this.orientation = orientation === "vertical" ? 1 : 0;

    /**
    * The stack-layout's scroll-offset on y-axis. 
    * @property scrollOffsetY
    * @type number
     */
    this.scrollOffsetY = 0;

    /**
    * Indicates if the layouts resizes to fit its content.
    * @property sizeToFit
    * @type boolean
     */
    this.sizeToFit = false;

    /**
    * The behavior component to add stack-layout specific behavior.
    * @property behavior
    * @type gs.Component_StackLayoutBehavior
     */
    this.behavior = new gs.Component_StackLayoutBehavior();
    this.behavior.orientation = this.orientation;
    this.addComponent(this.behavior);
  }

  return Object_StackLayout;

})(ui.Object_UIElement);

ui.Object_StackLayout = Object_StackLayout;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsa0JBQUE7RUFBQTs7O0FBQU07OztFQUNGLGtCQUFDLENBQUEsU0FBRCxDQUFXLFFBQVgsRUFDSTtJQUFBLEdBQUEsRUFBSyxTQUFDLENBQUQ7YUFBTyxJQUFDLENBQUEsT0FBRCxHQUFXO0lBQWxCLENBQUw7SUFDQSxHQUFBLEVBQUssU0FBQTthQUFHLENBQUMsSUFBQyxDQUFBLE9BQUQsSUFBWSxDQUFiLENBQUEsR0FBa0IsQ0FBSSxDQUFDLElBQUMsQ0FBQSxNQUFMLEdBQWlCLENBQWpCLEdBQXdCLElBQUMsQ0FBQSxNQUFNLENBQUMsTUFBUixJQUFrQixDQUEzQztJQUFyQixDQURMO0dBREo7O0VBSUEsa0JBQUMsQ0FBQSxTQUFELENBQVcsZUFBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxjQUFUO1FBQ0ksSUFBQyxDQUFBLGNBQUQsR0FBa0I7ZUFDbEIsSUFBQyxDQUFBLGVBQUQsR0FBbUIsS0FGdkI7O0lBREMsQ0FBTDtJQUlBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBO0lBQUosQ0FKTDtHQURKOzs7QUFPQTs7Ozs7Ozs7Ozs7RUFVYSw0QkFBQyxDQUFELEVBQUksQ0FBSixFQUFPLEtBQVAsRUFBYyxNQUFkLEVBQXNCLFdBQXRCO0lBQ1Qsa0RBQUE7SUFFQSxJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsQ0FBYSxDQUFBLElBQUssQ0FBbEIsRUFBcUIsQ0FBQSxJQUFLLENBQTFCLEVBQTZCLEtBQUEsSUFBUyxDQUF0QyxFQUF5QyxNQUFBLElBQVUsQ0FBbkQ7O0FBRUE7Ozs7O0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYTs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyxRQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVk7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLFdBQUQsR0FBa0IsV0FBQSxLQUFlLFVBQWxCLEdBQWtDLENBQWxDLEdBQXlDOztBQUV4RDs7Ozs7SUFLQSxJQUFDLENBQUEsYUFBRCxHQUFpQjs7QUFFakI7Ozs7O0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYTs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyw2QkFBSCxDQUFBO0lBQ2hCLElBQUMsQ0FBQSxRQUFRLENBQUMsV0FBVixHQUF3QixJQUFDLENBQUE7SUFDekIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtFQXREUzs7OztHQXRCZ0IsRUFBRSxDQUFDOztBQThFcEMsRUFBRSxDQUFDLGtCQUFILEdBQXdCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfU3RhY2tMYXlvdXRcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9TdGFja0xheW91dCBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICBAYWNjZXNzb3JzIFwiekluZGV4XCIsIFxuICAgICAgICBzZXQ6ICh2KSAtPiBAekluZGV4XyA9IHYsIFxuICAgICAgICBnZXQ6IC0+IChAekluZGV4XyB8fCAwKSArIChpZiAhQHBhcmVudCB0aGVuIDAgZWxzZSBAcGFyZW50LnpJbmRleCB8fCAwKVxuICAgICAgICBcbiAgICBAYWNjZXNzb3JzIFwic2Nyb2xsT2Zmc2V0WVwiLFxuICAgICAgICBzZXQ6ICh2KSAtPiBcbiAgICAgICAgICAgIGlmIHYgIT0gQHNjcm9sbE9mZnNldFlfXG4gICAgICAgICAgICAgICAgQHNjcm9sbE9mZnNldFlfID0gdlxuICAgICAgICAgICAgICAgIEBuZWVkc0Z1bGxVcGRhdGUgPSB5ZXNcbiAgICAgICAgZ2V0OiAtPiBAc2Nyb2xsT2Zmc2V0WV9cbiAgICAgICAgXG4gICAgIyMjKlxuICAgICogQSBzdGFjay1sYXlvdXQgd2hpY2ggbGF5b3V0cyBhbGwgaXQgc3ViLW9iamVjdHNcbiAgICAqIGxpa2UgYSBzdGFjayB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseS5cbiAgICAqIFxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIE9iamVjdF9TdGFja0xheW91dFxuICAgICogQGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICogQG1lbWJlcm9mIHVpXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyMgIFxuICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgd2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24pIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIEBkc3RSZWN0LnNldCh4IHx8IDAsIHkgfHwgMCwgd2lkdGggfHwgMSwgaGVpZ2h0IHx8IDEgKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgbGF5b3V0IGlzIHJlc2l6YWJsZS5cbiAgICAgICAgKiBAcHJvcGVydHkgcmVzaXphYmxlXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQHJlc2l6YWJsZSA9IG5vXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQW5pbWF0b3IoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBsYXlvdXQncyBzdWItb2JqZWN0cy5cbiAgICAgICAgKiBAcHJvcGVydHkgY29udHJvbHNcbiAgICAgICAgKiBAdHlwZSB1aS5PYmplY3RfVUlFbGVtZW50W11cbiAgICAgICAgIyMjXG4gICAgICAgIEBjb250cm9scyA9IFtdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHN0YWNrLWxheW91dCdzIG9yaWVudGF0aW9uLiBcbiAgICAgICAgKiBAcHJvcGVydHkgb3JpZW50YXRpb25cbiAgICAgICAgKiBAdHlwZSBncy5PcmllbnRhdGlvblxuICAgICAgICAjIyNcbiAgICAgICAgQG9yaWVudGF0aW9uID0gaWYgb3JpZW50YXRpb24gPT0gXCJ2ZXJ0aWNhbFwiIHRoZW4gMSBlbHNlIDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgc3RhY2stbGF5b3V0J3Mgc2Nyb2xsLW9mZnNldCBvbiB5LWF4aXMuIFxuICAgICAgICAqIEBwcm9wZXJ0eSBzY3JvbGxPZmZzZXRZXG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAc2Nyb2xsT2Zmc2V0WSA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIGxheW91dHMgcmVzaXplcyB0byBmaXQgaXRzIGNvbnRlbnQuXG4gICAgICAgICogQHByb3BlcnR5IHNpemVUb0ZpdFxuICAgICAgICAqIEB0eXBlIGJvb2xlYW5cbiAgICAgICAgIyMjXG4gICAgICAgIEBzaXplVG9GaXQgPSBub1xuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBiZWhhdmlvciBjb21wb25lbnQgdG8gYWRkIHN0YWNrLWxheW91dCBzcGVjaWZpYyBiZWhhdmlvci5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfU3RhY2tMYXlvdXRCZWhhdmlvclxuICAgICAgICAjIyNcbiAgICAgICAgQGJlaGF2aW9yID0gbmV3IGdzLkNvbXBvbmVudF9TdGFja0xheW91dEJlaGF2aW9yKClcbiAgICAgICAgQGJlaGF2aW9yLm9yaWVudGF0aW9uID0gQG9yaWVudGF0aW9uXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGJlaGF2aW9yKVxuICAgICAgICBcbnVpLk9iamVjdF9TdGFja0xheW91dCA9IE9iamVjdF9TdGFja0xheW91dCJdfQ==
//# sourceURL=Object_StackLayout_112.js
var Object_ThreePartImage,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_ThreePartImage = (function(superClass) {
  extend(Object_ThreePartImage, superClass);


  /**
  * An object to display a three-part image using three
  * sub-images: start, middle and end. For info, see ui.Component_ThreePartImage.
  *
  * @module ui
  * @class Object_ThreePartImage
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
  * @see ui.Component_ThreePartImage
   */

  function Object_ThreePartImage(skin) {
    Object_ThreePartImage.__super__.constructor.apply(this, arguments);
    this.image = skin;

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_ThreePartImage();

    /**
    * A hotspot behavior-component to make the UI object clickable/touchable.
    * @property hotspot
    * @type gs.Component_HotspotBehavior
     */
    this.hotspot = new gs.Component_HotspotBehavior();
    this.addComponent(this.hotspot);
    this.addComponent(this.visual);
  }

  return Object_ThreePartImage;

})(ui.Object_UIElement);

ui.Object_ThreePartImage = Object_ThreePartImage;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEscUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7O0VBV2EsK0JBQUMsSUFBRDtJQUNULHdEQUFBLFNBQUE7SUFDQSxJQUFDLENBQUEsS0FBRCxHQUFTOztBQUVUOzs7OztJQUtBLElBQUMsQ0FBQSxNQUFELEdBQWMsSUFBQSxFQUFFLENBQUMsd0JBQUgsQ0FBQTs7QUFFZDs7Ozs7SUFLQSxJQUFDLENBQUEsT0FBRCxHQUFlLElBQUEsRUFBRSxDQUFDLHlCQUFILENBQUE7SUFFZixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxPQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtFQW5CUzs7OztHQVptQixFQUFFLENBQUM7O0FBaUN2QyxFQUFFLENBQUMscUJBQUgsR0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9UaHJlZVBhcnRJbWFnZVxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X1RocmVlUGFydEltYWdlIGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICMjIypcbiAgICAqIEFuIG9iamVjdCB0byBkaXNwbGF5IGEgdGhyZWUtcGFydCBpbWFnZSB1c2luZyB0aHJlZVxuICAgICogc3ViLWltYWdlczogc3RhcnQsIG1pZGRsZSBhbmQgZW5kLiBGb3IgaW5mbywgc2VlIHVpLkNvbXBvbmVudF9UaHJlZVBhcnRJbWFnZS5cbiAgICAqXG4gICAgKiBAbW9kdWxlIHVpXG4gICAgKiBAY2xhc3MgT2JqZWN0X1RocmVlUGFydEltYWdlXG4gICAgKiBAZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgKiBAbWVtYmVyb2YgdWlcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICogQHNlZSB1aS5Db21wb25lbnRfVGhyZWVQYXJ0SW1hZ2VcbiAgICAjIyMgXG4gICAgY29uc3RydWN0b3I6IChza2luKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBAaW1hZ2UgPSBza2luXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIG9iamVjdCdzIHZpc3VhbC1jb21wb25lbnQgdG8gZGlzcGxheSB0aGUgZ2FtZSBvYmplY3Qgb24gc2NyZWVuLlxuICAgICAgICAqIEBwcm9wZXJ0eSB2aXN1YWxcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfU3ByaXRlXG4gICAgICAgICMjI1xuICAgICAgICBAdmlzdWFsID0gbmV3IGdzLkNvbXBvbmVudF9UaHJlZVBhcnRJbWFnZSgpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogQSBob3RzcG90IGJlaGF2aW9yLWNvbXBvbmVudCB0byBtYWtlIHRoZSBVSSBvYmplY3QgY2xpY2thYmxlL3RvdWNoYWJsZS5cbiAgICAgICAgKiBAcHJvcGVydHkgaG90c3BvdFxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9Ib3RzcG90QmVoYXZpb3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBob3RzcG90ID0gbmV3IGdzLkNvbXBvbmVudF9Ib3RzcG90QmVoYXZpb3IoKSBcbiAgICAgICAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGhvdHNwb3QpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHZpc3VhbClcbiAgICAgICAgXG51aS5PYmplY3RfVGhyZWVQYXJ0SW1hZ2UgPSBPYmplY3RfVGhyZWVQYXJ0SW1hZ2UiXX0=
//# sourceURL=Object_ThreePartImage_117.js
var Object_SpreadLayout,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_SpreadLayout = (function(superClass) {
  extend(Object_SpreadLayout, superClass);


  /**
  * A spread-layout which spreads all sub-objects evenly over the layout-space 
  * vertically or horizontally.
  *
  * @module ui
  * @class Object_SpreadLayout
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_SpreadLayout(x, y, width, height, orientation) {
    Object_SpreadLayout.__super__.constructor.call(this);
    this.dstRect.set(x || 0, y || 0, width || 1, height || 1);

    /**
    * Indicates if the layout is resizable.
    * @property resizable
    * @type boolean
     */
    this.resizable = false;

    /**
    * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type gs.Component_Animator
     */
    this.animator = new gs.Animator();

    /**
    * The layout's sub-objects.
    * @property controls
    * @type ui.Object_UIElement[]
     */
    this.controls = [];

    /**
    * The spread-layout's orientation. 
    * @property orientation
    * @type gs.Orientation
     */
    this.orientation = orientation === "vertical" ? 1 : 0;

    /**
    * The behavior component to add spread-layout specific behavior.
    * @property behavior
    * @type gs.Component_SpreadLayoutBehavior
     */
    this.behavior = new gs.Component_SpreadLayoutBehavior();
    this.behavior.orientation = this.orientation;
    this.addComponent(this.behavior);
  }

  return Object_SpreadLayout;

})(ui.Object_UIElement);

ui.Object_SpreadLayout = Object_SpreadLayout;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsbUJBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7RUFVYSw2QkFBQyxDQUFELEVBQUksQ0FBSixFQUFPLEtBQVAsRUFBYyxNQUFkLEVBQXNCLFdBQXRCO0lBQ1QsbURBQUE7SUFFQSxJQUFDLENBQUEsT0FBTyxDQUFDLEdBQVQsQ0FBYSxDQUFBLElBQUssQ0FBbEIsRUFBcUIsQ0FBQSxJQUFLLENBQTFCLEVBQTZCLEtBQUEsSUFBUyxDQUF0QyxFQUF5QyxNQUFBLElBQVUsQ0FBbkQ7O0FBRUE7Ozs7O0lBS0EsSUFBQyxDQUFBLFNBQUQsR0FBYTs7QUFFYjs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyxRQUFILENBQUE7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVk7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLFdBQUQsR0FBa0IsV0FBQSxLQUFlLFVBQWxCLEdBQWtDLENBQWxDLEdBQXlDOztBQUV4RDs7Ozs7SUFLQSxJQUFDLENBQUEsUUFBRCxHQUFnQixJQUFBLEVBQUUsQ0FBQyw4QkFBSCxDQUFBO0lBQ2hCLElBQUMsQ0FBQSxRQUFRLENBQUMsV0FBVixHQUF3QixJQUFDLENBQUE7SUFDekIsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtFQXhDUzs7OztHQVhpQixFQUFFLENBQUM7O0FBcURyQyxFQUFFLENBQUMsbUJBQUgsR0FBeUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9TcHJlYWRMYXlvdXRcbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9TcHJlYWRMYXlvdXQgZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgIyMjKlxuICAgICogQSBzcHJlYWQtbGF5b3V0IHdoaWNoIHNwcmVhZHMgYWxsIHN1Yi1vYmplY3RzIGV2ZW5seSBvdmVyIHRoZSBsYXlvdXQtc3BhY2UgXG4gICAgKiB2ZXJ0aWNhbGx5IG9yIGhvcml6b250YWxseS5cbiAgICAqXG4gICAgKiBAbW9kdWxlIHVpXG4gICAgKiBAY2xhc3MgT2JqZWN0X1NwcmVhZExheW91dFxuICAgICogQGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgICogQG1lbWJlcm9mIHVpXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAjIyMgIFxuICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgd2lkdGgsIGhlaWdodCwgb3JpZW50YXRpb24pIC0+XG4gICAgICAgIHN1cGVyKClcbiAgICAgICAgXG4gICAgICAgIEBkc3RSZWN0LnNldCh4IHx8IDAsIHkgfHwgMCwgd2lkdGggfHwgMSwgaGVpZ2h0IHx8IDEgKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIEluZGljYXRlcyBpZiB0aGUgbGF5b3V0IGlzIHJlc2l6YWJsZS5cbiAgICAgICAgKiBAcHJvcGVydHkgcmVzaXphYmxlXG4gICAgICAgICogQHR5cGUgYm9vbGVhblxuICAgICAgICAjIyNcbiAgICAgICAgQHJlc2l6YWJsZSA9IG5vXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQW5pbWF0b3IoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBsYXlvdXQncyBzdWItb2JqZWN0cy5cbiAgICAgICAgKiBAcHJvcGVydHkgY29udHJvbHNcbiAgICAgICAgKiBAdHlwZSB1aS5PYmplY3RfVUlFbGVtZW50W11cbiAgICAgICAgIyMjXG4gICAgICAgIEBjb250cm9scyA9IFtdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHNwcmVhZC1sYXlvdXQncyBvcmllbnRhdGlvbi4gXG4gICAgICAgICogQHByb3BlcnR5IG9yaWVudGF0aW9uXG4gICAgICAgICogQHR5cGUgZ3MuT3JpZW50YXRpb25cbiAgICAgICAgIyMjXG4gICAgICAgIEBvcmllbnRhdGlvbiA9IGlmIG9yaWVudGF0aW9uID09IFwidmVydGljYWxcIiB0aGVuIDEgZWxzZSAwXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGJlaGF2aW9yIGNvbXBvbmVudCB0byBhZGQgc3ByZWFkLWxheW91dCBzcGVjaWZpYyBiZWhhdmlvci5cbiAgICAgICAgKiBAcHJvcGVydHkgYmVoYXZpb3JcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfU3ByZWFkTGF5b3V0QmVoYXZpb3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBiZWhhdmlvciA9IG5ldyBncy5Db21wb25lbnRfU3ByZWFkTGF5b3V0QmVoYXZpb3IoKVxuICAgICAgICBAYmVoYXZpb3Iub3JpZW50YXRpb24gPSBAb3JpZW50YXRpb25cbiAgICAgICAgQGFkZENvbXBvbmVudChAYmVoYXZpb3IpXG4gICAgICAgIFxudWkuT2JqZWN0X1NwcmVhZExheW91dCA9IE9iamVjdF9TcHJlYWRMYXlvdXQiXX0=
//# sourceURL=Object_SpreadLayout_120.js
var Object_Video,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_Video = (function(superClass) {
  extend(Object_Video, superClass);


  /**
  * A game object used for custom texts in a scene.
  *
  * @module gs
  * @class Object_Video
  * @extends gs.Object_Visual
  * @memberof gs
  * @constructor
   */

  function Object_Video(data) {
    Object_Video.__super__.constructor.apply(this, arguments);

    /**
    * The UI object's source rectangle on screen.
    * @property srcRect
    * @type gs.Rect
     */
    this.srcRect = null;

    /**
    * The UI object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_Sprite
     */
    this.visual = new gs.Component_Sprite();

    /**
    * An event-emitter to emit events.
    * @property events
    * @type gs.Component_EventEmitter
     */
    this.events = new gs.EventEmitter();
    this.addComponent(this.events);
    this.addComponent(this.visual);
  }

  return Object_Video;

})(ui.Object_UIElement);

ui.Object_Video = Object_Video;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsWUFBQTtFQUFBOzs7QUFBTTs7OztBQUNGOzs7Ozs7Ozs7O0VBU2Esc0JBQUMsSUFBRDtJQUNULCtDQUFBLFNBQUE7O0FBRUE7Ozs7O0lBS0EsSUFBQyxDQUFBLE9BQUQsR0FBVzs7QUFFWDs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxHQUFjLElBQUEsRUFBRSxDQUFDLGdCQUFILENBQUE7O0FBRWQ7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxZQUFILENBQUE7SUFFZCxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsTUFBZjtFQXpCUzs7OztHQVZVLEVBQUUsQ0FBQzs7QUFzQzlCLEVBQUUsQ0FBQyxZQUFILEdBQWtCIiwic291cmNlc0NvbnRlbnQiOlsiIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG4jXG4jICAgU2NyaXB0OiBPYmplY3RfVmlkZW9cbiNcbiMgICAkJENPUFlSSUdIVCQkXG4jXG4jID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbmNsYXNzIE9iamVjdF9WaWRlbyBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICAjIyMqXG4gICAgKiBBIGdhbWUgb2JqZWN0IHVzZWQgZm9yIGN1c3RvbSB0ZXh0cyBpbiBhIHNjZW5lLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBPYmplY3RfVmlkZW9cbiAgICAqIEBleHRlbmRzIGdzLk9iamVjdF9WaXN1YWxcbiAgICAqIEBtZW1iZXJvZiBnc1xuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICBzdXBlclxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBVSSBvYmplY3QncyBzb3VyY2UgcmVjdGFuZ2xlIG9uIHNjcmVlbi5cbiAgICAgICAgKiBAcHJvcGVydHkgc3JjUmVjdFxuICAgICAgICAqIEB0eXBlIGdzLlJlY3RcbiAgICAgICAgIyMjXG4gICAgICAgIEBzcmNSZWN0ID0gbnVsbFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBVSSBvYmplY3QncyB2aXN1YWwtY29tcG9uZW50IHRvIGRpc3BsYXkgdGhlIGdhbWUgb2JqZWN0IG9uIHNjcmVlbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdmlzdWFsXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X1Nwcml0ZVxuICAgICAgICAjIyNcbiAgICAgICAgQHZpc3VhbCA9IG5ldyBncy5Db21wb25lbnRfU3ByaXRlKClcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBBbiBldmVudC1lbWl0dGVyIHRvIGVtaXQgZXZlbnRzLlxuICAgICAgICAqIEBwcm9wZXJ0eSBldmVudHNcbiAgICAgICAgKiBAdHlwZSBncy5Db21wb25lbnRfRXZlbnRFbWl0dGVyXG4gICAgICAgICMjI1xuICAgICAgICBAZXZlbnRzID0gbmV3IGdzLkV2ZW50RW1pdHRlcigpXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEBldmVudHMpXG4gICAgICAgIEBhZGRDb21wb25lbnQoQHZpc3VhbClcbiAgICAgXG4gICAgICAgIFxudWkuT2JqZWN0X1ZpZGVvID0gT2JqZWN0X1ZpZGVvIl19
//# sourceURL=Object_Video_133.js
var Object_DataGrid,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_DataGrid = (function(superClass) {
  extend(Object_DataGrid, superClass);

  Object_DataGrid.accessors("zIndex", {
    set: function(v) {
      return this.zIndex_ = v;
    },
    get: function() {
      return (this.zIndex_ || 0) + (!this.parent ? 0 : this.parent.zIndex || 0);
    }
  });

  Object_DataGrid.accessors("scrollOffsetY", {
    set: function(v) {
      if (v !== this.scrollOffsetY_) {
        this.scrollOffsetY_ = v;
        return this.needsFullUpdate = true;
      }
    },
    get: function() {
      return this.scrollOffsetY_;
    }
  });


  /**
  * A data-grid allows to display items from a associated data-source using a specified item-template. 
  * Unlike a stack-layout, a data-grid is optimized to display even high amounts of items but they all
  * need to use the same item-template with same size.
  *
  * @module ui
  * @class Object_DataGrid
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_DataGrid(params) {
    Object_DataGrid.__super__.constructor.call(this);
    this.scrollOffsetY_ = 0;

    /**
    * The UI object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Animator();

    /**
    * The behavior component to add free-layout specific behavior.
    * @property behavior
    * @type gs.Component_FreeLayoutBehavior
     */
    this.behavior = new ui.Component_DataGridBehavior(params);

    /**
    * Indicates if the layouts resizes to fit its content.
    * @property sizeToFit
    * @type boolean
     */
    this.sizeToFit = false;
    this.addComponent(this.behavior);
    this.addComponent(this.animator);
  }

  return Object_DataGrid;

})(ui.Object_UIElement);

ui.Object_DataGrid = Object_DataGrid;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZUFBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsZUFBQyxDQUFBLFNBQUQsQ0FBVyxRQUFYLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO2FBQU8sSUFBQyxDQUFBLE9BQUQsR0FBVztJQUFsQixDQUFMO0lBQ0EsR0FBQSxFQUFLLFNBQUE7YUFBRyxDQUFDLElBQUMsQ0FBQSxPQUFELElBQVksQ0FBYixDQUFBLEdBQWtCLENBQUksQ0FBQyxJQUFDLENBQUEsTUFBTCxHQUFpQixDQUFqQixHQUF3QixJQUFDLENBQUEsTUFBTSxDQUFDLE1BQVIsSUFBa0IsQ0FBM0M7SUFBckIsQ0FETDtHQURKOztFQUlDLGVBQUMsQ0FBQSxTQUFELENBQVcsZUFBWCxFQUNHO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxjQUFUO1FBQ0ksSUFBQyxDQUFBLGNBQUQsR0FBa0I7ZUFDbEIsSUFBQyxDQUFBLGVBQUQsR0FBbUIsS0FGdkI7O0lBREMsQ0FBTDtJQUlBLEdBQUEsRUFBSyxTQUFBO2FBQUcsSUFBQyxDQUFBO0lBQUosQ0FKTDtHQURIOzs7QUFPRDs7Ozs7Ozs7Ozs7O0VBV2EseUJBQUMsTUFBRDtJQUNULCtDQUFBO0lBRUEsSUFBQyxDQUFBLGNBQUQsR0FBa0I7O0FBQ2xCOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQWdCLElBQUEsRUFBRSxDQUFDLFFBQUgsQ0FBQTs7QUFFaEI7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsMEJBQUgsQ0FBOEIsTUFBOUI7O0FBRWhCOzs7OztJQUtBLElBQUMsQ0FBQSxTQUFELEdBQWE7SUFFYixJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxRQUFmO0lBQ0EsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtFQTFCUzs7OztHQXZCYSxFQUFFLENBQUM7O0FBb0RqQyxFQUFFLENBQUMsZUFBSCxHQUFxQiIsInNvdXJjZXNDb250ZW50IjpbIiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuI1xuIyAgIFNjcmlwdDogT2JqZWN0X0RhdGFHcmlkXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBPYmplY3RfRGF0YUdyaWQgZXh0ZW5kcyB1aS5PYmplY3RfVUlFbGVtZW50XG4gICAgQGFjY2Vzc29ycyBcInpJbmRleFwiLCBcbiAgICAgICAgc2V0OiAodikgLT4gQHpJbmRleF8gPSB2LCBcbiAgICAgICAgZ2V0OiAtPiAoQHpJbmRleF8gfHwgMCkgKyAoaWYgIUBwYXJlbnQgdGhlbiAwIGVsc2UgQHBhcmVudC56SW5kZXggfHwgMClcbiAgICAgICAgXG4gICAgIEBhY2Nlc3NvcnMgXCJzY3JvbGxPZmZzZXRZXCIsXG4gICAgICAgIHNldDogKHYpIC0+IFxuICAgICAgICAgICAgaWYgdiAhPSBAc2Nyb2xsT2Zmc2V0WV9cbiAgICAgICAgICAgICAgICBAc2Nyb2xsT2Zmc2V0WV8gPSB2XG4gICAgICAgICAgICAgICAgQG5lZWRzRnVsbFVwZGF0ZSA9IHllc1xuICAgICAgICBnZXQ6IC0+IEBzY3JvbGxPZmZzZXRZX1xuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBBIGRhdGEtZ3JpZCBhbGxvd3MgdG8gZGlzcGxheSBpdGVtcyBmcm9tIGEgYXNzb2NpYXRlZCBkYXRhLXNvdXJjZSB1c2luZyBhIHNwZWNpZmllZCBpdGVtLXRlbXBsYXRlLiBcbiAgICAqIFVubGlrZSBhIHN0YWNrLWxheW91dCwgYSBkYXRhLWdyaWQgaXMgb3B0aW1pemVkIHRvIGRpc3BsYXkgZXZlbiBoaWdoIGFtb3VudHMgb2YgaXRlbXMgYnV0IHRoZXkgYWxsXG4gICAgKiBuZWVkIHRvIHVzZSB0aGUgc2FtZSBpdGVtLXRlbXBsYXRlIHdpdGggc2FtZSBzaXplLlxuICAgICpcbiAgICAqIEBtb2R1bGUgdWlcbiAgICAqIEBjbGFzcyBPYmplY3RfRGF0YUdyaWRcbiAgICAqIEBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICAqIEBtZW1iZXJvZiB1aVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjICBcbiAgICBjb25zdHJ1Y3RvcjogKHBhcmFtcykgLT5cbiAgICAgICAgc3VwZXIoKVxuICAgICAgICBcbiAgICAgICAgQHNjcm9sbE9mZnNldFlfID0gMFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIFVJIG9iamVjdCdzIGFuaW1hdG9yLWNvbXBvbmVudCB0byBleGVjdXRlIGRpZmZlcmVudCBraW5kIG9mIGFuaW1hdGlvbnMgbGlrZSBtb3ZlLCByb3RhdGUsIGV0Yy4gb24gaXQuXG4gICAgICAgICogQHByb3BlcnR5IGFuaW1hdG9yXG4gICAgICAgICogQHR5cGUgdm4uQ29tcG9uZW50X0FuaW1hdG9yXG4gICAgICAgICMjI1xuICAgICAgICBAYW5pbWF0b3IgPSBuZXcgZ3MuQW5pbWF0b3IoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBiZWhhdmlvciBjb21wb25lbnQgdG8gYWRkIGZyZWUtbGF5b3V0IHNwZWNpZmljIGJlaGF2aW9yLlxuICAgICAgICAqIEBwcm9wZXJ0eSBiZWhhdmlvclxuICAgICAgICAqIEB0eXBlIGdzLkNvbXBvbmVudF9GcmVlTGF5b3V0QmVoYXZpb3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBiZWhhdmlvciA9IG5ldyB1aS5Db21wb25lbnRfRGF0YUdyaWRCZWhhdmlvcihwYXJhbXMpXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogSW5kaWNhdGVzIGlmIHRoZSBsYXlvdXRzIHJlc2l6ZXMgdG8gZml0IGl0cyBjb250ZW50LlxuICAgICAgICAqIEBwcm9wZXJ0eSBzaXplVG9GaXRcbiAgICAgICAgKiBAdHlwZSBib29sZWFuXG4gICAgICAgICMjI1xuICAgICAgICBAc2l6ZVRvRml0ID0gbm9cbiAgICAgICAgXG4gICAgICAgIEBhZGRDb21wb25lbnQoQGJlaGF2aW9yKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBhbmltYXRvcilcbiAgICAgICAgXG4gICAgICAgIFxudWkuT2JqZWN0X0RhdGFHcmlkID0gT2JqZWN0X0RhdGFHcmlkIl19
//# sourceURL=Object_DataGrid_137.js
var Object_ImageMap,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

Object_ImageMap = (function(superClass) {
  extend(Object_ImageMap, superClass);

  Object_ImageMap.objectCodecBlackList = ["parent", "target", "controlsByStyle", "parentsByStyle", "styles", "activeStyles"];


  /**
  * An image-map UI object to display an image-map for UI interaction. 
  *
  * @module ui
  * @class Object_ImageMap
  * @extends ui.Object_UIElement
  * @memberof ui
  * @constructor
   */

  function Object_ImageMap() {
    Object_ImageMap.__super__.constructor.apply(this, arguments);

    /**
    * The names of the images used for the different states of the image-map.<br>
    *
    * - 0 = Ground Image
    * - 1 = Hovered
    * - 2 = Unselected
    * - 3 = Selected
    * - 4 = Selected Hovered
    *
    * @property images
    * @type string[]
     */
    this.images = [];

    /**
    * The hotspot data of the image-map. Each entry is a single hotspot on the image-map.
    * @property hotspots
    * @type gs.ImageMapHotspot[]
     */
    this.hotspots = [];

    /**
    * The object's animator-component to execute different kind of animations like move, rotate, etc. on it.
    * @property animator
    * @type vn.Component_Animator
     */
    this.animator = new gs.Component_Animator();

    /**
    * The object's visual-component to display the game object on screen.
    * @property visual
    * @type gs.Component_ImageMap
     */
    this.visual = new gs.Component_ImageMap();
    this.addComponent(this.animator);
    this.addComponent(this.visual);
    this.addComponent(this.events);
  }

  return Object_ImageMap;

})(ui.Object_UIElement);

ui.Object_ImageMap = Object_ImageMap;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsZUFBQTtFQUFBOzs7QUFBTTs7O0VBQ0YsZUFBQyxDQUFBLG9CQUFELEdBQXdCLENBQUMsUUFBRCxFQUFXLFFBQVgsRUFBcUIsaUJBQXJCLEVBQXdDLGdCQUF4QyxFQUEwRCxRQUExRCxFQUFvRSxjQUFwRTs7O0FBRXhCOzs7Ozs7Ozs7O0VBU2EseUJBQUE7SUFDVCxrREFBQSxTQUFBOztBQUVBOzs7Ozs7Ozs7Ozs7SUFZQSxJQUFDLENBQUEsTUFBRCxHQUFVOztBQUVWOzs7OztJQUtBLElBQUMsQ0FBQSxRQUFELEdBQVk7O0FBRVo7Ozs7O0lBS0EsSUFBQyxDQUFBLFFBQUQsR0FBZ0IsSUFBQSxFQUFFLENBQUMsa0JBQUgsQ0FBQTs7QUFFaEI7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBYyxJQUFBLEVBQUUsQ0FBQyxrQkFBSCxDQUFBO0lBRWQsSUFBQyxDQUFBLFlBQUQsQ0FBYyxJQUFDLENBQUEsUUFBZjtJQUNBLElBQUMsQ0FBQSxZQUFELENBQWMsSUFBQyxDQUFBLE1BQWY7SUFDQSxJQUFDLENBQUEsWUFBRCxDQUFjLElBQUMsQ0FBQSxNQUFmO0VBeENTOzs7O0dBWmEsRUFBRSxDQUFDOztBQXNEakMsRUFBRSxDQUFDLGVBQUgsR0FBcUIiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IE9iamVjdF9JbWFnZU1hcFxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgT2JqZWN0X0ltYWdlTWFwIGV4dGVuZHMgdWkuT2JqZWN0X1VJRWxlbWVudFxuICAgIEBvYmplY3RDb2RlY0JsYWNrTGlzdCA9IFtcInBhcmVudFwiLCBcInRhcmdldFwiLCBcImNvbnRyb2xzQnlTdHlsZVwiLCBcInBhcmVudHNCeVN0eWxlXCIsIFwic3R5bGVzXCIsIFwiYWN0aXZlU3R5bGVzXCJdXG4gICAgXG4gICAgIyMjKlxuICAgICogQW4gaW1hZ2UtbWFwIFVJIG9iamVjdCB0byBkaXNwbGF5IGFuIGltYWdlLW1hcCBmb3IgVUkgaW50ZXJhY3Rpb24uIFxuICAgICpcbiAgICAqIEBtb2R1bGUgdWlcbiAgICAqIEBjbGFzcyBPYmplY3RfSW1hZ2VNYXBcbiAgICAqIEBleHRlbmRzIHVpLk9iamVjdF9VSUVsZW1lbnRcbiAgICAqIEBtZW1iZXJvZiB1aVxuICAgICogQGNvbnN0cnVjdG9yXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IC0+XG4gICAgICAgIHN1cGVyXG5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBuYW1lcyBvZiB0aGUgaW1hZ2VzIHVzZWQgZm9yIHRoZSBkaWZmZXJlbnQgc3RhdGVzIG9mIHRoZSBpbWFnZS1tYXAuPGJyPlxuICAgICAgICAqXG4gICAgICAgICogLSAwID0gR3JvdW5kIEltYWdlXG4gICAgICAgICogLSAxID0gSG92ZXJlZFxuICAgICAgICAqIC0gMiA9IFVuc2VsZWN0ZWRcbiAgICAgICAgKiAtIDMgPSBTZWxlY3RlZFxuICAgICAgICAqIC0gNCA9IFNlbGVjdGVkIEhvdmVyZWRcbiAgICAgICAgKlxuICAgICAgICAqIEBwcm9wZXJ0eSBpbWFnZXNcbiAgICAgICAgKiBAdHlwZSBzdHJpbmdbXVxuICAgICAgICAjIyNcbiAgICAgICAgQGltYWdlcyA9IFtdXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIGhvdHNwb3QgZGF0YSBvZiB0aGUgaW1hZ2UtbWFwLiBFYWNoIGVudHJ5IGlzIGEgc2luZ2xlIGhvdHNwb3Qgb24gdGhlIGltYWdlLW1hcC5cbiAgICAgICAgKiBAcHJvcGVydHkgaG90c3BvdHNcbiAgICAgICAgKiBAdHlwZSBncy5JbWFnZU1hcEhvdHNwb3RbXVxuICAgICAgICAjIyNcbiAgICAgICAgQGhvdHNwb3RzID0gW11cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgb2JqZWN0J3MgYW5pbWF0b3ItY29tcG9uZW50IHRvIGV4ZWN1dGUgZGlmZmVyZW50IGtpbmQgb2YgYW5pbWF0aW9ucyBsaWtlIG1vdmUsIHJvdGF0ZSwgZXRjLiBvbiBpdC5cbiAgICAgICAgKiBAcHJvcGVydHkgYW5pbWF0b3JcbiAgICAgICAgKiBAdHlwZSB2bi5Db21wb25lbnRfQW5pbWF0b3JcbiAgICAgICAgIyMjXG4gICAgICAgIEBhbmltYXRvciA9IG5ldyBncy5Db21wb25lbnRfQW5pbWF0b3IoKVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBvYmplY3QncyB2aXN1YWwtY29tcG9uZW50IHRvIGRpc3BsYXkgdGhlIGdhbWUgb2JqZWN0IG9uIHNjcmVlbi5cbiAgICAgICAgKiBAcHJvcGVydHkgdmlzdWFsXG4gICAgICAgICogQHR5cGUgZ3MuQ29tcG9uZW50X0ltYWdlTWFwXG4gICAgICAgICMjI1xuICAgICAgICBAdmlzdWFsID0gbmV3IGdzLkNvbXBvbmVudF9JbWFnZU1hcCgpXG4gICAgICAgIFxuICAgICAgICBAYWRkQ29tcG9uZW50KEBhbmltYXRvcilcbiAgICAgICAgQGFkZENvbXBvbmVudChAdmlzdWFsKVxuICAgICAgICBAYWRkQ29tcG9uZW50KEBldmVudHMpXG4gICAgICAgIFxudWkuT2JqZWN0X0ltYWdlTWFwID0gT2JqZWN0X0ltYWdlTWFwIl19
//# sourceURL=Object_ImageMap_142.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Layouts_74.js
var DesktopUIConstants, Helper;

DesktopUIConstants = (function() {
  function DesktopUIConstants() {}

  DesktopUIConstants.OPTION_BUTTON_W = 78;

  DesktopUIConstants.OPTION_BUTTON_H = 78;

  DesktopUIConstants.OPTION_BUTTON_L_IMAGE_ON = "m-diamond-large-on";

  DesktopUIConstants.OPTION_BUTTON_L_IMAGE_OFF = "m-diamond-large-off";

  DesktopUIConstants.OPTION_BUTTON_S_IMAGE_ON = "m-diamond-small-on";

  DesktopUIConstants.OPTION_BUTTON_S_IMAGE_OFF = "m-diamond-small-off";

  DesktopUIConstants.OPTION_BUTTON_MSG_IMAGE_ON = "msg-diamond-small-on";

  DesktopUIConstants.OPTION_BUTTON_MSG_IMAGE_OFF = "msg-diamond-small-off";

  DesktopUIConstants.SLIDER_TRACK_H = 3;

  DesktopUIConstants.TEXT_SIZE_SMALL = 20;

  DesktopUIConstants.TEXT_SIZE_MESSAGE = 30;

  DesktopUIConstants.TEXT_SIZE_MESSAGE_NAME = 25;

  DesktopUIConstants.LAYOUT_SETTINGS_WINDOW_X = 20;

  DesktopUIConstants.LAYOUT_SETTINGS_WINDOW_W = 630;

  DesktopUIConstants.LAYOUT_SETTINGS_VOICES_WINDOW_X = 720;

  DesktopUIConstants.LAYOUT_SETTINGS_VOICES_WINDOW_W = 540;

  DesktopUIConstants.LAYOUT_SETTINGS_WINDOW_LABEL_W = 80;

  DesktopUIConstants.CG_GALLERY_CONTENT_WIDTH = Math.floor((Graphics.width - 260 - (Graphics.width - (Graphics.width - 200))) / 175) * 175 + 20;

  return DesktopUIConstants;

})();

Helper = (function() {

  /**
  * A helper class containing helper-functions like generating letter-descriptors
  * from database defined text-input pages.
  *
  * @module ui
  * @class Helper
  * @memberof ui
  * @constructor
   */
  function Helper() {}


  /**
  * Generates the text-input pages from database.
  *
  * @method generateTextInputPages
  * @return Object[] - Array of text-input pages. Each page is an array of ui.Letter descriptors.
   */

  Helper.prototype.generateTextInputPages = function() {
    var charset, charsets, defaults, i, j, k, len, pages, ref, ref1;
    pages = [];
    defaults = ["ABCDEFGHIJKLMNOPQRSTUVWXYZ", "abcdefghijklmnopqrstuvwxyz", "0123456789", ""];
    try {
      charsets = RecordManager.system.textInputPages.select(function(p) {
        return lcs(p);
      });
    } catch (error) {
      charsets = defaults;
    }
    for (i = j = 0, ref = charsets.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
      charsets[i] = ((ref1 = charsets[i]) != null ? ref1 : defaults[i]) || "";
    }
    for (k = 0, len = charsets.length; k < len; k++) {
      charset = charsets[k];
      pages.push(this.generateTextInputPage(charset));
    }
    return pages;
  };


  /**
  * Generates an array of ui.Letter descriptors from the specified charset.
  *
  * @method generateTextInputPage
  * @param {string} charset - The charset to generate the ui.Letter descriptors from.
  * @return Object[] - Array of ui.Letter descriptors.
   */

  Helper.prototype.generateTextInputPage = function(charset) {
    var c, controls, j, len, letter;
    controls = [];
    for (j = 0, len = charset.length; j < len; j++) {
      c = charset[j];
      letter = {
        "type": "ui.Letter",
        "params": {
          "text": c,
          "target": new ui.Formula(function() {
            return 'textField.textInput';
          })
        }
      };
      controls.push(letter);
    }
    return controls;
  };

  return Helper;

})();

ui.Helper = new Helper();

gs.DesktopUIConstants = DesktopUIConstants;

gs.UIConstants = DesktopUIConstants;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLElBQUE7O0FBQU07OztFQUNGLGtCQUFDLENBQUEsZUFBRCxHQUFtQjs7RUFDbkIsa0JBQUMsQ0FBQSxlQUFELEdBQW1COztFQUNuQixrQkFBQyxDQUFBLHdCQUFELEdBQTRCOztFQUM1QixrQkFBQyxDQUFBLHlCQUFELEdBQTZCOztFQUM3QixrQkFBQyxDQUFBLHdCQUFELEdBQTRCOztFQUM1QixrQkFBQyxDQUFBLHlCQUFELEdBQTZCOztFQUM3QixrQkFBQyxDQUFBLDBCQUFELEdBQThCOztFQUM5QixrQkFBQyxDQUFBLDJCQUFELEdBQStCOztFQUMvQixrQkFBQyxDQUFBLGNBQUQsR0FBa0I7O0VBQ2xCLGtCQUFDLENBQUEsZUFBRCxHQUFtQjs7RUFDbkIsa0JBQUMsQ0FBQSxpQkFBRCxHQUFxQjs7RUFDckIsa0JBQUMsQ0FBQSxzQkFBRCxHQUEwQjs7RUFDMUIsa0JBQUMsQ0FBQSx3QkFBRCxHQUE0Qjs7RUFDNUIsa0JBQUMsQ0FBQSx3QkFBRCxHQUE0Qjs7RUFDNUIsa0JBQUMsQ0FBQSwrQkFBRCxHQUFtQzs7RUFDbkMsa0JBQUMsQ0FBQSwrQkFBRCxHQUFtQzs7RUFDbkMsa0JBQUMsQ0FBQSw4QkFBRCxHQUFrQzs7RUFDbEMsa0JBQUMsQ0FBQSx3QkFBRCxHQUE0QixJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBZSxHQUFmLEdBQW1CLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBaUIsQ0FBQyxRQUFRLENBQUMsS0FBVCxHQUFpQixHQUFsQixDQUFsQixDQUFwQixDQUFBLEdBQWlFLEdBQTVFLENBQUEsR0FBbUYsR0FBbkYsR0FBeUY7Ozs7OztBQUduSDs7QUFDRjs7Ozs7Ozs7O0VBU2EsZ0JBQUEsR0FBQTs7O0FBRWI7Ozs7Ozs7bUJBTUEsc0JBQUEsR0FBd0IsU0FBQTtBQUNwQixRQUFBO0lBQUEsS0FBQSxHQUFRO0lBQ1IsUUFBQSxHQUFXLENBQ1AsNEJBRE8sRUFDdUIsNEJBRHZCLEVBRVAsWUFGTyxFQUVPLEVBRlA7QUFLWDtNQUNJLFFBQUEsR0FBVyxhQUFhLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxNQUFwQyxDQUEyQyxTQUFDLENBQUQ7ZUFBTyxHQUFBLENBQUksQ0FBSjtNQUFQLENBQTNDLEVBRGY7S0FBQSxhQUFBO01BR0ksUUFBQSxHQUFXLFNBSGY7O0FBS0EsU0FBUyx3RkFBVDtNQUNJLFFBQVMsQ0FBQSxDQUFBLENBQVQsMENBQTRCLFFBQVMsQ0FBQSxDQUFBLEVBQXZCLElBQTJCO0FBRDdDO0FBR0EsU0FBQSwwQ0FBQTs7TUFDSSxLQUFLLENBQUMsSUFBTixDQUFXLElBQUMsQ0FBQSxxQkFBRCxDQUF1QixPQUF2QixDQUFYO0FBREo7QUFHQSxXQUFPO0VBbEJhOzs7QUFvQnhCOzs7Ozs7OzttQkFPQSxxQkFBQSxHQUF1QixTQUFDLE9BQUQ7QUFDbkIsUUFBQTtJQUFBLFFBQUEsR0FBVztBQUVYLFNBQUEseUNBQUE7O01BQ0ksTUFBQSxHQUFTO1FBQUUsTUFBQSxFQUFRLFdBQVY7UUFBdUIsUUFBQSxFQUFVO1VBQUUsTUFBQSxFQUFRLENBQVY7VUFBYSxRQUFBLEVBQWMsSUFBQSxFQUFFLENBQUMsT0FBSCxDQUFXLFNBQUE7bUJBQUc7VUFBSCxDQUFYLENBQTNCO1NBQWpDOztNQUNULFFBQVEsQ0FBQyxJQUFULENBQWMsTUFBZDtBQUZKO0FBSUEsV0FBTztFQVBZOzs7Ozs7QUFTM0IsRUFBRSxDQUFDLE1BQUgsR0FBZ0IsSUFBQSxNQUFBLENBQUE7O0FBQ2hCLEVBQUUsQ0FBQyxrQkFBSCxHQUF3Qjs7QUFDeEIsRUFBRSxDQUFDLFdBQUgsR0FBaUIiLCJzb3VyY2VzQ29udGVudCI6WyJjbGFzcyBEZXNrdG9wVUlDb25zdGFudHNcbiAgICBAT1BUSU9OX0JVVFRPTl9XID0gNzhcbiAgICBAT1BUSU9OX0JVVFRPTl9IID0gNzhcbiAgICBAT1BUSU9OX0JVVFRPTl9MX0lNQUdFX09OID0gXCJtLWRpYW1vbmQtbGFyZ2Utb25cIlxuICAgIEBPUFRJT05fQlVUVE9OX0xfSU1BR0VfT0ZGID0gXCJtLWRpYW1vbmQtbGFyZ2Utb2ZmXCJcbiAgICBAT1BUSU9OX0JVVFRPTl9TX0lNQUdFX09OID0gXCJtLWRpYW1vbmQtc21hbGwtb25cIlxuICAgIEBPUFRJT05fQlVUVE9OX1NfSU1BR0VfT0ZGID0gXCJtLWRpYW1vbmQtc21hbGwtb2ZmXCJcbiAgICBAT1BUSU9OX0JVVFRPTl9NU0dfSU1BR0VfT04gPSBcIm1zZy1kaWFtb25kLXNtYWxsLW9uXCJcbiAgICBAT1BUSU9OX0JVVFRPTl9NU0dfSU1BR0VfT0ZGID0gXCJtc2ctZGlhbW9uZC1zbWFsbC1vZmZcIlxuICAgIEBTTElERVJfVFJBQ0tfSCA9IDNcbiAgICBAVEVYVF9TSVpFX1NNQUxMID0gMjBcbiAgICBAVEVYVF9TSVpFX01FU1NBR0UgPSAzMFxuICAgIEBURVhUX1NJWkVfTUVTU0FHRV9OQU1FID0gMjVcbiAgICBATEFZT1VUX1NFVFRJTkdTX1dJTkRPV19YID0gMjBcbiAgICBATEFZT1VUX1NFVFRJTkdTX1dJTkRPV19XID0gNjMwXG4gICAgQExBWU9VVF9TRVRUSU5HU19WT0lDRVNfV0lORE9XX1ggPSA3MjBcbiAgICBATEFZT1VUX1NFVFRJTkdTX1ZPSUNFU19XSU5ET1dfVyA9IDU0MFxuICAgIEBMQVlPVVRfU0VUVElOR1NfV0lORE9XX0xBQkVMX1cgPSA4MFxuICAgIEBDR19HQUxMRVJZX0NPTlRFTlRfV0lEVEggPSBNYXRoLmZsb29yKChHcmFwaGljcy53aWR0aC0yNjAtKEdyYXBoaWNzLndpZHRoIC0gKEdyYXBoaWNzLndpZHRoIC0gMjAwKSkpIC8gMTc1KSAqIDE3NSArIDIwXG4gICAgXG5cbmNsYXNzIEhlbHBlclxuICAgICMjIypcbiAgICAqIEEgaGVscGVyIGNsYXNzIGNvbnRhaW5pbmcgaGVscGVyLWZ1bmN0aW9ucyBsaWtlIGdlbmVyYXRpbmcgbGV0dGVyLWRlc2NyaXB0b3JzXG4gICAgKiBmcm9tIGRhdGFiYXNlIGRlZmluZWQgdGV4dC1pbnB1dCBwYWdlcy5cbiAgICAqXG4gICAgKiBAbW9kdWxlIHVpXG4gICAgKiBAY2xhc3MgSGVscGVyXG4gICAgKiBAbWVtYmVyb2YgdWlcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICMjI1xuICAgIGNvbnN0cnVjdG9yOiAtPlxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBHZW5lcmF0ZXMgdGhlIHRleHQtaW5wdXQgcGFnZXMgZnJvbSBkYXRhYmFzZS5cbiAgICAqXG4gICAgKiBAbWV0aG9kIGdlbmVyYXRlVGV4dElucHV0UGFnZXNcbiAgICAqIEByZXR1cm4gT2JqZWN0W10gLSBBcnJheSBvZiB0ZXh0LWlucHV0IHBhZ2VzLiBFYWNoIHBhZ2UgaXMgYW4gYXJyYXkgb2YgdWkuTGV0dGVyIGRlc2NyaXB0b3JzLlxuICAgICMjI1xuICAgIGdlbmVyYXRlVGV4dElucHV0UGFnZXM6ICgpIC0+XG4gICAgICAgIHBhZ2VzID0gW11cbiAgICAgICAgZGVmYXVsdHMgPSBbXG4gICAgICAgICAgICBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaXCIsIFwiYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpcIixcbiAgICAgICAgICAgIFwiMDEyMzQ1Njc4OVwiLCBcIlwiXG4gICAgICAgIF1cbiAgICAgICAgXG4gICAgICAgIHRyeVxuICAgICAgICAgICAgY2hhcnNldHMgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS50ZXh0SW5wdXRQYWdlcy5zZWxlY3QgKHApIC0+IGxjcyhwKVxuICAgICAgICBjYXRjaFxuICAgICAgICAgICAgY2hhcnNldHMgPSBkZWZhdWx0c1xuICAgICAgICAgICAgXG4gICAgICAgIGZvciBpIGluIFswLi4uY2hhcnNldHMubGVuZ3RoXVxuICAgICAgICAgICAgY2hhcnNldHNbaV0gPSBjaGFyc2V0c1tpXSA/IGRlZmF1bHRzW2ldfHxcIlwiXG4gICAgICAgICAgICBcbiAgICAgICAgZm9yIGNoYXJzZXQgaW4gY2hhcnNldHNcbiAgICAgICAgICAgIHBhZ2VzLnB1c2goQGdlbmVyYXRlVGV4dElucHV0UGFnZShjaGFyc2V0KSlcbiAgICAgICAgICAgIFxuICAgICAgICByZXR1cm4gcGFnZXNcbiAgICAgIFxuICAgICMjIypcbiAgICAqIEdlbmVyYXRlcyBhbiBhcnJheSBvZiB1aS5MZXR0ZXIgZGVzY3JpcHRvcnMgZnJvbSB0aGUgc3BlY2lmaWVkIGNoYXJzZXQuXG4gICAgKlxuICAgICogQG1ldGhvZCBnZW5lcmF0ZVRleHRJbnB1dFBhZ2VcbiAgICAqIEBwYXJhbSB7c3RyaW5nfSBjaGFyc2V0IC0gVGhlIGNoYXJzZXQgdG8gZ2VuZXJhdGUgdGhlIHVpLkxldHRlciBkZXNjcmlwdG9ycyBmcm9tLlxuICAgICogQHJldHVybiBPYmplY3RbXSAtIEFycmF5IG9mIHVpLkxldHRlciBkZXNjcmlwdG9ycy5cbiAgICAjIyMgICAgICBcbiAgICBnZW5lcmF0ZVRleHRJbnB1dFBhZ2U6IChjaGFyc2V0KSAtPlxuICAgICAgICBjb250cm9scyA9IFtdXG4gICAgICAgIFxuICAgICAgICBmb3IgYyBpbiBjaGFyc2V0XG4gICAgICAgICAgICBsZXR0ZXIgPSB7IFwidHlwZVwiOiBcInVpLkxldHRlclwiLCBcInBhcmFtc1wiOiB7IFwidGV4dFwiOiBjLCBcInRhcmdldFwiOiBuZXcgdWkuRm9ybXVsYSgtPiAndGV4dEZpZWxkLnRleHRJbnB1dCcpIH0gfVxuICAgICAgICAgICAgY29udHJvbHMucHVzaChsZXR0ZXIpXG4gICAgICAgICAgICBcbiAgICAgICAgcmV0dXJuIGNvbnRyb2xzXG4gICAgICBcbnVpLkhlbHBlciA9IG5ldyBIZWxwZXIoKSAgXG5ncy5EZXNrdG9wVUlDb25zdGFudHMgPSBEZXNrdG9wVUlDb25zdGFudHNcbmdzLlVJQ29uc3RhbnRzID0gRGVza3RvcFVJQ29uc3RhbnRzIl19
//# sourceURL=Constants_13.js
ui.UiFactory.layouts.titleLayout = {
  type: "ui.FreeLayout",
  frame: [0, 0, Graphics.width, Graphics.height],
  music: $(function() {
    return $dataFields.database.system.titleMusic;
  }),
  controls: [
    {
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.titleScreen.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      type: "ui.Text",
      styles: ["titleText"],
      text: {
        lcId: "4FE8B0BD58FD914BFA8824E07226FB7F7974",
        defaultText: "New Game"
      },
      frame: ["70%", "50%"],
      sizeToFit: true,
      action: {
        name: "newGame"
      }
    }, {
      type: "ui.Text",
      id: "loadGame",
      styles: ["titleText"],
      text: {
        lcId: "0B92E27C6AAE1648AF1B28B2E938923EDDD7",
        defaultText: "Load Game"
      },
      action: {
        name: "switchLayout",
        params: {
          name: "loadMenuLayout",
          savePrevious: true,
          snapshot: true
        }
      },
      frame: ["70% - 10", "50% + 50"],
      sizeToFit: true
    }, {
      type: "ui.Text",
      id: "gallery",
      styles: ["titleText"],
      text: {
        lcId: "5DC22AD29AE4C84F4979470215C2383A0620",
        defaultText: "Gallery"
      },
      action: {
        name: "switchLayout",
        params: {
          name: "cgGalleryLayout",
          savePrevious: true
        }
      },
      frame: ["70% - 20", "50% + 100"],
      sizeToFit: true
    }, {
      type: "ui.Text",
      id: "settings",
      styles: ["titleText"],
      text: {
        lcId: "D77D7952535CB1422759B668DBFB3C4FD441",
        defaultText: "Settings"
      },
      frame: ["70% - 30", "50% + 150"],
      sizeToFit: true,
      action: {
        name: "switchLayout",
        params: {
          name: "settingsMenuLayout",
          savePrevious: true
        }
      }
    }, {
      type: "ui.Text",
      styles: ["titleText"],
      id: "quit",
      text: {
        lcId: "377A3D6B2286414CAB8AAA93605A675D3AD6",
        defaultText: "Quit"
      },
      frame: ["70% - 40", "50% + 200"],
      action: {
        name: "quitGame"
      },
      sizeToFit: true
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFdBQXJCLEdBQW1DO0VBQy9CLElBQUEsRUFBTSxlQUR5QjtFQUUvQixLQUFBLEVBQU8sQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FGd0I7RUFHL0IsS0FBQSxFQUFPLENBQUEsQ0FBRSxTQUFBO1dBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7RUFBL0IsQ0FBRixDQUh3QjtFQUkvQixRQUFBLEVBQVU7SUFDTjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLFNBQUE7ZUFBRyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBeEMsSUFBZ0Q7TUFBbkQsQ0FGYjtNQUdJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sUUFBUSxDQUFDLEtBQWhCLEVBQXVCLFFBQVEsQ0FBQyxNQUFoQyxDQUhiO0tBRE0sRUFPTjtNQUNJLElBQUEsRUFBTSxTQURWO01BS0ksTUFBQSxFQUFRLENBQUMsV0FBRCxDQUxaO01BTUksSUFBQSxFQUFNO1FBQ0YsSUFBQSxFQUFNLHNDQURKO1FBRUYsV0FBQSxFQUFhLFVBRlg7T0FOVjtNQVVJLEtBQUEsRUFBTyxDQUFDLEtBQUQsRUFBUSxLQUFSLENBVlg7TUFXSSxTQUFBLEVBQVcsSUFYZjtNQVlJLE1BQUEsRUFBUTtRQUNKLElBQUEsRUFBTSxTQURGO09BWlo7S0FQTSxFQXdCTjtNQUNJLElBQUEsRUFBTSxTQURWO01BRUksRUFBQSxFQUFJLFVBRlI7TUFLSSxNQUFBLEVBQVEsQ0FBQyxXQUFELENBTFo7TUFNSSxJQUFBLEVBQU07UUFDRixJQUFBLEVBQU0sc0NBREo7UUFFRixXQUFBLEVBQWEsV0FGWDtPQU5WO01BVUksTUFBQSxFQUFRO1FBQ0osSUFBQSxFQUFNLGNBREY7UUFFSixNQUFBLEVBQVE7VUFDSixJQUFBLEVBQU0sZ0JBREY7VUFDb0IsWUFBQSxFQUFjLElBRGxDO1VBQ3dDLFFBQUEsRUFBVSxJQURsRDtTQUZKO09BVlo7TUFnQkksS0FBQSxFQUFPLENBQUMsVUFBRCxFQUFhLFVBQWIsQ0FoQlg7TUFpQkksU0FBQSxFQUFXLElBakJmO0tBeEJNLEVBNENOO01BQ0ksSUFBQSxFQUFNLFNBRFY7TUFFSSxFQUFBLEVBQUksU0FGUjtNQUtJLE1BQUEsRUFBUSxDQUFDLFdBQUQsQ0FMWjtNQU1JLElBQUEsRUFBTTtRQUNGLElBQUEsRUFBTSxzQ0FESjtRQUVGLFdBQUEsRUFBYSxTQUZYO09BTlY7TUFVSSxNQUFBLEVBQVE7UUFDSixJQUFBLEVBQU0sY0FERjtRQUVKLE1BQUEsRUFBUTtVQUNKLElBQUEsRUFBTSxpQkFERjtVQUVKLFlBQUEsRUFBYyxJQUZWO1NBRko7T0FWWjtNQWlCSSxLQUFBLEVBQU8sQ0FBQyxVQUFELEVBQWEsV0FBYixDQWpCWDtNQWtCSSxTQUFBLEVBQVcsSUFsQmY7S0E1Q00sRUFpRU47TUFDSSxJQUFBLEVBQU0sU0FEVjtNQUVJLEVBQUEsRUFBSSxVQUZSO01BS0ksTUFBQSxFQUFRLENBQUMsV0FBRCxDQUxaO01BTUksSUFBQSxFQUFNO1FBQ0YsSUFBQSxFQUFNLHNDQURKO1FBRUYsV0FBQSxFQUFhLFVBRlg7T0FOVjtNQVVJLEtBQUEsRUFBTyxDQUFDLFVBQUQsRUFBYSxXQUFiLENBVlg7TUFXSSxTQUFBLEVBQVcsSUFYZjtNQVlJLE1BQUEsRUFBUTtRQUNKLElBQUEsRUFBTSxjQURGO1FBRUosTUFBQSxFQUFRO1VBQ0osSUFBQSxFQUFNLG9CQURGO1VBRUosWUFBQSxFQUFjLElBRlY7U0FGSjtPQVpaO0tBakVNLEVBc0ZOO01BQ0ksSUFBQSxFQUFNLFNBRFY7TUFFSSxNQUFBLEVBQVEsQ0FBQyxXQUFELENBRlo7TUFHSSxFQUFBLEVBQUksTUFIUjtNQUtJLElBQUEsRUFBTTtRQUNGLElBQUEsRUFBTSxzQ0FESjtRQUVGLFdBQUEsRUFBYSxNQUZYO09BTFY7TUFTSSxLQUFBLEVBQU8sQ0FBQyxVQUFELEVBQWEsV0FBYixDQVRYO01BVUksTUFBQSxFQUFRO1FBQ0osSUFBQSxFQUFNLFVBREY7T0FWWjtNQWFJLFNBQUEsRUFBVyxJQWJmO0tBdEZNO0dBSnFCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmxheW91dHMudGl0bGVMYXlvdXQgPSB7XG4gICAgdHlwZTogXCJ1aS5GcmVlTGF5b3V0XCJcbiAgICBmcmFtZTogWzAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHRdXG4gICAgbXVzaWM6ICQgLT4gJGRhdGFGaWVsZHMuZGF0YWJhc2Uuc3lzdGVtLnRpdGxlTXVzaWNcbiAgICBjb250cm9sczogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5JbWFnZVwiLFxuICAgICAgICAgICAgXCJpbWFnZVwiOiAtPiAkZGF0YUZpZWxkcy5kYXRhYmFzZS5zeXN0ZW0udGl0bGVTY3JlZW4ubmFtZSBvciAnYmctZ2VuZXJpYycsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0XVxuICAgICAgICB9XG4gICAgLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcInVpLlRleHRcIixcbiAgICAgICAgICAgICNpbml0aWFsRm9jdXM6IHRydWUsXG4gICAgICAgICAgICAjZm9jdXNhYmxlOiB0cnVlLFxuICAgICAgICAgICAgI25leHRLZXlPYmplY3Q6IFwibG9hZEdhbWVcIixcbiAgICAgICAgICAgIHN0eWxlczogW1widGl0bGVUZXh0XCJdLFxuICAgICAgICAgICAgdGV4dDogeyBcbiAgICAgICAgICAgICAgICBsY0lkOiBcIjRGRThCMEJENThGRDkxNEJGQTg4MjRFMDcyMjZGQjdGNzk3NFwiLCBcbiAgICAgICAgICAgICAgICBkZWZhdWx0VGV4dDogXCJOZXcgR2FtZVwiIFxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWU6IFtcIjcwJVwiLCBcIjUwJVwiXSxcbiAgICAgICAgICAgIHNpemVUb0ZpdDogdHJ1ZVxuICAgICAgICAgICAgYWN0aW9uOiB7XG4gICAgICAgICAgICAgICAgbmFtZTogXCJuZXdHYW1lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICxcbiAgICAgICAge1xuICAgICAgICAgICAgdHlwZTogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICBpZDogXCJsb2FkR2FtZVwiLFxuICAgICAgICAgICAgI2ZvY3VzYWJsZTogdHJ1ZSxcbiAgICAgICAgICAgICNuZXh0S2V5T2JqZWN0OiBcImdhbGxlcnlcIixcbiAgICAgICAgICAgIHN0eWxlczogW1widGl0bGVUZXh0XCJdXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgbGNJZDogXCIwQjkyRTI3QzZBQUUxNjQ4QUYxQjI4QjJFOTM4OTIzRURERDdcIlxuICAgICAgICAgICAgICAgIGRlZmF1bHRUZXh0OiBcIkxvYWQgR2FtZVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3aXRjaExheW91dFwiIFxuICAgICAgICAgICAgICAgIHBhcmFtczogeyBcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJsb2FkTWVudUxheW91dFwiLCBzYXZlUHJldmlvdXM6IHRydWUsIHNuYXBzaG90OiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWU6IFtcIjcwJSAtIDEwXCIsIFwiNTAlICsgNTBcIl1cbiAgICAgICAgICAgIHNpemVUb0ZpdDogdHJ1ZVxuICAgICAgICB9XG4gICAgLFxuICAgICAgICB7XG4gICAgICAgICAgICB0eXBlOiBcInVpLlRleHRcIixcbiAgICAgICAgICAgIGlkOiBcImdhbGxlcnlcIixcbiAgICAgICAgICAgICNmb2N1c2FibGU6IHRydWUsXG4gICAgICAgICAgICAjbmV4dEtleU9iamVjdDogXCJzZXR0aW5nc1wiLFxuICAgICAgICAgICAgc3R5bGVzOiBbXCJ0aXRsZVRleHRcIl1cbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBsY0lkOiBcIjVEQzIyQUQyOUFFNEM4NEY0OTc5NDcwMjE1QzIzODNBMDYyMFwiXG4gICAgICAgICAgICAgICAgZGVmYXVsdFRleHQ6IFwiR2FsbGVyeVwiXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInN3aXRjaExheW91dFwiXG4gICAgICAgICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiY2dHYWxsZXJ5TGF5b3V0XCJcbiAgICAgICAgICAgICAgICAgICAgc2F2ZVByZXZpb3VzOiB0cnVlXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWU6IFtcIjcwJSAtIDIwXCIsIFwiNTAlICsgMTAwXCJdLFxuICAgICAgICAgICAgc2l6ZVRvRml0OiB0cnVlXG4gICAgICAgIH1cbiAgICAsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgaWQ6IFwic2V0dGluZ3NcIixcbiAgICAgICAgICAgICNmb2N1c2FibGU6IHRydWUsXG4gICAgICAgICAgICAjbmV4dEtleU9iamVjdDogXCJxdWl0XCIsXG4gICAgICAgICAgICBzdHlsZXM6IFtcInRpdGxlVGV4dFwiXSxcbiAgICAgICAgICAgIHRleHQ6IHtcbiAgICAgICAgICAgICAgICBsY0lkOiBcIkQ3N0Q3OTUyNTM1Q0IxNDIyNzU5QjY2OERCRkIzQzRGRDQ0MVwiXG4gICAgICAgICAgICAgICAgZGVmYXVsdFRleHQ6IFwiU2V0dGluZ3NcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWU6IFtcIjcwJSAtIDMwXCIsIFwiNTAlICsgMTUwXCJdXG4gICAgICAgICAgICBzaXplVG9GaXQ6IHRydWVcbiAgICAgICAgICAgIGFjdGlvbjoge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwic3dpdGNoTGF5b3V0XCJcbiAgICAgICAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJzZXR0aW5nc01lbnVMYXlvdXRcIlxuICAgICAgICAgICAgICAgICAgICBzYXZlUHJldmlvdXM6IHRydWVcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAsXG4gICAgICAgIHtcbiAgICAgICAgICAgIHR5cGU6IFwidWkuVGV4dFwiXG4gICAgICAgICAgICBzdHlsZXM6IFtcInRpdGxlVGV4dFwiXSxcbiAgICAgICAgICAgIGlkOiBcInF1aXRcIixcbiAgICAgICAgICAgICNmb2N1c2FibGU6IHRydWUsXG4gICAgICAgICAgICB0ZXh0OiB7XG4gICAgICAgICAgICAgICAgbGNJZDogXCIzNzdBM0Q2QjIyODY0MTRDQUI4QUFBOTM2MDVBNjc1RDNBRDZcIlxuICAgICAgICAgICAgICAgIGRlZmF1bHRUZXh0OiBcIlF1aXRcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZnJhbWU6IFtcIjcwJSAtIDQwXCIsIFwiNTAlICsgMjAwXCJdXG4gICAgICAgICAgICBhY3Rpb246IHtcbiAgICAgICAgICAgICAgICBuYW1lOiBcInF1aXRHYW1lXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHNpemVUb0ZpdDogdHJ1ZVxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Layout_Title_29.js
ui.UiFactory.layouts.cgGalleryLayout = {
  "type": "ui.FreeLayout",
  "orientation": "vertical",
  "preload": {
    "graphics": [
      {
        "path": $(function() {
          return $dataFields.database.cgGallery;
        }),
        "image": $(function() {
          var ref, ref1;
          return (ref = (ref1 = o.thumb) != null ? ref1.name : void 0) != null ? ref : o;
        })
      }, {
        "path": ["locked"],
        "image": $(function() {
          return o;
        })
      }
    ]
  },
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "id": "background",
      "type": "ui.Image",
      "imageHandling": 0,
      "image": "bg-generic",
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      "type": "ui.Button",
      "id": "backButton",
      "params": {
        "text": {
          "lcId": "B0FD4BF121D9E44E7589CDD35869F86F2227",
          "defaultText": "Back"
        },
        "action": {
          "name": "previousLayout"
        }
      },
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45],
      "order": 1
    }, {
      "type": "ui.TitledWindow",
      "components": [
        {
          "type": "Component_HotspotBehavior",
          "params": {}
        }
      ],
      "id": "galleryWindow",
      "frame": [20, 0, 220, Graphics.height],
      "params": {
        "title": "Chapters"
      }
    }, {
      "type": "ui.DataScrollView",
      "frame": [20, 10 + 45, 220, Graphics.height - 45 - 10],
      "params": {
        "spacing": [10, 10],
        "columns": 1,
        "dataSource": $(function() {
          return $dataFields.chapters;
        }),
        "template": {
          "size": [220, 45],
          "descriptor": {
            "type": "ui.Text",
            "formulas": [
              $(function() {
                o.text = $dataFields.chapters[o.index].items.name;
                if (this.onInitialize && o.index === 0) {
                  return o.ui.selected = true;
                }
              })
            ],
            "font": {
              "name": "Times New Roman",
              "italic": true,
              "size": 45
            },
            "style": "selectableText",
            "selectable": true,
            "group": "chapters",
            "frame": [0, 0],
            "sizeToFit": true,
            "action": {
              "event": "onAccept",
              "name": "executeFormulas",
              "params": [
                $(function() {
                  return $scrollView.controls[1].behavior.dataSource = $dataFields.cgGalleryByChapter[$dataFields.chapters[o.index].uid];
                })
              ]
            }
          }
        }
      }
    }, {
      "type": "ui.TitledWindow",
      "components": [
        {
          "type": "Component_HotspotBehavior",
          "params": {}
        }
      ],
      "id": "galleryWindow",
      "frame": [260, 0, gs.UIConstants.CG_GALLERY_CONTENT_WIDTH, Graphics.height],
      "params": {
        "title": {
          "lcId": "A80D12A37EE45448BD2A2695D7C86820AB03",
          "defaultText": "Gallery"
        }
      }
    }, {
      "type": "ui.DataScrollView",
      "chainOrder": 3,
      "id": "scrollView",
      "frame": [260, 10 + 45, gs.UIConstants.CG_GALLERY_CONTENT_WIDTH, Graphics.height - 45 - 10],
      "params": {
        "spacing": [10, 10],
        "columns": Math.floor(gs.UIConstants.CG_GALLERY_CONTENT_WIDTH / 165),
        "dataSource": $(function() {
          return $dataFields.cgGalleryByChapter[$dataFields.chapters[0].uid];
        }),
        "template": {
          "size": [165, 124],
          "descriptor": {
            "type": "ui.FreeLayout",
            "frame": [0, 0],
            "sizeToFit": true,
            "group": "gallery",
            "style": "cgGalleryImage",
            "controls": [
              {
                "type": "ui.Frame",
                "style": "cgGalleryImageFrame",
                "frame": [0, 0, "100%", "100%"],
                "padding": [-16, -16, -16, -16],
                "zIndex": 10,
                "actions": [
                  {
                    "condition": {
                      "field": $(function() {
                        return o.parent.controls[1].image;
                      }),
                      "notEqualTo": $(function() {
                        return 'locked';
                      })
                    },
                    "name": "executeFormulas",
                    "params": [
                      $(function() {
                        return $tempFields.selectedImage = o.parent.data[0].graphic.name;
                      })
                    ]
                  }, {
                    "condition": {
                      "field": $(function() {
                        return o.parent.controls[1].image;
                      }),
                      "notEqualTo": $(function() {
                        return 'locked';
                      })
                    },
                    "name": "switchLayout",
                    "params": {
                      "name": "cgGalleryImageLayout",
                      "savePrevious": true
                    }
                  }
                ]
              }, {
                "type": "ui.Image",
                "frame": [0, 0, 165, 124],
                "fixedSize": true,
                "image": "locked",
                "formulas": [
                  $(function() {
                    if ($dataFields.globalData.cgGallery[o.parent.data[0].index].unlocked) {
                      return o.image = o.parent.data[0].thumb.name;
                    }
                  }), $(function() {
                    if (!$dataFields.globalData.cgGallery[o.parent.data[0].index].unlocked) {
                      return o.image = "locked";
                    }
                  })
                ]
              }
            ]
          }
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Layout_CGGallery_34.js
ui.UiFactory.layouts.cgGalleryImageLayout = {
  "type": "ui.FreeLayout",
  "orientation": "vertical",
  "preload": {
    "graphics": [
      {
        "path": $(function() {
          return [$tempFields.selectedImage];
        }),
        "image": $(function() {
          return o;
        })
      }, {
        "path": ["locked"],
        "image": $(function() {
          return o;
        })
      }
    ]
  },
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.Image",
      "frame": [0, 0],
      "formulas": [
        $(function() {
          return o.image = $tempFields.selectedImage;
        })
      ],
      "action": {
        "name": "executeFormulas",
        "params": [
          $(function() {
            return $backButton.visible = !$backButton.visible;
          })
        ]
      }
    }, {
      "type": "ui.Button",
      "id": "backButton",
      "params": {
        "text": {
          "lcId": "B0FD4BF121D9E44E7589CDD35869F86F2227",
          "defaultText": "Back"
        },
        "action": {
          "name": "previousLayout"
        }
      },
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45],
      "order": 1
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLG9CQUFyQixHQUE0QztFQUN4QyxNQUFBLEVBQVEsZUFEZ0M7RUFFeEMsYUFBQSxFQUFlLFVBRnlCO0VBR3hDLFNBQUEsRUFBVztJQUNQLFVBQUEsRUFBWTtNQUNSO1FBQUUsTUFBQSxFQUFTLENBQUEsQ0FBRSxTQUFBO2lCQUFHLENBQUMsV0FBVyxDQUFDLGFBQWI7UUFBSCxDQUFGLENBQVg7UUFBOEMsT0FBQSxFQUFVLENBQUEsQ0FBRSxTQUFBO2lCQUFHO1FBQUgsQ0FBRixDQUF4RDtPQURRLEVBRVI7UUFBRSxNQUFBLEVBQVEsQ0FBQyxRQUFELENBQVY7UUFBc0IsT0FBQSxFQUFVLENBQUEsQ0FBRSxTQUFBO2lCQUFHO1FBQUgsQ0FBRixDQUFoQztPQUZRO0tBREw7R0FINkI7RUFTeEMsT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBaEIsRUFBdUIsUUFBUSxDQUFDLE1BQWhDLENBVCtCO0VBVXhDLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUZiO01BR0ksVUFBQSxFQUFZO1FBQUMsQ0FBQSxDQUFFLFNBQUE7aUJBQUcsQ0FBQyxDQUFDLEtBQUYsR0FBVSxXQUFXLENBQUM7UUFBekIsQ0FBRixDQUFEO09BSGhCO01BSUksUUFBQSxFQUFVO1FBQUUsTUFBQSxFQUFRLGlCQUFWO1FBQTZCLFFBQUEsRUFBVTtVQUFDLENBQUEsQ0FBRSxTQUFBO21CQUFHLFdBQVcsQ0FBQyxPQUFaLEdBQXNCLENBQUMsV0FBVyxDQUFDO1VBQXRDLENBQUYsQ0FBRDtTQUF2QztPQUpkO0tBRFEsRUFPUjtNQUNJLE1BQUEsRUFBUSxXQURaO01BRUksSUFBQSxFQUFNLFlBRlY7TUFHSSxRQUFBLEVBQVU7UUFBRSxNQUFBLEVBQVE7VUFBRSxNQUFBLEVBQVEsc0NBQVY7VUFBa0QsYUFBQSxFQUFlLE1BQWpFO1NBQVY7UUFBcUYsUUFBQSxFQUFVO1VBQUUsTUFBQSxFQUFRLGdCQUFWO1NBQS9GO09BSGQ7TUFJSSxPQUFBLEVBQVMsQ0FBQyxRQUFRLENBQUMsS0FBVCxHQUFpQixHQUFsQixFQUF1QixRQUFRLENBQUMsTUFBVCxHQUFrQixFQUF6QyxFQUE2QyxHQUE3QyxFQUFrRCxFQUFsRCxDQUpiO01BS0ksT0FBQSxFQUFTLENBTGI7S0FQUTtHQVY0QiIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5sYXlvdXRzLmNnR2FsbGVyeUltYWdlTGF5b3V0ID0ge1xuICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICBcIm9yaWVudGF0aW9uXCI6IFwidmVydGljYWxcIixcbiAgICBcInByZWxvYWRcIjoge1xuICAgICAgICBcImdyYXBoaWNzXCI6IFtcbiAgICAgICAgICAgIHsgXCJwYXRoXCI6ICgkIC0+IFskdGVtcEZpZWxkcy5zZWxlY3RlZEltYWdlXSksIFwiaW1hZ2VcIjogKCQgLT4gbyl9LFxuICAgICAgICAgICAgeyBcInBhdGhcIjogW1wibG9ja2VkXCJdLCBcImltYWdlXCI6ICgkIC0+IG8pfVxuICAgICAgICBdXG4gICAgfSxcbiAgICBcImZyYW1lXCI6IFswLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0XSxcbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDBdLFxuICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiBbJCAtPiBvLmltYWdlID0gJHRlbXBGaWVsZHMuc2VsZWN0ZWRJbWFnZV0sXG4gICAgICAgICAgICBcImFjdGlvblwiOiB7IFwibmFtZVwiOiBcImV4ZWN1dGVGb3JtdWxhc1wiLCBcInBhcmFtc1wiOiBbJCAtPiAkYmFja0J1dHRvbi52aXNpYmxlID0gISRiYWNrQnV0dG9uLnZpc2libGVdIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuQnV0dG9uXCIsXG4gICAgICAgICAgICBcImlkXCI6IFwiYmFja0J1dHRvblwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcInRleHRcIjogeyBcImxjSWRcIjogXCJCMEZENEJGMTIxRDlFNDRFNzU4OUNERDM1ODY5Rjg2RjIyMjdcIiwgXCJkZWZhdWx0VGV4dFwiOiBcIkJhY2tcIiB9LCBcImFjdGlvblwiOiB7IFwibmFtZVwiOiBcInByZXZpb3VzTGF5b3V0XCIgfSB9LFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbR3JhcGhpY3Mud2lkdGggLSAxNzAsIEdyYXBoaWNzLmhlaWdodCAtIDY1LCAxNTAsIDQ1XSxcbiAgICAgICAgICAgIFwib3JkZXJcIjogMVxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Layout_CGGalleryEntry_42.js
ui.UiFactory.layouts.settingsMenuLayout = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "executeFieldFormulas": true,
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.menuBackground.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      "type": "ui.StackLayout",
      "orientation": "vertical",
      "sizeToFit": true,
      "alignmentX": "center",
      "alignmentY": "center",
      "controls": [
        {
          "type": "ui.Button",
          "action": {
            "name": "switchLayout",
            "params": {
              "name": "settingsGeneral",
              "savePrevious": true
            }
          },
          "params": {
            "text": {
              "lcId": "149D0E4B8AF8574E5A8BF574FD9A9590B69A",
              "defaultText": "General"
            }
          },
          "frame": [0, 0, 300, 55],
          "margin": [0, 0, 0, 20]
        }, {
          "type": "ui.Button",
          "id": "message",
          "params": {
            "text": {
              "lcId": "6683560332F9274AEE1B5D96FCA020F57DDE",
              "defaultText": "Message"
            },
            "action": {
              "event": "onMouseClick",
              "name": "switchLayout",
              "params": {
                "name": "settingsMessage",
                "savePrevious": true
              }
            }
          },
          "frame": [0, 0, 300, 55],
          "margin": [0, 0, 0, 20]
        }, {
          "type": "ui.Button",
          "params": {
            "text": {
              "lcId": "92FDB732611153400B595AD7D92206CDC592",
              "defaultText": "Audio"
            },
            "action": {
              "event": "onMouseClick",
              "name": "switchLayout",
              "params": {
                "name": "settingsAudio",
                "savePrevious": true
              }
            }
          },
          "frame": [0, 0, 300, 55],
          "margin": [0, 0, 0, 20]
        }, {
          "type": "ui.Button",
          "formulas": [
            $(function() {
              return o.visible = $tempFields.inGame;
            })
          ],
          "params": {
            "text": {
              "lcId": "A6EE5D6732DD454DDE988B569929C5F2DA62",
              "defaultText": "Back to Title"
            },
            "action": {
              "name": "createControl",
              "params": {
                "descriptor": {
                  "id": "confirmationDialog",
                  "type": "ui.ConfirmationDialog",
                  "zIndex": 90000,
                  "params": {
                    "message": {
                      "lcId": "ABC85CC3669B83481309BDF44B98EF11B59B",
                      "defaultText": "Do you really want to exit?"
                    },
                    "acceptActions": [
                      {
                        "name": "switchLayout",
                        "params": {
                          "name": "titleLayout",
                          "clear": true
                        }
                      }
                    ],
                    "rejectActions": [
                      {
                        "name": "disposeControl",
                        "params": $(function() {
                          return 'confirmationDialog';
                        })
                      }
                    ]
                  }
                }
              }
            }
          },
          "frame": [0, 0, 300, 55],
          "margin": [0, 0, 0, 20]
        }
      ]
    }, {
      "type": "ui.BackButton",
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45]
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFyQixHQUEwQztFQUN0QyxNQUFBLEVBQVEsZUFEOEI7RUFFdEMsT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBaEIsRUFBdUIsUUFBUSxDQUFDLE1BQWhDLENBRjZCO0VBR3RDLFVBQUEsRUFBWTtJQUNSO01BQ0ksc0JBQUEsRUFBd0IsSUFENUI7TUFFSSxNQUFBLEVBQVEsVUFGWjtNQUdJLE9BQUEsRUFBUyxTQUFBO2VBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQTNDLElBQW1EO01BQXRELENBSGI7TUFJSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FKYjtLQURRLEVBT1I7TUFDSSxNQUFBLEVBQVEsZ0JBRFo7TUFFSSxhQUFBLEVBQWUsVUFGbkI7TUFHSSxXQUFBLEVBQWEsSUFIakI7TUFJSSxZQUFBLEVBQWMsUUFKbEI7TUFLSSxZQUFBLEVBQWMsUUFMbEI7TUFNSSxVQUFBLEVBQVk7UUFDUjtVQUNJLE1BQUEsRUFBUSxXQURaO1VBRUksUUFBQSxFQUFVO1lBQUUsTUFBQSxFQUFRLGNBQVY7WUFBMEIsUUFBQSxFQUFVO2NBQUUsTUFBQSxFQUFRLGlCQUFWO2NBQTZCLGNBQUEsRUFBZ0IsSUFBN0M7YUFBcEM7V0FGZDtVQUdJLFFBQUEsRUFBVTtZQUFFLE1BQUEsRUFBUTtjQUFFLE1BQUEsRUFBUSxzQ0FBVjtjQUFrRCxhQUFBLEVBQWUsU0FBakU7YUFBVjtXQUhkO1VBSUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxHQUFQLEVBQVksRUFBWixDQUpiO1VBS0ksUUFBQSxFQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsRUFBVixDQUxkO1NBRFEsRUFRUjtVQUNJLE1BQUEsRUFBUSxXQURaO1VBRUksSUFBQSxFQUFNLFNBRlY7VUFHSSxRQUFBLEVBQVU7WUFBRSxNQUFBLEVBQVE7Y0FBRSxNQUFBLEVBQVEsc0NBQVY7Y0FBa0QsYUFBQSxFQUFlLFNBQWpFO2FBQVY7WUFBd0YsUUFBQSxFQUFVO2NBQUUsT0FBQSxFQUFTLGNBQVg7Y0FBMkIsTUFBQSxFQUFRLGNBQW5DO2NBQW1ELFFBQUEsRUFBVTtnQkFBRSxNQUFBLEVBQVEsaUJBQVY7Z0JBQTZCLGNBQUEsRUFBZ0IsSUFBN0M7ZUFBN0Q7YUFBbEc7V0FIZDtVQUlJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sR0FBUCxFQUFZLEVBQVosQ0FKYjtVQUtJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLEVBQVYsQ0FMZDtTQVJRLEVBZVI7VUFDSSxNQUFBLEVBQVEsV0FEWjtVQUVJLFFBQUEsRUFBVTtZQUFFLE1BQUEsRUFBUTtjQUFFLE1BQUEsRUFBUSxzQ0FBVjtjQUFrRCxhQUFBLEVBQWUsT0FBakU7YUFBVjtZQUFzRixRQUFBLEVBQVU7Y0FBRSxPQUFBLEVBQVMsY0FBWDtjQUEyQixNQUFBLEVBQVEsY0FBbkM7Y0FBbUQsUUFBQSxFQUFVO2dCQUFFLE1BQUEsRUFBUSxlQUFWO2dCQUEyQixjQUFBLEVBQWdCLElBQTNDO2VBQTdEO2FBQWhHO1dBRmQ7VUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEdBQVAsRUFBWSxFQUFaLENBSGI7VUFJSSxRQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLENBSmQ7U0FmUSxFQXFCUjtVQUNJLE1BQUEsRUFBUSxXQURaO1VBRUksVUFBQSxFQUFZO1lBQUMsQ0FBQSxDQUFFLFNBQUE7cUJBQUcsQ0FBQyxDQUFDLE9BQUYsR0FBWSxXQUFXLENBQUM7WUFBM0IsQ0FBRixDQUFEO1dBRmhCO1VBR0ksUUFBQSxFQUFVO1lBQ04sTUFBQSxFQUFRO2NBQUUsTUFBQSxFQUFRLHNDQUFWO2NBQWtELGFBQUEsRUFBZSxlQUFqRTthQURGO1lBRU4sUUFBQSxFQUFVO2NBQUUsTUFBQSxFQUFRLGVBQVY7Y0FBMkIsUUFBQSxFQUFVO2dCQUFFLFlBQUEsRUFBYztrQkFDM0QsSUFBQSxFQUFNLG9CQURxRDtrQkFFM0QsTUFBQSxFQUFRLHVCQUZtRDtrQkFHM0QsUUFBQSxFQUFVLEtBSGlEO2tCQUkzRCxRQUFBLEVBQVU7b0JBQ04sU0FBQSxFQUFXO3NCQUFFLE1BQUEsRUFBUSxzQ0FBVjtzQkFBa0QsYUFBQSxFQUFlLDZCQUFqRTtxQkFETDtvQkFFTixlQUFBLEVBQWlCO3NCQUFDO3dCQUFDLE1BQUEsRUFBUSxjQUFUO3dCQUF5QixRQUFBLEVBQVU7MEJBQUUsTUFBQSxFQUFRLGFBQVY7MEJBQXlCLE9BQUEsRUFBUyxJQUFsQzt5QkFBbkM7dUJBQUQ7cUJBRlg7b0JBR04sZUFBQSxFQUFpQjtzQkFBQzt3QkFBQyxNQUFBLEVBQU8sZ0JBQVI7d0JBQXlCLFFBQUEsRUFBVSxDQUFBLENBQUUsU0FBQTtpQ0FBRzt3QkFBSCxDQUFGLENBQW5DO3VCQUFEO3FCQUhYO21CQUppRDtpQkFBaEI7ZUFBckM7YUFGSjtXQUhkO1VBZUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxHQUFQLEVBQVksRUFBWixDQWZiO1VBZ0JJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLEVBQVYsQ0FoQmQ7U0FyQlE7T0FOaEI7S0FQUSxFQXNEUjtNQUNJLE1BQUEsRUFBUSxlQURaO01BRUksT0FBQSxFQUFTLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBaUIsR0FBbEIsRUFBdUIsUUFBUSxDQUFDLE1BQVQsR0FBa0IsRUFBekMsRUFBNkMsR0FBN0MsRUFBa0QsRUFBbEQsQ0FGYjtLQXREUTtHQUgwQiIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5sYXlvdXRzLnNldHRpbmdzTWVudUxheW91dCA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF0sXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhlY3V0ZUZpZWxkRm9ybXVsYXNcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkltYWdlXCIsXG4gICAgICAgICAgICBcImltYWdlXCI6IC0+ICRkYXRhRmllbGRzLmRhdGFiYXNlLnN5c3RlbS5tZW51QmFja2dyb3VuZC5uYW1lIG9yICdiZy1nZW5lcmljJyxcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHRdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlN0YWNrTGF5b3V0XCIsXG4gICAgICAgICAgICBcIm9yaWVudGF0aW9uXCI6IFwidmVydGljYWxcIixcbiAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgICAgICAgICBcImFsaWdubWVudFhcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5CdXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgXCJhY3Rpb25cIjogeyBcIm5hbWVcIjogXCJzd2l0Y2hMYXlvdXRcIiwgXCJwYXJhbXNcIjogeyBcIm5hbWVcIjogXCJzZXR0aW5nc0dlbmVyYWxcIiwgXCJzYXZlUHJldmlvdXNcIjogdHJ1ZSB9IH0sXG4gICAgICAgICAgICAgICAgICAgIFwicGFyYW1zXCI6IHsgXCJ0ZXh0XCI6IHsgXCJsY0lkXCI6IFwiMTQ5RDBFNEI4QUY4NTc0RTVBOEJGNTc0RkQ5QTk1OTBCNjlBXCIsIFwiZGVmYXVsdFRleHRcIjogXCJHZW5lcmFsXCIgfSAgfSxcbiAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgMzAwLCA1NV0sXG4gICAgICAgICAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAyMF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuQnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiaWRcIjogXCJtZXNzYWdlXCIsXG4gICAgICAgICAgICAgICAgICAgIFwicGFyYW1zXCI6IHsgXCJ0ZXh0XCI6IHsgXCJsY0lkXCI6IFwiNjY4MzU2MDMzMkY5Mjc0QUVFMUI1RDk2RkNBMDIwRjU3RERFXCIsIFwiZGVmYXVsdFRleHRcIjogXCJNZXNzYWdlXCIgfSwgXCJhY3Rpb25cIjogeyBcImV2ZW50XCI6IFwib25Nb3VzZUNsaWNrXCIsIFwibmFtZVwiOiBcInN3aXRjaExheW91dFwiLCBcInBhcmFtc1wiOiB7IFwibmFtZVwiOiBcInNldHRpbmdzTWVzc2FnZVwiLCBcInNhdmVQcmV2aW91c1wiOiB0cnVlIH0gfSB9LFxuICAgICAgICAgICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCAzMDAsIDU1XSxcbiAgICAgICAgICAgICAgICAgICAgXCJtYXJnaW5cIjogWzAsIDAsIDAsIDIwXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5CdXR0b25cIixcbiAgICAgICAgICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcInRleHRcIjogeyBcImxjSWRcIjogXCI5MkZEQjczMjYxMTE1MzQwMEI1OTVBRDdEOTIyMDZDREM1OTJcIiwgXCJkZWZhdWx0VGV4dFwiOiBcIkF1ZGlvXCIgfSwgXCJhY3Rpb25cIjogeyBcImV2ZW50XCI6IFwib25Nb3VzZUNsaWNrXCIsIFwibmFtZVwiOiBcInN3aXRjaExheW91dFwiLCBcInBhcmFtc1wiOiB7IFwibmFtZVwiOiBcInNldHRpbmdzQXVkaW9cIiwgXCJzYXZlUHJldmlvdXNcIjogdHJ1ZSB9IH0gfSxcbiAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgMzAwLCA1NV0sXG4gICAgICAgICAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAyMF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuQnV0dG9uXCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogWyQgLT4gby52aXNpYmxlID0gJHRlbXBGaWVsZHMuaW5HYW1lXVxuICAgICAgICAgICAgICAgICAgICBcInBhcmFtc1wiOiB7IFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IHsgXCJsY0lkXCI6IFwiQTZFRTVENjczMkRENDU0RERFOTg4QjU2OTkyOUM1RjJEQTYyXCIsIFwiZGVmYXVsdFRleHRcIjogXCJCYWNrIHRvIFRpdGxlXCIgfSwgXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjdGlvblwiOiB7IFwibmFtZVwiOiBcImNyZWF0ZUNvbnRyb2xcIiwgXCJwYXJhbXNcIjogeyBcImRlc2NyaXB0b3JcIjogeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiY29uZmlybWF0aW9uRGlhbG9nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuQ29uZmlybWF0aW9uRGlhbG9nXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ6SW5kZXhcIjogOTAwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJtZXNzYWdlXCI6IHsgXCJsY0lkXCI6IFwiQUJDODVDQzM2NjlCODM0ODEzMDlCREY0NEI5OEVGMTFCNTlCXCIsIFwiZGVmYXVsdFRleHRcIjogXCJEbyB5b3UgcmVhbGx5IHdhbnQgdG8gZXhpdD9cIiB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFjY2VwdEFjdGlvbnNcIjogW3tcIm5hbWVcIjogXCJzd2l0Y2hMYXlvdXRcIiwgXCJwYXJhbXNcIjogeyBcIm5hbWVcIjogXCJ0aXRsZUxheW91dFwiLCBcImNsZWFyXCI6IHRydWUgfSB9XSAsIFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInJlamVjdEFjdGlvbnNcIjogW3tcIm5hbWVcIjpcImRpc3Bvc2VDb250cm9sXCIsXCJwYXJhbXNcIjooJCAtPiAnY29uZmlybWF0aW9uRGlhbG9nJyl9XX1cbiAgICAgICAgICAgICAgICAgICAgICAgIH0gfSB9XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIDMwMCwgNTVdLFxuICAgICAgICAgICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgMCwgMjBdXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5CYWNrQnV0dG9uXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFtHcmFwaGljcy53aWR0aCAtIDE3MCwgR3JhcGhpY3MuaGVpZ2h0IC0gNjUsIDE1MCwgNDVdXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Layout_SettingsMenu_54.js
ui.UiFactory.layouts.settingsGeneral = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.menuBackground.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      "type": "ui.BackButton",
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45]
    }, {
      "type": "ui.TitledWindow",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 0, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W, Graphics.height - 70],
      "params": {
        "title": {
          "lcId": "4D3EC62F007AF64B0C68E8081C003D041370",
          "defaultText": "General Settings"
        }
      }
    }, {
      "type": "ui.VerticalScrollView",
      "id": "settingsScrollView",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 45, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W, Graphics.height - 45 - 10 - 70],
      "params": {
        "dataField": 1,
        "template": {
          "type": "ui.StackLayout",
          "orientation": "vertical",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.SettingsOptionSet",
              "params": {
                "label": {
                  "lcId": "2BB9D02557CFE84BAE8B7401501783BA6FBF",
                  "defaultText": "Display Mode"
                },
                "write": $(function(v) {
                  return $dataFields.settings.fullScreen = v;
                }),
                "read": $(function() {
                  return $dataFields.settings.fullScreen;
                }),
                "group": "displayMode",
                "onLabel": {
                  "lcId": "06C8957A5B6A0949DD28B96486586E93FCD4",
                  "defaultText": "Fullscreen"
                },
                "offLabel": {
                  "lcId": "C5BB4D477FDFE54D2B5A0473BEC61239C219",
                  "defaultText": "Windowed"
                },
                "onAction": {
                  "name": "enterFullScreen",
                  "params": {}
                },
                "offAction": {
                  "name": "leaveFullScreen",
                  "params": {}
                }
              }
            }, {
              "type": "ui.SettingsOptionSet",
              "params": {
                "label": {
                  "lcId": "1C7C50BC434287404B392232B960C5701039",
                  "defaultText": "Screen Adjustment"
                },
                "write": $(function(v) {
                  return $dataFields.settings.aspectRatio = v;
                }),
                "read": $(function() {
                  return $dataFields.settings.aspectRatio;
                }),
                "group": "screenAdjust",
                "onLabel": {
                  "lcId": "33B51B1130853144E4888263A53B022C4ADB",
                  "defaultText": "Stretch"
                },
                "offLabel": {
                  "lcId": "A583EEF38BB725426A6AB8965DCCDDED2982",
                  "defaultText": "Ratio"
                },
                "onAction": {
                  "name": "adjustAspectRatio",
                  "params": true
                },
                "offAction": {
                  "name": "adjustAspectRatio",
                  "params": false
                }
              }
            }, {
              "type": "ui.SettingsOptionSet",
              "params": {
                "label": "Confirmation",
                "onLabel": {
                  "lcId": "DB87E66F8299B549E56B2F048040DA406BCC",
                  "defaultText": "On"
                },
                "offLabel": {
                  "lcId": "2D23328A3B4F80462E7AB2F8CD3996B20665",
                  "defaultText": "Off"
                },
                "group": "confirmation",
                "write": $(function(v) {
                  return $dataFields.settings.confirmation = v;
                }),
                "read": $(function() {
                  return $dataFields.settings.confirmation;
                })
              }
            }
          ]
        }
      }
    }, {
      "type": "ui.ConfirmationButton",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, Graphics.height - 60, 300, 45],
      "params": {
        "confirmationMessage": {
          "lcId": "92D58F0C1B58A94ADF791B81E9479CF2A27D",
          "defaultText": "Do you really want to reset global data?"
        },
        "text": {
          "lcId": "4272A0BC5880A64DA49AEBD4D60905347726",
          "defaultText": "Reset Global Data"
        },
        "acceptActions": [
          {
            "name": "resetGlobalData",
            "params": {
              "name": "titleLayout"
            }
          }, {
            "name": "disposeControl",
            "params": $(function() {
              return 'confirmationDialog';
            })
          }
        ],
        "rejectActions": [
          {
            "name": "disposeControl",
            "params": $(function() {
              return 'confirmationDialog';
            })
          }
        ]
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Layout_SettingsGeneral_66.js
ui.UiFactory.layouts.settingsMessage = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "executeFieldFormulas": true,
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.menuBackground.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      "type": "ui.BackButton",
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45]
    }, {
      "type": "ui.TitledWindow",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 0, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W, Graphics.height],
      "params": {
        "title": {
          "lcId": "B5E0981F6D6A9240653B23A0D09B3383048E",
          "defaultText": "Message Settings"
        }
      }
    }, {
      "type": "ui.VerticalScrollView",
      "id": "settingsScrollView",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 45, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W, Graphics.height - 45 - 10],
      "params": {
        "dataField": 1,
        "template": {
          "type": "ui.StackLayout",
          "orientation": "vertical",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.StackLayout",
              "orientation": "vertical",
              "sizeToFit": true,
              "controls": [
                {
                  "type": "ui.SettingsStepSlider",
                  "params": {
                    "label": {
                      "lcId": "179347604CAF0640628824725774FFBD07B6",
                      "defaultText": "Message Speed"
                    },
                    "write": $(function(v) {
                      return $dataFields.settings.messageSpeed = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.messageSpeed;
                    }),
                    "data": [
                      {
                        "lcId": "41A878A74A390447FB9AB956122AD13373D1",
                        "defaultText": "Slowest"
                      }, {
                        "lcId": "3D840F7D30D472419059F342ACF0C846B0ED",
                        "defaultText": "Slow"
                      }, {
                        "lcId": "12C3DA314B22614AC67890D37019784EDFA9",
                        "defaultText": "Normal"
                      }, {
                        "lcId": "889AFB7C545AE8477889E11480BE6871ECA1",
                        "defaultText": "Fast"
                      }, {
                        "lcId": "DE5E3CF01CDA784C378B428533F4D6E03C96",
                        "defaultText": "Fastest"
                      }
                    ]
                  }
                }, {
                  "type": "ui.SettingsOptionSet",
                  "params": {
                    "label": {
                      "lcId": "ED439B0C58174541F17B79280D5763C674AB",
                      "defaultText": "Auto-Message"
                    },
                    "group": "autoMessage",
                    "write": $(function(v) {
                      return $dataFields.settings.autoMessage.enabled = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.autoMessage.enabled;
                    })
                  }
                }, {
                  "type": "ui.SettingsStepSlider",
                  "params": {
                    "label": {
                      "lcId": "D073E5F78F4FF8423249BBC5E61064361B09",
                      "defaultText": "Auto-Message Duration"
                    },
                    "group": "autoMessageDuration",
                    "write": $(function(v) {
                      return $dataFields.settings.autoMessage.time = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.autoMessage.time;
                    }),
                    "data": [
                      {
                        "lcId": "4FE0B4B30E8789487D7B88D2839ECBCE5C70",
                        "defaultText": "1 Second"
                      }, {
                        "lcId": "1C20A916753BC840952864867489B576DBD5",
                        "defaultText": "2 Seconds"
                      }, {
                        "lcId": "FBF01A7B3C1BB2489F2B2D0581A257A102E6",
                        "defaultText": "3 Seconds"
                      }, {
                        "lcId": "DE0D08A67E84B1476E4A1B604CB64E4BC942",
                        "defaultText": "4 Seconds"
                      }, {
                        "lcId": "964CF20A55D2F3404B389B67AAF1CDA51656",
                        "defaultText": "5 Seconds"
                      }
                    ]
                  }
                }, {
                  "type": "ui.SettingsOptionSet",
                  "params": {
                    "label": {
                      "lcId": "994D4B5C1BFA5445385B8AE32706997132F1",
                      "defaultText": {
                        "lcId": "994D4B5C1BFA5445385B8AE32706997132F1",
                        "defaultText": "Wait for Voice"
                      }
                    },
                    "group": "waitForVoice",
                    "write": $(function(v) {
                      return $dataFields.settings.autoMessage.waitForVoice = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.autoMessage.waitForVoice;
                    })
                  }
                }, {
                  "type": "ui.SettingsOptionSet",
                  "params": {
                    "label": {
                      "lcId": "BF3E948519A9084E721AF585C8C7D51235A7",
                      "defaultText": {
                        "lcId": "BF3E948519A9084E721AF585C8C7D51235A7",
                        "defaultText": "Stop on Click"
                      }
                    },
                    "group": "stopOnAction",
                    "write": $(function(v) {
                      return $dataFields.settings.autoMessage.stopOnAction = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.autoMessage.stopOnAction;
                    })
                  }
                }, {
                  "type": "ui.SettingsOptionSet",
                  "params": {
                    "label": {
                      "lcId": "3538F7E582FC20467E7947F77FB45789115E",
                      "defaultText": {
                        "lcId": "3538F7E582FC20467E7947F77FB45789115E",
                        "defaultText": "Time Message to Voice"
                      }
                    },
                    "group": "timeMessageToVoice",
                    "write": $(function(v) {
                      return $dataFields.settings.timeMessageToVoice = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.timeMessageToVoice;
                    })
                  }
                }
              ]
            }, {
              "type": "ui.StackLayout",
              "orientation": "vertical",
              "sizeToFit": true,
              "controls": [
                {
                  "type": "ui.StackLayout",
                  "orientation": "vertical",
                  "sizeToFit": true,
                  "controls": [
                    {
                      "type": "ui.Text",
                      "text": "Skip",
                      "styles": ["regularUIText"],
                      "frame": [0, 0, 220, 37],
                      "margin": [10, 0, 0, 0],
                      "alignmentY": "top"
                    }, {
                      "type": "ui.StackLayout",
                      "sizeToFit": true,
                      "controls": [
                        {
                          "type": "ui.OptionButton",
                          "params": {
                            "label": {
                              "lcId": "C138CE3C9564C54707492AA264690B5BBB90",
                              "defaultText": "Videos"
                            },
                            "write": $(function(v) {
                              return $dataFields.settings.allowVideoSkip = v;
                            }),
                            "read": $(function() {
                              return $dataFields.settings.allowVideoSkip;
                            })
                          }
                        }, {
                          "type": "ui.OptionButton",
                          "params": {
                            "label": {
                              "lcId": "E4A4BA053854774F582852D558E4E5C23AC5",
                              "defaultText": "Voices"
                            },
                            "write": $(function(v) {
                              return $dataFields.settings.skipVoiceOnAction = v;
                            }),
                            "read": $(function() {
                              return $dataFields.settings.skipVoiceOnAction;
                            })
                          }
                        }
                      ]
                    }, {
                      "type": "ui.StackLayout",
                      "sizeToFit": true,
                      "controls": [
                        {
                          "type": "ui.OptionButton",
                          "params": {
                            "label": {
                              "lcId": "469C50C92465724C9F48BD86BB799E781F3C",
                              "defaultText": "Unread"
                            },
                            "write": $(function(v) {
                              return $dataFields.settings.allowSkipUnreadMessages = v;
                            }),
                            "read": $(function() {
                              return $dataFields.settings.allowSkipUnreadMessages;
                            })
                          }
                        }, {
                          "type": "ui.OptionButton",
                          "params": {
                            "label": {
                              "lcId": "F84B92944EA3354A49184BF155F42220FE9B",
                              "defaultText": "Choices"
                            },
                            "write": $(function(v) {
                              return $dataFields.settings.allowChoiceSkip = v;
                            }),
                            "read": $(function() {
                              return $dataFields.settings.allowChoiceSkip;
                            })
                          }
                        }
                      ]
                    }
                  ]
                }
              ]
            }
          ]
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Layout_SettingsMessage_85.js
ui.UiFactory.layouts.settingsAudio = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.Image",
      "executeFieldFormulas": true,
      "image": function() {
        return $dataFields.database.system.menuBackground.name || 'bg-generic';
      },
      "components": [
        {
          "type": "Component_HotspotBehavior",
          "params": {
            "actionButton": "right"
          }
        }
      ],
      "frame": [0, 0, Graphics.width, Graphics.height],
      "actions": [
        {
          "event": "onCancel",
          "name": "saveSettings",
          "params": {}
        }, {
          "event": "onCancel",
          "name": "previousLayout",
          "params": {}
        }
      ]
    }, {
      "type": "ui.BackButton",
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45]
    }, {
      "type": "ui.TitledWindow",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 0, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W, Graphics.height],
      "params": {
        "title": {
          "lcId": "9EDC6A1760DE464C3469A5B77772305ACB56",
          "defaultText": "Audio Settings"
        }
      }
    }, {
      "type": "ui.VerticalScrollView",
      "id": "settingsScrollView",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 45, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W, Graphics.height - 45 - 10],
      "params": {
        "dataField": 1,
        "template": {
          "type": "ui.StackLayout",
          "orientation": "vertical",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.Text",
              "styles": ["windowCategoryUIText"],
              "margin": [10, 5, 0, 0],
              "text": {
                "lcId": "26260DB310D5D540721AF635B495750C03A5",
                "defaultText": "Audio"
              },
              "sizeToFit": true,
              "frame": [0, 0]
            }, {
              "type": "ui.StackLayout",
              "orientation": "vertical",
              "margin": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_LABEL_W, 0, 0, 0],
              "sizeToFit": true,
              "id": "volumeControl",
              "controls": [
                {
                  "type": "ui.SettingsMenuSlider",
                  "params": {
                    "id": "bgmVolume",
                    "label": {
                      "lcId": "DBE389A484EE65464E583082C1A3A9410B6C",
                      "defaultText": "Music"
                    },
                    "write": $(function(v) {
                      return $dataFields.settings.bgmVolume = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.bgmVolume;
                    })
                  }
                }, {
                  "type": "ui.SettingsMenuSlider",
                  "params": {
                    "id": "seVolume",
                    "label": {
                      "lcId": "64F490CD4547394ADA4B4D67693D24289F4B",
                      "defaultText": "Sound Effects"
                    },
                    "write": $(function(v) {
                      return $dataFields.settings.seVolume = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.seVolume;
                    })
                  }
                }, {
                  "type": "ui.SettingsMenuSlider",
                  "params": {
                    "id": "voiceVolume",
                    "label": {
                      "lcId": "4BA0665E3B4D05412D4B81373A88DB3543EB",
                      "defaultText": "Voice"
                    },
                    "write": $(function(v) {
                      return $dataFields.settings.voiceVolume = v;
                    }),
                    "read": $(function() {
                      return $dataFields.settings.voiceVolume;
                    })
                  }
                }
              ]
            }, {
              "type": "ui.Text",
              "styles": ["windowCategoryUIText"],
              "margin": [10, 5, 0, 0],
              "text": {
                "lcId": "DD4C5C8987E8B7493A2B4139B342CA461DC9",
                "defaultText": "Voices"
              },
              "sizeToFit": true,
              "frame": [0, 0]
            }, {
              "type": "ui.StackLayout",
              "orientation": "vertical",
              "margin": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_LABEL_W, 0, 0, 0],
              "sizeToFit": true,
              "dataField": $(function() {
                return $dataFields.database.characters;
              }),
              "template": {
                "type": "ui.StackLayout",
                "orientation": "vertical",
                "sizeToFit": true,
                "controls": [
                  {
                    "type": "ui.Text",
                    "frame": [0, 0],
                    "sizeToFit": true,
                    "text": "Anna",
                    "styles": ["regularUIText"],
                    "margin": [10, 0, 0, 0],
                    "formulas": [
                      $(function() {
                        return o.text = lcs($dataFields.database.characters[o.parent.index].name);
                      })
                    ]
                  }, {
                    "type": "ui.Slider",
                    "margin": [10, 0, 0, 0],
                    "frame": [100, 0, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W - gs.UIConstants.LAYOUT_SETTINGS_WINDOW_LABEL_W - 30, gs.UIConstants.OPTION_BUTTON_H],
                    "params": {
                      "actions": [],
                      "max": 100,
                      "write": $(function(v) {
                        return $dataFields.settings.voicesByCharacter[o.parent.parent.index] = v;
                      }),
                      "read": $(function() {
                        return $dataFields.settings.voicesByCharacter[o.parent.parent.index];
                      })
                    }
                  }
                ]
              }
            }
          ]
        }
      }
    }, {
      "type": "ui.Panel",
      "frame": [gs.UIConstants.LAYOUT_SETTINGS_WINDOW_X, 45, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_LABEL_W, Graphics.height - 45],
      "style": "windowSubPanel"
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Layout_SettingsAudio_86.js
ui.UiFactory.layouts.saveMenuLayout = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "executeFieldFormulas": true,
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.menuBackground.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height],
      "action": {
        "event": "onCancel",
        "name": "previousLayout",
        "params": {}
      }
    }, {
      "type": "ui.BackButton",
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45]
    }, {
      "type": "ui.TitledWindow",
      "frame": [20, 0, Math.floor((Graphics.width - 200) / 420) * 420, Graphics.height],
      "params": {
        "title": {
          "lcId": "17B8950C477FA042C418D7A591445017623C",
          "defaultText": "Save Game"
        }
      }
    }, {
      "type": "ui.DataScrollView",
      "frame": [20, 45, Math.floor((Graphics.width - 200) / 420) * 420, Graphics.height - 45],
      "params": {
        "spacing": [10, 10],
        "columns": Math.floor((Graphics.width - 200) / 420),
        "dataSource": $(function() {
          return $dataFields.saveGameSlots;
        }),
        "template": {
          "descriptor": {
            "type": "ui.SaveGameSlot",
            "params": {
              "actions": [
                {
                  "name": "saveGame",
                  "params": {
                    "slot": $(function() {
                      return o.parent.index;
                    })
                  }
                }, {
                  "name": "fullRefreshObject",
                  "params": $(function() {
                    return o.parent;
                  })
                }
              ]
            }
          }
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGNBQXJCLEdBQXNDO0VBQ2xDLE1BQUEsRUFBUSxlQUQwQjtFQUVsQyxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FGeUI7RUFHbEMsVUFBQSxFQUFZO0lBQ1I7TUFDSSxzQkFBQSxFQUF3QixJQUQ1QjtNQUVJLE1BQUEsRUFBUSxVQUZaO01BR0ksT0FBQSxFQUFTLFNBQUE7ZUFBRyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBM0MsSUFBbUQ7TUFBdEQsQ0FIYjtNQUlJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sUUFBUSxDQUFDLEtBQWhCLEVBQXVCLFFBQVEsQ0FBQyxNQUFoQyxDQUpiO01BS0ksUUFBQSxFQUFVO1FBQUUsT0FBQSxFQUFTLFVBQVg7UUFBdUIsTUFBQSxFQUFRLGdCQUEvQjtRQUFpRCxRQUFBLEVBQVUsRUFBM0Q7T0FMZDtLQURRLEVBUVI7TUFDSSxNQUFBLEVBQVEsZUFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFULEdBQWlCLEdBQWxCLEVBQXVCLFFBQVEsQ0FBQyxNQUFULEdBQWtCLEVBQXpDLEVBQTZDLEdBQTdDLEVBQWtELEVBQWxELENBRmI7S0FSUSxFQVlSO01BQ0ksTUFBQSxFQUFRLGlCQURaO01BRUksT0FBQSxFQUFTLENBQUMsRUFBRCxFQUFLLENBQUwsRUFBUSxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBZSxHQUFoQixDQUFBLEdBQXFCLEdBQWhDLENBQUEsR0FBcUMsR0FBN0MsRUFBa0QsUUFBUSxDQUFDLE1BQTNELENBRmI7TUFHSSxRQUFBLEVBQVU7UUFBRSxPQUFBLEVBQVM7VUFBRSxNQUFBLEVBQVEsc0NBQVY7VUFBa0QsYUFBQSxFQUFlLFdBQWpFO1NBQVg7T0FIZDtLQVpRLEVBaUJSO01BQ0ksTUFBQSxFQUFRLG1CQURaO01BRUksT0FBQSxFQUFTLENBQUMsRUFBRCxFQUFLLEVBQUwsRUFBUyxJQUFJLENBQUMsS0FBTCxDQUFXLENBQUMsUUFBUSxDQUFDLEtBQVQsR0FBZSxHQUFoQixDQUFBLEdBQXFCLEdBQWhDLENBQUEsR0FBcUMsR0FBOUMsRUFBbUQsUUFBUSxDQUFDLE1BQVQsR0FBa0IsRUFBckUsQ0FGYjtNQUdJLFFBQUEsRUFBVTtRQUNOLFNBQUEsRUFBVyxDQUFDLEVBQUQsRUFBSyxFQUFMLENBREw7UUFFTixTQUFBLEVBQVcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLFFBQVEsQ0FBQyxLQUFULEdBQWUsR0FBaEIsQ0FBQSxHQUFxQixHQUFoQyxDQUZMO1FBR04sWUFBQSxFQUFlLENBQUEsQ0FBRSxTQUFBO2lCQUFHLFdBQVcsQ0FBQztRQUFmLENBQUYsQ0FIVDtRQUlOLFVBQUEsRUFBWTtVQUNSLFlBQUEsRUFBYztZQUNWLE1BQUEsRUFBUSxpQkFERTtZQUVWLFFBQUEsRUFBVTtjQUNOLFNBQUEsRUFBVztnQkFDUDtrQkFBRSxNQUFBLEVBQVEsVUFBVjtrQkFBc0IsUUFBQSxFQUFVO29CQUFFLE1BQUEsRUFBUyxDQUFBLENBQUUsU0FBQTs2QkFBRyxDQUFDLENBQUMsTUFBTSxDQUFDO29CQUFaLENBQUYsQ0FBWDttQkFBaEM7aUJBRE8sRUFFUDtrQkFBRSxNQUFBLEVBQVEsbUJBQVY7a0JBQStCLFFBQUEsRUFBVyxDQUFBLENBQUUsU0FBQTsyQkFBRyxDQUFDLENBQUM7a0JBQUwsQ0FBRixDQUExQztpQkFGTztlQURMO2FBRkE7V0FETjtTQUpOO09BSGQ7S0FqQlE7R0FIc0IiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkubGF5b3V0cy5zYXZlTWVudUxheW91dCA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF0sXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwiZXhlY3V0ZUZpZWxkRm9ybXVsYXNcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkltYWdlXCIsXG4gICAgICAgICAgICBcImltYWdlXCI6IC0+ICRkYXRhRmllbGRzLmRhdGFiYXNlLnN5c3RlbS5tZW51QmFja2dyb3VuZC5uYW1lIG9yICdiZy1nZW5lcmljJ1xuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF0sXG4gICAgICAgICAgICBcImFjdGlvblwiOiB7IFwiZXZlbnRcIjogXCJvbkNhbmNlbFwiLCBcIm5hbWVcIjogXCJwcmV2aW91c0xheW91dFwiLCBcInBhcmFtc1wiOiB7fX1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuQmFja0J1dHRvblwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbR3JhcGhpY3Mud2lkdGggLSAxNzAsIEdyYXBoaWNzLmhlaWdodCAtIDY1LCAxNTAsIDQ1XVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UaXRsZWRXaW5kb3dcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzIwLCAwLCBNYXRoLmZsb29yKChHcmFwaGljcy53aWR0aC0yMDApLzQyMCkqNDIwLCBHcmFwaGljcy5oZWlnaHRdLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcInRpdGxlXCI6IHsgXCJsY0lkXCI6IFwiMTdCODk1MEM0NzdGQTA0MkM0MThEN0E1OTE0NDUwMTc2MjNDXCIsIFwiZGVmYXVsdFRleHRcIjogXCJTYXZlIEdhbWVcIiB9IH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuRGF0YVNjcm9sbFZpZXdcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzIwLCA0NSwgTWF0aC5mbG9vcigoR3JhcGhpY3Mud2lkdGgtMjAwKS80MjApKjQyMCwgR3JhcGhpY3MuaGVpZ2h0IC0gNDVdLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcbiAgICAgICAgICAgICAgICBcInNwYWNpbmdcIjogWzEwLCAxMF0sXG4gICAgICAgICAgICAgICAgXCJjb2x1bW5zXCI6IE1hdGguZmxvb3IoKEdyYXBoaWNzLndpZHRoLTIwMCkvNDIwKSxcbiAgICAgICAgICAgICAgICBcImRhdGFTb3VyY2VcIjogKCQgLT4gJGRhdGFGaWVsZHMuc2F2ZUdhbWVTbG90cyksIFxuICAgICAgICAgICAgICAgIFwidGVtcGxhdGVcIjoge1xuICAgICAgICAgICAgICAgICAgICBcImRlc2NyaXB0b3JcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU2F2ZUdhbWVTbG90XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcIm5hbWVcIjogXCJzYXZlR2FtZVwiLCBcInBhcmFtc1wiOiB7IFwic2xvdFwiOiAoJCAtPiBvLnBhcmVudC5pbmRleCkgfSB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFwibmFtZVwiOiBcImZ1bGxSZWZyZXNoT2JqZWN0XCIsIFwicGFyYW1zXCI6ICgkIC0+IG8ucGFyZW50KSB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Layout_SaveMenu_99.js
ui.UiFactory.layouts.loadMenuLayout = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.menuBackground.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height],
      "action": {
        "event": "onCancel",
        "name": "previousLayout",
        "params": {}
      }
    }, {
      "type": "ui.BackButton",
      "frame": [Graphics.width - 170, Graphics.height - 65, 150, 45]
    }, {
      "type": "ui.TitledWindow",
      "frame": [20, 0, Math.floor((Graphics.width - 200) / 420) * 420, Graphics.height],
      "params": {
        "title": {
          "lcId": "B215F6EB2576884547399CC0CF2F38E855FD",
          "defaultText": "Load Game"
        }
      }
    }, {
      "type": "ui.DataScrollView",
      "id": "list",
      "frame": [20, 45, Math.floor((Graphics.width - 200) / 420) * 420, Graphics.height - 45],
      "params": {
        "columns": Math.floor((Graphics.width - 200) / 420),
        "spacing": [10, 10],
        "dataSource": $(function() {
          return $dataFields.saveGameSlots;
        }),
        "template": {
          "descriptor": {
            "type": "ui.SaveGameSlot",
            "params": {
              "actions": [
                {
                  "name": "executeFormulas",
                  "params": [
                    $(function() {
                      return $tempFields.slot = o.parent.index;
                    })
                  ]
                }, {
                  "name": "createControl",
                  "conditions": [
                    {
                      "field": $(function() {
                        var ref;
                        return (ref = $dataFields.saveGameSlots[$tempFields.slot]) != null ? ref.date : void 0;
                      }),
                      "notEqualTo": $(function() {
                        return '';
                      })
                    }, {
                      "field": $(function() {
                        return $dataFields.settings.confirmation;
                      }),
                      "equalTo": true
                    }, {
                      "field": $(function() {
                        return $dataFields.tempSettings.loadMenuAccess;
                      }),
                      "equalTo": true
                    }
                  ],
                  "params": {
                    "descriptor": {
                      "id": "confirmationDialog",
                      "type": "ui.ConfirmationDialog",
                      "zIndex": 90000,
                      "params": {
                        "message": {
                          "lcId": "2BD08CC65B9A2248C749B9C4DEEAADE8E20A",
                          "defaultText": "Do you really want to load?"
                        },
                        "acceptActions": [
                          {
                            "name": "loadGame",
                            "params": {
                              "slot": $(function() {
                                return $tempFields.slot;
                              })
                            }
                          }
                        ],
                        "rejectActions": [
                          {
                            "name": "disposeControl",
                            "params": $(function() {
                              return 'confirmationDialog';
                            })
                          }
                        ]
                      }
                    }
                  }
                }, {
                  "conditions": [
                    {
                      "field": $(function() {
                        var ref;
                        return (ref = $dataFields.saveGameSlots[$tempFields.slot]) != null ? ref.date : void 0;
                      }),
                      "notEqualTo": $(function() {
                        return '';
                      })
                    }, {
                      "field": $(function() {
                        return !$dataFields.settings.confirmation || !$dataFields.tempSettings.loadMenuAccess;
                      }),
                      "equalTo": true
                    }
                  ],
                  "name": "loadGame",
                  "params": {
                    "slot": $(function() {
                      return $tempFields.slot;
                    })
                  }
                }
              ]
            }
          }
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Layout_LoadMenu_111.js
ui.UiFactory.layouts.languageMenuLayout = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "music": $(function() {
    return $dataFields.database.system.languageMusic;
  }),
  "preload": {
    "sounds": [
      function() {
        return $dataFields.database.system.menuSelectSound;
      }, function() {
        return $dataFields.database.system.menuCancelSound;
      }, function() {
        return $dataFields.database.system.menuQuitSound;
      }, function() {
        return $dataFields.database.system.menuLoadSound;
      }, function() {
        return $dataFields.database.system.menuSaveSound;
      }
    ]
  },
  "controls": [
    {
      "type": "ui.Image",
      "image": function() {
        return $dataFields.database.system.languageScreen.name || 'bg-generic';
      },
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      "type": "ui.StackLayout",
      "orientation": "vertical",
      "alignmentX": "center",
      "alignmentY": "center",
      "sizeToFit": true,
      "dataField": $(function() {
        return $dataFields.languages;
      }),
      "template": {
        "type": "ui.FreeLayout",
        "resizable": false,
        "frame": [0, 0, 300, 50],
        "margin": [0, 0, 0, 15],
        "controls": [
          {
            "type": "ui.SelectableWindow",
            "frame": [0, 0, "100%", "100%"],
            "inheritProperties": true,
            "margin": [0, 0, 0, 0],
            "params": {
              "actions": [
                {
                  "name": "selectLanguage",
                  "params": $(function() {
                    return o.parent.parent.index;
                  })
                }, {
                  "name": "switchLayout",
                  "params": {
                    "name": "titleLayout"
                  }
                }
              ]
            },
            "zIndex": 4999
          }, {
            "type": "ui.Image",
            "imageFolder": "Graphics/Icons",
            "formulas": [
              $(function() {
                return o.image = $dataFields.languages[o.parent.index].icon.name;
              })
            ],
            "alignmentY": "center",
            "frame": [10, 0],
            "zIndex": "5100",
            "inheritProperties": true,
            "anchor": [0.5, 0.5],
            "sizeToFit": true
          }, {
            "type": "ui.Text",
            "sizeToFit": true,
            "styles": ["regularUIText"],
            "alignmentX": "center",
            "alignmentY": "center",
            "frame": [0, 0],
            "inheritProperties": true,
            "margin": [0, 0, 0, 0],
            "formulas": [
              $(function() {
                return o.text = $dataFields.languages[o.parent.index].name;
              })
            ],
            "zIndex": 5100
          }
        ]
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLGtCQUFyQixHQUEwQztFQUN0QyxNQUFBLEVBQVEsZUFEOEI7RUFFdEMsT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBaEIsRUFBdUIsUUFBUSxDQUFDLE1BQWhDLENBRjZCO0VBR3RDLE9BQUEsRUFBVSxDQUFBLENBQUUsU0FBQTtXQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO0VBQS9CLENBQUYsQ0FINEI7RUFJdEMsU0FBQSxFQUFXO0lBQ1AsUUFBQSxFQUFVO01BQ04sU0FBQTtlQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO01BQS9CLENBRE0sRUFFTixTQUFBO2VBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7TUFBL0IsQ0FGTSxFQUdOLFNBQUE7ZUFBRyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztNQUEvQixDQUhNLEVBSU4sU0FBQTtlQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDO01BQS9CLENBSk0sRUFLTixTQUFBO2VBQUcsV0FBVyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUM7TUFBL0IsQ0FMTTtLQURIO0dBSjJCO0VBYXRDLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsU0FBQTtlQUFHLFdBQVcsQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxJQUEzQyxJQUFtRDtNQUF0RCxDQUZiO01BR0ksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBaEIsRUFBdUIsUUFBUSxDQUFDLE1BQWhDLENBSGI7S0FEUSxFQU1SO01BQ0ksTUFBQSxFQUFRLGdCQURaO01BRUksYUFBQSxFQUFlLFVBRm5CO01BR0ksWUFBQSxFQUFjLFFBSGxCO01BSUksWUFBQSxFQUFjLFFBSmxCO01BS0ksV0FBQSxFQUFhLElBTGpCO01BTUksV0FBQSxFQUFhLENBQUEsQ0FBRSxTQUFBO2VBQUcsV0FBVyxDQUFDO01BQWYsQ0FBRixDQU5qQjtNQU9JLFVBQUEsRUFBWTtRQUNSLE1BQUEsRUFBUSxlQURBO1FBRVIsV0FBQSxFQUFhLEtBRkw7UUFHUixPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEdBQVAsRUFBWSxFQUFaLENBSEQ7UUFJUixRQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLENBSkY7UUFLUixVQUFBLEVBQVc7VUFDUDtZQUNJLE1BQUEsRUFBUSxxQkFEWjtZQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sTUFBUCxFQUFlLE1BQWYsQ0FGYjtZQUdJLG1CQUFBLEVBQXFCLElBSHpCO1lBSUksUUFBQSxFQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQUpkO1lBS0ksUUFBQSxFQUFVO2NBQ04sU0FBQSxFQUFXO2dCQUNQO2tCQUFFLE1BQUEsRUFBUSxnQkFBVjtrQkFBNEIsUUFBQSxFQUFXLENBQUEsQ0FBRSxTQUFBOzJCQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO2tCQUFuQixDQUFGLENBQXZDO2lCQURPLEVBRVA7a0JBQUUsTUFBQSxFQUFRLGNBQVY7a0JBQTBCLFFBQUEsRUFBVTtvQkFBRSxNQUFBLEVBQVEsYUFBVjttQkFBcEM7aUJBRk87ZUFETDthQUxkO1lBV0ksUUFBQSxFQUFVLElBWGQ7V0FETyxFQWNQO1lBQ0ksTUFBQSxFQUFRLFVBRFo7WUFFSSxhQUFBLEVBQWUsZ0JBRm5CO1lBR0ksVUFBQSxFQUFZO2NBQUMsQ0FBQSxDQUFFLFNBQUE7dUJBQUcsQ0FBQyxDQUFDLEtBQUYsR0FBVSxXQUFXLENBQUMsU0FBVSxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQUMsSUFBSSxDQUFDO2NBQXhELENBQUYsQ0FBRDthQUhoQjtZQUlJLFlBQUEsRUFBYyxRQUpsQjtZQUtJLE9BQUEsRUFBUyxDQUFDLEVBQUQsRUFBSyxDQUFMLENBTGI7WUFNSSxRQUFBLEVBQVUsTUFOZDtZQU9JLG1CQUFBLEVBQXFCLElBUHpCO1lBUUksUUFBQSxFQUFVLENBQUMsR0FBRCxFQUFNLEdBQU4sQ0FSZDtZQVNJLFdBQUEsRUFBYSxJQVRqQjtXQWRPLEVBeUJQO1lBQ0ksTUFBQSxFQUFRLFNBRFo7WUFFSSxXQUFBLEVBQWEsSUFGakI7WUFHSSxRQUFBLEVBQVUsQ0FBQyxlQUFELENBSGQ7WUFJSSxZQUFBLEVBQWMsUUFKbEI7WUFLSSxZQUFBLEVBQWMsUUFMbEI7WUFNSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQU5iO1lBT0ksbUJBQUEsRUFBcUIsSUFQekI7WUFRSSxRQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBUmQ7WUFTSSxVQUFBLEVBQVk7Y0FBQyxDQUFBLENBQUUsU0FBQTt1QkFBRyxDQUFDLENBQUMsSUFBRixHQUFTLFdBQVcsQ0FBQyxTQUFVLENBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFULENBQWUsQ0FBQztjQUFsRCxDQUFGLENBQUQ7YUFUaEI7WUFVSSxRQUFBLEVBQVUsSUFWZDtXQXpCTztTQUxIO09BUGhCO0tBTlE7R0FiMEIiLCJzb3VyY2VzQ29udGVudCI6WyJcbnVpLlVpRmFjdG9yeS5sYXlvdXRzLmxhbmd1YWdlTWVudUxheW91dCA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF0sXG4gICAgXCJtdXNpY1wiOiAoJCAtPiAkZGF0YUZpZWxkcy5kYXRhYmFzZS5zeXN0ZW0ubGFuZ3VhZ2VNdXNpYyksXG4gICAgXCJwcmVsb2FkXCI6IHtcbiAgICAgICAgXCJzb3VuZHNcIjogW1xuICAgICAgICAgICAgLT4gJGRhdGFGaWVsZHMuZGF0YWJhc2Uuc3lzdGVtLm1lbnVTZWxlY3RTb3VuZCxcbiAgICAgICAgICAgIC0+ICRkYXRhRmllbGRzLmRhdGFiYXNlLnN5c3RlbS5tZW51Q2FuY2VsU291bmQsXG4gICAgICAgICAgICAtPiAkZGF0YUZpZWxkcy5kYXRhYmFzZS5zeXN0ZW0ubWVudVF1aXRTb3VuZCxcbiAgICAgICAgICAgIC0+ICRkYXRhRmllbGRzLmRhdGFiYXNlLnN5c3RlbS5tZW51TG9hZFNvdW5kLFxuICAgICAgICAgICAgLT4gJGRhdGFGaWVsZHMuZGF0YWJhc2Uuc3lzdGVtLm1lbnVTYXZlU291bmRcbiAgICAgICAgXVxuICAgIH1cbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwiaW1hZ2VcIjogLT4gJGRhdGFGaWVsZHMuZGF0YWJhc2Uuc3lzdGVtLmxhbmd1YWdlU2NyZWVuLm5hbWUgb3IgJ2JnLWdlbmVyaWMnLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU3RhY2tMYXlvdXRcIixcbiAgICAgICAgICAgIFwib3JpZW50YXRpb25cIjogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRYXCI6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBcImFsaWdubWVudFlcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgICAgICAgICBcImRhdGFGaWVsZFwiOiAkIC0+ICRkYXRhRmllbGRzLmxhbmd1YWdlc1xuICAgICAgICAgICAgXCJ0ZW1wbGF0ZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgICAgICAgICAgICAgIFwicmVzaXphYmxlXCI6IGZhbHNlLFxuICAgICAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIDMwMCwgNTBdLFxuICAgICAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAxNV0sXG4gICAgICAgICAgICAgICAgXCJjb250cm9sc1wiOltcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU2VsZWN0YWJsZVdpbmRvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiaW5oZXJpdFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicGFyYW1zXCI6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFjdGlvbnNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IFwibmFtZVwiOiBcInNlbGVjdExhbmd1YWdlXCIsIFwicGFyYW1zXCI6ICgkIC0+IG8ucGFyZW50LnBhcmVudC5pbmRleCkgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBcIm5hbWVcIjogXCJzd2l0Y2hMYXlvdXRcIiwgXCJwYXJhbXNcIjogeyBcIm5hbWVcIjogXCJ0aXRsZUxheW91dFwiIH0gfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ6SW5kZXhcIjogNDk5OVxuICAgICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5JbWFnZVwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbWFnZUZvbGRlclwiOiBcIkdyYXBoaWNzL0ljb25zXCIsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8uaW1hZ2UgPSAkZGF0YUZpZWxkcy5sYW5ndWFnZXNbby5wYXJlbnQuaW5kZXhdLmljb24ubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFsaWdubWVudFlcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiZnJhbWVcIjogWzEwLCAwXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiekluZGV4XCI6IFwiNTEwMFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJpbmhlcml0UHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJhbmNob3JcIjogWzAuNSwgMC41XSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFsaWdubWVudFhcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImluaGVyaXRQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8udGV4dCA9ICRkYXRhRmllbGRzLmxhbmd1YWdlc1tvLnBhcmVudC5pbmRleF0ubmFtZV0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcInpJbmRleFwiOiA1MTAwXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBcbiAgICAgICAgfVxuICAgIF1cbn1cblxuIl19
//# sourceURL=Layout_LanguageMenu_115.js
ui.UiFactory.layouts.gameLayout = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.Panel",
      "frame": [0, 0, Graphics.width, Graphics.height],
      "updateBehavior": "continuous",
      "formulas": [
        $(function() {
          return o.ui.enabled = $dataFields.tempSettings.menuAccess;
        })
      ],
      "action": {
        "event": "onCancel",
        "name": "switchLayout",
        "params": {
          "name": "settingsMenuLayout",
          "savePrevious": true
        }
      }
    }, {
      "type": "ui.MessageBox",
      "visible": false,
      "id": "messageBox",
      "frame": [0, 0, "100%", "100%"]
    }, {
      "type": "ui.GameMessage",
      "id": "gameMessage",
      "params": {
        "id": "gameMessage"
      },
      "frame": [320, Graphics.height - 220]
    }
  ]
};

ui.UiFactory.layouts.gameLayoutNVL = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.Panel",
      "frame": [0, 0, Graphics.width, Graphics.height],
      "formulas": [
        $(function() {
          return o.ui.enabled = $dataFields.tempSettings.menuAccess;
        })
      ],
      "action": {
        "event": "onCancel",
        "name": "switchLayout",
        "params": {
          "name": "settingsMenuLayout",
          "savePrevious": true
        }
      }
    }, {
      "type": "ui.MessageBoxNVL",
      "visible": false,
      "id": "messageBoxNVL",
      "order": 0,
      "frame": [0, 0]
    }, {
      "type": "ui.GameMessageNVL",
      "params": {
        "id": "gameMessageNVL"
      },
      "id": "gameMessageNVL",
      "order": 10,
      "frame": [0, 0]
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsT0FBTyxDQUFDLFVBQXJCLEdBQWtDO0VBQzlCLE1BQUEsRUFBUSxlQURzQjtFQUU5QixPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FGcUI7RUFHOUIsVUFBQSxFQUFXO0lBQ1A7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sUUFBUSxDQUFDLEtBQWhCLEVBQXVCLFFBQVEsQ0FBQyxNQUFoQyxDQUZiO01BR0ksZ0JBQUEsRUFBa0IsWUFIdEI7TUFJSSxVQUFBLEVBQVk7UUFBQyxDQUFBLENBQUUsU0FBQTtpQkFBRyxDQUFDLENBQUMsRUFBRSxDQUFDLE9BQUwsR0FBZSxXQUFXLENBQUMsWUFBWSxDQUFDO1FBQTNDLENBQUYsQ0FBRDtPQUpoQjtNQUtJLFFBQUEsRUFBVTtRQUNOLE9BQUEsRUFBUyxVQURIO1FBRU4sTUFBQSxFQUFRLGNBRkY7UUFHTixRQUFBLEVBQVU7VUFBRSxNQUFBLEVBQVEsb0JBQVY7VUFBZ0MsY0FBQSxFQUFnQixJQUFoRDtTQUhKO09BTGQ7S0FETyxFQVlQO01BQ0ksTUFBQSxFQUFRLGVBRFo7TUFFSSxTQUFBLEVBQVcsS0FGZjtNQUdJLElBQUEsRUFBTSxZQUhWO01BSUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQUpiO0tBWk8sRUFrQlA7TUFDSSxNQUFBLEVBQVEsZ0JBRFo7TUFFSSxJQUFBLEVBQU0sYUFGVjtNQUdJLFFBQUEsRUFBVTtRQUFFLElBQUEsRUFBTSxhQUFSO09BSGQ7TUFJSSxPQUFBLEVBQVMsQ0FBQyxHQUFELEVBQU0sUUFBUSxDQUFDLE1BQVQsR0FBa0IsR0FBeEIsQ0FKYjtLQWxCTztHQUhtQjs7O0FBOEJsQyxFQUFFLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxhQUFyQixHQUFxQztFQUNqQyxNQUFBLEVBQVEsZUFEeUI7RUFFakMsT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBaEIsRUFBdUIsUUFBUSxDQUFDLE1BQWhDLENBRndCO0VBR2pDLFVBQUEsRUFBVztJQUNQO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FGYjtNQUdJLFVBQUEsRUFBWTtRQUFDLENBQUEsQ0FBRSxTQUFBO2lCQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsT0FBTCxHQUFlLFdBQVcsQ0FBQyxZQUFZLENBQUM7UUFBM0MsQ0FBRixDQUFEO09BSGhCO01BSUksUUFBQSxFQUFVO1FBQ04sT0FBQSxFQUFTLFVBREg7UUFFTixNQUFBLEVBQVEsY0FGRjtRQUdOLFFBQUEsRUFBVTtVQUFFLE1BQUEsRUFBUSxvQkFBVjtVQUFnQyxjQUFBLEVBQWdCLElBQWhEO1NBSEo7T0FKZDtLQURPLEVBV1A7TUFDSSxNQUFBLEVBQVEsa0JBRFo7TUFFSSxTQUFBLEVBQVcsS0FGZjtNQUdJLElBQUEsRUFBTSxlQUhWO01BSUksT0FBQSxFQUFTLENBSmI7TUFLSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUxiO0tBWE8sRUFrQlA7TUFDSSxNQUFBLEVBQVEsbUJBRFo7TUFFSSxRQUFBLEVBQVU7UUFBRSxJQUFBLEVBQU0sZ0JBQVI7T0FGZDtNQUdJLElBQUEsRUFBTSxnQkFIVjtNQUlJLE9BQUEsRUFBUyxFQUpiO01BS0ksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FMYjtLQWxCTztHQUhzQiIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5sYXlvdXRzLmdhbWVMYXlvdXQgPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgIFwiZnJhbWVcIjogWzAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHRdLFxuICAgIFwiY29udHJvbHNcIjpbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlBhbmVsXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0XSxcbiAgICAgICAgICAgIFwidXBkYXRlQmVoYXZpb3JcIjogXCJjb250aW51b3VzXCIsXG4gICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8udWkuZW5hYmxlZCA9ICRkYXRhRmllbGRzLnRlbXBTZXR0aW5ncy5tZW51QWNjZXNzXSxcbiAgICAgICAgICAgIFwiYWN0aW9uXCI6IHsgXG4gICAgICAgICAgICAgICAgXCJldmVudFwiOiBcIm9uQ2FuY2VsXCIsIFxuICAgICAgICAgICAgICAgIFwibmFtZVwiOiBcInN3aXRjaExheW91dFwiLCBcbiAgICAgICAgICAgICAgICBcInBhcmFtc1wiOiB7IFwibmFtZVwiOiBcInNldHRpbmdzTWVudUxheW91dFwiLCBcInNhdmVQcmV2aW91c1wiOiB0cnVlIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuTWVzc2FnZUJveFwiLFxuICAgICAgICAgICAgXCJ2aXNpYmxlXCI6IG5vLFxuICAgICAgICAgICAgXCJpZFwiOiBcIm1lc3NhZ2VCb3hcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIFwiMTAwJVwiLCBcIjEwMCVcIl1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuR2FtZU1lc3NhZ2VcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJnYW1lTWVzc2FnZVwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcImlkXCI6IFwiZ2FtZU1lc3NhZ2VcIiB9LFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMzIwLCBHcmFwaGljcy5oZWlnaHQgLSAyMjBdXG4gICAgICAgIH1cbiAgICBdXG59XG5cbnVpLlVpRmFjdG9yeS5sYXlvdXRzLmdhbWVMYXlvdXROVkwgPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgIFwiZnJhbWVcIjogWzAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHRdLFxuICAgIFwiY29udHJvbHNcIjpbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlBhbmVsXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0XSxcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogWyQgLT4gby51aS5lbmFibGVkID0gJGRhdGFGaWVsZHMudGVtcFNldHRpbmdzLm1lbnVBY2Nlc3NdLFxuICAgICAgICAgICAgXCJhY3Rpb25cIjogeyBcbiAgICAgICAgICAgICAgICBcImV2ZW50XCI6IFwib25DYW5jZWxcIiwgXG4gICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwic3dpdGNoTGF5b3V0XCIsIFxuICAgICAgICAgICAgICAgIFwicGFyYW1zXCI6IHsgXCJuYW1lXCI6IFwic2V0dGluZ3NNZW51TGF5b3V0XCIsIFwic2F2ZVByZXZpb3VzXCI6IHRydWUgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5NZXNzYWdlQm94TlZMXCIsXG4gICAgICAgICAgICBcInZpc2libGVcIjogbm8sXG4gICAgICAgICAgICBcImlkXCI6IFwibWVzc2FnZUJveE5WTFwiLFxuICAgICAgICAgICAgXCJvcmRlclwiOiAwLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMF1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuR2FtZU1lc3NhZ2VOVkxcIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IHsgXCJpZFwiOiBcImdhbWVNZXNzYWdlTlZMXCIgfSxcbiAgICAgICAgICAgIFwiaWRcIjogXCJnYW1lTWVzc2FnZU5WTFwiLFxuICAgICAgICAgICAgXCJvcmRlclwiOiAxMCxcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDBdXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Layout_Game_125.js
(function() {


}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIl19
//# sourceURL=Templates_130.js
ui.UiFactory.customTypes["ui.ScrollBar"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.ThreePartImage",
      "zIndex": 100,
      "firstPartSize": 7,
      "lastPartSize": 7,
      "image": "scrollbar",
      "draggable": {
        "rect": [0, 0, 24, 376],
        "axisX": false,
        "axisY": true
      },
      "frame": [0, 0, "100%"],
      "margin": [0, 0, 5, 0],
      "formulas": [
        $(function() {
          return o.draggable.rect.height = o.parent.dstRect.height;
        })
      ]
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGNBQUEsQ0FBekIsR0FBMkM7RUFDdkMsTUFBQSxFQUFRLGVBRCtCO0VBRXZDLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLG1CQURaO01BRUksUUFBQSxFQUFVLEdBRmQ7TUFHSSxlQUFBLEVBQWlCLENBSHJCO01BSUksY0FBQSxFQUFnQixDQUpwQjtNQUtJLE9BQUEsRUFBUyxXQUxiO01BTUksV0FBQSxFQUFhO1FBQUUsTUFBQSxFQUFRLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxFQUFQLEVBQVcsR0FBWCxDQUFWO1FBQTJCLE9BQUEsRUFBUyxLQUFwQztRQUEyQyxPQUFBLEVBQVMsSUFBcEQ7T0FOakI7TUFPSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsQ0FQYjtNQVFJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FSZDtNQVNJLFVBQUEsRUFBWTtRQUFDLENBQUEsQ0FBRSxTQUFBO2lCQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLE1BQWpCLEdBQTBCLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDO1FBQTlDLENBQUYsQ0FBRDtPQVRoQjtLQURRO0dBRjJCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuU2Nyb2xsQmFyXCJdID0ge1xuICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGhyZWVQYXJ0SW1hZ2VcIixcbiAgICAgICAgICAgIFwiekluZGV4XCI6IDEwMCxcbiAgICAgICAgICAgIFwiZmlyc3RQYXJ0U2l6ZVwiOiA3LFxuICAgICAgICAgICAgXCJsYXN0UGFydFNpemVcIjogNyxcbiAgICAgICAgICAgIFwiaW1hZ2VcIjogXCJzY3JvbGxiYXJcIixcbiAgICAgICAgICAgIFwiZHJhZ2dhYmxlXCI6IHsgXCJyZWN0XCI6IFswLCAwLCAyNCwgMzc2XSwgXCJheGlzWFwiOiBmYWxzZSwgXCJheGlzWVwiOiB0cnVlIH0sXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBcIjEwMCVcIl0sXG4gICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgNSwgMF0sXG4gICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8uZHJhZ2dhYmxlLnJlY3QuaGVpZ2h0ID0gby5wYXJlbnQuZHN0UmVjdC5oZWlnaHRdXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Template_VerticalScrollBar_0.js
ui.UiFactory.customTypes["ui.MessageBacklog"] = {
  "id": "list",
  "type": "ui.DataScrollView",
  "zIndex": 80000,
  "order": 80001,
  "frame": [0, 0, Graphics.width, Graphics.height],
  "params": {
    "dataSource": $(function() {
      return $dataFields.backlog;
    }),
    "template": {
      "size": [Graphics.width, 200],
      "descriptor": {
        "type": "ui.FreeLayout",
        "frame": [0, 0, Graphics.width, 200],
        "controls": [
          {
            "type": "ui.FreeLayout",
            "frame": [0, 20, Graphics.width / 4, 30],
            "controls": [
              {
                "type": "ui.Text",
                "styles": ["messageText"],
                "frame": [0, 0],
                "margin": [0, 0, 20, 0],
                "sizeToFit": true,
                "alignmentX": "right",
                "zIndex": 82000,
                "formulas": [
                  $(function() {
                    var c;
                    c = $dataFields.backlog[o.parent.parent.index].character;
                    o.text = c.name;
                    if (c.textColor) {
                      return o.font.color.setFromObject(c.textColor);
                    }
                  })
                ],
                "text": "Name"
              }
            ]
          }, {
            "type": "ui.Text",
            "styles": ["messageText"],
            "frame": [Graphics.width / 4 + 20, 20, Graphics.width - 400, 0],
            "sizeToFit": {
              "horizontal": false,
              "vertical": true
            },
            "formatting": true,
            "zIndex": 82000,
            "order": 80001,
            "formulas": [
              $(function() {
                return o.visible = !$dataFields.backlog[o.parent.index].isChoice;
              }), $(function() {
                if (!$dataFields.backlog[o.parent.index].isChoice) {
                  return o.text = $dataFields.backlog[o.parent.index].message;
                }
              }), $(function() {
                if ($dataFields.backlog[o.parent.index].isChoice) {
                  return o.text = $dataFields.backlog[o.parent.index].choice.text;
                }
              })
            ],
            "text": ""
          }, {
            "type": "ui.FreeLayout",
            "alignmentX": 1,
            "sizeToFit": true,
            "formulas": [
              $(function() {
                return o.visible = $dataFields.backlog[o.parent.index].isChoice;
              })
            ],
            "controls": [
              {
                "type": "ui.Window",
                "formulas": [
                  $(function() {
                    return o.controls[0].image = "selection";
                  })
                ],
                "frame": [0, 0, 750, 50],
                "margin": [0, 0, 0, 30],
                "zIndex": 4999
              }, {
                "type": "ui.Text",
                "sizeToFit": true,
                "styles": ["regularUIText"],
                "alignmentX": "center",
                "alignmentY": "center",
                "frame": [0, 12],
                "margin": [0, 0, 0, 30],
                "formulas": [
                  $(function() {
                    if ($dataFields.backlog[o.parent.parent.index].isChoice) {
                      return o.text = $dataFields.backlog[o.parent.parent.index].choice.text;
                    }
                  })
                ],
                "zIndex": 5100
              }
            ]
          }
        ],
        "margin": [0, 0, 0, 20]
      }
    }
  },
  "zIndex": 81000
};

ui.UiFactory.customTypes["ui.MessageBacklogBox"] = {
  "type": "ui.FreeLayout",
  "order": 80000,
  "id": "backlog",
  "controls": [
    {
      "type": "ui.Panel",
      "modal": true,
      "order": 800,
      "style": "backlogMessagePanel",
      "zIndex": 80000,
      "frame": [0, 0, Graphics.width, Graphics.height]
    }, {
      "type": "ui.Panel",
      "style": "backlogNamePanel",
      "zIndex": 80000,
      "frame": [0, 0, Graphics.width / 4, Graphics.height]
    }, {
      "type": "ui.MessageBacklog"
    }
  ],
  "frame": [0, 0, Graphics.width, Graphics.height]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Template_MessageBacklog_23.js
ui.UiFactory.customTypes["ui.MessageBox"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.Panel",
      "color": [0, 0, 0, 255],
      "frame": [0, Graphics.height - 220, "100%", 2],
      "zIndex": 5000
    }, {
      "type": "ui.Panel",
      "color": [0, 0, 0, 128],
      "frame": [0, Graphics.height - 220, "100%", 220],
      "zIndex": 5000
    }, {
      "type": "ui.MessageBoxMenu",
      "params": {
        "messageBox": $(function() {
          return $messageBox;
        })
      },
      "order": 81000,
      "frame": [0, Graphics.height - 270]
    }, {
      "type": "ui.Text",
      "updateBehavior": "continuous",
      "text": "",
      "style": "messageBoxNameText",
      "formulas": [
        $(function() {
          return o.text = $dataFields.scene.currentCharacter.name;
        }), $(function() {
          if (this.onTextChange($dataFields.scene.currentCharacter.name)) {
            return o.font.color.setFromObject($dataFields.scene.currentCharacter.textColor || Color.WHITE);
          }
        })
      ],
      "zIndex": 5005,
      "sizeToFit": true,
      "frame": [148, Graphics.height - 210, 128, 30]
    }
  ]
};

ui.UiFactory.customTypes["ui.CustomGameMessage"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.Message",
      "zIndex": 10000,
      "id": function() {
        return p.id + "_message";
      },
      "font": {
        "name": "Times New Roman",
        "size": gs.UIConstants.TEXT_SIZE_MESSAGE_NAME,
        "smallCaps": false,
        "italic": true,
        "border": true
      },
      "frame": [0, 0, "100%", "100%"]
    }, {
      "type": "ui.Image",
      "formulas": [
        $(function() {
          return o.dstRect.x = o.parent.controls[0].message.caretPosition.x;
        }), $(function() {
          return o.dstRect.y = o.parent.controls[0].message.caretPosition.y - 20;
        }), $(function() {
          return o.visible = o.parent.controls[0].visible && (o.parent.controls[0].message.isRunning || o.parent.controls[0].message.isWaiting);
        })
      ],
      "animations": [
        {
          "event": "onAlways",
          "flow": [
            {
              "type": "playAnimation",
              "repeat": false,
              "animationId": 0
            }
          ]
        }
      ],
      "image": "message_caret",
      "zIndex": 10000,
      "frame": [0, 0]
    }
  ]
};

ui.UiFactory.customTypes["ui.GameMessage"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Message",
      "zIndex": 10000,
      "id": function() {
        return p.id + "_message";
      },
      "frame": [0, 10, Graphics.width - 136 - 180, 200],
      "style": "advMessageText"
    }, {
      "type": "ui.Image",
      "formulas": [
        $(function() {
          return o.dstRect.x = o.parent.controls[0].message.caretPosition.x;
        }), $(function() {
          return o.dstRect.y = o.parent.controls[0].message.caretPosition.y - 10;
        }), $(function() {
          return o.visible = o.parent.controls[0].visible && (o.parent.controls[0].message.isRunning || o.parent.controls[0].message.isWaiting);
        })
      ],
      "animations": [
        {
          "event": "onAlways",
          "flow": [
            {
              "type": "playAnimation",
              "repeat": false,
              "animationId": 0
            }
          ]
        }
      ],
      "image": "message_caret",
      "zIndex": 10000,
      "frame": [0, 0]
    }
  ]
};

ui.UiFactory.customTypes["ui.GameMessageNVL"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Message",
      "zIndex": 10000,
      "id": function() {
        return p.id + "_message";
      },
      "style": "nvlMessageText",
      "frame": [Graphics.width / 100 * 12.5 + 8, 8, Graphics.width / 100 * 75 - 16, Graphics.height - 16]
    }
  ]
};

ui.UiFactory.customTypes["ui.MessageBoxNVL"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.MessageBoxMenu",
      "params": {
        "messageBox": $(function() {
          return $messageBoxNVL;
        })
      },
      "order": 81000,
      "frame": [0, Graphics.height - 270]
    }, {
      "type": "ui.Window",
      "params": {
        "backgroundOpacity": 128
      },
      "frame": [Graphics.width / 100 * 12.5, 0, Graphics.width / 100 * 75, Graphics.height],
      "zIndex": 4999
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Template_MessageBox_18.js
ui.UiFactory.customTypes["ui.MessageBoxMenu"] = {
  "type": "ui.FreeLayout",
  "order": 85000,
  "id": "msgmenu",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Window",
      "color": [0, 0, 0, 128],
      "frame": [0, 0, 140, 270],
      "order": 0,
      "params": {
        "zIndex": 5000
      },
      "zIndex": 85000
    }, {
      "type": "ui.StackLayout",
      "orientation": "vertical",
      "order": 10,
      "frame": [0, 0, 128, 230],
      "controls": [
        {
          "type": "ui.MessageOptionButton",
          "formulas": [
            $(function() {
              return o.ui.enabled = $dataFields.settings.allowSkip;
            })
          ],
          "params": {
            "label": {
              "lcId": "3A58B0DB84DB0549FD09EDF6F0FF0730D8DE",
              "defaultText": "Skip"
            },
            "write": $(function() {
              return $dataFields.tempSettings.skip = !$dataFields.tempSettings.skip;
            })
          },
          "margin": [10, 5, 0, 0],
          "order": 80001
        }, {
          "type": "ui.MessageOptionButton",
          "formulas": [
            $(function() {
              return o.ui.enabled = $dataFields.tempSettings.backlogAccess;
            })
          ],
          "id": "logButton",
          "margin": [10, 10, 0, 0],
          "params": {
            "label": {
              "lcId": "BF92F3296C66164227197FB3BF1E1B09E0D8",
              "defaultText": "Log"
            },
            "write": $(function() {
              return $dataFields.tempSettings.logOpened = !$dataFields.tempSettings.logOpened;
            }),
            "action2": {
              "condition": {
                "field": $(function() {
                  return !$dataFields.tempSettings.logOpened;
                }),
                "equalTo": true
              },
              "name": "disposeControl",
              "params": $(function() {
                return 'backlog';
              })
            },
            "action1": {
              "condition": {
                "field": $(function() {
                  return $dataFields.tempSettings.logOpened;
                }),
                "equalTo": true
              },
              "name": "createControl",
              "params": {
                "parent": function() {
                  return p.messageBox;
                },
                "descriptor": "ui.MessageBacklogBox"
              }
            }
          }
        }, {
          "type": "ui.Text",
          "formulas": [
            $(function() {
              return o.ui.enabled = $dataFields.tempSettings.saveMenuAccess;
            })
          ],
          "id": "saveButton",
          "style": "regularUIText",
          "actions": [
            {
              "name": "prepareSaveGame",
              "params": {
                "snapshot": true
              }
            }, {
              "name": "switchLayout",
              "params": {
                "name": "saveMenuLayout",
                "savePrevious": true
              }
            }
          ],
          "text": {
            "lcId": "5316D6C90CB9924AE64A39889235D22D5FEE",
            "defaultText": "Save"
          },
          "sizeToFit": true,
          "margin": [60, 16, 0, 0]
        }, {
          "type": "ui.Text",
          "formulas": [
            $(function() {
              return o.ui.enabled = $dataFields.tempSettings.loadMenuAccess;
            })
          ],
          "styles": ["regularUIText"],
          "action": {
            "name": "switchLayout",
            "params": {
              "name": "loadMenuLayout",
              "savePrevious": true
            }
          },
          "text": {
            "lcId": "9622E9805409534DB8381610238C95564F30",
            "defaultText": "Load"
          },
          "sizeToFit": true,
          "margin": [60, 16, 0, 0]
        }, {
          "type": "ui.Text",
          "styles": ["regularUIText"],
          "text": {
            "lcId": "D2632CD54402D8462F597DD75E51050ED0C3",
            "defaultText": "Title"
          },
          "sizeToFit": true,
          "actions": [
            {
              "name": "createControl",
              "params": {
                "descriptor": {
                  "id": "confirmationDialog",
                  "type": "ui.ConfirmationDialog",
                  "zIndex": 90000,
                  "params": {
                    "message": {
                      "lcId": "ABC85CC3669B83481309BDF44B98EF11B59B",
                      "defaultText": "Do you really want to exit?"
                    },
                    "acceptActions": [
                      {
                        "name": "switchLayout",
                        "params": {
                          "name": "titleLayout"
                        }
                      }
                    ],
                    "rejectActions": [
                      {
                        "name": "disposeControl",
                        "params": $(function() {
                          return 'confirmationDialog';
                        })
                      }
                    ]
                  }
                }
              }
            }
          ],
          "margin": [60, 16, 0, 0]
        }
      ],
      "zIndex": 86000
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Template_MessageBoxMenu_38.js
ui.UiFactory.customTypes["ui.InputNumberBox"] = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.FreeLayout",
      "sizeToFit": true,
      "alignmentX": "center",
      "frame": [0, 10],
      "zIndex": 1000,
      "controls": [
        {
          "type": "ui.FreeLayout",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.Window",
              "frame": [0, 0, "MAX($tempFields.digits * 110, 460)", 470]
            }, {
              "type": "ui.Panel",
              "style": "windowSubPanel",
              "frame": ["MAX($tempFields.digits * 110, 460) - 130", 180, 130, 470 - 160],
              "zIndex": 10
            }, {
              "type": "ui.Panel",
              "style": "windowContentSeparator",
              "frame": [0, 180, "MAX($tempFields.digits * 110, 460)", 1],
              "zIndex": 10
            }, {
              "type": "ui.Text",
              "styles": ["regularUIText"],
              "sizeToFit": true,
              "text": "Number",
              "zIndex": 10,
              "frame": [20, 15]
            }, {
              "type": "ui.StackLayout",
              "components": [
                {
                  "id": "numberInput",
                  "type": "Component_NumberInput",
                  "params": {
                    "digits": $(function() {
                      return $tempFields.digits;
                    })
                  }
                }
              ],
              "sizeToFit": true,
              "id": "numberField",
              "zIndex": 10,
              "alignmentX": "center",
              "frame": [12, 50],
              "dataField": $(function() {
                return $tempFields.digits;
              }),
              "template": {
                "type": "ui.FreeLayout",
                "margin": [5, 5, 5, 5],
                "sizeToFit": true,
                "controls": [
                  {
                    "type": "ui.Image",
                    "image": "entrybox"
                  }, {
                    "type": "ui.Text",
                    "frame": [0, 0],
                    "sizeToFit": true,
                    "alignmentX": "center",
                    "alignmentY": "center",
                    "style": "numberInputEntryText",
                    "text": "0"
                  }
                ]
              }
            }
          ]
        }, {
          "type": "ui.GridLayout",
          "sizeToFit": true,
          "rows": 4,
          "columns": 3,
          "alignmentY": 0,
          "frame": [30, 185],
          "cellSpacing": [0, 0, 40, 0],
          "controls": [
            {
              "type": "ui.Number",
              "params": {
                "text": "1",
                "number": 1,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "2",
                "number": 2,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "3",
                "number": 3,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "4",
                "number": 4,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "5",
                "number": 5,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "6",
                "number": 6,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "7",
                "number": 7,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "8",
                "number": 8,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "9",
                "number": 9,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }, {
              "type": "ui.Number",
              "params": {
                "text": "0",
                "number": 0,
                "target": $(function() {
                  return 'numberField.numberInput';
                })
              }
            }
          ]
        }, {
          "type": "ui.NumberBackspace",
          "params": {
            "target": $(function() {
              return 'numberField.numberInput';
            })
          },
          "frame": ["100% - 120", 260]
        }, {
          "type": "ui.NumberAccept",
          "frame": ["100% - 120", 200]
        }
      ]
    }
  ]
};

ui.UiFactory.customTypes["ui.Number"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Frame",
      "style": "selectableWindowShadow",
      "images": ["", "selection", "", "", ""],
      "zIndex": 5000,
      "padding": [-16, -16, -16, -16],
      "frame": [0, 0, 70, 70],
      "actions": [
        {
          "name": "action_addNumber",
          "target": (function() {
            return p.target;
          }),
          "params": {
            "number": (function() {
              return p.number;
            })
          }
        }
      ]
    }, {
      "type": "ui.Text",
      "sizeToFit": true,
      "alignmentX": "center",
      "alignmentY": "center",
      "style": "numberInputDigitText",
      "text": (function() {
        return p.text;
      }),
      "zIndex": 5000
    }
  ]
};

ui.UiFactory.customTypes["ui.NumberBackspace"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Text",
      "sizeToFit": true,
      "styles": ["regularUIText"],
      "text": "Back",
      "zIndex": 5000,
      "action": {
        "name": "action_removeNumber",
        "target": (function() {
          return p.target;
        }),
        "params": {
          "number": (function() {
            return p.number;
          })
        }
      }
    }
  ]
};

ui.UiFactory.customTypes["ui.NumberAccept"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Text",
      "sizeToFit": true,
      "styles": ["regularUIText"],
      "text": "Confirm",
      "zIndex": 5000,
      "action": {
        "name": "emitEvent",
        "params": {
          "name": "accept",
          "source": $(function() {
            return o.parent.parent.parent;
          }),
          "data": {
            "number": $(function() {
              return $numberField.numberInput.number;
            })
          }
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Template_InputNumberBox_56.js
ui.UiFactory.customTypes["ui.InputTextBox"] = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.FreeLayout",
      "sizeToFit": true,
      "alignmentX": "center",
      "frame": [0, 10],
      "zIndex": 1000,
      "controls": [
        {
          "type": "ui.FreeLayout",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.Window",
              "frame": [0, 0, "MAX($tempFields.letters * 110, 900)", 490],
              "zIndex": 5
            }, {
              "type": "ui.Panel",
              "style": "windowSubPanel",
              "frame": ["MAX($tempFields.letters * 110, 900) - 130", 180, 130, 470 - 160],
              "zIndex": 10
            }, {
              "type": "ui.Panel",
              "color": [111, 111, 111],
              "frame": [0, 180, "MAX($tempFields.letters * 110, 900)", 1],
              "zIndex": 10
            }, {
              "type": "ui.Text",
              "styles": ["regularUIText"],
              "sizeToFit": true,
              "text": "Text Entry",
              "zIndex": 10,
              "frame": [20, 15]
            }, {
              "type": "ui.StackLayout",
              "components": [
                {
                  "id": "textInput",
                  "type": "Component_TextInput",
                  "params": {
                    "letters": $(function() {
                      return $tempFields.letters;
                    })
                  }
                }
              ],
              "sizeToFit": true,
              "id": "textField",
              "zIndex": 10,
              "alignmentX": "center",
              "frame": [12, 50],
              "dataField": $(function() {
                return $tempFields.letters;
              }),
              "template": {
                "type": "ui.FreeLayout",
                "margin": [5, 5, 5, 5],
                "sizeToFit": true,
                "controls": [
                  {
                    "type": "ui.Image",
                    "image": "entrybox"
                  }, {
                    "type": "ui.Text",
                    "frame": [0, 0],
                    "sizeToFit": true,
                    "alignmentX": "center",
                    "alignmentY": "center",
                    "color": [0, 0, 0, 0],
                    "style": "textInputEntryText",
                    "text": ""
                  }
                ]
              }
            }
          ]
        }, {
          "type": "ui.GridLayout",
          "sizeToFit": true,
          "id": "charPage1_1",
          "rows": 6,
          "order": 10,
          "columns": 5,
          "alignmentY": 0,
          "frame": [30, 185],
          "cellSpacing": [0, 0, 20, 0],
          "controls": $(function() {
            return $dataFields.textInputPages[0];
          })
        }, {
          "type": "ui.GridLayout",
          "id": "charPage1_2",
          "sizeToFit": true,
          "rows": 6,
          "columns": 5,
          "alignmentY": 0,
          "frame": [420, 185],
          "cellSpacing": [0, 0, 20, 0],
          "controls": $(function() {
            return $dataFields.textInputPages[1];
          })
        }, {
          "type": "ui.GridLayout",
          "sizeToFit": true,
          "id": "charPage2_1",
          "visible": false,
          "rows": 6,
          "order": 10,
          "columns": 5,
          "alignmentY": 0,
          "frame": [30, 185],
          "cellSpacing": [0, 0, 20, 0],
          "controls": $(function() {
            return $dataFields.textInputPages[2];
          })
        }, {
          "type": "ui.GridLayout",
          "id": "charPage2_2",
          "visible": false,
          "sizeToFit": true,
          "rows": 6,
          "columns": 5,
          "alignmentY": 0,
          "frame": [420, 185],
          "cellSpacing": [0, 0, 20, 0],
          "controls": $(function() {
            return $dataFields.textInputPages[3];
          })
        }, {
          "type": "ui.TextBackspace",
          "params": {
            "target": $(function() {
              return 'textField.textInput';
            })
          },
          "frame": ["100% - 120", 260]
        }, {
          "type": "ui.TextAccept",
          "frame": ["100% - 120", 200]
        }, {
          "type": "ui.Text",
          "sizeToFit": true,
          "styles": ["regularUIText"],
          "frame": ["100% - 120", 320],
          "text": "Page",
          "zIndex": 5000,
          "action": {
            "name": "executeFormulas",
            "params": [
              $(function() {
                return $charPage1_1.visible = !$charPage1_1.visible;
              }), $(function() {
                return $charPage1_2.visible = !$charPage1_2.visible;
              }), $(function() {
                return $charPage2_1.visible = !$charPage2_1.visible;
              }), $(function() {
                return $charPage2_2.visible = !$charPage2_2.visible;
              })
            ]
          }
        }
      ]
    }
  ]
};

ui.UiFactory.customTypes["ui.Letter"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Frame",
      "styles": ["selectableWindowShadow"],
      "zIndex": 5000,
      "padding": [-16, -16, -16, -16],
      "frame": [0, 0, 50, 50],
      "actions": [
        {
          "name": "action_addLetter",
          "target": (function() {
            return p.target;
          }),
          "params": {
            "letter": (function() {
              return p.text;
            })
          }
        }
      ]
    }, {
      "type": "ui.Text",
      "sizeToFit": true,
      "alignmentX": "center",
      "alignmentY": "center",
      "style": "textInputLetterText",
      "text": function() {
        return p.text;
      },
      "zIndex": 5000
    }
  ]
};

ui.UiFactory.customTypes["ui.TextBackspace"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Text",
      "sizeToFit": true,
      "styles": ["regularUIText"],
      "text": "Back",
      "zIndex": 5000,
      "action": {
        "name": "action_removeLetter",
        "target": (function() {
          return p.target;
        }),
        "params": {
          "letter": (function() {
            return p.text;
          })
        }
      }
    }
  ]
};

ui.UiFactory.customTypes["ui.TextAccept"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Text",
      "sizeToFit": true,
      "styles": ["regularUIText"],
      "text": "Confirm",
      "zIndex": 5000,
      "action": {
        "name": "emitEvent",
        "params": {
          "name": "accept",
          "source": $(function() {
            return o.parent.parent.parent;
          }),
          "data": {
            "text": $(function() {
              return $textField.textInput.text;
            })
          }
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Template_InputTextBox_64.js
ui.UiFactory.customTypes["ui.FreeChoiceBox"] = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.StackLayout",
      "sizeToFit": true,
      "alignmentX": 1,
      "alignmentY": 0,
      "visible": false,
      "formulas": [
        $(function() {
          return o.visible = $tempFields.choiceTimer.behavior.isRunning && $tempFields.choiceTimerVisible;
        })
      ],
      "controls": [
        {
          "type": "ui.Text",
          "style": "choiceTimerText",
          "format": "%02d",
          "sizeToFit": true,
          "updateBehavior": "continuous",
          "formulas": [
            $(function() {
              return o.text = $tempFields.choiceTimer.behavior.minutes;
            })
          ],
          "text": ""
        }, {
          "type": "ui.Text",
          "sizeToFit": true,
          "style": "choiceTimerText",
          "text": ":"
        }, {
          "type": "ui.Text",
          "style": "choiceTimerText",
          "sizeToFit": true,
          "format": "%02d",
          "updateBehavior": "continuous",
          "id": "seconds",
          "formulas": [
            $(function() {
              return o.text = $tempFields.choiceTimer.behavior.seconds;
            })
          ],
          "text": ""
        }
      ]
    }, {
      "type": "ui.FreeLayout",
      "frame": [0, 0, Graphics.width, Graphics.height],
      "dataField": $(function() {
        return $tempFields.choices;
      }),
      "template": {
        "type": "ui.FreeLayout",
        "controls": [
          {
            "type": "ui.SelectableWindow",
            "frame": [0, 0, "100%", "100%"],
            "params": {
              "action": {
                "name": "emitEvent",
                "params": {
                  "name": "selectionAccept",
                  "source": $(function() {
                    return o.parent.parent.parent.parent;
                  }),
                  "data": $(function() {
                    return $tempFields.choices[o.parent.parent.index];
                  })
                }
              }
            },
            "zIndex": 4999
          }, {
            "type": "ui.Text",
            "sizeToFit": true,
            "styles": ["regularUIText"],
            "alignmentX": 1,
            "alignmentY": 1,
            "frame": [0, 0],
            "formulas": [
              $(function() {
                return o.text = $tempFields.choices[o.parent.index].text;
              })
            ],
            "zIndex": 5100
          }
        ]
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGtCQUFBLENBQXpCLEdBQStDO0VBQzNDLE1BQUEsRUFBUSxlQURtQztFQUUzQyxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FGa0M7RUFHM0MsVUFBQSxFQUFZO0lBQ1I7TUFDSSxNQUFBLEVBQVEsZ0JBRFo7TUFFSSxXQUFBLEVBQWEsSUFGakI7TUFHSSxZQUFBLEVBQWMsQ0FIbEI7TUFJSSxZQUFBLEVBQWMsQ0FKbEI7TUFLSSxTQUFBLEVBQVcsS0FMZjtNQU1JLFVBQUEsRUFBWTtRQUFDLENBQUEsQ0FBRSxTQUFBO2lCQUFHLENBQUMsQ0FBQyxPQUFGLEdBQVksV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsU0FBakMsSUFBK0MsV0FBVyxDQUFDO1FBQTFFLENBQUYsQ0FBRDtPQU5oQjtNQU9JLFVBQUEsRUFBWTtRQUNSO1VBQ0ksTUFBQSxFQUFRLFNBRFo7VUFFSSxPQUFBLEVBQVMsaUJBRmI7VUFHSSxRQUFBLEVBQVUsTUFIZDtVQUlJLFdBQUEsRUFBYSxJQUpqQjtVQUtJLGdCQUFBLEVBQWtCLFlBTHRCO1VBTUksVUFBQSxFQUFZO1lBQUMsQ0FBQSxDQUFFLFNBQUE7cUJBQUcsQ0FBQyxDQUFDLElBQUYsR0FBUyxXQUFXLENBQUMsV0FBVyxDQUFDLFFBQVEsQ0FBQztZQUE3QyxDQUFGLENBQUQ7V0FOaEI7VUFPSSxNQUFBLEVBQVEsRUFQWjtTQURRLEVBVVI7VUFDSSxNQUFBLEVBQVEsU0FEWjtVQUVJLFdBQUEsRUFBYSxJQUZqQjtVQUdJLE9BQUEsRUFBUyxpQkFIYjtVQUlJLE1BQUEsRUFBUSxHQUpaO1NBVlEsRUFnQlI7VUFDSSxNQUFBLEVBQVEsU0FEWjtVQUVJLE9BQUEsRUFBUyxpQkFGYjtVQUdJLFdBQUEsRUFBYSxJQUhqQjtVQUlJLFFBQUEsRUFBVSxNQUpkO1VBS0ksZ0JBQUEsRUFBa0IsWUFMdEI7VUFNSSxJQUFBLEVBQU0sU0FOVjtVQU9JLFVBQUEsRUFBWTtZQUFDLENBQUEsQ0FBRSxTQUFBO3FCQUFHLENBQUMsQ0FBQyxJQUFGLEdBQVMsV0FBVyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUM7WUFBN0MsQ0FBRixDQUFEO1dBUGhCO1VBUUksTUFBQSxFQUFRLEVBUlo7U0FoQlE7T0FQaEI7S0FEUSxFQW9DUjtNQUNJLE1BQUEsRUFBUSxlQURaO01BRUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBaEIsRUFBdUIsUUFBUSxDQUFDLE1BQWhDLENBRmI7TUFHSSxXQUFBLEVBQWMsQ0FBQSxDQUFFLFNBQUE7ZUFBRyxXQUFXLENBQUM7TUFBZixDQUFGLENBSGxCO01BSUksVUFBQSxFQUFZO1FBQ1IsTUFBQSxFQUFRLGVBREE7UUFFUixVQUFBLEVBQVc7VUFDUDtZQUNJLE1BQUEsRUFBUSxxQkFEWjtZQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sTUFBUCxFQUFlLE1BQWYsQ0FGYjtZQUlJLFFBQUEsRUFBVTtjQUNOLFFBQUEsRUFBVTtnQkFBQyxNQUFBLEVBQVEsV0FBVDtnQkFBc0IsUUFBQSxFQUFVO2tCQUFFLE1BQUEsRUFBUSxpQkFBVjtrQkFBNkIsUUFBQSxFQUFXLENBQUEsQ0FBRSxTQUFBOzJCQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztrQkFBMUIsQ0FBRixDQUF4QztrQkFBNkUsTUFBQSxFQUFTLENBQUEsQ0FBRSxTQUFBOzJCQUFHLFdBQVcsQ0FBQyxPQUFRLENBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBaEI7a0JBQXZCLENBQUYsQ0FBdEY7aUJBQWhDO2VBREo7YUFKZDtZQU9JLFFBQUEsRUFBVSxJQVBkO1dBRE8sRUFVUDtZQUNJLE1BQUEsRUFBUSxTQURaO1lBRUksV0FBQSxFQUFhLElBRmpCO1lBR0ksUUFBQSxFQUFVLENBQUMsZUFBRCxDQUhkO1lBSUksWUFBQSxFQUFjLENBSmxCO1lBS0ksWUFBQSxFQUFjLENBTGxCO1lBTUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FOYjtZQU9JLFVBQUEsRUFBWTtjQUFDLENBQUEsQ0FBRSxTQUFBO3VCQUFHLENBQUMsQ0FBQyxJQUFGLEdBQVMsV0FBVyxDQUFDLE9BQVEsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQVQsQ0FBZSxDQUFDO2NBQWhELENBQUYsQ0FBRDthQVBoQjtZQVFJLFFBQUEsRUFBVSxJQVJkO1dBVk87U0FGSDtPQUpoQjtLQXBDUTtHQUgrQiIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5jdXN0b21UeXBlc1tcInVpLkZyZWVDaG9pY2VCb3hcIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgIFwiZnJhbWVcIjogWzAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHRdLFxuICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5TdGFja0xheW91dFwiLFxuICAgICAgICAgICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WFwiOiAxLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRZXCI6IDAsXG4gICAgICAgICAgICBcInZpc2libGVcIjogbm8sXG4gICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8udmlzaWJsZSA9ICR0ZW1wRmllbGRzLmNob2ljZVRpbWVyLmJlaGF2aW9yLmlzUnVubmluZyBhbmQgJHRlbXBGaWVsZHMuY2hvaWNlVGltZXJWaXNpYmxlXSxcbiAgICAgICAgICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0eWxlXCI6IFwiY2hvaWNlVGltZXJUZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwiJTAyZFwiLFxuICAgICAgICAgICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcInVwZGF0ZUJlaGF2aW9yXCI6IFwiY29udGludW91c1wiLFxuICAgICAgICAgICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8udGV4dCA9ICR0ZW1wRmllbGRzLmNob2ljZVRpbWVyLmJlaGF2aW9yLm1pbnV0ZXNdLFxuICAgICAgICAgICAgICAgICAgICBcInRleHRcIjogXCJcIlxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwic3R5bGVcIjogXCJjaG9pY2VUaW1lclRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiOlwiXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlRleHRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJzdHlsZVwiOiBcImNob2ljZVRpbWVyVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImZvcm1hdFwiOiBcIiUwMmRcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ1cGRhdGVCZWhhdmlvclwiOiBcImNvbnRpbnVvdXNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJpZFwiOiBcInNlY29uZHNcIixcbiAgICAgICAgICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiBbJCAtPiBvLnRleHQgPSAkdGVtcEZpZWxkcy5jaG9pY2VUaW1lci5iZWhhdmlvci5zZWNvbmRzXSxcbiAgICAgICAgICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiXCJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHRdLFxuICAgICAgICAgICAgXCJkYXRhRmllbGRcIjogKCQgLT4gJHRlbXBGaWVsZHMuY2hvaWNlcyksXG4gICAgICAgICAgICBcInRlbXBsYXRlXCI6IHtcbiAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgICAgICAgICAgICAgXCJjb250cm9sc1wiOltcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU2VsZWN0YWJsZVdpbmRvd1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJwYXJhbXNcIjoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWN0aW9uXCI6IHtcIm5hbWVcIjogXCJlbWl0RXZlbnRcIiwgXCJwYXJhbXNcIjogeyBcIm5hbWVcIjogXCJzZWxlY3Rpb25BY2NlcHRcIiwgXCJzb3VyY2VcIjogKCQgLT4gby5wYXJlbnQucGFyZW50LnBhcmVudC5wYXJlbnQpLCBcImRhdGFcIjogKCQgLT4gJHRlbXBGaWVsZHMuY2hvaWNlc1tvLnBhcmVudC5wYXJlbnQuaW5kZXhdKSB9fVxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiekluZGV4XCI6IDQ5OTlcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFsaWdubWVudFhcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMF0sXG4gICAgICAgICAgICAgICAgICAgICAgICBcImZvcm11bGFzXCI6IFskIC0+IG8udGV4dCA9ICR0ZW1wRmllbGRzLmNob2ljZXNbby5wYXJlbnQuaW5kZXhdLnRleHRdLFxuICAgICAgICAgICAgICAgICAgICAgICAgXCJ6SW5kZXhcIjogNTEwMFxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgXVxufSJdfQ==
//# sourceURL=Template_FreeChoiceBox_73.js
ui.UiFactory.customTypes["ui.Slider"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "color": [131, 131, 131, 131],
      "type": "ui.Panel",
      "frame": [0, 0, "100% - 50", gs.UIConstants.SLIDER_TRACK_H],
      "alignmentY": "center"
    }, {
      "style": "sliderKnob",
      "focusable": true,
      "type": "ui.Image",
      "frame": [0, 0],
      "alignmentY": "center",
      "draggable": {
        "rect": [0, 0, 100, gs.UIConstants.OPTION_BUTTON_H],
        "axisX": true,
        "axisY": false
      },
      "formulas": [
        $(function() {
          return o.draggable.rect.width = o.parent.subObjects[0].dstRect.width;
        }), $(function() {
          if (this.onChange(o.parent.params.read.exec())) {
            return o.parent.controls[1].dstRect.x = Math.round((o.parent.controls[1].draggable.rect.width - o.parent.controls[1].dstRect.width) / o.parent.params.max * o.parent.params.read.exec() + o.parent.controls[1].draggable.rect.x);
          }
        }), $(function() {
          if (this.onChange(o.parent.controls[1].dstRect.x)) {
            return o.parent.params.write.exec(Math.round(o.parent.params.max / (o.parent.controls[1].draggable.rect.width - o.parent.controls[1].dstRect.width) * (o.parent.controls[1].dstRect.x - o.parent.controls[1].draggable.rect.x)));
          }
        }), $((function() {
          return o.parent.subObjects[2].text = o.parent.params.read.exec();
        }))
      ]
    }, {
      "type": "ui.Text",
      "color": [255, 255, 255],
      "frame": [0, 0],
      "style": "smallUIText",
      "alignmentX": "right",
      "alignmentY": "center",
      "format": "%s%",
      "text": "Hello",
      "sizeToFit": true
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLFdBQUEsQ0FBekIsR0FBd0M7RUFDcEMsTUFBQSxFQUFRLGVBRDRCO0VBRXBDLFdBQUEsRUFBYSxJQUZ1QjtFQUdwQyxVQUFBLEVBQVk7SUFDUjtNQUNJLE9BQUEsRUFBUyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixDQURiO01BRUksTUFBQSxFQUFRLFVBRlo7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFdBQVAsRUFBb0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFuQyxDQUhiO01BSUksWUFBQSxFQUFjLFFBSmxCO0tBRFEsRUFPUjtNQUNJLE9BQUEsRUFBUyxZQURiO01BRUksV0FBQSxFQUFhLElBRmpCO01BR0ksTUFBQSxFQUFRLFVBSFo7TUFJSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUpiO01BS0ksWUFBQSxFQUFjLFFBTGxCO01BTUksV0FBQSxFQUFhO1FBQUUsTUFBQSxFQUFRLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxHQUFQLEVBQVksRUFBRSxDQUFDLFdBQVcsQ0FBQyxlQUEzQixDQUFWO1FBQXVELE9BQUEsRUFBUyxJQUFoRTtRQUFzRSxPQUFBLEVBQVMsS0FBL0U7T0FOakI7TUFPSSxVQUFBLEVBQVk7UUFDUCxDQUFBLENBQUUsU0FBQTtpQkFBRyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxLQUFqQixHQUF5QixDQUFDLENBQUMsTUFBTSxDQUFDLFVBQVcsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUM7UUFBM0QsQ0FBRixDQURPLEVBRVAsQ0FBQSxDQUFFLFNBQUE7VUFBRyxJQUFHLElBQUMsQ0FBQSxRQUFELENBQVUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQXJCLENBQUEsQ0FBVixDQUFIO21CQUE4QyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBN0IsR0FBaUMsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsS0FBcEMsR0FBMEMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsT0FBTyxDQUFDLEtBQXhFLENBQUEsR0FBaUYsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBakcsR0FBdUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQXJCLENBQUEsQ0FBdkcsR0FBcUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFwTCxFQUEvRTs7UUFBSCxDQUFGLENBRk8sRUFHUCxDQUFBLENBQUUsU0FBQTtVQUFHLElBQUcsSUFBQyxDQUFBLFFBQUQsQ0FBVSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBdkMsQ0FBSDttQkFBaUQsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLElBQXRCLENBQTJCLElBQUksQ0FBQyxLQUFMLENBQVcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBaEIsR0FBc0IsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQXBDLEdBQTBDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxLQUF4RSxDQUF0QixHQUF1RyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUE3QixHQUErQixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQXBFLENBQWxILENBQTNCLEVBQWpEOztRQUFILENBQUYsQ0FITyxFQUlQLENBQUEsQ0FBRSxDQUFDLFNBQUE7aUJBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxVQUFXLENBQUEsQ0FBQSxDQUFFLENBQUMsSUFBdkIsR0FBOEIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQXJCLENBQUE7UUFBakMsQ0FBRCxDQUFGLENBSk87T0FQaEI7S0FQUSxFQXFCUjtNQUNJLE1BQUEsRUFBUSxTQURaO01BRUksT0FBQSxFQUFTLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLENBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQUhiO01BSUksT0FBQSxFQUFTLGFBSmI7TUFLSSxZQUFBLEVBQWMsT0FMbEI7TUFNSSxZQUFBLEVBQWMsUUFObEI7TUFPSSxRQUFBLEVBQVUsS0FQZDtNQVFJLE1BQUEsRUFBUSxPQVJaO01BU0ksV0FBQSxFQUFhLElBVGpCO0tBckJRO0dBSHdCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuU2xpZGVyXCJdID0ge1xuICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcImNvbG9yXCI6IFsxMzEsIDEzMSwgMTMxLCAxMzFdLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuUGFuZWxcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIFwiMTAwJSAtIDUwXCIsIGdzLlVJQ29uc3RhbnRzLlNMSURFUl9UUkFDS19IXSxcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzbGlkZXJLbm9iXCIsXG4gICAgICAgICAgICBcImZvY3VzYWJsZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDBdLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRZXCI6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBcImRyYWdnYWJsZVwiOiB7IFwicmVjdFwiOiBbMCwgMCwgMTAwLCBncy5VSUNvbnN0YW50cy5PUFRJT05fQlVUVE9OX0hdLCBcImF4aXNYXCI6IHRydWUsIFwiYXhpc1lcIjogZmFsc2UgfSxcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogW1xuICAgICAgICAgICAgICAgICgkIC0+IG8uZHJhZ2dhYmxlLnJlY3Qud2lkdGggPSBvLnBhcmVudC5zdWJPYmplY3RzWzBdLmRzdFJlY3Qud2lkdGgpLFxuICAgICAgICAgICAgICAgICgkIC0+IGlmIEBvbkNoYW5nZSBvLnBhcmVudC5wYXJhbXMucmVhZC5leGVjKCkgdGhlbiBvLnBhcmVudC5jb250cm9sc1sxXS5kc3RSZWN0LnggPSBNYXRoLnJvdW5kKChvLnBhcmVudC5jb250cm9sc1sxXS5kcmFnZ2FibGUucmVjdC53aWR0aC1vLnBhcmVudC5jb250cm9sc1sxXS5kc3RSZWN0LndpZHRoKSAvIG8ucGFyZW50LnBhcmFtcy5tYXggKiBvLnBhcmVudC5wYXJhbXMucmVhZC5leGVjKCkgKyBvLnBhcmVudC5jb250cm9sc1sxXS5kcmFnZ2FibGUucmVjdC54KSksXG4gICAgICAgICAgICAgICAgKCQgLT4gaWYgQG9uQ2hhbmdlIG8ucGFyZW50LmNvbnRyb2xzWzFdLmRzdFJlY3QueCB0aGVuIG8ucGFyZW50LnBhcmFtcy53cml0ZS5leGVjKE1hdGgucm91bmQoby5wYXJlbnQucGFyYW1zLm1heCAvIChvLnBhcmVudC5jb250cm9sc1sxXS5kcmFnZ2FibGUucmVjdC53aWR0aC1vLnBhcmVudC5jb250cm9sc1sxXS5kc3RSZWN0LndpZHRoKSAqIChvLnBhcmVudC5jb250cm9sc1sxXS5kc3RSZWN0Lngtby5wYXJlbnQuY29udHJvbHNbMV0uZHJhZ2dhYmxlLnJlY3QueCkpKSksXG4gICAgICAgICAgICAgICAgKCQgKC0+IG8ucGFyZW50LnN1Yk9iamVjdHNbMl0udGV4dCA9IG8ucGFyZW50LnBhcmFtcy5yZWFkLmV4ZWMoKSkpXG4gICAgICAgICAgICBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlRleHRcIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogWzI1NSwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMF0sXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic21hbGxVSVRleHRcIixcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WFwiOiBcInJpZ2h0XCIsXG4gICAgICAgICAgICBcImFsaWdubWVudFlcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIFwiZm9ybWF0XCI6IFwiJXMlXCJcbiAgICAgICAgICAgIFwidGV4dFwiOiBcIkhlbGxvXCIsXG4gICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Template_Slider_84.js
ui.UiFactory.customTypes["ui.OptionButton"] = {
  "type": "ui.StackLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Image",
      "imageHandling": 0,
      "selectable": true,
      "group": function() {
        return p.group;
      },
      "style": "optionButton",
      "action": function() {
        return p.action;
      },
      "formulas": [
        $((function() {
          if (this.onInitialize) {
            return o.ui.selected = this.data.read.exec();
          }
        }), {
          read: (function() {
            return p.read;
          })
        }), $((function() {
          return this.data.write.exec(o.ui.selected);
        }), {
          write: (function() {
            return p.write;
          })
        })
      ],
      "margin": [0, 0, 10, 0]
    }, {
      "type": "ui.Text",
      "id": "mybtn",
      "color": [255, 255, 255],
      "formatting": true,
      "style": "smallUIText",
      "alignmentY": "center",
      "text": function() {
        return p.label;
      },
      "frame": [0, 0],
      "sizeToFit": true
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGlCQUFBLENBQXpCLEdBQThDO0VBQzFDLE1BQUEsRUFBUSxnQkFEa0M7RUFFMUMsV0FBQSxFQUFhLElBRjZCO0VBRzFDLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxlQUFBLEVBQWlCLENBRnJCO01BR0ksWUFBQSxFQUFjLElBSGxCO01BSUksT0FBQSxFQUFTLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQUpiO01BS0ksT0FBQSxFQUFTLGNBTGI7TUFNSSxRQUFBLEVBQVUsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBTmQ7TUFPSSxVQUFBLEVBQVk7UUFDUixDQUFBLENBQUUsQ0FBQyxTQUFBO1VBQUcsSUFBRyxJQUFDLENBQUEsWUFBSjttQkFBc0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxRQUFMLEdBQWdCLElBQUMsQ0FBQSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQVgsQ0FBQSxFQUF0Qzs7UUFBSCxDQUFELENBQUYsRUFBZ0U7VUFBQSxJQUFBLEVBQU0sQ0FBQyxTQUFBO21CQUFHLENBQUMsQ0FBQztVQUFMLENBQUQsQ0FBTjtTQUFoRSxDQURRLEVBRVIsQ0FBQSxDQUFFLENBQUMsU0FBQTtpQkFDQyxJQUFDLENBQUEsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFaLENBQWlCLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBdEI7UUFERCxDQUFELENBQUYsRUFFRztVQUFBLEtBQUEsRUFBTyxDQUFDLFNBQUE7bUJBQUcsQ0FBQyxDQUFDO1VBQUwsQ0FBRCxDQUFQO1NBRkgsQ0FGUTtPQVBoQjtNQWFJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sRUFBUCxFQUFXLENBQVgsQ0FiZDtLQURRLEVBZ0JSO01BQ0ksTUFBQSxFQUFRLFNBRFo7TUFFSSxJQUFBLEVBQU0sT0FGVjtNQUdJLE9BQUEsRUFBUyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxDQUhiO01BSUksWUFBQSxFQUFjLElBSmxCO01BS0ksT0FBQSxFQUFTLGFBTGI7TUFNSSxZQUFBLEVBQWMsUUFObEI7TUFPSSxNQUFBLEVBQVEsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBUFo7TUFRSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixDQVJiO01BU0ksV0FBQSxFQUFhLElBVGpCO0tBaEJRO0dBSDhCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuT3B0aW9uQnV0dG9uXCJdID0ge1xuICAgIFwidHlwZVwiOiBcInVpLlN0YWNrTGF5b3V0XCIsXG4gICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwiaW1hZ2VIYW5kbGluZ1wiOiAwLFxuICAgICAgICAgICAgXCJzZWxlY3RhYmxlXCI6IHllcyxcbiAgICAgICAgICAgIFwiZ3JvdXBcIjogLT4gcC5ncm91cCxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJvcHRpb25CdXR0b25cIixcbiAgICAgICAgICAgIFwiYWN0aW9uXCI6IC0+IHAuYWN0aW9uLFxuICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiBbXG4gICAgICAgICAgICAgICAgJCAoLT4gaWYgQG9uSW5pdGlhbGl6ZSB0aGVuIG8udWkuc2VsZWN0ZWQgPSBAZGF0YS5yZWFkLmV4ZWMoKSksIHJlYWQ6ICgtPiBwLnJlYWQpXG4gICAgICAgICAgICAgICAgJCAoLT4gXG4gICAgICAgICAgICAgICAgICAgIEBkYXRhLndyaXRlLmV4ZWMoby51aS5zZWxlY3RlZClcbiAgICAgICAgICAgICAgICApLCB3cml0ZTogKC0+IHAud3JpdGUpIywgXCJvbkFjdGlvblwiXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJtYXJnaW5cIjogWzAsIDAsIDEwLCAwXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICBcImlkXCI6IFwibXlidG5cIixcbiAgICAgICAgICAgIFwiY29sb3JcIjogWzI1NSwgMjU1LCAyNTVdLFxuICAgICAgICAgICAgXCJmb3JtYXR0aW5nXCI6IHRydWUsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic21hbGxVSVRleHRcIixcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IC0+IHAubGFiZWwsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwXSxcbiAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWVcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_OptionButton_90.js
ui.UiFactory.customTypes["ui.OptionButtonSet"] = {
  "type": "ui.StackLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.OptionButton",
      "params": {
        "label": (function() {
          return p.offLabel;
        }),
        "action": (function() {
          return p.offAction;
        }),
        "read": $((function() {
          return !this.data.exec();
        }), (function() {
          return p.read;
        })),
        "write": $((function(v) {
          return this.data.exec(!v);
        }), (function() {
          return p.write;
        })),
        "group": (function() {
          return p.group;
        })
      },
      "margin": [0, 0, 0, 0]
    }, {
      "type": "ui.OptionButton",
      "params": {
        "label": (function() {
          return p.onLabel;
        }),
        "action": (function() {
          return p.onAction;
        }),
        "read": $((function() {
          return this.data.exec();
        }), (function() {
          return p.read;
        })),
        "write": $((function(v) {
          return this.data.exec(v);
        }), (function() {
          return p.write;
        })),
        "group": (function() {
          return p.group;
        })
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLG9CQUFBLENBQXpCLEdBQWlEO0VBQzdDLE1BQUEsRUFBUSxnQkFEcUM7RUFFN0MsV0FBQSxFQUFhLElBRmdDO0VBRzdDLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLGlCQURaO01BRUksUUFBQSxFQUFVO1FBQ04sT0FBQSxFQUFTLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBREg7UUFFTixRQUFBLEVBQVUsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUQsQ0FGSjtRQUdOLE1BQUEsRUFBUyxDQUFBLENBQUUsQ0FBQyxTQUFBO2lCQUFHLENBQUMsSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQUE7UUFBSixDQUFELENBQUYsRUFBc0IsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUQsQ0FBdEIsQ0FISDtRQUlOLE9BQUEsRUFBVSxDQUFBLENBQUUsQ0FBQyxTQUFDLENBQUQ7aUJBQU8sSUFBQyxDQUFBLElBQUksQ0FBQyxJQUFOLENBQVcsQ0FBQyxDQUFaO1FBQVAsQ0FBRCxDQUFGLEVBQTJCLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBQTNCLENBSko7UUFLTixPQUFBLEVBQVMsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUQsQ0FMSDtPQUZkO01BU0ksUUFBQSxFQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsQ0FBVixDQVRkO0tBRFEsRUFZUjtNQUNJLE1BQUEsRUFBUSxpQkFEWjtNQUVJLFFBQUEsRUFBVTtRQUNOLE9BQUEsRUFBUyxDQUFDLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FBRCxDQURIO1FBRU4sUUFBQSxFQUFVLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBRko7UUFHTixNQUFBLEVBQVMsQ0FBQSxDQUFFLENBQUMsU0FBQTtpQkFBRyxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBQTtRQUFILENBQUQsQ0FBRixFQUFxQixDQUFDLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FBRCxDQUFyQixDQUhIO1FBSU4sT0FBQSxFQUFVLENBQUEsQ0FBRSxDQUFDLFNBQUMsQ0FBRDtpQkFBTyxJQUFDLENBQUEsSUFBSSxDQUFDLElBQU4sQ0FBVyxDQUFYO1FBQVAsQ0FBRCxDQUFGLEVBQTBCLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBQTFCLENBSko7UUFLTixPQUFBLEVBQVMsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUQsQ0FMSDtPQUZkO0tBWlE7R0FIaUMiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkuY3VzdG9tVHlwZXNbXCJ1aS5PcHRpb25CdXR0b25TZXRcIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuU3RhY2tMYXlvdXRcIixcbiAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5PcHRpb25CdXR0b25cIixcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IHsgXG4gICAgICAgICAgICAgICAgXCJsYWJlbFwiOiAoLT4gcC5vZmZMYWJlbCksIFxuICAgICAgICAgICAgICAgIFwiYWN0aW9uXCI6ICgtPiBwLm9mZkFjdGlvbiksIFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiAoJCAoLT4gIUBkYXRhLmV4ZWMoKSksICgtPiBwLnJlYWQpKSxcbiAgICAgICAgICAgICAgICBcIndyaXRlXCI6ICgkICgodikgLT4gQGRhdGEuZXhlYyghdikpLCAoLT4gcC53cml0ZSkpLFxuICAgICAgICAgICAgICAgIFwiZ3JvdXBcIjogKC0+IHAuZ3JvdXApXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgXCJtYXJnaW5cIjogWzAsIDAsIDAsIDBdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLk9wdGlvbkJ1dHRvblwiLFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcbiAgICAgICAgICAgICAgICBcImxhYmVsXCI6ICgtPiBwLm9uTGFiZWwpLCBcbiAgICAgICAgICAgICAgICBcImFjdGlvblwiOiAoLT4gcC5vbkFjdGlvbiksIFxuICAgICAgICAgICAgICAgIFwicmVhZFwiOiAoJCAoLT4gQGRhdGEuZXhlYygpKSwgKC0+IHAucmVhZCkpLFxuICAgICAgICAgICAgICAgIFwid3JpdGVcIjogKCQgKCh2KSAtPiBAZGF0YS5leGVjKHYpKSwgKC0+IHAud3JpdGUpKSxcbiAgICAgICAgICAgICAgICBcImdyb3VwXCI6ICgtPiBwLmdyb3VwKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Template_OptionButtonSet_94.js
ui.UiFactory.customTypes["ui.Window"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.Frame",
      "image": "dropshadow",
      "style": "windowShadow",
      "frame": [0, 0, "100%", "100%"],
      "zIndex": 0,
      "order": 0
    }, {
      "type": "ui.Image",
      "style": "windowTilePattern",
      "frame": [0, 0, "100%", "100%"],
      "opacity": function() {
        var ref;
        return (ref = p.backgroundOpacity) != null ? ref : 255;
      },
      "zIndex": 1,
      "order": 1
    }, {
      "type": "ui.Image",
      "style": "windowStretchPattern",
      "frame": [0, 0, "100%", "100%"],
      "opacity": function() {
        var ref;
        return (ref = p.backgroundOpacity) != null ? ref : 255;
      },
      "zIndex": 2,
      "order": 2
    }, {
      "type": "ui.Frame",
      "style": "windowFrame",
      "frame": [0, 0, "100%", "100%"],
      "zIndex": 3,
      "order": 3,
      "action": function() {
        return p.action;
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLFdBQUEsQ0FBekIsR0FBd0M7RUFDcEMsTUFBQSxFQUFRLGVBRDRCO0VBRXBDLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsWUFGYjtNQUdJLE9BQUEsRUFBUyxjQUhiO01BSUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQUpiO01BS0ksUUFBQSxFQUFVLENBTGQ7TUFNSSxPQUFBLEVBQVMsQ0FOYjtLQURRLEVBU1I7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLE9BQUEsRUFBUyxtQkFGYjtNQUdJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sTUFBUCxFQUFlLE1BQWYsQ0FIYjtNQUlJLFNBQUEsRUFBVyxTQUFBO0FBQUcsWUFBQTsyREFBc0I7TUFBekIsQ0FKZjtNQUtJLFFBQUEsRUFBVSxDQUxkO01BTUksT0FBQSxFQUFTLENBTmI7S0FUUSxFQWlCUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLHNCQUZiO01BR0ksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQUhiO01BSUksU0FBQSxFQUFXLFNBQUE7QUFBRyxZQUFBOzJEQUFzQjtNQUF6QixDQUpmO01BS0ksUUFBQSxFQUFVLENBTGQ7TUFNSSxPQUFBLEVBQVMsQ0FOYjtLQWpCUSxFQXlCUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLGFBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxNQUFmLENBSGI7TUFJSSxRQUFBLEVBQVUsQ0FKZDtNQUtJLE9BQUEsRUFBUyxDQUxiO01BTUksUUFBQSxFQUFVLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQU5kO0tBekJRO0dBRndCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuV2luZG93XCJdID0ge1xuICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuRnJhbWVcIixcbiAgICAgICAgICAgIFwiaW1hZ2VcIjogXCJkcm9wc2hhZG93XCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwid2luZG93U2hhZG93XCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBcIjEwMCVcIiwgXCIxMDAlXCJdLFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMCxcbiAgICAgICAgICAgIFwib3JkZXJcIjogMCxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJ3aW5kb3dUaWxlUGF0dGVyblwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwib3BhY2l0eVwiOiAtPiBwLmJhY2tncm91bmRPcGFjaXR5ID8gMjU1LFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMSxcbiAgICAgICAgICAgIFwib3JkZXJcIjogMSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJ3aW5kb3dTdHJldGNoUGF0dGVyblwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwib3BhY2l0eVwiOiAtPiBwLmJhY2tncm91bmRPcGFjaXR5ID8gMjU1LFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMixcbiAgICAgICAgICAgIFwib3JkZXJcIjogMlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5GcmFtZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIndpbmRvd0ZyYW1lXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBcIjEwMCVcIiwgXCIxMDAlXCJdLFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMyxcbiAgICAgICAgICAgIFwib3JkZXJcIjogMyxcbiAgICAgICAgICAgIFwiYWN0aW9uXCI6IC0+IHAuYWN0aW9uXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Template_Window_103.js
ui.UiFactory.customTypes["ui.TitledWindow"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.Frame",
      "style": "windowShadow",
      "frame": [0, 0, "100%", "100%"]
    }, {
      "type": "ui.Image",
      "style": "windowTilePattern",
      "frame": [0, 0, "100%", "100%"]
    }, {
      "type": "ui.Image",
      "style": "windowStretchPattern",
      "frame": [0, 0, "100%", "100%"]
    }, {
      "type": "ui.Frame",
      "style": "windowFrame",
      "frame": [0, 0, "100%", "100%"]
    }, {
      "type": "ui.Text",
      "text": function() {
        return p.title;
      },
      "style": "smallUIText",
      "frame": [10, 10],
      "sizeToFit": true
    }, {
      "type": "ui.Panel",
      "style": "windowContentSeparator",
      "frame": [0, 45, "100%", 1]
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGlCQUFBLENBQXpCLEdBQThDO0VBQzFDLE1BQUEsRUFBUSxlQURrQztFQUUxQyxVQUFBLEVBQVk7SUFDUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLGNBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxNQUFmLENBSGI7S0FEUSxFQU1SO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsbUJBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxNQUFmLENBSGI7S0FOUSxFQVdSO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsc0JBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxNQUFmLENBSGI7S0FYUSxFQWdCUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLGFBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxNQUFmLENBSGI7S0FoQlEsRUFxQlI7TUFDSSxNQUFBLEVBQVEsU0FEWjtNQUVJLE1BQUEsRUFBUSxTQUFBO2VBQUcsQ0FBQyxDQUFDO01BQUwsQ0FGWjtNQUdJLE9BQUEsRUFBUyxhQUhiO01BSUksT0FBQSxFQUFTLENBQUMsRUFBRCxFQUFLLEVBQUwsQ0FKYjtNQUtJLFdBQUEsRUFBYSxJQUxqQjtLQXJCUSxFQTRCUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLHdCQUZiO01BR0ksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLEVBQUosRUFBUSxNQUFSLEVBQWdCLENBQWhCLENBSGI7S0E1QlE7R0FGOEIiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkuY3VzdG9tVHlwZXNbXCJ1aS5UaXRsZWRXaW5kb3dcIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5GcmFtZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIndpbmRvd1NoYWRvd1wiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJ3aW5kb3dUaWxlUGF0dGVyblwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5JbWFnZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIndpbmRvd1N0cmV0Y2hQYXR0ZXJuXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBcIjEwMCVcIiwgXCIxMDAlXCJdXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkZyYW1lXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwid2luZG93RnJhbWVcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIFwiMTAwJVwiLCBcIjEwMCVcIl1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IC0+IHAudGl0bGUsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic21hbGxVSVRleHRcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzEwLCAxMF0sXG4gICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlBhbmVsXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwid2luZG93Q29udGVudFNlcGFyYXRvclwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgNDUsIFwiMTAwJVwiLCAxXVxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Template_TitledWindow_110.js
ui.UiFactory.customTypes["ui.ChoiceBox"] = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "controls": [
    {
      "type": "ui.StackLayout",
      "sizeToFit": true,
      "alignmentX": 1,
      "alignmentY": 0,
      "visible": false,
      "formulas": [
        $(function() {
          return o.visible = $tempFields.choiceTimer.behavior.isRunning && $tempFields.choiceTimerVisible;
        })
      ],
      "controls": [
        {
          "type": "ui.Text",
          "style": "choiceTimerText",
          "format": "%02d",
          "sizeToFit": true,
          "updateBehavior": "continuous",
          "formulas": [
            $(function() {
              return o.text = $tempFields.choiceTimer.behavior.minutes;
            })
          ],
          "text": ""
        }, {
          "type": "ui.Text",
          "sizeToFit": true,
          "style": "choiceTimerText",
          "text": ":"
        }, {
          "type": "ui.Text",
          "style": "choiceTimerText",
          "sizeToFit": true,
          "format": "%02d",
          "updateBehavior": "continuous",
          "id": "seconds",
          "formulas": [
            $(function() {
              return o.text = $tempFields.choiceTimer.behavior.seconds;
            })
          ],
          "text": ""
        }
      ]
    }, {
      "type": "ui.VerticalScrollView",
      "orientation": "vertical",
      "sizeToFit": true,
      "alignmentX": 1,
      "frame": [0, 30, Graphics.width, Graphics.height - 220],
      "margin": [0, 200, 0, 0],
      "formulas": [
        $(function() {
          if ($gameMessageNVL.visible) {
            return o.dstRect.y = $gameMessageNVL_message.textRenderer.currentY + 20;
          }
        })
      ],
      "params": {
        "dataField": $(function() {
          return $tempFields.choices;
        }),
        "template": {
          "type": "ui.FreeLayout",
          "id": "choiceEntry",
          "alignmentX": "center",
          "sizeToFit": true,
          "style": "choiceBoxEntry",
          "margin": [0, 20, 0, 10],
          "formulas": [
            $(function() {
              if (this.onInitialize) {
                return o.ui.enabled = $tempFields.choices[o.index].isEnabled;
              }
            })
          ],
          "controls": [
            {
              "type": "ui.SelectableWindow",
              "frame": [0, 0, 750, 50],
              "inheritProperties": true,
              "params": {
                "action": {
                  "name": "emitEvent",
                  "params": {
                    "name": "selectionAccept",
                    "source": $(function() {
                      return o.parent.parent.parent.parent.parent;
                    }),
                    "data": $(function() {
                      return $tempFields.choices[o.parent.parent.index];
                    })
                  }
                }
              },
              "zIndex": 4999
            }, {
              "type": "ui.Text",
              "inheritProperties": true,
              "formatting": true,
              "wordWrap": false,
              "sizeToFit": true,
              "styles": ["regularUIText"],
              "alignmentX": 1,
              "alignmentY": 1,
              "frame": [0, 0],
              "formulas": [
                $(function() {
                  var ref;
                  return o.text = lcs((ref = $tempFields.choices[o.parent.index]) != null ? ref.text : void 0);
                })
              ],
              "zIndex": 5100
            }
          ]
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Template_ChoiceBox_123.js
ui.UiFactory.customTypes["ui.ConfirmationButton"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.SelectableWindow",
      "frame": [0, 0, "100%", "100%"],
      "margin": [0, 0, 0, 30],
      "params": {
        "action": {
          "event": "onAction",
          "name": "createControl",
          "params": {
            "descriptor": {
              "id": "confirmationDialog",
              "type": "ui.ConfirmationDialog",
              "zIndex": 90000,
              "params": {
                "message": function() {
                  return p.confirmationMessage;
                },
                "acceptActions": function() {
                  return p.acceptActions;
                },
                "rejectActions": function() {
                  return p.rejectActions;
                }
              }
            }
          }
        }
      },
      "zIndex": 4999
    }, {
      "type": "ui.Text",
      "sizeToFit": true,
      "styles": ["regularUIText"],
      "alignmentX": "center",
      "alignmentY": "center",
      "frame": [0, 0],
      "margin": [0, 0, 0, 0],
      "text": function() {
        return p.text;
      },
      "zIndex": 5100
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHVCQUFBLENBQXpCLEdBQW9EO0VBQ2hELE1BQUEsRUFBUSxlQUR3QztFQUVoRCxVQUFBLEVBQVc7SUFDUDtNQUNJLE1BQUEsRUFBUSxxQkFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sTUFBUCxFQUFlLE1BQWYsQ0FGYjtNQUdJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLEVBQVYsQ0FIZDtNQUlJLFFBQUEsRUFBVTtRQUNOLFFBQUEsRUFBVTtVQUFFLE9BQUEsRUFBUyxVQUFYO1VBQXVCLE1BQUEsRUFBUSxlQUEvQjtVQUFnRCxRQUFBLEVBQVU7WUFBRSxZQUFBLEVBQWM7Y0FDaEYsSUFBQSxFQUFNLG9CQUQwRTtjQUVoRixNQUFBLEVBQVEsdUJBRndFO2NBR2hGLFFBQUEsRUFBVSxLQUhzRTtjQUloRixRQUFBLEVBQVU7Z0JBQ04sU0FBQSxFQUFXLFNBQUE7eUJBQUcsQ0FBQyxDQUFDO2dCQUFMLENBREw7Z0JBRU4sZUFBQSxFQUFpQixTQUFBO3lCQUFHLENBQUMsQ0FBQztnQkFBTCxDQUZYO2dCQUdOLGVBQUEsRUFBaUIsU0FBQTt5QkFBRyxDQUFDLENBQUM7Z0JBQUwsQ0FIWDtlQUpzRTthQUFoQjtXQUExRDtTQURKO09BSmQ7TUFrQkksUUFBQSxFQUFVLElBbEJkO0tBRE8sRUFxQlA7TUFDSSxNQUFBLEVBQVEsU0FEWjtNQUVJLFdBQUEsRUFBYSxJQUZqQjtNQUdJLFFBQUEsRUFBVSxDQUFDLGVBQUQsQ0FIZDtNQUlJLFlBQUEsRUFBYyxRQUpsQjtNQUtJLFlBQUEsRUFBYyxRQUxsQjtNQU1JLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBTmI7TUFPSSxRQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxDQUFWLENBUGQ7TUFRSSxNQUFBLEVBQVEsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBUlo7TUFTSSxRQUFBLEVBQVUsSUFUZDtLQXJCTztHQUZxQyIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5jdXN0b21UeXBlc1tcInVpLkNvbmZpcm1hdGlvbkJ1dHRvblwiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJjb250cm9sc1wiOltcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU2VsZWN0YWJsZVdpbmRvd1wiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAzMF0sXG4gICAgICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJhY3Rpb25cIjogeyBcImV2ZW50XCI6IFwib25BY3Rpb25cIiwgXCJuYW1lXCI6IFwiY3JlYXRlQ29udHJvbFwiLCBcInBhcmFtc1wiOiB7IFwiZGVzY3JpcHRvclwiOiB7IFxuICAgICAgICAgICAgICAgICAgICBcImlkXCI6IFwiY29uZmlybWF0aW9uRGlhbG9nXCIsXG4gICAgICAgICAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkNvbmZpcm1hdGlvbkRpYWxvZ1wiLFxuICAgICAgICAgICAgICAgICAgICBcInpJbmRleFwiOiA5MDAwMCxcbiAgICAgICAgICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcbiAgICAgICAgICAgICAgICAgICAgICAgIFwibWVzc2FnZVwiOiAtPiBwLmNvbmZpcm1hdGlvbk1lc3NhZ2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBcImFjY2VwdEFjdGlvbnNcIjogLT4gcC5hY2NlcHRBY3Rpb25zLCBcbiAgICAgICAgICAgICAgICAgICAgICAgIFwicmVqZWN0QWN0aW9uc1wiOiAtPiBwLnJlamVjdEFjdGlvbnNcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB9IH0gfVxuICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiekluZGV4XCI6IDQ5OTlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sXG4gICAgICAgICAgICBcImFsaWdubWVudFhcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMF0sXG4gICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgMCwgMF1cbiAgICAgICAgICAgIFwidGV4dFwiOiAtPiBwLnRleHQsXG4gICAgICAgICAgICBcInpJbmRleFwiOiA1MTAwXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Template_ConfirmationButton_130.js
ui.UiFactory.customTypes["ui.StepSlider"] = {
  "type": "ui.FreeLayout",
  "formulas": [
    $(function() {
      if (this.onInitialize) {
        return o.controls[2].draggable.step = o.params.read.exec();
      }
    }), $(function() {
      if (this.onChange(o.controls[2].draggable.step)) {
        return o.params.write.exec(o.controls[2].draggable.step);
      }
    })
  ],
  "controls": [
    {
      "type": "ui.Panel",
      "style": "sliderTrack",
      "frame": [0, 0, "100% - 90", gs.UIConstants.SLIDER_TRACK_H],
      "alignmentY": "center"
    }, {
      "type": "ui.SpreadLayout",
      "frame": [0, 0, "100% - 90", "100%"],
      "dataField": function() {
        return p.data;
      },
      "template": {
        "type": "ui.Image",
        "image": gs.UIConstants.OPTION_BUTTON_S_IMAGE_OFF,
        "alignmentY": "center"
      }
    }, {
      "style": "sliderKnob",
      "focusable": true,
      "imageHandling": 0,
      "type": "ui.Image",
      "frame": [0, 0],
      "alignmentY": "center",
      "formulas": [
        $(function() {
          return o.draggable.rect.width = o.parent.controls[0].dstRect.width;
        }), $(function() {
          return o.parent.controls[3].text = o.parent.params.data[o.parent.controls[2].draggable.step];
        })
      ],
      "draggable": {
        "rect": [0, 0, 100, gs.UIConstants.OPTION_BUTTON_H],
        "axisX": true,
        "axisY": false,
        "steps": function() {
          return p.steps;
        }
      }
    }, {
      "type": "ui.Text",
      "color": [255, 255, 255],
      "frame": [0, 0],
      "style": "smallUIText",
      "alignmentX": "right",
      "alignmentY": "center",
      "text": "Hello",
      "sizeToFit": true
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGVBQUEsQ0FBekIsR0FBNEM7RUFDeEMsTUFBQSxFQUFRLGVBRGdDO0VBRXhDLFVBQUEsRUFBWTtJQUNSLENBQUEsQ0FBRSxTQUFBO01BQUcsSUFBRyxJQUFDLENBQUEsWUFBSjtlQUFzQixDQUFDLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFNBQVMsQ0FBQyxJQUF4QixHQUErQixDQUFDLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxJQUFkLENBQUEsRUFBckQ7O0lBQUgsQ0FBRixDQURRLEVBRVIsQ0FBQSxDQUFFLFNBQUE7TUFBRyxJQUFHLElBQUMsQ0FBQSxRQUFELENBQVUsQ0FBQyxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxTQUFTLENBQUMsSUFBbEMsQ0FBSDtlQUErQyxDQUFDLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFmLENBQW9CLENBQUMsQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsU0FBUyxDQUFDLElBQTVDLEVBQS9DOztJQUFILENBQUYsQ0FGUTtHQUY0QjtFQU14QyxVQUFBLEVBQVk7SUFDUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksT0FBQSxFQUFTLGFBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFdBQVAsRUFBb0IsRUFBRSxDQUFDLFdBQVcsQ0FBQyxjQUFuQyxDQUhiO01BSUksWUFBQSxFQUFjLFFBSmxCO0tBRFEsRUFPUjtNQUNJLE1BQUEsRUFBUSxpQkFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sV0FBUCxFQUFvQixNQUFwQixDQUZiO01BR0ksV0FBQSxFQUFhLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQUhqQjtNQUlJLFVBQUEsRUFBWTtRQUNSLE1BQUEsRUFBUSxVQURBO1FBRVIsT0FBQSxFQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUMseUJBRmhCO1FBR1IsWUFBQSxFQUFjLFFBSE47T0FKaEI7S0FQUSxFQWlCUjtNQUNJLE9BQUEsRUFBUyxZQURiO01BRUksV0FBQSxFQUFhLElBRmpCO01BR0ksZUFBQSxFQUFpQixDQUhyQjtNQUlJLE1BQUEsRUFBUSxVQUpaO01BS0ksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FMYjtNQU1JLFlBQUEsRUFBYyxRQU5sQjtNQU9JLFVBQUEsRUFBWTtRQUNSLENBQUEsQ0FBRSxTQUFBO2lCQUFHLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLEtBQWpCLEdBQXlCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQztRQUF6RCxDQUFGLENBRFEsRUFFUixDQUFBLENBQUUsU0FBQTtpQkFBRyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxJQUFyQixHQUE0QixDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFLLENBQUEsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsU0FBUyxDQUFDLElBQS9CO1FBQXBELENBQUYsQ0FGUTtPQVBoQjtNQVdJLFdBQUEsRUFBYTtRQUFFLE1BQUEsRUFBUSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sR0FBUCxFQUFZLEVBQUUsQ0FBQyxXQUFXLENBQUMsZUFBM0IsQ0FBVjtRQUF1RCxPQUFBLEVBQVMsSUFBaEU7UUFBc0UsT0FBQSxFQUFTLEtBQS9FO1FBQXNGLE9BQUEsRUFBUyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQS9GO09BWGpCO0tBakJRLEVBOEJSO01BQ0ksTUFBQSxFQUFRLFNBRFo7TUFFSSxPQUFBLEVBQVMsQ0FBQyxHQUFELEVBQU0sR0FBTixFQUFXLEdBQVgsQ0FGYjtNQUdJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBSGI7TUFJSSxPQUFBLEVBQVMsYUFKYjtNQUtJLFlBQUEsRUFBYyxPQUxsQjtNQU1JLFlBQUEsRUFBYyxRQU5sQjtNQU9JLE1BQUEsRUFBUSxPQVBaO01BUUksV0FBQSxFQUFhLElBUmpCO0tBOUJRO0dBTjRCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuU3RlcFNsaWRlclwiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJmb3JtdWxhc1wiOiBbXG4gICAgICAgICQgLT4gaWYgQG9uSW5pdGlhbGl6ZSB0aGVuIG8uY29udHJvbHNbMl0uZHJhZ2dhYmxlLnN0ZXAgPSBvLnBhcmFtcy5yZWFkLmV4ZWMoKVxuICAgICAgICAkIC0+IGlmIEBvbkNoYW5nZSBvLmNvbnRyb2xzWzJdLmRyYWdnYWJsZS5zdGVwIHRoZW4gby5wYXJhbXMud3JpdGUuZXhlYyhvLmNvbnRyb2xzWzJdLmRyYWdnYWJsZS5zdGVwKVxuICAgIF0sXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlBhbmVsXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwic2xpZGVyVHJhY2tcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIFwiMTAwJSAtIDkwXCIsIGdzLlVJQ29uc3RhbnRzLlNMSURFUl9UUkFDS19IXSxcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlNwcmVhZExheW91dFwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlIC0gOTBcIiwgXCIxMDAlXCJdLFxuICAgICAgICAgICAgXCJkYXRhRmllbGRcIjogLT4gcC5kYXRhLFxuICAgICAgICAgICAgXCJ0ZW1wbGF0ZVwiOiB7XG4gICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgICAgICBcImltYWdlXCI6IGdzLlVJQ29uc3RhbnRzLk9QVElPTl9CVVRUT05fU19JTUFHRV9PRkYsXG4gICAgICAgICAgICAgICAgXCJhbGlnbm1lbnRZXCI6IFwiY2VudGVyXCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInNsaWRlcktub2JcIixcbiAgICAgICAgICAgIFwiZm9jdXNhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICBcImltYWdlSGFuZGxpbmdcIjogMCxcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkltYWdlXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwXSxcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiBbXG4gICAgICAgICAgICAgICAgJCAtPiBvLmRyYWdnYWJsZS5yZWN0LndpZHRoID0gby5wYXJlbnQuY29udHJvbHNbMF0uZHN0UmVjdC53aWR0aFxuICAgICAgICAgICAgICAgICQgLT4gby5wYXJlbnQuY29udHJvbHNbM10udGV4dCA9IG8ucGFyZW50LnBhcmFtcy5kYXRhW28ucGFyZW50LmNvbnRyb2xzWzJdLmRyYWdnYWJsZS5zdGVwXVxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiZHJhZ2dhYmxlXCI6IHsgXCJyZWN0XCI6IFswLCAwLCAxMDAsIGdzLlVJQ29uc3RhbnRzLk9QVElPTl9CVVRUT05fSF0sIFwiYXhpc1hcIjogdHJ1ZSwgXCJheGlzWVwiOiBmYWxzZSwgXCJzdGVwc1wiOiAtPiBwLnN0ZXBzIH1cbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgXCJjb2xvclwiOiBbMjU1LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwXSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJzbWFsbFVJVGV4dFwiLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRYXCI6IFwicmlnaHRcIixcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IFwiSGVsbG9cIixcbiAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWVcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_StepSlider_128.js
ui.UiFactory.customTypes["ui.SelectableWindow"] = {
  "type": "ui.FreeLayout",
  "controls": [
    {
      "type": "ui.Frame",
      "styles": ["windowShadow", "selectableWindowShadow"],
      "inheritProperties": true,
      "frame": [0, 0, "100%", "100%"],
      "focusable": true,
      "order": 0,
      "zIndex": 10
    }, {
      "type": "ui.Image",
      "style": "windowTilePattern",
      "frame": [0, 0, "100%", "100%"],
      "inheritProperties": true,
      "zIndex": 11,
      "order": 1
    }, {
      "type": "ui.Image",
      "style": "windowStretchPattern",
      "frame": [0, 0, "100%", "100%"],
      "inheritProperties": true,
      "zIndex": 12,
      "order": 2
    }, {
      "type": "ui.Frame",
      "style": "windowFrame",
      "frame": [0, 0, "100%", "100%"],
      "inheritProperties": true,
      "zIndex": 13,
      "action": function() {
        return p.action;
      },
      "actions": function() {
        return p.actions;
      },
      "order": 3
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHFCQUFBLENBQXpCLEdBQWtEO0VBQzlDLE1BQUEsRUFBUSxlQURzQztFQUU5QyxVQUFBLEVBQVk7SUFDUjtNQUNJLE1BQUEsRUFBUSxVQURaO01BRUksUUFBQSxFQUFVLENBQUMsY0FBRCxFQUFpQix3QkFBakIsQ0FGZDtNQUdJLG1CQUFBLEVBQXFCLElBSHpCO01BSUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQUpiO01BS0ksV0FBQSxFQUFhLElBTGpCO01BTUksT0FBQSxFQUFTLENBTmI7TUFPSSxRQUFBLEVBQVUsRUFQZDtLQURRLEVBVVI7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLE9BQUEsRUFBUyxtQkFGYjtNQUdJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sTUFBUCxFQUFlLE1BQWYsQ0FIYjtNQUlJLG1CQUFBLEVBQXFCLElBSnpCO01BS0ksUUFBQSxFQUFVLEVBTGQ7TUFNSSxPQUFBLEVBQVMsQ0FOYjtLQVZRLEVBa0JSO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxPQUFBLEVBQVMsc0JBRmI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLE1BQVAsRUFBZSxNQUFmLENBSGI7TUFJSSxtQkFBQSxFQUFxQixJQUp6QjtNQUtJLFFBQUEsRUFBVSxFQUxkO01BTUksT0FBQSxFQUFTLENBTmI7S0FsQlEsRUEwQlI7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLE9BQUEsRUFBUyxhQUZiO01BR0ksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQUhiO01BSUksbUJBQUEsRUFBcUIsSUFKekI7TUFLSSxRQUFBLEVBQVUsRUFMZDtNQU1JLFFBQUEsRUFBVSxTQUFBO2VBQUcsQ0FBQyxDQUFDO01BQUwsQ0FOZDtNQU9JLFNBQUEsRUFBVyxTQUFBO2VBQUcsQ0FBQyxDQUFDO01BQUwsQ0FQZjtNQVFJLE9BQUEsRUFBUyxDQVJiO0tBMUJRO0dBRmtDIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuU2VsZWN0YWJsZVdpbmRvd1wiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkZyYW1lXCIsXG4gICAgICAgICAgICBcInN0eWxlc1wiOiBbXCJ3aW5kb3dTaGFkb3dcIiwgXCJzZWxlY3RhYmxlV2luZG93U2hhZG93XCJdLFxuICAgICAgICAgICAgXCJpbmhlcml0UHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwiZm9jdXNhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICBcIm9yZGVyXCI6IDAsXG4gICAgICAgICAgICBcInpJbmRleFwiOiAxMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5JbWFnZVwiLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcIndpbmRvd1RpbGVQYXR0ZXJuXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBcIjEwMCVcIiwgXCIxMDAlXCJdLFxuICAgICAgICAgICAgXCJpbmhlcml0UHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMTEsXG4gICAgICAgICAgICBcIm9yZGVyXCI6IDFcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuSW1hZ2VcIixcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJ3aW5kb3dTdHJldGNoUGF0dGVyblwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwiaW5oZXJpdFByb3BlcnRpZXNcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwiekluZGV4XCI6IDEyLFxuICAgICAgICAgICAgXCJvcmRlclwiOiAyXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkZyYW1lXCIsXG4gICAgICAgICAgICBcInN0eWxlXCI6IFwid2luZG93RnJhbWVcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIFwiMTAwJVwiLCBcIjEwMCVcIl0sXG4gICAgICAgICAgICBcImluaGVyaXRQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgICAgICBcInpJbmRleFwiOiAxMyxcbiAgICAgICAgICAgIFwiYWN0aW9uXCI6IC0+IHAuYWN0aW9uXG4gICAgICAgICAgICBcImFjdGlvbnNcIjogLT4gcC5hY3Rpb25zXG4gICAgICAgICAgICBcIm9yZGVyXCI6IDNcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_SelectableWindow_141.js
ui.UiFactory.customTypes["ui.MessageOptionButton"] = {
  "type": "ui.StackLayout",
  "sizeToFit": true,
  "style": "messageOptionButton",
  "controls": [
    {
      "type": "ui.Image",
      "inheritProperties": true,
      "selectable": true,
      "style": "messageOptionButton",
      "image": gs.UIConstants.OPTION_BUTTON_MSG_IMAGE_OFF,
      "actions": [
        {
          "name": "executeFormulas",
          "params": [
            $(function() {
              return o.parent.params.write.exec();
            }), $(function() {
              return o.parent.controls[1].ui.selected = o.ui.selected;
            })
          ]
        }, function() {
          return p.action1;
        }, function() {
          return p.action2;
        }
      ],
      "margin": [0, 0, 11, 0]
    }, {
      "type": "ui.Text",
      "inheritProperties": true,
      "sizeToFit": true,
      "style": "regularUIText",
      "selectable": true,
      "actions": [
        {
          "name": "executeFormulas",
          "params": [
            $(function() {
              return o.parent.params.write.exec();
            }), $(function() {
              return o.parent.controls[0].ui.selected = !o.parent.controls[0].ui.selected;
            }), $(function() {
              return o.ui.selected = o.parent.controls[0].ui.selected;
            })
          ]
        }, function() {
          return p.action1;
        }, function() {
          return p.action2;
        }
      ],
      "alignmentY": "center",
      "text": function() {
        return p.label;
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHdCQUFBLENBQXpCLEdBQXFEO0VBQ2pELE1BQUEsRUFBUSxnQkFEeUM7RUFFakQsV0FBQSxFQUFhLElBRm9DO0VBR2pELE9BQUEsRUFBUyxxQkFId0M7RUFJakQsVUFBQSxFQUFZO0lBQ1I7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLG1CQUFBLEVBQXFCLElBRnpCO01BR0ksWUFBQSxFQUFjLElBSGxCO01BSUksT0FBQSxFQUFTLHFCQUpiO01BS0ksT0FBQSxFQUFTLEVBQUUsQ0FBQyxXQUFXLENBQUMsMkJBTDVCO01BTUksU0FBQSxFQUFXO1FBQ1A7VUFDSSxNQUFBLEVBQVEsaUJBRFo7VUFFSSxRQUFBLEVBQVU7WUFDTixDQUFBLENBQUUsU0FBQTtxQkFBRyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsSUFBdEIsQ0FBQTtZQUFILENBQUYsQ0FETSxFQUVOLENBQUEsQ0FBRSxTQUFBO3FCQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxRQUF4QixHQUFtQyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQTNDLENBQUYsQ0FGTTtXQUZkO1NBRE8sRUFRUCxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBUk8sRUFTUCxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBVE87T0FOZjtNQWlCSSxRQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEVBQVAsRUFBVyxDQUFYLENBakJkO0tBRFEsRUFvQlI7TUFDSSxNQUFBLEVBQVEsU0FEWjtNQUVJLG1CQUFBLEVBQXFCLElBRnpCO01BR0ksV0FBQSxFQUFhLElBSGpCO01BSUksT0FBQSxFQUFTLGVBSmI7TUFLSSxZQUFBLEVBQWMsSUFMbEI7TUFNSSxTQUFBLEVBQVc7UUFDUDtVQUNJLE1BQUEsRUFBUSxpQkFEWjtVQUVJLFFBQUEsRUFBVTtZQUNOLENBQUEsQ0FBRSxTQUFBO3FCQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUF0QixDQUFBO1lBQUgsQ0FBRixDQURNLEVBRU4sQ0FBQSxDQUFFLFNBQUE7cUJBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsRUFBRSxDQUFDLFFBQXhCLEdBQW1DLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsRUFBRSxDQUFDO1lBQS9ELENBQUYsQ0FGTSxFQUdOLENBQUEsQ0FBRSxTQUFBO3FCQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBTCxHQUFnQixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxFQUFFLENBQUM7WUFBM0MsQ0FBRixDQUhNO1dBRmQ7U0FETyxFQVNQLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FUTyxFQVVQLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FWTztPQU5mO01Ba0JJLFlBQUEsRUFBYyxRQWxCbEI7TUFtQkksTUFBQSxFQUFRLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQW5CWjtLQXBCUTtHQUpxQyIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5jdXN0b21UeXBlc1tcInVpLk1lc3NhZ2VPcHRpb25CdXR0b25cIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuU3RhY2tMYXlvdXRcIixcbiAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgIFwic3R5bGVcIjogXCJtZXNzYWdlT3B0aW9uQnV0dG9uXCIsXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLkltYWdlXCIsXG4gICAgICAgICAgICBcImluaGVyaXRQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgICAgICBcInNlbGVjdGFibGVcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJtZXNzYWdlT3B0aW9uQnV0dG9uXCIsXG4gICAgICAgICAgICBcImltYWdlXCI6IGdzLlVJQ29uc3RhbnRzLk9QVElPTl9CVVRUT05fTVNHX0lNQUdFX09GRixcbiAgICAgICAgICAgIFwiYWN0aW9uc1wiOiBbXG4gICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgICAgXCJuYW1lXCI6IFwiZXhlY3V0ZUZvcm11bGFzXCIsIFxuICAgICAgICAgICAgICAgICAgICBcInBhcmFtc1wiOiBbXG4gICAgICAgICAgICAgICAgICAgICAgICAkIC0+IG8ucGFyZW50LnBhcmFtcy53cml0ZS5leGVjKClcbiAgICAgICAgICAgICAgICAgICAgICAgICQgLT4gby5wYXJlbnQuY29udHJvbHNbMV0udWkuc2VsZWN0ZWQgPSBvLnVpLnNlbGVjdGVkXG4gICAgICAgICAgICAgICAgICAgIF0gXG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAtPiBwLmFjdGlvbjEsXG4gICAgICAgICAgICAgICAgLT4gcC5hY3Rpb24yXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJtYXJnaW5cIjogWzAsIDAsIDExLCAwXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICBcImluaGVyaXRQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJzdHlsZVwiOiBcInJlZ3VsYXJVSVRleHRcIixcbiAgICAgICAgICAgIFwic2VsZWN0YWJsZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJhY3Rpb25zXCI6IFtcbiAgICAgICAgICAgICAgICB7IFxuICAgICAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJleGVjdXRlRm9ybXVsYXNcIiwgXG4gICAgICAgICAgICAgICAgICAgIFwicGFyYW1zXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgICQgLT4gby5wYXJlbnQucGFyYW1zLndyaXRlLmV4ZWMoKVxuICAgICAgICAgICAgICAgICAgICAgICAgJCAtPiBvLnBhcmVudC5jb250cm9sc1swXS51aS5zZWxlY3RlZCA9ICFvLnBhcmVudC5jb250cm9sc1swXS51aS5zZWxlY3RlZFxuICAgICAgICAgICAgICAgICAgICAgICAgJCAtPiBvLnVpLnNlbGVjdGVkID0gby5wYXJlbnQuY29udHJvbHNbMF0udWkuc2VsZWN0ZWRcbiAgICAgICAgICAgICAgICAgICAgXSBcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIC0+IHAuYWN0aW9uMVxuICAgICAgICAgICAgICAgIC0+IHAuYWN0aW9uMlxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiBcImNlbnRlclwiLFxuICAgICAgICAgICAgXCJ0ZXh0XCI6IC0+IHAubGFiZWxcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_MessageOptionButton_150.js
ui.UiFactory.customTypes["ui.Button"] = {
  "type": "ui.FreeLayout",
  "style": "button",
  "controls": [
    {
      "type": "ui.SelectableWindow",
      "frame": [0, 0, "100%", "100%"],
      "margin": [0, 0, 0, 30],
      "inheritProperties": true,
      "params": {
        "actions": function() {
          return p.actions;
        },
        "action": function() {
          return p.action;
        },
        "sound": function() {
          return p.sound;
        }
      },
      "zIndex": 4999
    }, {
      "type": "ui.Text",
      "executeFieldFormulas": true,
      "inheritProperties": true,
      "sizeToFit": true,
      "style": "buttonText",
      "frame": [0, 0],
      "text": function() {
        return p.text;
      },
      "zIndex": 5100
    }
  ]
};

ui.UiFactory.customTypes["ui.BackButton"] = {
  "type": "ui.Button",
  "params": {
    "text": function() {
      return (typeof p !== "undefined" && p !== null ? p.text : void 0) || {
        lcId: "B0FD4BF121D9E44E7589CDD35869F86F2227",
        defaultText: "Back"
      };
    },
    "actions": [
      {
        "event": "onMouseClick",
        "name": "saveSettings"
      }, {
        "event": "onMouseClick",
        "name": "previousLayout"
      }
    ],
    "sound": function() {
      return $dataFields.database.system.menuCancelSound;
    }
  }
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLFdBQUEsQ0FBekIsR0FBd0M7RUFDcEMsTUFBQSxFQUFRLGVBRDRCO0VBRXBDLE9BQUEsRUFBUyxRQUYyQjtFQUdwQyxVQUFBLEVBQVc7SUFDUDtNQUNJLE1BQUEsRUFBUSxxQkFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sTUFBUCxFQUFlLE1BQWYsQ0FGYjtNQUdJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLEVBQVYsQ0FIZDtNQUlJLG1CQUFBLEVBQXFCLElBSnpCO01BS0ksUUFBQSxFQUFVO1FBQ04sU0FBQSxFQUFXLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FETDtRQUVOLFFBQUEsRUFBVSxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBRko7UUFHTixPQUFBLEVBQVMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUhIO09BTGQ7TUFVSSxRQUFBLEVBQVUsSUFWZDtLQURPLEVBYVA7TUFDSSxNQUFBLEVBQVEsU0FEWjtNQUVJLHNCQUFBLEVBQXdCLElBRjVCO01BR0ksbUJBQUEsRUFBcUIsSUFIekI7TUFJSSxXQUFBLEVBQWEsSUFKakI7TUFLSSxPQUFBLEVBQVMsWUFMYjtNQU1JLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLENBTmI7TUFPSSxNQUFBLEVBQVEsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBUFo7TUFRSSxRQUFBLEVBQVUsSUFSZDtLQWJPO0dBSHlCOzs7QUE4QnhDLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGVBQUEsQ0FBekIsR0FBNEM7RUFDeEMsTUFBQSxFQUFRLFdBRGdDO0VBRXhDLFFBQUEsRUFBVTtJQUNOLE1BQUEsRUFBUSxTQUFBO3VEQUFHLENBQUMsQ0FBRSxjQUFILElBQVc7UUFBRSxJQUFBLEVBQU0sc0NBQVI7UUFBZ0QsV0FBQSxFQUFhLE1BQTdEOztJQUFkLENBREY7SUFFTixTQUFBLEVBQVc7TUFBQztRQUFFLE9BQUEsRUFBUyxjQUFYO1FBQTJCLE1BQUEsRUFBUSxjQUFuQztPQUFELEVBQXNEO1FBQUUsT0FBQSxFQUFTLGNBQVg7UUFBMkIsTUFBQSxFQUFRLGdCQUFuQztPQUF0RDtLQUZMO0lBR04sT0FBQSxFQUFTLFNBQUE7YUFBRyxXQUFXLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQztJQUEvQixDQUhIO0dBRjhCIiwic291cmNlc0NvbnRlbnQiOlsidWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuQnV0dG9uXCJdID0ge1xuICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICBcInN0eWxlXCI6IFwiYnV0dG9uXCIsXG4gICAgXCJjb250cm9sc1wiOltcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU2VsZWN0YWJsZVdpbmRvd1wiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAzMF0sXG4gICAgICAgICAgICBcImluaGVyaXRQcm9wZXJ0aWVzXCI6IHRydWUsXG4gICAgICAgICAgICBcInBhcmFtc1wiOiB7XG4gICAgICAgICAgICAgICAgXCJhY3Rpb25zXCI6IC0+IHAuYWN0aW9ucywgXG4gICAgICAgICAgICAgICAgXCJhY3Rpb25cIjogLT4gcC5hY3Rpb24sIFxuICAgICAgICAgICAgICAgIFwic291bmRcIjogLT4gcC5zb3VuZFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFwiekluZGV4XCI6IDQ5OTlcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLFxuICAgICAgICAgICAgXCJleGVjdXRlRmllbGRGb3JtdWxhc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJpbmhlcml0UHJvcGVydGllc1wiOiB0cnVlLFxuICAgICAgICAgICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwic3R5bGVcIjogXCJidXR0b25UZXh0XCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwXSxcbiAgICAgICAgICAgIFwidGV4dFwiOiAtPiBwLnRleHQsXG4gICAgICAgICAgICBcInpJbmRleFwiOiA1MTAwXG4gICAgICAgIH1cbiAgICBdXG59XG5cblxudWkuVWlGYWN0b3J5LmN1c3RvbVR5cGVzW1widWkuQmFja0J1dHRvblwiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5CdXR0b25cIixcbiAgICBcInBhcmFtc1wiOiB7IFxuICAgICAgICBcInRleHRcIjogLT4gcD8udGV4dCBvciB7IGxjSWQ6IFwiQjBGRDRCRjEyMUQ5RTQ0RTc1ODlDREQzNTg2OUY4NkYyMjI3XCIsIGRlZmF1bHRUZXh0OiBcIkJhY2tcIiB9LCBcbiAgICAgICAgXCJhY3Rpb25zXCI6IFt7IFwiZXZlbnRcIjogXCJvbk1vdXNlQ2xpY2tcIiwgXCJuYW1lXCI6IFwic2F2ZVNldHRpbmdzXCIgfSwgeyBcImV2ZW50XCI6IFwib25Nb3VzZUNsaWNrXCIsIFwibmFtZVwiOiBcInByZXZpb3VzTGF5b3V0XCIgfV0sIFxuICAgICAgICBcInNvdW5kXCI6IC0+ICRkYXRhRmllbGRzLmRhdGFiYXNlLnN5c3RlbS5tZW51Q2FuY2VsU291bmQgfVxufVxuXG5cbiJdfQ==
//# sourceURL=Template_Button_153.js
ui.UiFactory.customTypes["ui.ConfirmationDialog"] = {
  "type": "ui.FreeLayout",
  "frame": [0, 0, Graphics.width, Graphics.height],
  "order": 100000,
  "controls": [
    {
      "type": "ui.Panel",
      "zIndex": 1000,
      "frame": [0, 0, Graphics.width, Graphics.height],
      "modal": true,
      "color": [0, 0, 0, 128]
    }, {
      "type": "ui.FreeLayout",
      "sizeToFit": true,
      "alignmentX": 1,
      "alignmentY": 1,
      "controls": [
        {
          "type": "ui.Window",
          "zIndex": 90000,
          "frame": [0, 0, 700, 200]
        }, {
          "type": "ui.Text",
          "sizeToFit": true,
          "styles": ["regularUIText"],
          "zIndex": 91000,
          "text": function() {
            return p.message;
          },
          "alignmentX": 1,
          "alignmentY": 1,
          "color": [255, 255, 255, 255],
          "margin": [0, 0, 0, 50]
        }, {
          "type": "ui.FreeLayout",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.Text",
              "order": 1001,
              "sizeToFit": true,
              "zIndex": 91000,
              "alignmentX": 1,
              "alignmentY": 1,
              "styles": ["regularUIText"],
              "actions": function() {
                return p.acceptActions;
              },
              "text": "Yes"
            }
          ],
          "frame": [100],
          "margin": [0, 0, 0, 50],
          "alignmentY": 2
        }, {
          "type": "ui.FreeLayout",
          "sizeToFit": true,
          "controls": [
            {
              "type": "ui.Text",
              "sizeToFit": true,
              "order": 1001,
              "styles": ["regularUIText"],
              "actions": function() {
                return p.rejectActions;
              },
              "zIndex": 91000,
              "alignmentX": 1,
              "alignmentY": 1,
              "text": "No"
            }
          ],
          "margin": [0, 0, 100, 50],
          "alignmentY": 2,
          "alignmentX": 2
        }
      ]
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHVCQUFBLENBQXpCLEdBQW9EO0VBQ2hELE1BQUEsRUFBUSxlQUR3QztFQUVoRCxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFoQixFQUF1QixRQUFRLENBQUMsTUFBaEMsQ0FGdUM7RUFHaEQsT0FBQSxFQUFTLE1BSHVDO0VBSWhELFVBQUEsRUFBWTtJQUNSO01BQUUsTUFBQSxFQUFRLFVBQVY7TUFBc0IsUUFBQSxFQUFVLElBQWhDO01BQXNDLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sUUFBUSxDQUFDLEtBQWhCLEVBQXVCLFFBQVEsQ0FBQyxNQUFoQyxDQUEvQztNQUF3RixPQUFBLEVBQVMsSUFBakc7TUFBdUcsT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsR0FBVixDQUFoSDtLQURRLEVBRVI7TUFDSSxNQUFBLEVBQVEsZUFEWjtNQUVJLFdBQUEsRUFBYSxJQUZqQjtNQUdJLFlBQUEsRUFBYyxDQUhsQjtNQUlJLFlBQUEsRUFBYyxDQUpsQjtNQUtJLFVBQUEsRUFBWTtRQUNSO1VBQ0ksTUFBQSxFQUFRLFdBRFo7VUFFSSxRQUFBLEVBQVUsS0FGZDtVQUdJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sR0FBUCxFQUFZLEdBQVosQ0FIYjtTQURRLEVBTVI7VUFDSSxNQUFBLEVBQVEsU0FEWjtVQUVJLFdBQUEsRUFBYSxJQUZqQjtVQUdJLFFBQUEsRUFBVSxDQUFDLGVBQUQsQ0FIZDtVQUlJLFFBQUEsRUFBVSxLQUpkO1VBS0ksTUFBQSxFQUFRLFNBQUE7bUJBQUcsQ0FBQyxDQUFDO1VBQUwsQ0FMWjtVQU1JLFlBQUEsRUFBYyxDQU5sQjtVQU9JLFlBQUEsRUFBYyxDQVBsQjtVQVFJLE9BQUEsRUFBUyxDQUFDLEdBQUQsRUFBTSxHQUFOLEVBQVcsR0FBWCxFQUFnQixHQUFoQixDQVJiO1VBU0ksUUFBQSxFQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxDQUFQLEVBQVUsRUFBVixDQVRkO1NBTlEsRUFpQlI7VUFDSSxNQUFBLEVBQVEsZUFEWjtVQUVJLFdBQUEsRUFBYSxJQUZqQjtVQUdJLFVBQUEsRUFBWTtZQUNSO2NBQ0ksTUFBQSxFQUFRLFNBRFo7Y0FFSSxPQUFBLEVBQVMsSUFGYjtjQUdJLFdBQUEsRUFBYSxJQUhqQjtjQUlJLFFBQUEsRUFBVSxLQUpkO2NBS0ksWUFBQSxFQUFjLENBTGxCO2NBTUksWUFBQSxFQUFjLENBTmxCO2NBT0ksUUFBQSxFQUFVLENBQUMsZUFBRCxDQVBkO2NBUUksU0FBQSxFQUFXLFNBQUE7dUJBQUcsQ0FBQyxDQUFDO2NBQUwsQ0FSZjtjQVNJLE1BQUEsRUFBUSxLQVRaO2FBRFE7V0FIaEI7VUFnQkksT0FBQSxFQUFTLENBQUMsR0FBRCxDQWhCYjtVQWtCSSxRQUFBLEVBQVUsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxFQUFWLENBbEJkO1VBbUJJLFlBQUEsRUFBYyxDQW5CbEI7U0FqQlEsRUFzQ1I7VUFDSSxNQUFBLEVBQVEsZUFEWjtVQUVJLFdBQUEsRUFBYSxJQUZqQjtVQUdJLFVBQUEsRUFBWTtZQUNSO2NBQ0ksTUFBQSxFQUFRLFNBRFo7Y0FFSSxXQUFBLEVBQWEsSUFGakI7Y0FHSSxPQUFBLEVBQVMsSUFIYjtjQUlJLFFBQUEsRUFBVSxDQUFDLGVBQUQsQ0FKZDtjQUtJLFNBQUEsRUFBVyxTQUFBO3VCQUFHLENBQUMsQ0FBQztjQUFMLENBTGY7Y0FNSSxRQUFBLEVBQVUsS0FOZDtjQU9JLFlBQUEsRUFBYyxDQVBsQjtjQVFJLFlBQUEsRUFBYyxDQVJsQjtjQVNJLE1BQUEsRUFBUSxJQVRaO2FBRFE7V0FIaEI7VUFnQkksUUFBQSxFQUFVLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxHQUFQLEVBQVksRUFBWixDQWhCZDtVQWlCSSxZQUFBLEVBQWMsQ0FqQmxCO1VBa0JJLFlBQUEsRUFBYyxDQWxCbEI7U0F0Q1E7T0FMaEI7S0FGUTtHQUpvQyIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5jdXN0b21UeXBlc1tcInVpLkNvbmZpcm1hdGlvbkRpYWxvZ1wiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF0sXG4gICAgXCJvcmRlclwiOiAxMDAwMDAsXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHsgXCJ0eXBlXCI6IFwidWkuUGFuZWxcIiwgXCJ6SW5kZXhcIjogMTAwMCwgXCJmcmFtZVwiOiBbMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodF0sIFwibW9kYWxcIjogdHJ1ZSwgXCJjb2xvclwiOiBbMCwgMCwgMCwgMTI4XSB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRYXCI6IDEsXG4gICAgICAgICAgICBcImFsaWdubWVudFlcIjogMSxcbiAgICAgICAgICAgIFwiY29udHJvbHNcIjogWyAgICAgICAgICAgXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5XaW5kb3dcIixcbiAgICAgICAgICAgICAgICAgICAgXCJ6SW5kZXhcIjogOTAwMDAsXG4gICAgICAgICAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIDcwMCwgMjAwXVxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sXG4gICAgICAgICAgICAgICAgICAgIFwiekluZGV4XCI6IDkxMDAwLFxuICAgICAgICAgICAgICAgICAgICBcInRleHRcIjogLT4gcC5tZXNzYWdlLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWdubWVudFhcIjogMSxcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlnbm1lbnRZXCI6IDEsXG4gICAgICAgICAgICAgICAgICAgIFwiY29sb3JcIjogWzI1NSwgMjU1LCAyNTUsIDI1NV0sXG4gICAgICAgICAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCA1MF1cbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgICAgICAgICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJvcmRlclwiOiAxMDAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJ6SW5kZXhcIjogOTEwMDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlnbm1lbnRYXCI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJhbGlnbm1lbnRZXCI6IDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHlsZXNcIjogW1wicmVndWxhclVJVGV4dFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFjdGlvbnNcIjogLT4gcC5hY2NlcHRBY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIlllc1wiXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIFwiZnJhbWVcIjogWzEwMF0sXG4gICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgMCwgNTBdLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWdubWVudFlcIjogMixcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgICAgICAgICAgICAgICAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzaXplVG9GaXRcIjogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9yZGVyXCI6IDEwMDEsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHlsZXNcIjogW1wicmVndWxhclVJVGV4dFwiXSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcImFjdGlvbnNcIjogLT4gcC5yZWplY3RBY3Rpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiekluZGV4XCI6IDkxMDAwLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpZ25tZW50WFwiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiYWxpZ25tZW50WVwiOiAxLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIk5vXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICAgICAgICAgXCJtYXJnaW5cIjogWzAsIDAsIDEwMCwgNTBdLFxuICAgICAgICAgICAgICAgICAgICBcImFsaWdubWVudFlcIjogMixcbiAgICAgICAgICAgICAgICAgICAgXCJhbGlnbm1lbnRYXCI6IDJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Template_ConfirmationDialog_157.js
ui.UiFactory.customTypes["ui.SaveGameSlot"] = {
  "type": "ui.FreeLayout",
  "sizeToFit": true,
  "controls": [
    {
      "type": "ui.Panel",
      "frame": [0, 0, 350, Math.max(Graphics.height / 8, 90)],
      "actions": function() {
        return p.actions;
      },
      "zIndex": 0
    }, {
      "type": "ui.Panel",
      "alignmentY": "center",
      "frame": [0, 0, Graphics.width / 8, Graphics.height / 8],
      "color": [0, 0, 0, 100],
      "zIndex": 0
    }, {
      "type": "ui.Image",
      "alignmentY": "center",
      "image": "",
      "frame": [0, 0, Graphics.width / 8, Graphics.height / 8],
      "imageHandling": 2,
      "fixedSize": true,
      "zIndex": 1,
      "formulas": [
        $(function() {
          return o.visible = $dataFields.saveGameSlots[o.parent.index].image;
        }), $(function() {
          return o.image = $dataFields.saveGameSlots[o.parent.index].image;
        })
      ]
    }, {
      "type": "ui.FreeLayout",
      "frame": [Graphics.width / 8, 0, 150, 90],
      "controls": [
        {
          "type": "ui.Text",
          "formulas": [
            $(function() {
              if (!$dataFields.saveGameSlots[o.parent.parent.index].date) {
                return o.text = (o.parent.parent.index + 1).toString() + ".\n" + "New File";
              } else {
                return o.text = (o.parent.parent.index + 1).toString() + ".\n" + $dataFields.saveGameSlots[o.parent.parent.index].chapter + "\n" + $dataFields.saveGameSlots[o.parent.parent.index].date;
              }
            })
          ],
          "sizeToFit": true,
          "text": "",
          "styles": ["smallUIText"],
          "color": [255, 255, 255, 255],
          "frame": [10, 10],
          "zIndex": 10
        }
      ]
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLGlCQUFBLENBQXpCLEdBQThDO0VBQzFDLE1BQUEsRUFBUSxlQURrQztFQUUxQyxXQUFBLEVBQWEsSUFGNkI7RUFHMUMsVUFBQSxFQUFZO0lBQ1I7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sR0FBUCxFQUFZLElBQUksQ0FBQyxHQUFMLENBQVMsUUFBUSxDQUFDLE1BQVQsR0FBa0IsQ0FBM0IsRUFBOEIsRUFBOUIsQ0FBWixDQUZiO01BR0ksU0FBQSxFQUFXLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQUhmO01BSUksUUFBQSxFQUFVLENBSmQ7S0FEUSxFQU9SO01BQ0ksTUFBQSxFQUFRLFVBRFo7TUFFSSxZQUFBLEVBQWMsUUFGbEI7TUFHSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLFFBQVEsQ0FBQyxLQUFULEdBQWlCLENBQXhCLEVBQTJCLFFBQVEsQ0FBQyxNQUFULEdBQWtCLENBQTdDLENBSGI7TUFJSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLENBQVAsRUFBVSxHQUFWLENBSmI7TUFLSSxRQUFBLEVBQVUsQ0FMZDtLQVBRLEVBY1I7TUFDSSxNQUFBLEVBQVEsVUFEWjtNQUVJLFlBQUEsRUFBYyxRQUZsQjtNQUdJLE9BQUEsRUFBUyxFQUhiO01BSUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxRQUFRLENBQUMsS0FBVCxHQUFpQixDQUF4QixFQUEyQixRQUFRLENBQUMsTUFBVCxHQUFrQixDQUE3QyxDQUpiO01BS0ksZUFBQSxFQUFpQixDQUxyQjtNQU1JLFdBQUEsRUFBYSxJQU5qQjtNQU9JLFFBQUEsRUFBVSxDQVBkO01BUUksVUFBQSxFQUFZO1FBQ1IsQ0FBQSxDQUFFLFNBQUE7aUJBQUcsQ0FBQyxDQUFDLE9BQUYsR0FBWSxXQUFXLENBQUMsYUFBYyxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQUM7UUFBekQsQ0FBRixDQURRLEVBRVIsQ0FBQSxDQUFFLFNBQUE7aUJBQUcsQ0FBQyxDQUFDLEtBQUYsR0FBVSxXQUFXLENBQUMsYUFBYyxDQUFBLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBVCxDQUFlLENBQUM7UUFBdkQsQ0FBRixDQUZRO09BUmhCO0tBZFEsRUEyQlI7TUFDSSxNQUFBLEVBQVEsZUFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLFFBQVEsQ0FBQyxLQUFULEdBQWlCLENBQWxCLEVBQXFCLENBQXJCLEVBQXdCLEdBQXhCLEVBQTZCLEVBQTdCLENBRmI7TUFHSSxVQUFBLEVBQVk7UUFDUjtVQUNJLE1BQUEsRUFBUSxTQURaO1VBRUksVUFBQSxFQUFZO1lBQ1IsQ0FBQSxDQUFFLFNBQUE7Y0FDRSxJQUFHLENBQUMsV0FBVyxDQUFDLGFBQWMsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFoQixDQUFzQixDQUFDLElBQXJEO3VCQUNJLENBQUMsQ0FBQyxJQUFGLEdBQVMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFoQixHQUF3QixDQUF6QixDQUEyQixDQUFDLFFBQTVCLENBQUEsQ0FBQSxHQUF5QyxLQUF6QyxHQUFpRCxXQUQ5RDtlQUFBLE1BQUE7dUJBR0ksQ0FBQyxDQUFDLElBQUYsR0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQWhCLEdBQXdCLENBQXpCLENBQTJCLENBQUMsUUFBNUIsQ0FBQSxDQUFBLEdBQXlDLEtBQXpDLEdBQ0EsV0FBVyxDQUFDLGFBQWMsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFoQixDQUFzQixDQUFDLE9BRGpELEdBQzJELElBRDNELEdBRUEsV0FBVyxDQUFDLGFBQWMsQ0FBQSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFoQixDQUFzQixDQUFDLEtBTDlEOztZQURGLENBQUYsQ0FEUTtXQUZoQjtVQVdJLFdBQUEsRUFBYSxJQVhqQjtVQVlJLE1BQUEsRUFBUSxFQVpaO1VBYUksUUFBQSxFQUFVLENBQUMsYUFBRCxDQWJkO1VBY0ksT0FBQSxFQUFTLENBQUMsR0FBRCxFQUFNLEdBQU4sRUFBVyxHQUFYLEVBQWdCLEdBQWhCLENBZGI7VUFlSSxPQUFBLEVBQVMsQ0FBQyxFQUFELEVBQUssRUFBTCxDQWZiO1VBZ0JJLFFBQUEsRUFBVSxFQWhCZDtTQURRO09BSGhCO0tBM0JRO0dBSDhCIiwic291cmNlc0NvbnRlbnQiOlsiXG51aS5VaUZhY3RvcnkuY3VzdG9tVHlwZXNbXCJ1aS5TYXZlR2FtZVNsb3RcIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlBhbmVsXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCAzNTAsIE1hdGgubWF4KEdyYXBoaWNzLmhlaWdodCAvIDgsIDkwKV0sXG4gICAgICAgICAgICBcImFjdGlvbnNcIjogLT4gcC5hY3Rpb25zXG4gICAgICAgICAgICBcInpJbmRleFwiOiAwXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlBhbmVsXCIsXG4gICAgICAgICAgICBcImFsaWdubWVudFlcIjogXCJjZW50ZXJcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzAsIDAsIEdyYXBoaWNzLndpZHRoIC8gOCwgR3JhcGhpY3MuaGVpZ2h0IC8gOF0sXG4gICAgICAgICAgICBcImNvbG9yXCI6IFswLCAwLCAwLCAxMDBdLFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMFxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5JbWFnZVwiLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRZXCI6IFwiY2VudGVyXCIsXG4gICAgICAgICAgICBcImltYWdlXCI6IFwiXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCBHcmFwaGljcy53aWR0aCAvIDgsIEdyYXBoaWNzLmhlaWdodCAvIDhdLFxuICAgICAgICAgICAgXCJpbWFnZUhhbmRsaW5nXCI6IDIsXG4gICAgICAgICAgICBcImZpeGVkU2l6ZVwiOiB0cnVlLFxuICAgICAgICAgICAgXCJ6SW5kZXhcIjogMSxcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogW1xuICAgICAgICAgICAgICAgICQgLT4gby52aXNpYmxlID0gJGRhdGFGaWVsZHMuc2F2ZUdhbWVTbG90c1tvLnBhcmVudC5pbmRleF0uaW1hZ2VcbiAgICAgICAgICAgICAgICAkIC0+IG8uaW1hZ2UgPSAkZGF0YUZpZWxkcy5zYXZlR2FtZVNsb3RzW28ucGFyZW50LmluZGV4XS5pbWFnZVxuICAgICAgICAgICAgXVxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5GcmVlTGF5b3V0XCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFtHcmFwaGljcy53aWR0aCAvIDgsIDAsIDE1MCwgOTBdLFxuICAgICAgICAgICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5UZXh0XCIsXG4gICAgICAgICAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogW1xuICAgICAgICAgICAgICAgICAgICAgICAgJCAtPiBcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAhJGRhdGFGaWVsZHMuc2F2ZUdhbWVTbG90c1tvLnBhcmVudC5wYXJlbnQuaW5kZXhdLmRhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby50ZXh0ID0gKG8ucGFyZW50LnBhcmVudC5pbmRleCArIDEpLnRvU3RyaW5nKCkgKyBcIi5cXG5cIiArIFwiTmV3IEZpbGVcIlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgby50ZXh0ID0gKG8ucGFyZW50LnBhcmVudC5pbmRleCArIDEpLnRvU3RyaW5nKCkgKyBcIi5cXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhRmllbGRzLnNhdmVHYW1lU2xvdHNbby5wYXJlbnQucGFyZW50LmluZGV4XS5jaGFwdGVyICsgXCJcXG5cIiArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRkYXRhRmllbGRzLnNhdmVHYW1lU2xvdHNbby5wYXJlbnQucGFyZW50LmluZGV4XS5kYXRlXG4gICAgICAgICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgICAgICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIFwidGV4dFwiOiBcIlwiLFxuICAgICAgICAgICAgICAgICAgICBcInN0eWxlc1wiOiBbXCJzbWFsbFVJVGV4dFwiXSxcbiAgICAgICAgICAgICAgICAgICAgXCJjb2xvclwiOiBbMjU1LCAyNTUsIDI1NSwgMjU1XSxcbiAgICAgICAgICAgICAgICAgICAgXCJmcmFtZVwiOiBbMTAsIDEwXSxcbiAgICAgICAgICAgICAgICAgICAgXCJ6SW5kZXhcIjogMTBcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICBdXG4gICAgICAgIH1cbiAgICBdXG59Il19
//# sourceURL=Template_SaveGameSlot_161.js
ui.UiFactory.customTypes["ui.VerticalScrollView"] = {
  "type": "ui.FreeLayout",
  "clipRect": true,
  "controls": [
    {
      "type": "ui.ScrollBar",
      "frame": [0, 0, 15, "100%"],
      "updateBehavior": "continuous",
      "formulas": [
        $(function() {
          o.numbers[0] = o.numbers[0] || 0;
          if (o.parent.controls[1].scrollableHeight > 0 && o.numbers[0] !== o.controls[0].dstRect.y) {
            o.numbers[0] = o.controls[0].dstRect.y;
            return o.parent.controls[1].scrollOffsetY = o.controls[0].dstRect.y / (o.parent.dstRect.height - o.controls[0].dstRect.height) * o.parent.controls[1].scrollableHeight;
          }
        }), $(function() {
          if (o.parent.controls[1].scrollableHeight > 0) {
            return o.controls[0].dstRect.height = Math.max(o.parent.dstRect.height / o.parent.controls[1].contentHeight * o.parent.dstRect.height, 30);
          }
        }), $(function() {
          if (o.parent.controls[1].scrollableHeight === 0) {
            return o.visible = false;
          }
        }), $(function() {
          if (o.parent.controls[1].scrollableHeight > 0) {
            return o.visible = true;
          }
        })
      ],
      "margin": [0, 0, 0, 0],
      "alignmentX": "right"
    }, {
      "type": "ui.StackLayout",
      "formulas": [
        $(function() {
          o.numbers[0] = o.numbers[0] || 0;
          if (o.numbers[0] !== o.scrollOffsetY) {
            o.numbers[0] = o.scrollOffsetY;
            o.parent.controls[0].controls[0].dstRect.y = o.scrollOffsetY / o.scrollableHeight * (o.dstRect.height - o.parent.controls[0].controls[0].dstRect.height);
            return o.parent.controls[0].numbers[0] = o.parent.controls[0].controls[0].dstRect.y;
          }
        })
      ],
      "frame": [0, 0, "100%", "100%"],
      "orientation": "vertical",
      "scrollable": true,
      "dataField": function() {
        return p.dataField;
      },
      "dataFilter": function() {
        return p.dataFilter;
      },
      "template": function() {
        return p.template;
      },
      "managementMode": function() {
        return p.managementMode || 0;
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHVCQUFBLENBQXpCLEdBQW9EO0VBQ2hELE1BQUEsRUFBUSxlQUR3QztFQUVoRCxVQUFBLEVBQVksSUFGb0M7RUFHaEQsVUFBQSxFQUFZO0lBQ1I7TUFDSSxNQUFBLEVBQVEsY0FEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sRUFBUCxFQUFXLE1BQVgsQ0FGYjtNQUdJLGdCQUFBLEVBQWtCLFlBSHRCO01BSUksVUFBQSxFQUFZO1FBQ1AsQ0FBQSxDQUFFLFNBQUE7VUFDQyxDQUFDLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBVixHQUFlLENBQUMsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFWLElBQWdCO1VBQy9CLElBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsZ0JBQXJCLEdBQXdDLENBQXhDLElBQThDLENBQUMsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFWLEtBQWdCLENBQUMsQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsT0FBTyxDQUFDLENBQXZGO1lBQ0ksQ0FBQyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQVYsR0FBZSxDQUFDLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQzttQkFDckMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsYUFBckIsR0FBcUMsQ0FBQyxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsQ0FBdEIsR0FBMEIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFqQixHQUEwQixDQUFDLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxNQUFqRCxDQUExQixHQUFxRixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxpQkFGbko7O1FBRkQsQ0FBRixDQURPLEVBTVAsQ0FBQSxDQUFFLFNBQUE7VUFBRyxJQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLGdCQUFyQixHQUF3QyxDQUEzQzttQkFBa0QsQ0FBQyxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsTUFBdEIsR0FBK0IsSUFBSSxDQUFDLEdBQUwsQ0FBUyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUFqQixHQUEwQixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxhQUEvQyxHQUErRCxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxNQUF6RixFQUFpRyxFQUFqRyxFQUFqRjs7UUFBSCxDQUFGLENBTk8sRUFPUCxDQUFBLENBQUUsU0FBQTtVQUFHLElBQXFCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLGdCQUFyQixLQUF5QyxDQUE5RDttQkFBQSxDQUFDLENBQUMsT0FBRixHQUFZLE1BQVo7O1FBQUgsQ0FBRixDQVBPLEVBUVAsQ0FBQSxDQUFFLFNBQUE7VUFBRyxJQUFvQixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxnQkFBckIsR0FBd0MsQ0FBNUQ7bUJBQUEsQ0FBQyxDQUFDLE9BQUYsR0FBWSxLQUFaOztRQUFILENBQUYsQ0FSTztPQUpoQjtNQWNJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FkZDtNQWVJLFlBQUEsRUFBYyxPQWZsQjtLQURRLEVBa0JSO01BQ0ksTUFBQSxFQUFRLGdCQURaO01BRUksVUFBQSxFQUFZO1FBQ1IsQ0FBQSxDQUFFLFNBQUE7VUFDRSxDQUFDLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBVixHQUFlLENBQUMsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFWLElBQWdCO1VBQy9CLElBQUcsQ0FBQyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQVYsS0FBZ0IsQ0FBQyxDQUFDLGFBQXJCO1lBQ0ksQ0FBQyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQVYsR0FBZSxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUF6QyxHQUE2QyxDQUFDLENBQUMsYUFBRixHQUFrQixDQUFDLENBQUMsZ0JBQXBCLEdBQXVDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFWLEdBQW1CLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsTUFBN0Q7bUJBQ3BGLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQTdCLEdBQWtDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsRUFIL0U7O1FBRkYsQ0FBRixDQURRO09BRmhCO01BVUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQVZiO01BV0ksYUFBQSxFQUFlLFVBWG5CO01BWUksWUFBQSxFQUFjLElBWmxCO01BYUksV0FBQSxFQUFhLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQWJqQjtNQWNJLFlBQUEsRUFBYyxTQUFBO2VBQUcsQ0FBQyxDQUFDO01BQUwsQ0FkbEI7TUFlSSxVQUFBLEVBQVksU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBZmhCO01BZ0JJLGdCQUFBLEVBQWtCLFNBQUE7ZUFBRyxDQUFDLENBQUMsY0FBRixJQUFvQjtNQUF2QixDQWhCdEI7S0FsQlE7R0FIb0MiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkuY3VzdG9tVHlwZXNbXCJ1aS5WZXJ0aWNhbFNjcm9sbFZpZXdcIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuRnJlZUxheW91dFwiLFxuICAgIFwiY2xpcFJlY3RcIjogdHJ1ZSxcbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuU2Nyb2xsQmFyXCIsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFswLCAwLCAxNSwgXCIxMDAlXCJdLFxuICAgICAgICAgICAgXCJ1cGRhdGVCZWhhdmlvclwiOiBcImNvbnRpbnVvdXNcIixcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogW1xuICAgICAgICAgICAgICAgICgkIC0+IFxuICAgICAgICAgICAgICAgICAgICBvLm51bWJlcnNbMF0gPSBvLm51bWJlcnNbMF0gb3IgMFxuICAgICAgICAgICAgICAgICAgICBpZiBvLnBhcmVudC5jb250cm9sc1sxXS5zY3JvbGxhYmxlSGVpZ2h0ID4gMCBhbmQgby5udW1iZXJzWzBdICE9IG8uY29udHJvbHNbMF0uZHN0UmVjdC55XG4gICAgICAgICAgICAgICAgICAgICAgICBvLm51bWJlcnNbMF0gPSBvLmNvbnRyb2xzWzBdLmRzdFJlY3QueVxuICAgICAgICAgICAgICAgICAgICAgICAgby5wYXJlbnQuY29udHJvbHNbMV0uc2Nyb2xsT2Zmc2V0WSA9IG8uY29udHJvbHNbMF0uZHN0UmVjdC55IC8gKG8ucGFyZW50LmRzdFJlY3QuaGVpZ2h0IC0gby5jb250cm9sc1swXS5kc3RSZWN0LmhlaWdodCkgKiBvLnBhcmVudC5jb250cm9sc1sxXS5zY3JvbGxhYmxlSGVpZ2h0KSxcbiAgICAgICAgICAgICAgICAoJCAtPiBpZiBvLnBhcmVudC5jb250cm9sc1sxXS5zY3JvbGxhYmxlSGVpZ2h0ID4gMCB0aGVuIG8uY29udHJvbHNbMF0uZHN0UmVjdC5oZWlnaHQgPSBNYXRoLm1heChvLnBhcmVudC5kc3RSZWN0LmhlaWdodCAvIG8ucGFyZW50LmNvbnRyb2xzWzFdLmNvbnRlbnRIZWlnaHQgKiBvLnBhcmVudC5kc3RSZWN0LmhlaWdodCwgMzApICksXG4gICAgICAgICAgICAgICAgKCQgLT4gby52aXNpYmxlID0gZmFsc2UgaWYgby5wYXJlbnQuY29udHJvbHNbMV0uc2Nyb2xsYWJsZUhlaWdodCA9PSAwICksXG4gICAgICAgICAgICAgICAgKCQgLT4gby52aXNpYmxlID0gdHJ1ZSBpZiBvLnBhcmVudC5jb250cm9sc1sxXS5zY3JvbGxhYmxlSGVpZ2h0ID4gMCApXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJtYXJnaW5cIjogWzAsIDAsIDAsIDBdLFxuICAgICAgICAgICAgXCJhbGlnbm1lbnRYXCI6IFwicmlnaHRcIlxuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5TdGFja0xheW91dFwiLFxuICAgICAgICAgICAgXCJmb3JtdWxhc1wiOiBbXG4gICAgICAgICAgICAgICAgJCAtPlxuICAgICAgICAgICAgICAgICAgICBvLm51bWJlcnNbMF0gPSBvLm51bWJlcnNbMF0gb3IgMFxuICAgICAgICAgICAgICAgICAgICBpZiBvLm51bWJlcnNbMF0gIT0gby5zY3JvbGxPZmZzZXRZXG4gICAgICAgICAgICAgICAgICAgICAgICBvLm51bWJlcnNbMF0gPSBvLnNjcm9sbE9mZnNldFlcbiAgICAgICAgICAgICAgICAgICAgICAgIG8ucGFyZW50LmNvbnRyb2xzWzBdLmNvbnRyb2xzWzBdLmRzdFJlY3QueSA9IG8uc2Nyb2xsT2Zmc2V0WSAvIG8uc2Nyb2xsYWJsZUhlaWdodCAqIChvLmRzdFJlY3QuaGVpZ2h0IC0gby5wYXJlbnQuY29udHJvbHNbMF0uY29udHJvbHNbMF0uZHN0UmVjdC5oZWlnaHQpXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnBhcmVudC5jb250cm9sc1swXS5udW1iZXJzWzBdID0gby5wYXJlbnQuY29udHJvbHNbMF0uY29udHJvbHNbMF0uZHN0UmVjdC55XG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwib3JpZW50YXRpb25cIjogXCJ2ZXJ0aWNhbFwiLFxuICAgICAgICAgICAgXCJzY3JvbGxhYmxlXCI6IHRydWUsXG4gICAgICAgICAgICBcImRhdGFGaWVsZFwiOiAtPiBwLmRhdGFGaWVsZCxcbiAgICAgICAgICAgIFwiZGF0YUZpbHRlclwiOiAtPiBwLmRhdGFGaWx0ZXIsXG4gICAgICAgICAgICBcInRlbXBsYXRlXCI6IC0+IHAudGVtcGxhdGUsXG4gICAgICAgICAgICBcIm1hbmFnZW1lbnRNb2RlXCI6IC0+IHAubWFuYWdlbWVudE1vZGUgfHwgMFxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Template_VerticalScrollView_163.js
ui.UiFactory.customTypes["ui.DataScrollView"] = {
  "type": "ui.FreeLayout",
  "clipRect": true,
  "controls": [
    {
      "type": "ui.ScrollBar",
      "frame": [0, 0, 15, "100%"],
      "updateBehavior": "continuous",
      "formulas": [
        $(function() {
          o.numbers[0] = o.numbers[0] || 0;
          if (o.parent.controls[1].scrollableHeight > 0 && o.numbers[0] !== o.controls[0].dstRect.y) {
            o.numbers[0] = o.controls[0].dstRect.y;
            o.parent.controls[1].scrollOffsetY = o.controls[0].dstRect.y / (o.parent.dstRect.height - o.controls[0].dstRect.height) * o.parent.controls[1].scrollableHeight;
          }
          if (o.parent.controls[1].scrollableHeight > 0) {
            o.controls[0].dstRect.height = Math.max(o.parent.dstRect.height / o.parent.controls[1].contentHeight * o.parent.dstRect.height, 30);
          }
          if (o.parent.controls[1].scrollableHeight <= 0) {
            o.visible = false;
          }
          if (o.parent.controls[1].scrollableHeight > 0) {
            return o.visible = true;
          }
        })
      ],
      "margin": [0, 0, 0, 0],
      "alignmentX": "right"
    }, {
      "type": "ui.DataGrid",
      "id": "mygrid",
      "formulas": [
        $(function() {
          o.numbers[0] = o.numbers[0] || 0;
          if (o.numbers[0] !== o.scrollOffsetY) {
            o.numbers[0] = o.scrollOffsetY;
            o.parent.controls[0].controls[0].dstRect.y = o.scrollOffsetY / o.scrollableHeight * (o.dstRect.height - o.parent.controls[0].controls[0].dstRect.height);
            return o.parent.controls[0].numbers[0] = o.parent.controls[0].controls[0].dstRect.y;
          }
        })
      ],
      "frame": [0, 0, "100%", "100%"],
      "template": function() {
        return p.template;
      },
      "dataSource": function() {
        return p.dataSource;
      },
      "spacing": function() {
        return p.spacing;
      },
      "columns": function() {
        var ref;
        return (ref = p.columns) != null ? ref : 1;
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLG1CQUFBLENBQXpCLEdBQWdEO0VBQzVDLE1BQUEsRUFBUSxlQURvQztFQUU1QyxVQUFBLEVBQVksSUFGZ0M7RUFHNUMsVUFBQSxFQUFZO0lBQ1I7TUFDSSxNQUFBLEVBQVEsY0FEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sRUFBUCxFQUFXLE1BQVgsQ0FGYjtNQUdJLGdCQUFBLEVBQWtCLFlBSHRCO01BSUksVUFBQSxFQUFZO1FBQ1IsQ0FBQSxDQUFFLFNBQUE7VUFDRSxDQUFDLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBVixHQUFlLENBQUMsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFWLElBQWdCO1VBQy9CLElBQUcsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsZ0JBQXJCLEdBQXdDLENBQXhDLElBQThDLENBQUMsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFWLEtBQWdCLENBQUMsQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsT0FBTyxDQUFDLENBQXZGO1lBQ0ksQ0FBQyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQVYsR0FBZSxDQUFDLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQztZQUNyQyxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxhQUFyQixHQUFxQyxDQUFDLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUF0QixHQUEwQixDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWpCLEdBQTBCLENBQUMsQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsT0FBTyxDQUFDLE1BQWpELENBQTFCLEdBQXFGLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLGlCQUZuSjs7VUFHQSxJQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLGdCQUFyQixHQUF3QyxDQUEzQztZQUFrRCxDQUFDLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxNQUF0QixHQUErQixJQUFJLENBQUMsR0FBTCxDQUFTLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQWpCLEdBQTBCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLGFBQS9DLEdBQStELENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLE1BQXpGLEVBQWlHLEVBQWpHLEVBQWpGOztVQUNBLElBQXFCLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLGdCQUFyQixJQUF5QyxDQUE5RDtZQUFBLENBQUMsQ0FBQyxPQUFGLEdBQVksTUFBWjs7VUFDQSxJQUFvQixDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxnQkFBckIsR0FBd0MsQ0FBNUQ7bUJBQUEsQ0FBQyxDQUFDLE9BQUYsR0FBWSxLQUFaOztRQVBGLENBQUYsQ0FEUTtPQUpoQjtNQWVJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FmZDtNQWdCSSxZQUFBLEVBQWMsT0FoQmxCO0tBRFEsRUFtQlI7TUFDSSxNQUFBLEVBQVEsYUFEWjtNQUVJLElBQUEsRUFBTSxRQUZWO01BR0ksVUFBQSxFQUFZO1FBQ1IsQ0FBQSxDQUFFLFNBQUE7VUFDRSxDQUFDLENBQUMsT0FBUSxDQUFBLENBQUEsQ0FBVixHQUFlLENBQUMsQ0FBQyxPQUFRLENBQUEsQ0FBQSxDQUFWLElBQWdCO1VBQy9CLElBQUcsQ0FBQyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQVYsS0FBZ0IsQ0FBQyxDQUFDLGFBQXJCO1lBQ0ksQ0FBQyxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQVYsR0FBZSxDQUFDLENBQUM7WUFDakIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFTLENBQUEsQ0FBQSxDQUFFLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQU8sQ0FBQyxDQUF6QyxHQUE2QyxDQUFDLENBQUMsYUFBRixHQUFrQixDQUFDLENBQUMsZ0JBQXBCLEdBQXVDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFWLEdBQW1CLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsTUFBN0Q7bUJBQ3BGLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLE9BQVEsQ0FBQSxDQUFBLENBQTdCLEdBQWtDLENBQUMsQ0FBQyxNQUFNLENBQUMsUUFBUyxDQUFBLENBQUEsQ0FBRSxDQUFDLFFBQVMsQ0FBQSxDQUFBLENBQUUsQ0FBQyxPQUFPLENBQUMsRUFIL0U7O1FBRkYsQ0FBRixDQURRO09BSGhCO01BYUksT0FBQSxFQUFTLENBQUMsQ0FBRCxFQUFJLENBQUosRUFBTyxNQUFQLEVBQWUsTUFBZixDQWJiO01BY0ksVUFBQSxFQUFZLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQWRoQjtNQWVJLFlBQUEsRUFBYyxTQUFBO2VBQUcsQ0FBQyxDQUFDO01BQUwsQ0FmbEI7TUFnQkksU0FBQSxFQUFXLFNBQUE7ZUFBRyxDQUFDLENBQUM7TUFBTCxDQWhCZjtNQWlCSSxTQUFBLEVBQVcsU0FBQTtBQUFHLFlBQUE7aURBQVk7TUFBZixDQWpCZjtLQW5CUTtHQUhnQyIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5jdXN0b21UeXBlc1tcInVpLkRhdGFTY3JvbGxWaWV3XCJdID0ge1xuICAgIFwidHlwZVwiOiBcInVpLkZyZWVMYXlvdXRcIixcbiAgICBcImNsaXBSZWN0XCI6IHRydWUsXG4gICAgXCJjb250cm9sc1wiOiBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlNjcm9sbEJhclwiLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgMTUsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwidXBkYXRlQmVoYXZpb3JcIjogXCJjb250aW51b3VzXCIsXG4gICAgICAgICAgICBcImZvcm11bGFzXCI6IFtcbiAgICAgICAgICAgICAgICAkIC0+IFxuICAgICAgICAgICAgICAgICAgICBvLm51bWJlcnNbMF0gPSBvLm51bWJlcnNbMF0gb3IgMFxuICAgICAgICAgICAgICAgICAgICBpZiBvLnBhcmVudC5jb250cm9sc1sxXS5zY3JvbGxhYmxlSGVpZ2h0ID4gMCBhbmQgby5udW1iZXJzWzBdICE9IG8uY29udHJvbHNbMF0uZHN0UmVjdC55XG4gICAgICAgICAgICAgICAgICAgICAgICBvLm51bWJlcnNbMF0gPSBvLmNvbnRyb2xzWzBdLmRzdFJlY3QueVxuICAgICAgICAgICAgICAgICAgICAgICAgby5wYXJlbnQuY29udHJvbHNbMV0uc2Nyb2xsT2Zmc2V0WSA9IG8uY29udHJvbHNbMF0uZHN0UmVjdC55IC8gKG8ucGFyZW50LmRzdFJlY3QuaGVpZ2h0IC0gby5jb250cm9sc1swXS5kc3RSZWN0LmhlaWdodCkgKiBvLnBhcmVudC5jb250cm9sc1sxXS5zY3JvbGxhYmxlSGVpZ2h0XG4gICAgICAgICAgICAgICAgICAgIGlmIG8ucGFyZW50LmNvbnRyb2xzWzFdLnNjcm9sbGFibGVIZWlnaHQgPiAwIHRoZW4gby5jb250cm9sc1swXS5kc3RSZWN0LmhlaWdodCA9IE1hdGgubWF4KG8ucGFyZW50LmRzdFJlY3QuaGVpZ2h0IC8gby5wYXJlbnQuY29udHJvbHNbMV0uY29udGVudEhlaWdodCAqIG8ucGFyZW50LmRzdFJlY3QuaGVpZ2h0LCAzMClcbiAgICAgICAgICAgICAgICAgICAgby52aXNpYmxlID0gZmFsc2UgaWYgby5wYXJlbnQuY29udHJvbHNbMV0uc2Nyb2xsYWJsZUhlaWdodCA8PSAwICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICBvLnZpc2libGUgPSB0cnVlIGlmIG8ucGFyZW50LmNvbnRyb2xzWzFdLnNjcm9sbGFibGVIZWlnaHQgPiAwIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIFwibWFyZ2luXCI6IFswLCAwLCAwLCAwXSxcbiAgICAgICAgICAgIFwiYWxpZ25tZW50WFwiOiBcInJpZ2h0XCJcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuRGF0YUdyaWRcIixcbiAgICAgICAgICAgIFwiaWRcIjogXCJteWdyaWRcIixcbiAgICAgICAgICAgIFwiZm9ybXVsYXNcIjogW1xuICAgICAgICAgICAgICAgICQgLT5cbiAgICAgICAgICAgICAgICAgICAgby5udW1iZXJzWzBdID0gby5udW1iZXJzWzBdIG9yIDBcbiAgICAgICAgICAgICAgICAgICAgaWYgby5udW1iZXJzWzBdICE9IG8uc2Nyb2xsT2Zmc2V0WVxuICAgICAgICAgICAgICAgICAgICAgICAgby5udW1iZXJzWzBdID0gby5zY3JvbGxPZmZzZXRZXG4gICAgICAgICAgICAgICAgICAgICAgICBvLnBhcmVudC5jb250cm9sc1swXS5jb250cm9sc1swXS5kc3RSZWN0LnkgPSBvLnNjcm9sbE9mZnNldFkgLyBvLnNjcm9sbGFibGVIZWlnaHQgKiAoby5kc3RSZWN0LmhlaWdodCAtIG8ucGFyZW50LmNvbnRyb2xzWzBdLmNvbnRyb2xzWzBdLmRzdFJlY3QuaGVpZ2h0KVxuICAgICAgICAgICAgICAgICAgICAgICAgby5wYXJlbnQuY29udHJvbHNbMF0ubnVtYmVyc1swXSA9IG8ucGFyZW50LmNvbnRyb2xzWzBdLmNvbnRyb2xzWzBdLmRzdFJlY3QueVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgICNcImJpbmRpbmdzXCI6IFt7IFwiZXZlbnRcIjogeyBcIm9uQ2hhbmdlXCI6IFwiby5zY3JvbGxPZmZzZXRZXCIgfSwgXCJzb3VyY2VGaWVsZFwiOiBcIm8uc2Nyb2xsT2Zmc2V0WVwiLCBcInRhcmdldEZpZWxkXCI6IFwiby5wYXJlbnQuY29udHJvbHNbMF0uY29udHJvbHNbMF0uZHN0UmVjdC55XCIsIFwiY29udmVydFJhdGlvXCI6IHsgXCJzb3VyY2VcIjogXCJvLnNjcm9sbGFibGVIZWlnaHRcIiwgXCJ0YXJnZXRTaXplXCI6IFwiby5wYXJlbnQuY29udHJvbHNbMF0uY29udHJvbHNbMF0uZHN0UmVjdC5oZWlnaHRcIiwgXCJvZmZzZXRcIjogMCwgXCJ0YXJnZXRcIjogXCJvLmRzdFJlY3QuaGVpZ2h0XCIgfSwgXCJicmVha0NoYWluXCI6IFtcIm8ucGFyZW50LmNvbnRyb2xzWzBdXCJdIH1dLFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgXCIxMDAlXCIsIFwiMTAwJVwiXSxcbiAgICAgICAgICAgIFwidGVtcGxhdGVcIjogLT4gcC50ZW1wbGF0ZVxuICAgICAgICAgICAgXCJkYXRhU291cmNlXCI6IC0+IHAuZGF0YVNvdXJjZVxuICAgICAgICAgICAgXCJzcGFjaW5nXCI6IC0+IHAuc3BhY2luZ1xuICAgICAgICAgICAgXCJjb2x1bW5zXCI6IC0+IHAuY29sdW1ucyA/IDFcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_DataScrollView_164.js
ui.UiFactory.customTypes["ui.SettingsMenuSlider"] = {
  "type": "ui.StackLayout",
  "sizeToFit": true,
  "orientation": "vertical",
  "margin": [10, 10, 0, 0],
  "controls": [
    {
      "type": "ui.Text",
      "text": function() {
        return p.label;
      },
      "styles": ["regularUIText"],
      "frame": [0, 0, 200, gs.UIConstants.OPTION_BUTTON_H - 40],
      "margin": [0, 0, 50, 0]
    }, {
      "type": "ui.Slider",
      "id": function() {
        return p.id;
      },
      "frame": [80, 0, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W - 110, gs.UIConstants.OPTION_BUTTON_H],
      "params": {
        "actions": [],
        "max": 100,
        "write": (function() {
          return p.write;
        }),
        "read": (function() {
          return p.read;
        })
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHVCQUFBLENBQXpCLEdBQW9EO0VBQ2hELE1BQUEsRUFBUSxnQkFEd0M7RUFFaEQsV0FBQSxFQUFhLElBRm1DO0VBR2hELGFBQUEsRUFBZSxVQUhpQztFQUloRCxRQUFBLEVBQVUsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLENBQVQsRUFBWSxDQUFaLENBSnNDO0VBS2hELFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFNBRFo7TUFFSSxNQUFBLEVBQVEsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBRlo7TUFHSSxRQUFBLEVBQVUsQ0FBQyxlQUFELENBSGQ7TUFJSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEdBQVAsRUFBWSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWYsR0FBaUMsRUFBN0MsQ0FKYjtNQUtJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sRUFBUCxFQUFXLENBQVgsQ0FMZDtLQURRLEVBUVI7TUFDSSxNQUFBLEVBQVEsV0FEWjtNQUVJLElBQUEsRUFBTSxTQUFBO2VBQUcsQ0FBQyxDQUFDO01BQUwsQ0FGVjtNQUdJLE9BQUEsRUFBUyxDQUFDLEVBQUQsRUFBSyxDQUFMLEVBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyx3QkFBZixHQUEwQyxHQUFsRCxFQUF1RCxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQXRFLENBSGI7TUFJSSxRQUFBLEVBQVU7UUFBRSxTQUFBLEVBQVcsRUFBYjtRQUFpQixLQUFBLEVBQU8sR0FBeEI7UUFBNkIsT0FBQSxFQUFTLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBQXRDO1FBQW9ELE1BQUEsRUFBUSxDQUFDLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FBRCxDQUE1RDtPQUpkO0tBUlE7R0FMb0MiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkuY3VzdG9tVHlwZXNbXCJ1aS5TZXR0aW5nc01lbnVTbGlkZXJcIl0gPSB7XG4gICAgXCJ0eXBlXCI6IFwidWkuU3RhY2tMYXlvdXRcIixcbiAgICBcInNpemVUb0ZpdFwiOiB0cnVlLFxuICAgIFwib3JpZW50YXRpb25cIjogXCJ2ZXJ0aWNhbFwiLFxuICAgIFwibWFyZ2luXCI6IFsxMCwgMTAsIDAsIDBdLCBcbiAgICBcImNvbnRyb2xzXCI6IFtcbiAgICAgICAgeyBcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlRleHRcIiwgXG4gICAgICAgICAgICBcInRleHRcIjogLT4gcC5sYWJlbCxcbiAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sIFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgMjAwLCBncy5VSUNvbnN0YW50cy5PUFRJT05fQlVUVE9OX0ggLSA0MF0sXG4gICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgNTAsIDBdXG4gICAgICAgIH0sXG4gICAgICAgIHsgXG4gICAgICAgICAgICBcInR5cGVcIjogXCJ1aS5TbGlkZXJcIiwgXG4gICAgICAgICAgICBcImlkXCI6IC0+IHAuaWQsXG4gICAgICAgICAgICBcImZyYW1lXCI6IFs4MCwgMCwgZ3MuVUlDb25zdGFudHMuTEFZT1VUX1NFVFRJTkdTX1dJTkRPV19XIC0gMTEwLCBncy5VSUNvbnN0YW50cy5PUFRJT05fQlVUVE9OX0hdLCBcbiAgICAgICAgICAgIFwicGFyYW1zXCI6IHsgXCJhY3Rpb25zXCI6IFtdLCBcIm1heFwiOiAxMDAsIFwid3JpdGVcIjogKC0+IHAud3JpdGUpLCBcInJlYWRcIjogKC0+IHAucmVhZCkgfSBcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_SettingsMenuSlider_166.js
ui.UiFactory.customTypes["ui.SettingsOptionSet"] = {
  "type": "ui.StackLayout",
  "sizeToFit": true,
  "orientation": "vertical",
  "margin": [10, 10, 0, 0],
  "controls": [
    {
      "type": "ui.Text",
      "text": function() {
        return p.label;
      },
      "styles": ["regularUIText"],
      "frame": [0, 0, 300, gs.UIConstants.OPTION_BUTTON_H - 30]
    }, {
      "type": "ui.OptionButtonSet",
      "frame": [80, 0, 330, gs.UIConstants.OPTION_BUTTON_H],
      "params": {
        "actions": [],
        "write": (function() {
          return p.write;
        }),
        "read": (function() {
          return p.read;
        }),
        "max": 100,
        "onLabel": (function() {
          return p.onLabel || "On";
        }),
        "onAction": (function() {
          return p.onAction;
        }),
        "offLabel": (function() {
          return p.offLabel || "Off";
        }),
        "offAction": (function() {
          return p.offAction;
        }),
        "group": (function() {
          return p.group;
        })
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHNCQUFBLENBQXpCLEdBQW1EO0VBQy9DLE1BQUEsRUFBUSxnQkFEdUM7RUFFL0MsV0FBQSxFQUFhLElBRmtDO0VBRy9DLGFBQUEsRUFBZSxVQUhnQztFQUkvQyxRQUFBLEVBQVUsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLENBQVQsRUFBWSxDQUFaLENBSnFDO0VBSy9DLFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFNBRFo7TUFFSSxNQUFBLEVBQVEsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBRlo7TUFHSSxRQUFBLEVBQVUsQ0FBQyxlQUFELENBSGQ7TUFJSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEdBQVAsRUFBWSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWYsR0FBaUMsRUFBN0MsQ0FKYjtLQURRLEVBT1I7TUFDSSxNQUFBLEVBQVEsb0JBRFo7TUFFSSxPQUFBLEVBQVMsQ0FBQyxFQUFELEVBQUssQ0FBTCxFQUFRLEdBQVIsRUFBYSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQTVCLENBRmI7TUFHSSxRQUFBLEVBQVU7UUFBRSxTQUFBLEVBQVcsRUFBYjtRQUFpQixPQUFBLEVBQVMsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUQsQ0FBMUI7UUFBd0MsTUFBQSxFQUFRLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBQWhEO1FBQTZELEtBQUEsRUFBTyxHQUFwRTtRQUF5RSxTQUFBLEVBQVcsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQyxPQUFGLElBQWE7UUFBaEIsQ0FBRCxDQUFwRjtRQUE0RyxVQUFBLEVBQVksQ0FBRSxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUYsQ0FBeEg7UUFBMEksVUFBQSxFQUFZLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUMsUUFBRixJQUFjO1FBQWpCLENBQUQsQ0FBdEo7UUFBZ0wsV0FBQSxFQUFhLENBQUMsU0FBQTtpQkFBRyxDQUFDLENBQUM7UUFBTCxDQUFELENBQTdMO1FBQStNLE9BQUEsRUFBUyxDQUFDLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FBRCxDQUF4TjtPQUhkO0tBUFE7R0FMbUMiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkuY3VzdG9tVHlwZXNbXCJ1aS5TZXR0aW5nc09wdGlvblNldFwiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5TdGFja0xheW91dFwiLFxuICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgXCJvcmllbnRhdGlvblwiOiBcInZlcnRpY2FsXCIsXG4gICAgXCJtYXJnaW5cIjogWzEwLCAxMCwgMCwgMF0sIFxuICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICB7IFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLCBcbiAgICAgICAgICAgIFwidGV4dFwiOiAtPiBwLmxhYmVsLCBcbiAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sIFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgMzAwLCBncy5VSUNvbnN0YW50cy5PUFRJT05fQlVUVE9OX0ggLSAzMF1cbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLk9wdGlvbkJ1dHRvblNldFwiLCBcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzgwLCAwLCAzMzAsIGdzLlVJQ29uc3RhbnRzLk9QVElPTl9CVVRUT05fSF0sIFxuICAgICAgICAgICAgXCJwYXJhbXNcIjogeyBcImFjdGlvbnNcIjogW10sIFwid3JpdGVcIjogKC0+IHAud3JpdGUpLCBcInJlYWRcIjogKC0+IHAucmVhZCksIFwibWF4XCI6IDEwMCwgXCJvbkxhYmVsXCI6ICgtPiBwLm9uTGFiZWwgb3IgXCJPblwiKSwgXCJvbkFjdGlvblwiOiAoIC0+IHAub25BY3Rpb24pLCBcIm9mZkxhYmVsXCI6ICgtPiBwLm9mZkxhYmVsIG9yIFwiT2ZmXCIpLCBcIm9mZkFjdGlvblwiOiAoLT4gcC5vZmZBY3Rpb24pLCBcImdyb3VwXCI6ICgtPiBwLmdyb3VwKSB9IFxuICAgICAgICB9XG4gICAgXVxufSJdfQ==
//# sourceURL=Template_SettingsOptionSet_168.js
ui.UiFactory.customTypes["ui.SettingsStepSlider"] = {
  "type": "ui.StackLayout",
  "sizeToFit": true,
  "orientation": "vertical",
  "margin": [10, 10, 0, 0],
  "controls": [
    {
      "type": "ui.Text",
      "text": function() {
        return p.label;
      },
      "styles": ["regularUIText"],
      "frame": [0, 0, 350, gs.UIConstants.OPTION_BUTTON_H - 30],
      "margin": [0, 0, 0, 0]
    }, {
      "type": "ui.StepSlider",
      "frame": [40, 0, gs.UIConstants.LAYOUT_SETTINGS_WINDOW_W - 150, gs.UIConstants.OPTION_BUTTON_H + 30],
      "params": {
        "actions": [],
        "write": (function() {
          return p.write;
        }),
        "read": (function() {
          return p.read;
        }),
        "steps": 5,
        "data": function() {
          return p.data;
        }
      }
    }
  ]
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBWSxDQUFBLHVCQUFBLENBQXpCLEdBQW9EO0VBQ2hELE1BQUEsRUFBUSxnQkFEd0M7RUFFaEQsV0FBQSxFQUFhLElBRm1DO0VBR2hELGFBQUEsRUFBZSxVQUhpQztFQUloRCxRQUFBLEVBQVUsQ0FBQyxFQUFELEVBQUssRUFBTCxFQUFTLENBQVQsRUFBWSxDQUFaLENBSnNDO0VBS2hELFVBQUEsRUFBWTtJQUNSO01BQ0ksTUFBQSxFQUFRLFNBRFo7TUFFSSxNQUFBLEVBQVEsU0FBQTtlQUFHLENBQUMsQ0FBQztNQUFMLENBRlo7TUFHSSxRQUFBLEVBQVUsQ0FBQyxlQUFELENBSGQ7TUFJSSxPQUFBLEVBQVMsQ0FBQyxDQUFELEVBQUksQ0FBSixFQUFPLEdBQVAsRUFBWSxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWYsR0FBaUMsRUFBN0MsQ0FKYjtNQUtJLFFBQUEsRUFBVSxDQUFDLENBQUQsRUFBSSxDQUFKLEVBQU8sQ0FBUCxFQUFVLENBQVYsQ0FMZDtLQURRLEVBUVI7TUFDSSxNQUFBLEVBQVEsZUFEWjtNQUVJLE9BQUEsRUFBUyxDQUFDLEVBQUQsRUFBSyxDQUFMLEVBQVEsRUFBRSxDQUFDLFdBQVcsQ0FBQyx3QkFBZixHQUEwQyxHQUFsRCxFQUF1RCxFQUFFLENBQUMsV0FBVyxDQUFDLGVBQWYsR0FBaUMsRUFBeEYsQ0FGYjtNQUdJLFFBQUEsRUFBVTtRQUFFLFNBQUEsRUFBVyxFQUFiO1FBQWlCLE9BQUEsRUFBUyxDQUFDLFNBQUE7aUJBQUcsQ0FBQyxDQUFDO1FBQUwsQ0FBRCxDQUExQjtRQUF3QyxNQUFBLEVBQVEsQ0FBQyxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQUQsQ0FBaEQ7UUFBNkQsT0FBQSxFQUFTLENBQXRFO1FBQXlFLE1BQUEsRUFBUSxTQUFBO2lCQUFHLENBQUMsQ0FBQztRQUFMLENBQWpGO09BSGQ7S0FSUTtHQUxvQyIsInNvdXJjZXNDb250ZW50IjpbInVpLlVpRmFjdG9yeS5jdXN0b21UeXBlc1tcInVpLlNldHRpbmdzU3RlcFNsaWRlclwiXSA9IHtcbiAgICBcInR5cGVcIjogXCJ1aS5TdGFja0xheW91dFwiLFxuICAgIFwic2l6ZVRvRml0XCI6IHRydWUsXG4gICAgXCJvcmllbnRhdGlvblwiOiBcInZlcnRpY2FsXCIsXG4gICAgXCJtYXJnaW5cIjogWzEwLCAxMCwgMCwgMF0sIFxuICAgIFwiY29udHJvbHNcIjogW1xuICAgICAgICB7IFxuICAgICAgICAgICAgXCJ0eXBlXCI6IFwidWkuVGV4dFwiLCBcbiAgICAgICAgICAgIFwidGV4dFwiOiAtPiBwLmxhYmVsLCBcbiAgICAgICAgICAgIFwic3R5bGVzXCI6IFtcInJlZ3VsYXJVSVRleHRcIl0sIFxuICAgICAgICAgICAgXCJmcmFtZVwiOiBbMCwgMCwgMzUwLCBncy5VSUNvbnN0YW50cy5PUFRJT05fQlVUVE9OX0ggLSAzMF0sXG4gICAgICAgICAgICBcIm1hcmdpblwiOiBbMCwgMCwgMCwgMF1cbiAgICAgICAgfSxcbiAgICAgICAgeyBcbiAgICAgICAgICAgIFwidHlwZVwiOiBcInVpLlN0ZXBTbGlkZXJcIixcbiAgICAgICAgICAgIFwiZnJhbWVcIjogWzQwLCAwLCBncy5VSUNvbnN0YW50cy5MQVlPVVRfU0VUVElOR1NfV0lORE9XX1cgLSAxNTAsIGdzLlVJQ29uc3RhbnRzLk9QVElPTl9CVVRUT05fSCArIDMwXSwgXG4gICAgICAgICAgICBcInBhcmFtc1wiOiB7IFwiYWN0aW9uc1wiOiBbXSwgXCJ3cml0ZVwiOiAoLT4gcC53cml0ZSksIFwicmVhZFwiOiAoLT4gcC5yZWFkKSwgXCJzdGVwc1wiOiA1LCBcImRhdGFcIjogLT4gcC5kYXRhICAgfSBcbiAgICAgICAgfVxuICAgIF1cbn0iXX0=
//# sourceURL=Template_SettingsStepSlider_170.js
(function() {


}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIl19
//# sourceURL=Styles_136.js

/*
 * Category name which is displayed on the left side in some settings menus like the audio
 * settings.
 */
ui.UIManager.styles.windowCategoryUIText = {
  "font": {
    "name": "Times New Roman",
    "size": gs.UIConstants.TEXT_SIZE_SMALL,
    "smallCaps": true,
    "italic": true,
    "color": [215, 215, 215, 255]
  }
};


/*
 * Title Screen text used for the title screen options like "New Game", etc.
 */

ui.UIManager.styles.titleText = {
  "font": {
    "name": "Times New Roman",
    "size": 45,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255],
    "outline": {
      "color": [0, 0, 0, 255],
      "size": 4
    }
  },
  "anchor": [0.5, 0.5],
  "animations": [
    {
      "event": "onMouseHover",
      "flow": [
        {
          "type": "zoomTo",
          "zoom": [110, 110],
          "duration": 10,
          "easing": "linear_inout",
          "wait": true
        }
      ]
    }, {
      "event": "onMouseLeave",
      "clear": false,
      "flow": [
        {
          "type": "zoomTo",
          "zoom": [100, 100],
          "duration": 10,
          "easing": "linear_inout"
        }
      ]
    }
  ]
};

ui.UIManager.styles["titleText:hover"] = {
  "font": {
    "name": "Times New Roman",
    "size": 45,
    "smallCaps": true,
    "italic": true,
    "color": [205, 205, 255, 255],
    "outline": {
      "color": [0, 0, 0, 255],
      "size": 4
    }
  }
};

ui.UIManager.styles["titleText:focused"] = {
  "font": {
    "name": "Times New Roman",
    "size": 45,
    "smallCaps": true,
    "italic": true,
    "color": [205, 205, 255, 255],
    "outline": {
      "color": [0, 0, 0, 255],
      "size": 4
    }
  }
};

ui.UIManager.styles.choiceBoxEntry = {
  "opacity": 180
};

ui.UIManager.styles["choiceBoxEntry:enabled"] = {
  "opacity": 255
};

ui.UIManager.styles.messageOptionButton = {
  "image": gs.UIConstants.OPTION_BUTTON_MSG_IMAGE_OFF,
  "opacity": 100
};

ui.UIManager.styles["messageOptionButton:selected"] = {
  "image": gs.UIConstants.OPTION_BUTTON_MSG_IMAGE_ON,
  "opacity": 255
};

ui.UIManager.styles["messageOptionButton:enabled"] = {
  "opacity": 255
};

ui.UIManager.styles.optionButton = {
  "image": gs.UIConstants.OPTION_BUTTON_L_IMAGE_OFF
};

ui.UIManager.styles["optionButton:selected"] = {
  "image": gs.UIConstants.OPTION_BUTTON_L_IMAGE_ON
};

ui.UIManager.styles.sliderTrack = {
  "color": [131, 131, 131, 131]
};

ui.UIManager.styles.sliderKnob = {
  "image": gs.UIConstants.OPTION_BUTTON_L_IMAGE_OFF
};

ui.UIManager.styles["sliderKnob:hover"] = {
  "image": gs.UIConstants.OPTION_BUTTON_L_IMAGE_ON
};

ui.UIManager.styles.galleryImageFrame = {
  "image": "dropshadow"
};

ui.UIManager.styles["galleryImageFrame:hover"] = {
  "image": "selection"
};

ui.UIManager.styles["galleryImageFrame:selected"] = {
  "image": "selection"
};

ui.UIManager.styles.windowFrame = {
  "image": "skin-frame"
};

ui.UIManager.styles.windowTilePattern = {
  "image": "skin-tile",
  "looping": {
    "vertical": true,
    "horizontal": true
  }
};

ui.UIManager.styles.windowStretchPattern = {
  "image": "skin-stretch"
};

ui.UIManager.styles.windowShadow = {
  "image": "dropshadow",
  "frameCornerSize": 30,
  "frameThickness": 30,
  "padding": [-16, -16, -16, -16]
};

ui.UIManager.styles.selectableWindowShadow = {
  "image": "dropshadow"
};

ui.UIManager.styles["selectableWindowShadow:hover"] = {
  "image": "selection"
};

ui.UIManager.styles.buttonText = {
  "alignmentX": "center",
  "alignmentY": "center",
  "font": {
    "name": "Times New Roman",
    "size": 30,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255]
  }
};

ui.UIManager.styles.cgGalleryImage = {};

ui.UIManager.styles["cgGalleryImageFrame"] = {
  "image": "dropshadow"
};

ui.UIManager.styles["selectableText"] = {
  "font": {
    "name": "Times New Roman",
    "size": 30,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255]
  }
};

ui.UIManager.styles["selectableText:selected"] = {
  "font": {
    "name": "Times New Roman",
    "size": 30,
    "smallCaps": true,
    "italic": true,
    "color": [205, 205, 255, 255]
  }
};

ui.UIManager.styles["button"] = {};

ui.UIManager.styles["button:focused selectableWindowShadow"] = {
  "image": "selection"
};

ui.UIManager.styles["cgGalleryImage:hover cgGalleryImageFrame"] = {
  "image": "selection"
};


/*
 * Choice Timer text displayed if "Choice Timer" command is used to show a count-down
 * until the choice-selection is done automatically.
 */

ui.UIManager.styles.choiceTimerText = {
  "font": {
    "name": "Times New Roman",
    "size": 30,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255],
    "border": true
  }
};


/*
 * Regular Size UI text used in all places for normal-size text / labels.
 */

ui.UIManager.styles.regularUIText = {
  "font": {
    "name": "Times New Roman",
    "size": 30,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255]
  },
  "opacity": 100
};

ui.UIManager.styles["regularUIText:enabled"] = {
  "font": {
    "name": "Times New Roman",
    "size": 30,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255]
  },
  "opacity": 255
};


/*
 * Small Size UI text used in all places for small-size text / labels.
 */

ui.UIManager.styles.smallUIText = {
  "font": {
    "name": "Times New Roman",
    "size": 22,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255]
  }
};


/*
 * Small Size text used for save-game slot descriptions.
 */

ui.UIManager.styles.saveGameUIText = {
  "font": {
    "name": "Times New Roman",
    "size": 20,
    "smallCaps": true,
    "italic": true,
    "color": [255, 255, 255, 255]
  }
};


/*
 * Regular message text style for use in backlog, etc.
 */

ui.UIManager.styles.messageText = {
  "font": {
    "name": "Times New Roman",
    "size": gs.UIConstants.TEXT_SIZE_MESSAGE,
    "smallCaps": false,
    "italic": true,
    "border": true,
    "borderSize": 4
  }
};


/*
 * Ruby text style. 
 * If size-property is not present, the half of the current font-size is used.
 * If color-property is not present, the current font-color is used.
 */

ui.UIManager.styles.rubyText = {
  "font": {
    "name": "Times New Roman",
    "smallCaps": false,
    "italic": true,
    "border": true,
    "borderSize": 4
  }
};


/*
 * Text for ADV game messages.
 */

ui.UIManager.styles.advMessageText = {
  "font": {
    "name": "Times New Roman",
    "size": gs.UIConstants.TEXT_SIZE_MESSAGE,
    "smallCaps": false,
    "italic": true,
    "outline": {
      "size": 4
    }
  }
};


/*
 * Text for NVL game messages.
 */

ui.UIManager.styles.nvlMessageText = {
  "font": {
    "name": "Times New Roman",
    "size": gs.UIConstants.TEXT_SIZE_MESSAGE,
    "smallCaps": false,
    "italic": true,
    "border": true,
    "borderSize": 4
  }
};


/*
 * Used to display the current character's name.
 */

ui.UIManager.styles.messageBoxNameText = {
  "font": {
    "name": "Times New Roman",
    "size": gs.UIConstants.TEXT_SIZE_MESSAGE_NAME,
    "smallCaps": false,
    "italic": true,
    "border": true,
    "borderSize": 4
  }
};


/*
 * Used for number-input entries showing you the current number you have entered so far.
 */

ui.UIManager.styles.numberInputEntryText = {
  "font": {
    "name": "Times New Roman",
    "size": 90,
    "color": [0, 0, 0, 255]
  }
};


/*
 * Used for number-input for each single digit.
 */

ui.UIManager.styles.numberInputDigitText = {
  "font": {
    "name": "Times New Roman",
    "size": 35
  }
};


/*
 * Used for text-input entries showing you the current text you have entered so far.
 */

ui.UIManager.styles.textInputEntryText = {
  "font": {
    "name": "Times New Roman",
    "size": 90,
    "color": [0, 0, 0, 255]
  }
};


/*
 * Used for text-input for each single letter.
 */

ui.UIManager.styles.textInputLetterText = {
  "font": {
    "name": "Times New Roman",
    "size": 25
  }
};


/*
 * Defines the color used for the name-column of the message backlog.
 */

ui.UIManager.styles.backlogNamePanel = {
  "color": [255, 255, 255, 40]
};


/*
 * Defines the color used for the message-column of the message backlog.
 */

ui.UIManager.styles.backlogMessagePanel = {
  "color": [0, 0, 0, 160]
};


/*
 * Defines the color used for sub-areas on a window a category-column,etc.
 */

ui.UIManager.styles["hyperlink"] = {
  "font": {
    "color": [255, 255, 255, 255],
    "name": "Poly-Regular",
    "size": 30,
    "smallCaps": false,
    "italic": true,
    "border": true,
    "borderSize": 4
  }
};

ui.UIManager.styles["hyperlink:hover"] = {
  "font": {
    "color": [255, 0, 0, 255],
    "name": "Poly-Regular",
    "size": 30,
    "smallCaps": false,
    "italic": true,
    "border": true,
    "borderSize": 4
  }
};


/*
 * Defines the color used for sub-areas on a window a category-column,etc.
 */

ui.UIManager.styles.windowSubPanel = {
  "color": [255, 255, 255, 20]
};


/*
 * Defines the color used for the separator-line to separate a window's title-area from its actual content.
 */

ui.UIManager.styles.windowContentSeparator = {
  "color": [111, 111, 111]
};

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Style_Default_14.js
(function() {


}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBOztBQUFBIiwic291cmNlc0NvbnRlbnQiOlsiIl19
//# sourceURL=DataSources_142.js
ui.UiFactory.dataSources["default"] = function() {
  return {
    "database": RecordManager,
    "settings": GameManager.settings,
    "tempSettings": GameManager.tempSettings,
    "globalData": GameManager.globalData,
    "backlog": GameManager.backlog,
    "saveGameSlots": GameManager.saveGameSlots,
    "scene": GameManager.scene,
    "languages": LanguageManager.languages,
    "chapters": GameManager.chapters,
    "textInputPages": ui.Helper.generateTextInputPages(),
    "cgGalleryByChapter": RecordManager.cgGallery.groupBy(function(x) {
      var ref;
      return (x != null ? (ref = x.relationData) != null ? ref.chapter.uid : void 0 : void 0) || "";
    }).toDictionary((function(x) {
      var ref, ref1;
      return (x != null ? (ref = x[0]) != null ? (ref1 = ref.relationData) != null ? ref1.chapter.uid : void 0 : void 0 : void 0) || "";
    }), (function(x) {
      return x;
    }))
  };
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLEVBQUUsQ0FBQyxTQUFTLENBQUMsV0FBVyxFQUFDLE9BQUQsRUFBeEIsR0FBbUMsU0FBQTtTQUFHO0lBQ2xDLFVBQUEsRUFBWSxhQURzQjtJQUVsQyxVQUFBLEVBQVksV0FBVyxDQUFDLFFBRlU7SUFHbEMsY0FBQSxFQUFnQixXQUFXLENBQUMsWUFITTtJQUlsQyxZQUFBLEVBQWMsV0FBVyxDQUFDLFVBSlE7SUFLbEMsU0FBQSxFQUFXLFdBQVcsQ0FBQyxPQUxXO0lBTWxDLGVBQUEsRUFBaUIsV0FBVyxDQUFDLGFBTks7SUFPbEMsT0FBQSxFQUFTLFdBQVcsQ0FBQyxLQVBhO0lBUWxDLFdBQUEsRUFBYSxlQUFlLENBQUMsU0FSSztJQVNsQyxVQUFBLEVBQVksV0FBVyxDQUFDLFFBVFU7SUFVbEMsZ0JBQUEsRUFBa0IsRUFBRSxDQUFDLE1BQU0sQ0FBQyxzQkFBVixDQUFBLENBVmdCO0lBV2xDLG9CQUFBLEVBQXNCLGFBQWEsQ0FBQyxTQUFTLENBQUMsT0FBeEIsQ0FBaUMsU0FBQyxDQUFEO0FBQU8sVUFBQTs4REFBZSxDQUFFLE9BQU8sQ0FBQyxzQkFBekIsSUFBZ0M7SUFBdkMsQ0FBakMsQ0FBNEUsQ0FBQyxZQUE3RSxDQUEyRixDQUFDLFNBQUMsQ0FBRDtBQUFPLFVBQUE7eUZBQW1CLENBQUUsT0FBTyxDQUFDLCtCQUE3QixJQUFvQztJQUEzQyxDQUFELENBQTNGLEVBQTRJLENBQUMsU0FBQyxDQUFEO2FBQU87SUFBUCxDQUFELENBQTVJLENBWFk7O0FBQUgiLCJzb3VyY2VzQ29udGVudCI6WyJ1aS5VaUZhY3RvcnkuZGF0YVNvdXJjZXMuZGVmYXVsdCA9IC0+IHtcbiAgICBcImRhdGFiYXNlXCI6IFJlY29yZE1hbmFnZXIsXG4gICAgXCJzZXR0aW5nc1wiOiBHYW1lTWFuYWdlci5zZXR0aW5ncyxcbiAgICBcInRlbXBTZXR0aW5nc1wiOiBHYW1lTWFuYWdlci50ZW1wU2V0dGluZ3MsXG4gICAgXCJnbG9iYWxEYXRhXCI6IEdhbWVNYW5hZ2VyLmdsb2JhbERhdGEsXG4gICAgXCJiYWNrbG9nXCI6IEdhbWVNYW5hZ2VyLmJhY2tsb2csXG4gICAgXCJzYXZlR2FtZVNsb3RzXCI6IEdhbWVNYW5hZ2VyLnNhdmVHYW1lU2xvdHMsXG4gICAgXCJzY2VuZVwiOiBHYW1lTWFuYWdlci5zY2VuZSxcbiAgICBcImxhbmd1YWdlc1wiOiBMYW5ndWFnZU1hbmFnZXIubGFuZ3VhZ2VzLFxuICAgIFwiY2hhcHRlcnNcIjogR2FtZU1hbmFnZXIuY2hhcHRlcnMsXG4gICAgXCJ0ZXh0SW5wdXRQYWdlc1wiOiB1aS5IZWxwZXIuZ2VuZXJhdGVUZXh0SW5wdXRQYWdlcygpLFxuICAgIFwiY2dHYWxsZXJ5QnlDaGFwdGVyXCI6IFJlY29yZE1hbmFnZXIuY2dHYWxsZXJ5Lmdyb3VwQnkoICh4KSAtPiB4Py5yZWxhdGlvbkRhdGE/LmNoYXB0ZXIudWlkIHx8IFwiXCIgKS50b0RpY3Rpb25hcnkoICgoeCkgLT4geD9bMF0/LnJlbGF0aW9uRGF0YT8uY2hhcHRlci51aWQgfHwgXCJcIiksICgoeCkgLT4geCkgKVxufSJdfQ==
//# sourceURL=DataSource_Default_5.js


//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIiLCJzb3VyY2VzQ29udGVudCI6WyIiXX0=
//# sourceURL=Helpers_76.js
var DataOptimizer;

DataOptimizer = (function() {

  /**
  * The data optimizer is to optimize data structures coming from data files to
  * make processing faster. One way of optimization for example is to convert
  * regular array to typed arrays.
  *
  * @module gs
  * @class DataOptimizer
  * @memberof gs
  * @static
  * @constructor
   */
  function DataOptimizer() {
    this.labels = {};
    this.labelJumps = {};
  }


  /**
  * Converts the specified number-array to a typed Int16 array.
  *
  * @method arrayToNativeArray
  * @param {Array} array - The array to convert.
  * @return {Int16Array} The typed array.
  * @static
   */

  DataOptimizer.prototype.arrayToNativeArray = function(array) {
    var i, j, length, ref, result;
    result = null;
    length = array.length || Object.keys(array).length;
    if (array != null) {
      if (window.ArrayBuffer != null) {
        result = new ArrayBuffer(length * 2);
        result = new Int16Array(result);
      } else {
        result = new Array(length);
      }
      for (i = j = 0, ref = length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {
        result[i] = array[i];
      }
    }
    return result;
  };


  /**
  * Creates a typed Int16 array if supported. Otherwise a regular array is created.
  *
  * @method nativeArray16
  * @param {number} size - The size of the array in elements.(Not in bytes).
  * @return {Int16Array} The Int16 array.
  * @static
   */

  DataOptimizer.prototype.nativeArray16 = function(size) {
    var result;
    result = new Array(size);
    return result;
  };


  /**
  * Creates a typed Int8 array if supported. Otherwise a regular array is created.
  *
  * @method nativeArray16
  * @param {number} size - The size of the array in elements.(Not in bytes).
  * @return {Int8Array} The Int8 array.
  * @static
   */

  DataOptimizer.prototype.nativeArray8 = function(size) {
    var result;
    result = new Array(size);
    return result;
  };


  /**
  * Removes a single empty command like a comment.
  *
  * @method removeEmptyCommand
  * @private
  * @param {Object[]} commands - A list of commands.
  * @param {Object} command - The command to optimize.
  * @static
   */

  DataOptimizer.prototype.removeEmptyCommand = function(command, index, commands) {
    var result;
    if (GameManager.inLivePreview) {
      return false;
    }
    result = false;
    switch (commands[index].id) {
      case "gs.Comment":
        commands.splice(index, 1);
        result = true;
        break;
      case "gs.EmptyCommand":
        commands.splice(index, 1);
        result = true;
    }
    return result;
  };


  /**
  * Optimizes a single command.
  *
  * @method optimizeCommand
  * @private
  * @param {Object[]} commands - A list of commands.
  * @param {number} index - Index of the command in command-list.
  * @param {Object} command - The command to optimize.
  * @static
   */

  DataOptimizer.prototype.optimizeCommand = function(command, index, commands) {
    var ref;
    switch (command.id) {
      case "gs.Label":
        this.labels[command.params.name] = index;
        return (ref = this.labelJumps[command.params.name]) != null ? ref.forEach(function(c) {
          return c.params.labelIndex = index;
        }) : void 0;
      case "vn.Choice":
        command.params.action.labelIndex = this.labels[command.params.action.label];
        if (!this.labelJumps[command.params.action.label]) {
          this.labelJumps[command.params.action.label] = [];
        }
        return this.labelJumps[command.params.action.label].push(command);
      case "gs.CheckSwitch":
      case "gs.CheckNumberVariable":
      case "gs.CheckTextVariable":
        command.params.labelIndex = this.labels[command.params.label];
        if (!this.labelJumps[command.params.label]) {
          this.labelJumps[command.params.label] = [];
        }
        return this.labelJumps[command.params.label].push(command);
      case "gs.JumpToLabel":
        command.params.labelIndex = this.labels[command.params.name];
        if (!this.labelJumps[command.params.name]) {
          this.labelJumps[command.params.name] = [];
        }
        return this.labelJumps[command.params.name].push(command);
    }
  };


  /**
  * Optimizes a list of event/scene commands by removing unnecessary commands like
  * comments or empty commands. It also optimizes label jumps. Adds an <b>optimized</b> to
  * the specified command-list to indicate that the list was already optimized. If <b>optimized</b>
  * property of command-list is set to <b>true</b> this method will return immediately.
  *
  * @method optimizeEventCommands
  * @param {Object[]} commands - A list of commands to optimize.
  * @static
   */

  DataOptimizer.prototype.optimizeEventCommands = function(commands) {
    var command, i, j, len;
    if (commands.optimized) {
      return;
    }
    i = 0;
    this.labels = {};
    this.labelJumps = {};
    if (!$PARAMS.preview) {
      while (i < commands.length) {
        commands[i].indent = commands[i].indent || 0;
        if (this.removeEmptyCommand(commands[i], i, commands)) {
          i--;
        }
        i++;
      }
    }
    i = 0;
    for (i = j = 0, len = commands.length; j < len; i = ++j) {
      command = commands[i];
      this.optimizeCommand(command, i, commands);
    }
    return commands.optimized = true;
  };

  return DataOptimizer;

})();

window.DataOptimizer = new DataOptimizer();

gs.DataOptimizer = DataOptimizer;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=DataOptimizer_1.js
var ResourceLoader;

ResourceLoader = (function() {

  /**
  * The resource helps to load a bunch of resources from different kind of
  * data structures.
  *
  * @module gs
  * @class ResourceLoader
  * @memberof gs
  * @constructor
  * @static
   */
  function ResourceLoader() {
    this.loadedScenesByUid = {};
  }


  /**
  * Loads all graphics for the specified list of custom layout types/templates
  *
  * @method loadUiTypesGraphics
  * @param {Object[]} types - An array of custom layout types/templates
  * @static
   */

  ResourceLoader.prototype.loadUiTypesGraphics = function(types) {
    var k;
    for (k in types) {
      this.loadUiLayoutGraphics(types[k]);
    }
    return null;
  };


  /**
  * Loads all graphics for the specified layout-descriptor.
  *
  * @method loadUiGraphicsFromObject
  * @param {Object} layout - The layout descriptor.
  * @static
   */

  ResourceLoader.prototype.loadUiGraphicsFromObject = function(layout) {
    var k;
    for (k in layout) {
      if (k === "image" || k === "fullImage") {
        ResourceManager.getBitmap("Graphics/Pictures/" + layout[k]);
      } else if (k === "video") {
        ResourceManager.getVideo("Movies/" + layout[k]);
      }
    }
    return null;
  };


  /**
  * Loads all graphics for the specified layout-descriptor.
  *
  * @method loadUiDataFieldsGraphics
  * @param {Object} layout - The layout descriptor.
  * @static
   */

  ResourceLoader.prototype.loadUiDataFieldsGraphics = function(layout) {
    var i, image, j, k, len, o, ref;
    for (k in layout) {
      if (layout[k] instanceof Array) {
        ref = layout[k];
        for (i = 0, len = ref.length; i < len; i++) {
          o = ref[i];
          for (j in o) {
            if (j === "image" || j === "fullImage") {
              image = o[j];
              if (image != null ? image.startsWith("data:") : void 0) {
                ResourceManager.getBitmap(o[j]);
              } else {
                ResourceManager.getBitmap("Graphics/Pictures/" + o[j]);
              }
            }
          }
        }
      }
    }
    return null;
  };


  /**
  * Loads all graphics for the specified layout-descriptor.
  *
  * @method loadUiDataFieldsGraphics
  * @param {Object} layout - The layout descriptor.
  * @static
   */

  ResourceLoader.prototype.loadUiLayoutGraphics = function(layout) {
    var action, actions, animation, control, descriptor, graphic, i, image, l, len, len1, len10, len11, len2, len3, len4, len5, len6, len7, len8, len9, m, music, n, object, p, q, r, ref, ref1, ref10, ref11, ref2, ref3, ref4, ref5, ref6, ref7, ref8, ref9, results, s, sel, sound, style, sub, t, u, v, video, w;
    if (layout.preload != null) {
      if (layout.preload.graphics != null) {
        ref = layout.preload.graphics;
        for (i = 0, len = ref.length; i < len; i++) {
          graphic = ref[i];
          if (graphic.name != null) {
            ResourceManager.getBitmap((graphic.folder || 'Graphics/Pictures') + "/" + graphic.name);
          } else {
            object = ui.Component_FormulaHandler.fieldValue(null, graphic.path);
            for (l = 0, len1 = object.length; l < len1; l++) {
              sub = object[l];
              if (sub != null) {
                image = ui.Component_FormulaHandler.fieldValue(sub, graphic.image);
                if (image != null) {
                  ResourceManager.getBitmap("Graphics/Pictures/" + image);
                }
              }
            }
          }
        }
      }
      if (layout.preload.videos != null) {
        ref1 = layout.preload.videos;
        for (m = 0, len2 = ref1.length; m < len2; m++) {
          video = ref1[m];
          if (video.name != null) {
            ResourceManager.getVideo((video.folder || 'Movies') + "/" + video.name);
          }
        }
      }
      if (layout.preload.music != null) {
        ref2 = layout.preload.music;
        for (n = 0, len3 = ref2.length; n < len3; n++) {
          music = ref2[n];
          if (music != null) {
            ResourceManager.getVideo((music.folder || 'Audio/Music') + "/" + (music.name || music));
          }
        }
      }
      if (layout.preload.sounds != null) {
        ref3 = layout.preload.sounds;
        for (p = 0, len4 = ref3.length; p < len4; p++) {
          sound = ref3[p];
          if (sound != null) {
            ResourceManager.getAudioBuffer((sound.folder || 'Audio/Sounds') + "/" + ((ref4 = ui.Component_FormulaHandler.fieldValue(layout, sound.name || sound)) != null ? ref4.name : void 0));
          }
        }
      }
    }
    if (layout.images != null) {
      ref5 = layout.images;
      for (q = 0, len5 = ref5.length; q < len5; q++) {
        image = ref5[q];
        ResourceManager.getBitmap("Graphics/Pictures/" + image);
      }
    }
    if (layout.animations != null) {
      ref6 = layout.animations;
      for (r = 0, len6 = ref6.length; r < len6; r++) {
        descriptor = ref6[r];
        ref7 = descriptor.flow;
        for (s = 0, len7 = ref7.length; s < len7; s++) {
          animation = ref7[s];
          switch (animation.type) {
            case "sound":
              ResourceManager.getAudioBuffer("Audio/Sounds/" + animation.sound);
              break;
            case "changeImages":
              ref8 = animation.images;
              for (t = 0, len8 = ref8.length; t < len8; t++) {
                image = ref8[t];
                ResourceManager.getBitmap("Graphics/Pictures/" + image);
              }
              break;
            case "maskTo":
              ResourceManager.getBitmap("Graphics/Masks/" + animation.mask);
          }
          if (animation.sound != null) {
            ResourceManager.getAudioBuffer("Audio/Sounds/" + animation.sound);
          }
        }
      }
    }
    if (layout.image != null) {
      ResourceManager.getBitmap("Graphics/Pictures/" + layout.image);
    }
    if (layout.video != null) {
      ResourceManager.getBitmap("Graphics/Movies/" + layout.video);
    }
    if (layout.customFields != null) {
      this.loadUiGraphicsFromObject(layout.customFields);
    }
    if (((ref9 = layout.customFields) != null ? ref9.actions : void 0) != null) {
      ref10 = layout.customFields.actions;
      for (u = 0, len9 = ref10.length; u < len9; u++) {
        action = ref10[u];
        if (action.name === "playVoice" || action.name === "playSound") {
          AudioManager.loadSound(action.params.name);
        }
      }
    }
    if ((layout.actions != null) || (layout.action != null)) {
      actions = layout.action != null ? [layout.action] : layout.actions;
      for (v = 0, len10 = actions.length; v < len10; v++) {
        action = actions[v];
        if (action.name === "playVoice" || action.name === "playSound") {
          AudioManager.loadSound(action.params.name);
        }
      }
    }
    if (layout.params) {
      this.loadUiLayoutGraphics(layout.params);
    }
    if (layout.template != null) {
      this.loadUiLayoutGraphics(layout.template);
    }
    if ((layout.style != null) && (ui.UiFactory.styles[layout.style] != null)) {
      this.loadUiLayoutGraphics(ui.UiFactory.styles[layout.style]);
      for (sel in ui.UIManager.selectors) {
        style = ui.UIManager.styles[layout.style + ":" + sel];
        if (style) {
          this.loadUiLayoutGraphics(style);
        }
      }
    }
    if (ui.UiFactory.customTypes[layout.type] != null) {
      this.loadUiLayoutGraphics(ui.UiFactory.customTypes[layout.type]);
    }
    if (layout.controls != null) {
      ref11 = layout.controls;
      results = [];
      for (w = 0, len11 = ref11.length; w < len11; w++) {
        control = ref11[w];
        results.push(this.loadUiLayoutGraphics(control));
      }
      return results;
    }
  };


  /**
  * Loads all system sounds.
  *
  * @method loadSystemSounds
  * @static
   */

  ResourceLoader.prototype.loadSystemSounds = function() {
    var i, len, ref, results, sound;
    ref = RecordManager.system.sounds;
    results = [];
    for (i = 0, len = ref.length; i < len; i++) {
      sound = ref[i];
      results.push(AudioManager.loadSound(sound));
    }
    return results;
  };


  /**
  * Loads all system graphics.
  *
  * @method loadSystemGraphics
  * @static
   */

  ResourceLoader.prototype.loadSystemGraphics = function() {
    var i, len, ref, ref1, ref2, ref3, ref4, slot;
    ref = GameManager.saveGameSlots;
    for (i = 0, len = ref.length; i < len; i++) {
      slot = ref[i];
      if ((slot.thumb != null) && slot.thumb.length > 0) {
        ResourceManager.getBitmap(slot.thumb);
      }
    }
    if ((ref1 = RecordManager.system.cursor) != null ? ref1.name : void 0) {
      ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.cursor.name);
    }
    if ((ref2 = RecordManager.system.titleScreen) != null ? ref2.name : void 0) {
      ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.titleScreen.name);
    }
    if ((ref3 = RecordManager.system.languageScreen) != null ? ref3.name : void 0) {
      ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.languageScreen.name);
    }
    if ((ref4 = RecordManager.system.menuBackground) != null ? ref4.name : void 0) {
      ResourceManager.getBitmap("Graphics/Pictures/" + RecordManager.system.menuBackground.name);
    }
    return null;
  };


  /**
  * Loads all resources needed by the specified list of commands.
  *
  * @method loadEventCommandsGraphics
  * @param {Object[]} commands - The list of commands.
  * @return {boolean} Indicates if data needs to be loaded. 
  * @static
   */

  ResourceLoader.prototype.loadEventCommandsData = function(commands) {
    var command, i, len, result, sceneDocument;
    if (commands == null) {
      return false;
    }
    result = false;
    for (i = 0, len = commands.length; i < len; i++) {
      command = commands[i];
      switch (command.id) {
        case "vn.Choice":
          if (command.params.action.scene) {
            sceneDocument = DataManager.getDocument(command.params.action.scene.uid);
            if (sceneDocument) {
              result = !sceneDocument.loaded;
            }
          }
          break;
        case "vn.CallScene":
          if (command.params.scene) {
            sceneDocument = DataManager.getDocument(command.params.scene.uid);
            if (sceneDocument) {
              result = !sceneDocument.loaded;
            }
          }
      }
    }
    return result;
  };


  /**
  * Loads all resources needed by the specified list of commands.
  *
  * @method loadEventCommandsGraphics
  * @param {Object[]} commands - The list of commands.
  * @static
   */

  ResourceLoader.prototype.loadEventCommandsGraphics = function(commands) {
    this.loadedScenesByUid = {};
    return this._loadEventCommandsGraphics(commands);
  };

  ResourceLoader.prototype._loadEventCommandsGraphics = function(commands) {
    var actor, actorId, animation, animationId, character, command, commonEvent, effect, eid, enemy, expression, expressionId, hotspot, i, image, l, len, len1, len10, len11, len12, len13, len14, len2, len3, len4, len5, len6, len7, len8, len9, m, moveCommand, n, p, q, r, record, ref, ref1, ref10, ref11, ref12, ref13, ref14, ref15, ref16, ref17, ref18, ref19, ref2, ref20, ref21, ref3, ref4, ref5, ref6, ref7, ref8, ref9, s, sceneDocument, sound, t, u, v, w, x, y, z;
    if (commands == null) {
      return;
    }
    for (i = 0, len = commands.length; i < len; i++) {
      command = commands[i];
      switch (command.id) {
        case "gs.CallCommonEvent":
          commonEvent = RecordManager.commonEvents[command.params.commonEventId];
          if (commonEvent != null) {
            this._loadEventCommandsGraphics(commonEvent.commands);
          }
          break;
        case "gs.ScreenTransition":
          ResourceManager.getBitmap("Graphics/Masks/" + ((ref = command.params.graphic) != null ? ref.name : void 0));
          break;
        case "vn.ChangeBackground":
          if (command.params.graphic != null) {
            ResourceManager.getBitmap("Graphics/Backgrounds/" + command.params.graphic.name);
          }
          if (((ref1 = command.params.animation) != null ? ref1.type : void 0) === gs.AnimationTypes.MASKING) {
            ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
          }
          break;
        case "vn.L2DJoinScene":
          if (command.params.model != null) {
            ResourceManager.getLive2DModel("Live2D/" + command.params.model.name);
          }
          break;
        case "vn.CharacterJoinScene":
          character = RecordManager.characters[command.params.characterId];
          if (character != null) {
            expressionId = (ref2 = command.params.expressionId) != null ? ref2 : character.defaultExpressionId;
            if (expressionId != null) {
              record = RecordManager.characterExpressions[expressionId];
              if (record != null) {
                if (record.idle) {
                  ref3 = record.idle;
                  for (l = 0, len1 = ref3.length; l < len1; l++) {
                    image = ref3[l];
                    ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                  }
                }
                if (record.talking) {
                  ref4 = record.talking;
                  for (m = 0, len2 = ref4.length; m < len2; m++) {
                    image = ref4[m];
                    ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                  }
                }
              }
            }
          }
          if (command.params.animation.type === gs.AnimationTypes.MASKING && (command.params.animation.mask.graphic != null)) {
            ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
          }
          break;
        case "vn.CharacterChangeExpression":
          record = RecordManager.characterExpressions[command.params.expressionId];
          if (record != null) {
            ref5 = record.idle;
            for (n = 0, len3 = ref5.length; n < len3; n++) {
              image = ref5[n];
              ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
            }
            ref6 = record.talking;
            for (p = 0, len4 = ref6.length; p < len4; p++) {
              image = ref6[p];
              ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
            }
          }
          if (command.params.animation.type === gs.AnimationTypes.MASKING && (command.params.animation.mask.graphic != null)) {
            ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
          }
          break;
        case "gs.ShowPartialMessage":
          if (command.params.voice != null) {
            AudioManager.loadSound(command.params.voice);
          }
          break;
        case "vn.Choice":
          if (command.params.action.scene) {
            sceneDocument = DataManager.getDocument(command.params.action.scene.uid);
            if (sceneDocument && !this.loadedScenesByUid[sceneDocument.uid]) {
              this.loadedScenesByUid[sceneDocument.uid] = true;
              this._loadEventCommandsGraphics(sceneDocument.items.commands);
            }
          }
          break;
        case "gs.ShowMessage":
        case "gs.ShowMessageNVL":
        case "gs.ShowText":
          if (command.params.animations != null) {
            ref7 = command.params.animations;
            for (q = 0, len5 = ref7.length; q < len5; q++) {
              eid = ref7[q];
              animation = RecordManager.animations[eid];
              if ((animation != null) && animation.graphic.name) {
                ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
              }
            }
          }
          if (command.params.expressions != null) {
            ref8 = command.params.expressions;
            for (r = 0, len6 = ref8.length; r < len6; r++) {
              eid = ref8[r];
              expression = RecordManager.characterExpressions[eid];
              if (expression != null) {
                ref9 = expression.idle;
                for (s = 0, len7 = ref9.length; s < len7; s++) {
                  image = ref9[s];
                  ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                }
                ref10 = expression.talking;
                for (t = 0, len8 = ref10.length; t < len8; t++) {
                  image = ref10[t];
                  ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
                }
              }
            }
          }
          if (command.params.voice != null) {
            AudioManager.loadSound(command.params.voice);
          }
          record = RecordManager.characterExpressions[command.params.expressionId];
          if (record != null) {
            ref11 = record.idle;
            for (u = 0, len9 = ref11.length; u < len9; u++) {
              image = ref11[u];
              ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
            }
            ref12 = record.talking;
            for (v = 0, len10 = ref12.length; v < len10; v++) {
              image = ref12[v];
              ResourceManager.getBitmap("Graphics/Characters/" + image.resource.name);
            }
          }
          break;
        case "gs.AddHotspot":
          if ((command.params.baseGraphic != null) && (command.params.baseGraphic.name != null)) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.baseGraphic.name);
          }
          if ((command.params.hoverGraphic != null) && (command.params.hoverGraphic.name != null)) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.hoverGraphic.name);
          }
          if ((command.params.selectedGraphic != null) && (command.params.selectedGraphic.name != null)) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selectedGraphic.name);
          }
          if ((command.params.selectedHoverGraphic != null) && (command.params.selectedHoverGraphic.name != null)) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selectedHoverGraphic.name);
          }
          if ((command.params.unselectedGraphic != null) && (command.params.unselectedGraphic.name != null)) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.unselectedGraphic.name);
          }
          break;
        case "gs.ShowPicture":
          if (command.params.graphic != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.graphic.name);
          }
          if (((ref13 = command.params.animation) != null ? ref13.type : void 0) === gs.AnimationTypes.MASKING) {
            ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
          }
          break;
        case "gs.ShowImageMap":
          if (command.params.ground != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.ground.name);
          }
          if (command.params.hover != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.hover.name);
          }
          if (command.params.unselected != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.unselected.name);
          }
          if (command.params.selected != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selected.name);
          }
          if (command.params.selectedHover != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.selectedHover.name);
          }
          ref14 = command.params.hotspots;
          for (w = 0, len11 = ref14.length; w < len11; w++) {
            hotspot = ref14[w];
            if (hotspot.data.action === 2) {
              commonEvent = RecordManager.commonEvents[hotspot.data.commonEventId];
              if (commonEvent != null) {
                this._loadEventCommandsGraphics(commonEvent.commands);
              }
            }
          }
          break;
        case "gs.MovePicturePath":
        case "vn.MoveCharacterPath":
        case "vn.ScrollBackgroundPath":
        case "gs.MoveVideoPath":
          if (command.params.path.effects != null) {
            ref15 = command.params.path.effects.data;
            for (x = 0, len12 = ref15.length; x < len12; x++) {
              effect = ref15[x];
              AudioManager.loadSound(effect.sound);
            }
          }
          break;
        case "gs.MaskPicture":
        case "vn.MaskCharacter":
        case "vn.MaskBackground":
        case "gs.MaskVideo":
          if (command.params.mask.sourceType === 0 && (command.params.mask.graphic != null)) {
            ResourceManager.getBitmap("Graphics/Masks/" + command.params.mask.graphic.name);
          }
          if (command.params.mask.sourceType === 1 && (command.params.mask.video != null)) {
            ResourceManager.getVideo("Movies/" + command.params.mask.video.name);
          }
          break;
        case "gs.PlayPictureAnimation":
          animationId = command.params.animationId;
          if ((animationId != null) && (animationId.scope == null)) {
            animation = RecordManager.animations[animationId];
            if (animation && animation.graphic) {
              ResourceManager.getBitmap("Graphics/Pictures/" + animation.graphic.name);
            }
          }
          break;
        case "gs.ShowBattleAnimation":
          animationId = command.params.animationId;
          if ((animationId != null) && (animationId.scope == null)) {
            animation = RecordManager.animations[animationId];
            this.loadComplexAnimation(animation);
          }
          break;
        case "gs.InputName":
          actorId = command.params.actorId;
          if ((actorId != null) && (actorId.scope == null)) {
            actor = RecordManager.actors[actorId];
            if (actor != null) {
              ResourceManager.getBitmap("Graphics/Faces/" + ((ref16 = actor.faceGraphic) != null ? ref16.name : void 0));
            }
          }
          break;
        case "gs.ChangeTileset":
          if (command.params.graphic != null) {
            ResourceManager.getBitmap("Graphics/Tilesets/" + command.params.graphic.name);
          }
          break;
        case "gs.ChangeMapParallaxBackground":
          if (command.params.parallaxBackground != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.parallaxBackground.name);
          }
          break;
        case "gs.ChangeActorGraphic":
          if (command.params.changeCharacter && (command.params.characterGraphic != null)) {
            ResourceManager.getBitmap("Graphics/Characters/" + command.params.characterGraphic.name);
          }
          if (command.params.changeFace && (command.params.faceGraphic != null)) {
            ResourceManager.getBitmap("Graphics/Faces/" + command.params.faceGraphic.name);
          }
          break;
        case "gs.MoveEvent":
          ref17 = command.params.commands;
          for (y = 0, len13 = ref17.length; y < len13; y++) {
            moveCommand = ref17[y];
            switch (moveCommand.id) {
              case 44:
                ResourceManager.getBitmap("Graphics/Characters/" + moveCommand.resource.name);
                break;
              case 47:
                AudioManager.loadSound(moveCommand.resource);
            }
          }
          break;
        case "gs.TransformEnemy":
          if (((ref18 = command.params) != null ? ref18.targetId.scope : void 0) == null) {
            enemy = RecordManager.enemies[command.params.targetId];
            this.loadActorBattleAnimations(enemy);
          }
          break;
        case "gs.PlayMusic":
          if (command.params.music != null) {
            AudioManager.loadMusic(command.params.music);
          }
          break;
        case "gs.PlayVideo":
        case "gs.ShowVideo":
          if (command.params.video != null) {
            ResourceManager.getVideo("Movies/" + command.params.video.name);
          }
          if (((ref19 = command.params.animation) != null ? ref19.type : void 0) === gs.AnimationTypes.MASKING) {
            ResourceManager.getBitmap("Graphics/Masks/" + command.params.animation.mask.graphic.name);
          }
          break;
        case "gs.PlaySound":
          if (command.params.sound != null) {
            AudioManager.loadSound(command.params.sound);
            ResourceManager.getAudioBuffer("Audio/Sound/" + command.params.sound.name);
          }
          break;
        case "vn.ChangeSounds":
          ref20 = command.params.sounds;
          for (z = 0, len14 = ref20.length; z < len14; z++) {
            sound = ref20[z];
            if (sound != null) {
              AudioManager.loadSound(sound);
            }
          }
          break;
        case "gs.ChangeScreenCursor":
          if (((ref21 = command.params.graphic) != null ? ref21.name : void 0) != null) {
            ResourceManager.getBitmap("Graphics/Pictures/" + command.params.graphic.name);
          }
      }
    }
    return null;
  };


  /**
  * Loads all resources for the specified animation.
  *
  * @method loadAnimation
  * @param {Object} animation - The animation-record.
  * @static
   */

  ResourceLoader.prototype.loadAnimation = function(animation) {
    if ((animation != null) && (animation.graphic != null)) {
      return ResourceManager.getBitmap("Graphics/SimpleAnimations/" + animation.graphic.name);
    }
  };

  return ResourceLoader;

})();

gs.ResourceLoader = new ResourceLoader();

window.ResourceLoader = gs.ResourceLoader;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=ResourceLoader_19.js

/**
* An enumeration of game storage locations.
*
* @module gs
* @class GameStorageLocations
* @memberof gs
* @constructor
* @static
* @final
 */
var GameStorage, GameStorageLocations;

GameStorageLocations = (function() {
  function GameStorageLocations() {}

  GameStorageLocations.initialize = function() {

    /**
    * Stores game data in working directory which is next to the executable file in most cases.
    * @property WORKING_DIRECTORY
    * @type number
    * @static
    * @final
     */
    this.WORKING_DIRECTORY = 0;

    /**
    * Stores game data in local app-data directory depending on the operating system.
    * @property APP_DATA_DIRECTORY
    * @type number
    * @static
    * @final
     */
    this.APP_DATA_DIRECTORY = 1;

    /**
    * Stores game data in internal storage.
    * @property INTERNAL_STORAGE
    * @type number
    * @static
    * @final
     */
    return this.INTERNAL_STORAGE = 2;
  };

  return GameStorageLocations;

})();

GameStorageLocations.initialize();

gs.GameStorageLocations = GameStorageLocations;

GameStorage = (function() {

  /**
  * The GameStorage helps to store different kind of game data permanentely like
  * a save-game or the game settings. The way how the data is stored depends on
  * the platform. For example: If the game runs in a web-browser the data is stored
  * the internal local storage of the web-browser but if the game runs locally the
  * data is stored on disk.
  *
  * All object are stored as JSON so it is imported that the object to store can
  * be serialized to JSON and doesn't contain any circular references. Except for
  * the methods gs.GameStorage.setData and gs.GameStorage.getData since that methods
  * dealing with a regular string.
  *
  * @module gs
  * @class GameStorage
  * @memberof gs
  * @constructor
  * @static
   */
  function GameStorage() {}


  /**
  * Clears the game storage. All data will be lost.
  *
  * @method clear
  * @static
   */

  GameStorage.prototype.clear = function() {
    return localStorage.clear();
  };


  /**
  * The path where the data is stored. The result depends on the platform.
  * For example: For a web-game the result is an empty string but for a local
  * running game the result is the file-path to the configured storage-directory of the game.
  *
  * @method clear
  * @static
   */

  GameStorage.prototype.storagePath = function() {
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      switch (RecordManager.system.gameDataPath) {
        case gs.GameStorageLocations.APP_DATA_DIRECTORY:
          return nw.App.dataPath;
        case gs.GameStorageLocations.WORKING_DIRECTORY:
          return "./";
        case gs.GameStorageLocations.INTERNAL_STORAGE:
          return "";
        default:
          return "./";
      }
    } else {
      return "";
    }
  };


  /**
  * Checks if data already exists for the specified id/key.
  *
  * @method exists
  * @return {boolean} If <b>true</b> then there is already existing data for the id/key. Otherwise <b>false</b>
  * @static
   */

  GameStorage.prototype.exists = function(id) {
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      return require("fs").existsSync(this.storagePath() + "/" + id + ".vndata");
    } else {
      return localStorage.getItem($PARAMS.uid + "_" + id) !== null;
    }
  };


  /**
  * Deletes the data stored under the specified id/key.
  *
  * @method remove
  * @return {string} id - The id/key where the data should be deleted.
  * @static
   */

  GameStorage.prototype.remove = function(id) {
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      if (require("fs").existsSync(this.storagePath() + "/" + id + ".vndata")) {
        return require("fs").unlinkSync(this.storagePath() + "/" + id + ".vndata");
      }
    } else {
      return localStorage.removeItem($PARAMS.uid + "_" + id);
    }
  };


  /**
  * Stores a string under the specified id/key.
  *
  * @method setData
  * @param {string} id - The id/key where the data should be stored.
  * @param {string} data - The string to store.
  * @static
   */

  GameStorage.prototype.setData = function(id, data) {
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      return require("fs").writeFileSync(this.storagePath() + "/" + id + ".vndata", data);
    } else {
      return localStorage.setItem($PARAMS.uid + "_" + id, data);
    }
  };


  /**
  * Gets a stored string for the specified id/key.
  *
  * @method setObject
  * @param {string} id - The id/key of the string/data to get.
  * @return {string} The string/data or <b>null</b> if no data exists for the specified id/key.
  * @static
   */

  GameStorage.prototype.getData = function(id) {
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      return require("fs").readFileSync(this.storagePath() + "/" + id + ".vndata", "utf8");
    } else {
      return localStorage.getItem($PARAMS.uid + "_" + id);
    }
  };


  /**
  * Stores an object under the specified id/key. The object will be serialized to
  * JSON so its important that the object doesn't contain any circular references.
  *
  * @method setObject
  * @param {string} id - The id/key where the object should be stored.
  * @param {Object} object - The object to store.
  * @static
   */

  GameStorage.prototype.setObject = function(id, object) {
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      return require("fs").writeFileSync(this.storagePath() + "/" + id + ".vndata", JSON.stringify(object));
    } else {
      return localStorage.setItem($PARAMS.uid + "_" + id, JSON.stringify(object));
    }
  };


  /**
  * Gets a stored object for the specified id/key.
  *
  * @method setObject
  * @param {string} id - The id/key of the object to get.
  * @return {Object} The object or <b>null</b> if no object exists for the specified id/key.
  * @static
   */

  GameStorage.prototype.getObject = function(id) {
    var item, result;
    if ($PARAMS.isOffline && !$PARAMS.platform.isSteamOS && (window.nw != null)) {
      if (require("fs").existsSync(this.storagePath() + "/" + id + ".vndata")) {
        item = require("fs").readFileSync(this.storagePath() + "/" + id + ".vndata", "utf8");
      }
    } else {
      item = localStorage.getItem($PARAMS.uid + "_" + id);
    }
    result = null;
    if (item != null) {
      result = JSON.parse(item);
    }
    return result;
  };

  return GameStorage;

})();

window.GameStorage = new GameStorage();

gs.GameStorage = window.GameStorage;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=GameStorage_30.js
var GameTemp;

GameTemp = (function() {

  /**
  * The GameTemp holds the temporary data of the currently running game like currently displayed
  * choices, choice timer, etc. The GameTemp is written to the save-game as well.
  *
  * @module gs
  * @class GameTemp
  * @memberof gs
  * @constructor
  * @param {Object} data - An optional data-bundle to initialize the game-temp from.
   */
  function GameTemp(data) {

    /**
    * Stores the current choice timer.
    *
    * @property choiceTimer
    * @type gs.Object_Timer
     */
    this.choiceTimer = null;

    /**
    * Stores the current choices.
    *
    * @property choices
    * @type Object[]
     */
    this.choices = [];
    this.restore(data);
  }


  /**
  * Serializes the game-temp into a data-bundle.
  *
  * @method toDataBundle
  * @return {Object} A data-bundle which can be serialized to JSON.
   */

  GameTemp.prototype.toDataBundle = function() {
    var bundle, ref;
    bundle = {};
    Object.mixin(bundle, this);
    bundle.choiceTimer = (ref = this.choiceTimer) != null ? ref.toDataBundle() : void 0;
    return bundle;
  };


  /**
  * Restores the game-temp from a data-bundle.
  *
  * @method restore
  * @param {Object} data - A data-bundle to restore the game-temp from.
   */

  GameTemp.prototype.restore = function(data) {
    if (!data) {
      return;
    }
    Object.mixin(this, data);
    if (data.choiceTimer) {
      return this.choiceTimer = new gs.Object_Timer(data.choiceTimer);
    }
  };


  /**
  * Clears the game temp.
  *
  * @method clear
   */

  GameTemp.prototype.clear = function() {
    return Object.keys(this).forEach((function(_this) {
      return function(x) {
        return delete _this[x];
      };
    })(this));
  };

  return GameTemp;

})();

gs.GameTemp = GameTemp;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUE7O0FBQU07O0FBQ0Y7Ozs7Ozs7Ozs7RUFVYSxrQkFBQyxJQUFEOztBQUNUOzs7Ozs7SUFNQSxJQUFDLENBQUEsV0FBRCxHQUFlOztBQUVmOzs7Ozs7SUFNQSxJQUFDLENBQUEsT0FBRCxHQUFXO0lBRVgsSUFBQyxDQUFBLE9BQUQsQ0FBUyxJQUFUO0VBakJTOzs7QUFtQmI7Ozs7Ozs7cUJBTUEsWUFBQSxHQUFjLFNBQUE7QUFDVixRQUFBO0lBQUEsTUFBQSxHQUFTO0lBQ1QsTUFBTSxDQUFDLEtBQVAsQ0FBYSxNQUFiLEVBQXFCLElBQXJCO0lBRUEsTUFBTSxDQUFDLFdBQVAseUNBQWlDLENBQUUsWUFBZCxDQUFBO0FBRXJCLFdBQU87RUFORzs7O0FBUWQ7Ozs7Ozs7cUJBTUEsT0FBQSxHQUFTLFNBQUMsSUFBRDtJQUNMLElBQUcsQ0FBQyxJQUFKO0FBQWMsYUFBZDs7SUFFQSxNQUFNLENBQUMsS0FBUCxDQUFhLElBQWIsRUFBbUIsSUFBbkI7SUFFQSxJQUFHLElBQUksQ0FBQyxXQUFSO2FBQ0ksSUFBQyxDQUFBLFdBQUQsR0FBbUIsSUFBQSxFQUFFLENBQUMsWUFBSCxDQUFnQixJQUFJLENBQUMsV0FBckIsRUFEdkI7O0VBTEs7OztBQVFUOzs7Ozs7cUJBS0EsS0FBQSxHQUFPLFNBQUE7V0FDSCxNQUFNLENBQUMsSUFBUCxDQUFZLElBQVosQ0FBaUIsQ0FBQyxPQUFsQixDQUEwQixDQUFBLFNBQUEsS0FBQTthQUFBLFNBQUMsQ0FBRDtlQUFPLE9BQU8sS0FBSyxDQUFBLENBQUE7TUFBbkI7SUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQTFCO0VBREc7Ozs7OztBQUdYLEVBQUUsQ0FBQyxRQUFILEdBQWMiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IEdhbWVUZW1wXG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBHYW1lVGVtcFxuICAgICMjIypcbiAgICAqIFRoZSBHYW1lVGVtcCBob2xkcyB0aGUgdGVtcG9yYXJ5IGRhdGEgb2YgdGhlIGN1cnJlbnRseSBydW5uaW5nIGdhbWUgbGlrZSBjdXJyZW50bHkgZGlzcGxheWVkXG4gICAgKiBjaG9pY2VzLCBjaG9pY2UgdGltZXIsIGV0Yy4gVGhlIEdhbWVUZW1wIGlzIHdyaXR0ZW4gdG8gdGhlIHNhdmUtZ2FtZSBhcyB3ZWxsLlxuICAgICpcbiAgICAqIEBtb2R1bGUgZ3NcbiAgICAqIEBjbGFzcyBHYW1lVGVtcFxuICAgICogQG1lbWJlcm9mIGdzXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhIC0gQW4gb3B0aW9uYWwgZGF0YS1idW5kbGUgdG8gaW5pdGlhbGl6ZSB0aGUgZ2FtZS10ZW1wIGZyb20uXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChkYXRhKSAtPlxuICAgICAgICAjIyMqXG4gICAgICAgICogU3RvcmVzIHRoZSBjdXJyZW50IGNob2ljZSB0aW1lci5cbiAgICAgICAgKlxuICAgICAgICAqIEBwcm9wZXJ0eSBjaG9pY2VUaW1lclxuICAgICAgICAqIEB0eXBlIGdzLk9iamVjdF9UaW1lclxuICAgICAgICAjIyMgXG4gICAgICAgIEBjaG9pY2VUaW1lciA9IG51bGxcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBTdG9yZXMgdGhlIGN1cnJlbnQgY2hvaWNlcy5cbiAgICAgICAgKlxuICAgICAgICAqIEBwcm9wZXJ0eSBjaG9pY2VzXG4gICAgICAgICogQHR5cGUgT2JqZWN0W11cbiAgICAgICAgIyMjIFxuICAgICAgICBAY2hvaWNlcyA9IFtdXG4gICAgICAgIFxuICAgICAgICBAcmVzdG9yZShkYXRhKVxuICAgICAgICBcbiAgICAjIyMqXG4gICAgKiBTZXJpYWxpemVzIHRoZSBnYW1lLXRlbXAgaW50byBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgdG9EYXRhQnVuZGxlXG4gICAgKiBAcmV0dXJuIHtPYmplY3R9IEEgZGF0YS1idW5kbGUgd2hpY2ggY2FuIGJlIHNlcmlhbGl6ZWQgdG8gSlNPTi5cbiAgICAjIyMgXG4gICAgdG9EYXRhQnVuZGxlOiAtPlxuICAgICAgICBidW5kbGUgPSB7fVxuICAgICAgICBPYmplY3QubWl4aW4oYnVuZGxlLCB0aGlzKVxuICAgIFxuICAgICAgICBidW5kbGUuY2hvaWNlVGltZXIgPSBAY2hvaWNlVGltZXI/LnRvRGF0YUJ1bmRsZSgpXG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYnVuZGxlXG4gICAgICAgIFxuICAgICMjIypcbiAgICAqIFJlc3RvcmVzIHRoZSBnYW1lLXRlbXAgZnJvbSBhIGRhdGEtYnVuZGxlLlxuICAgICpcbiAgICAqIEBtZXRob2QgcmVzdG9yZVxuICAgICogQHBhcmFtIHtPYmplY3R9IGRhdGEgLSBBIGRhdGEtYnVuZGxlIHRvIHJlc3RvcmUgdGhlIGdhbWUtdGVtcCBmcm9tLlxuICAgICMjIyAgICAgXG4gICAgcmVzdG9yZTogKGRhdGEpIC0+XG4gICAgICAgIGlmICFkYXRhIHRoZW4gcmV0dXJuXG4gICAgICAgIFxuICAgICAgICBPYmplY3QubWl4aW4odGhpcywgZGF0YSlcbiAgICAgICAgXG4gICAgICAgIGlmIGRhdGEuY2hvaWNlVGltZXJcbiAgICAgICAgICAgIEBjaG9pY2VUaW1lciA9IG5ldyBncy5PYmplY3RfVGltZXIoZGF0YS5jaG9pY2VUaW1lcilcbiAgICAgICAgICAgIFxuICAgICMjIypcbiAgICAqIENsZWFycyB0aGUgZ2FtZSB0ZW1wLlxuICAgICpcbiAgICAqIEBtZXRob2QgY2xlYXJcbiAgICAjIyMgXG4gICAgY2xlYXI6IC0+XG4gICAgICAgIE9iamVjdC5rZXlzKHRoaXMpLmZvckVhY2ggKHgpID0+IGRlbGV0ZSB0aGlzW3hdXG5cbmdzLkdhbWVUZW1wID0gR2FtZVRlbXAiXX0=
//# sourceURL=GameTemp_43.js
var VariableStore;

VariableStore = (function() {
  VariableStore.objectCodecBlackList = ["persistentNumbers", "persistentStrings", "persistentBooleans", "persistentLists"];


  /**
  * A storage for different kind of game variables. The following scopes
  * for variables exist:<br>
  * 
  * - Local Variables -> Only valid for the current scene.
  * - Global Variables -> Valid for the whole game but bound to a single save-game.
  * - Persistent Variables -> Valid for the whole game indepentent from the save-games.
  * <br><br>
  * The following data-types exist:<br>
  * <br>
  * - Strings -> Variables storing text data.
  * - Numbers -> Variables storing integer number values.
  * - Booleans -> Variables storing boolean values. (Called "Switches" for easier understanding)
  * - Lists -> Variables storing multiple other variables. Lists can also contain Lists.
  * <br><br>
  * Local variables are stored by scene UID. For each scene UID a list of local variables is stored.
  *
  * @module gs
  * @class VariableStore
  * @memberof gs
  * @constructor
   */

  function VariableStore() {

    /**
    * The global number variables.
    * @property numbers
    * @type number[]
     */
    this.numbers = new Array(1000);

    /**
    * The global boolean variables.
    * @property booleans
    * @type boolean[]
     */
    this.booleans = new Array(1000);

    /**
    * The global string variables.
    * @property strings
    * @type string[]
     */
    this.strings = new Array(1000);

    /**
    * The global list variables.
    * @property lists
    * @type Object[][]
     */
    this.lists = [];

    /**
    * The persistent number variables.
    * @property persistentNumbers
    * @type number[]
     */
    this.persistentNumbers = [];

    /**
    * The persistent string variables.
    * @property persistentStrings
    * @type string[]
     */
    this.persistentStrings = [];

    /**
    * The persistent boolean variables.
    * @property persistentBooleans
    * @type boolean[]
     */
    this.persistentBooleans = [];

    /**
    * The persistent list variables.
    * @property persistentLists
    * @type Object[][]
     */
    this.persistentLists = [];

    /**
    * The local number variables.
    * @property localNumbers
    * @type Object
     */
    this.localNumbers = {};

    /**
    * The local string variables.
    * @property localStrings
    * @type Object
     */
    this.localStrings = {};

    /**
    * The local boolean variables.
    * @property localBooleans
    * @type Object
     */
    this.localBooleans = {};

    /**
    * The local list variables.
    * @property localLists
    * @type Object
     */
    this.localLists = {};

    /**
    * @property tempNumbers
    * @type number[]
     */
    this.tempNumbers = null;

    /**
    * @property tempStrings
    * @type string[]
     */
    this.tempStrings = null;

    /**
    * @property localBooleans
    * @type number[]
     */
    this.tempBooleans = null;

    /**
    * @property localLists
    * @type Object[][]
     */
    this.tempLists = null;
  }


  /**
  * Clears all global variables
  *
  * @method clearGlobals
   */

  VariableStore.prototype.clearGlobals = function() {
    this.numbers = new Array(1000);
    this.booleans = new Array(1000);
    return this.strings = new Array(1000);
  };


  /**
  * Initializes the variables. Should be called whenever the context changes. (Like after a scene change)
  *
  * @method setup
  * @param {Object} context - The context(current scene) needed for local variables. Needs have at least an id-property.
   */

  VariableStore.prototype.setup = function(context) {
    this.setupLocalVariables(context);
    return this.setupTempVariables(context);
  };


  /**
  * Initializes the local variables for the specified context. Should be called on first time use.
  *
  * @method setupLocalVariables
  * @param {Object} context - The context(current scene). Needs have at least an id-property.
   */

  VariableStore.prototype.setupLocalVariables = function(context) {
    this.setupVariables(context, "localNumbers", 0);
    this.setupVariables(context, "localStrings", "");
    this.setupVariables(context, "localBooleans", false);
    return this.setupVariables(context, "localLists", []);
  };


  /**
  * Initializes the specified kind of variables.
  *
  * @method setupVariables                                       
  * @param {Object} context - The context(current scene). Needs have at least an id-property.
  * @param {string} property - The kind of variables (property-name).
  * @param {Object} defaultValue - The default value for each variable.
   */

  VariableStore.prototype.setupVariables = function(context, property, defaultValue) {
    if (this[property][context.id] == null) {
      return this[property][context.id] = [];
    }
  };


  /**
  * Initializes the current temp variables for the specified context. Should be called whenever the context changed.
  *
  * @method setupTempVariables
  * @param {Object} context - The context(current scene). Needs have at least an id-property.
   */

  VariableStore.prototype.setupTempVariables = function(context) {
    if (!this.localNumbers[context.id]) {
      this.setupLocalVariables(context);
    }
    this.tempNumbers = this.localNumbers[context.id];
    this.tempStrings = this.localStrings[context.id];
    this.tempBooleans = this.localBooleans[context.id];
    return this.tempLists = this.localLists[context.id];
  };


  /**
  * Sets the value of the number variable at the specified index.
  *
  * @method setNumberValueAtIndex
  * @param {number} scope - The variable scope.
  * @param {number} index - The variable's index.
  * @param {number} value - The value to set.
   */

  VariableStore.prototype.setNumberValueAtIndex = function(scope, index, value) {
    if (scope === 2) {
      return this.persistentNumbers[index] = value;
    } else if (scope === 1) {
      return this.numbers[index] = value;
    } else {
      return this.tempNumbers[index] = value;
    }
  };


  /**
  * Sets the value of a specified number variable.
  *
  * @method setNumberValueAtIndex
  * @param {number} variable - The variable to set. 
  * @param {number} value - The value to set.
   */

  VariableStore.prototype.setNumberValueTo = function(variable, value) {
    if (variable.scope === 2) {
      return this.persistentNumbers[variable.index] = value;
    } else if (variable.scope === 1) {
      return this.numbers[variable.index] = value;
    } else {
      return this.tempNumbers[variable.index] = value;
    }
  };


  /**
  * Sets the value of a specified list variable.
  *
  * @method setListObjectTo
  * @param {Object} variable - The variable to set. 
  * @param {Object} value - The value to set.
   */

  VariableStore.prototype.setListObjectTo = function(variable, value) {
    if (variable.scope === 2) {
      return this.persistentLists[variable.index] = value;
    } else if (variable.scope === 1) {
      return this.lists[variable.index] = value;
    } else {
      return this.tempLists[variable.index] = value;
    }
  };


  /**
  * Sets the value of a specified boolean variable.
  *
  * @method setBooleanValueTo
  * @param {Object} variable - The variable to set. 
  * @param {boolean} value - The value to set.
   */

  VariableStore.prototype.setBooleanValueTo = function(variable, value) {
    if (variable.scope === 2) {
      return this.persistentBooleans[variable.index] = value;
    } else if (variable.scope === 1) {
      return this.booleans[variable.index] = value;
    } else {
      return this.tempBooleans[variable.index] = value;
    }
  };


  /**
  * Sets the value of a specified string variable.
  *
  * @method setStringValueTo
  * @param {Object} variable - The variable to set. 
  * @param {string} value - The value to set.
   */

  VariableStore.prototype.setStringValueTo = function(variable, value) {
    if (variable.scope === 2) {
      return this.persistentStrings[variable.index] = value;
    } else if (variable.scope === 1) {
      return this.strings[variable.index] = value;
    } else {
      return this.tempStrings[variable.index] = value;
    }
  };


  /**
  * Gets the value of a specified list variable.
  *
  * @method listObjectOf
  * @param {Object} object - The list-variable/object to get the value from.
  * @return {Object} The list-object.
   */

  VariableStore.prototype.listObjectOf = function(object) {
    var result;
    result = 0;
    if ((object != null) && (object.index != null)) {
      if (object.scope === 2) {
        result = this.persistentLists[object.index];
      } else if (object.scope === 1) {
        result = this.lists[object.index];
      } else {
        result = this.tempLists[object.index];
      }
    } else {
      result = object;
    }
    return result || [];
  };


  /**
  * Gets the value of a number variable at the specified index.
  *
  * @method numberValueAtIndex
  * @param {number} scope - The variable scope.
  * @param {number} index - The variable's index.
  * @return {Object} The number value of the variable.
   */

  VariableStore.prototype.numberValueAtIndex = function(scope, index) {
    var result;
    result = 0;
    if (scope === 2) {
      result = this.persistentNumbers[index];
    } else if (scope === 1) {
      result = this.numbers[index];
    } else {
      result = this.tempNumbers[index];
    }
    return result;
  };


  /**
  * Gets the value of a specified number variable.
  *
  * @method numberValueOf
  * @param {Object} object - The variable to get the value from.
  * @return {Object} The number value of the variable.
   */

  VariableStore.prototype.numberValueOf = function(object) {
    var result;
    result = 0;
    if ((object != null) && (object.index != null)) {
      if (object.scope === 2) {
        result = this.persistentNumbers[object.index];
      } else if (object.scope === 1) {
        result = this.numbers[object.index];
      } else {
        result = this.tempNumbers[object.index];
      }
    } else {
      result = object;
    }
    return result || 0;
  };


  /**
  * Gets the value of a specified string variable.
  *
  * @method stringValueOf
  * @param {Object} object - The variable to get the value from.
  * @return {Object} The string value of the variable.
   */

  VariableStore.prototype.stringValueOf = function(object) {
    var result;
    result = "";
    if ((object != null) && (object.index != null)) {
      if (object.scope === 2) {
        result = this.persistentStrings[object.index];
      } else if (object.scope === 1) {
        result = this.strings[object.index];
      } else {
        result = this.tempStrings[object.index];
      }
    } else {
      result = object;
    }
    return result || "";
  };


  /**
  * Gets the value of a specified boolean variable.
  *
  * @method booleanValueOf
  * @param {Object} object - The variable to get the value from.
  * @return {Object} The boolean value of the variable.
   */

  VariableStore.prototype.booleanValueOf = function(object) {
    var result;
    result = false;
    if ((object != null) && (object.index != null)) {
      if (object.scope === 2) {
        result = this.persistentBooleans[object.index];
      } else if (object.scope === 1) {
        result = this.booleans[object.index] || false;
      } else {
        result = this.tempBooleans[object.index];
      }
    } else {
      result = object ? true : false;
    }
    return result;
  };

  return VariableStore;

})();

gs.VariableStore = VariableStore;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=VariableStore_60.js
var Easing;

Easing = (function() {
  Easing.accessors("type", {
    set: function(v) {
      if (v !== this.type_) {
        this.type_ = v;
        return this.func = gs.Easings.EASE_FUNCTIONS[this.type_[0]][this.type_[1]];
      }
    },
    get: function() {
      return this.type_;
    }
  });


  /**
  * The Easing class provides different types of animation using different easings. The easing
  * of an animation controls how hard/soft the animation starts and/or stops.
  *
  * @module gs
  * @class Easing
  * @memberof gs
  * @constructor
  * @param {gs.Easings} type - The easing-type.
  * @param {Object} [data=null] - A data-bundle to restore the easing from.
   */

  function Easing(type, data) {
    if (data != null) {
      Object.mixin(this, data);
    } else {

      /**
      * Frame counter for the animation. 
      * @property time
      * @type number
      * @protected
       */
      this.time = 0;

      /**
      * Delta X 
      * @property dx
      * @type number
      * @protected
       */
      this.dx = 0;

      /**
      * Delta Y
      * @property dy
      * @type number
      * @protected
       */
      this.dy = 0;

      /**
      * @property startX
      * @type number
      * @protected
       */
      this.startX = 0;

      /**
      * @property startY
      * @type number
      * @protected
       */
      this.startY = 0;

      /**
      * The duration of the animation.
      * @property duration
      * @type number
       */
      this.duration = 0;

      /**
      * Indicates if the animation is running.
      * @property isRunning
      * @type boolean
      * @readOnly
       */
      this.isRunning = false;

      /**
      * Indicates if the animation is endless.
      * @property isEndless
      * @type boolean
      * @readOnly
       */
      this.isEndless = false;

      /**
      * @property isSingleValue
      * @type boolean
      * @readOnly
       */
      this.isSingleValue = false;

      /**
      * @property speedX
      * @type number
      * @protected
       */
      this.speedX = 0;

      /**
      * @property speedY
      * @type number
      * @protected
       */
      this.speedY = 0;

      /**
      * @property speed
      * @type number
      * @protected
       */
      this.speed = 0;

      /**
      * @property x
      * @type number
      * @protected
       */
      this.x = 0;

      /**
      * @property y
      * @type number
      * @protected
       */
      this.y = 0;

      /**
      * The current value.
      * @property value
      * @type number
      * @protected
       */
      this.value = 0;

      /**
      * The easing type.
      * @property gs.Easings
      * @type Function
       */
      this.type = type || gs.Easings.EASE_LINEAR[gs.EasingTypes.EASE_OUT];
    }

    /**
    * The easing function used for the animation.
    * @property func
    * @type Function
     */
    this.func = gs.Easings.EASE_FUNCTIONS[this.type[0]][this.type[1]];
  }


  /**
  * Stops the animation 
  *
  * @method stop
   */

  Easing.prototype.stop = function() {
    return this.isRunning = false;
  };


  /**
  * Starts an endless moving/scroll animation.
  *
  * @method startEndless
  * @param {number} speedX - The animation speed on x-axis.
  * @param {number} speedY - The animation speed on y-axis.
   */

  Easing.prototype.startEndless = function(speedX, speedY) {
    this.isRunning = true;
    this.isEndless = true;
    this.speedX = speedX;
    this.speedY = speedY;
    return this.isSingleValue = false;
  };


  /**
  * Starts an endless value animation.
  *
  * @method startValueEndless
  * @param {number} value - The start-value.
  * @param {number} speedY - The animation speed.
   */

  Easing.prototype.startValueEndless = function(value, speed) {
    this.time = 0;
    this.value = value;
    this.speed = speed;
    this.isRunning = true;
    this.isEndless = true;
    return this.isSingleValue = true;
  };


  /**
  * Starts a value animation.
  *
  * @method startValue
  * @param {number} value - The start-value.
  * @param {number} distance - The distance/amount to change the value by.
  * @param {number} duration - The duration of the animation.
   */

  Easing.prototype.startValue = function(value, distance, duration) {
    this.time = 0;
    this.duration = duration || 1;
    this.valueStart = value;
    this.value = value;
    this.distance = distance;
    this.isRunning = true;
    this.isEndless = false;
    return this.isSingleValue = true;
  };


  /**
  * Starts a move/scroll animation.
  *
  * @method start
  * @param {number} sx - The start x-coordinate.
  * @param {number} sy - The start y-coordinate.
  * @param {number} dx - The distance/amount on x-axis.
  * @param {number} dy - The distance/amount on y-axis.
  * @param {number} duration - The duration of the animation.
   */

  Easing.prototype.start = function(sx, sy, dx, dy, duration) {
    this.time = 0;
    this.startX = sx;
    this.startY = sy;
    this.dx = dx - sx;
    this.dy = dy - sy;
    this.x = sx;
    this.y = sy;
    this.duration = duration || 1;
    this.isRunning = true;
    this.isEndless = false;
    return this.isSingleValue = false;
  };


  /**
  * Updates the value animation.
  *
  * @method updateValue
   */

  Easing.prototype.updateValue = function() {
    if (this.isEndless) {
      return this.value += this.speed;
    } else {
      this.value = this.func(this.time, this.valueStart, this.distance, this.duration);
      if (++this.time > this.duration) {
        return this.isRunning = false;
      }
    }
  };


  /**
  * Updates the move/scroll animation.
  *
  * @method updatePosition
   */

  Easing.prototype.updatePosition = function() {
    if (this.isEndless) {
      this.x += this.speedX;
      return this.y += this.speedY;
    } else {
      this.x = this.func(this.time, this.startX, this.dx, this.duration);
      this.y = this.func(this.time, this.startY, this.dy, this.duration);
      this.time++;
      if (this.time > this.duration) {
        return this.isRunning = false;
      }
    }
  };

  return Easing;

})();

gs.Easing = Easing;

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Easing_65.js
var UIElementRectangle,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

UIElementRectangle = (function(superClass) {
  extend(UIElementRectangle, superClass);


  /**
  * An ui rectangle is like a regular gs.Rect rectangle but if one of the
  * rectangle's coordinates is changed the <b>needsUpdate</b> property of the
  * assigned game object will be set to <b>true</b> to trigger a refresh.
  *
  * @module ui
  * @class UIElementRectangle
  * @extends gs.Rect
  * @memberof ui
  * @constructor
  * @params {Object} object - The UI object the rectangle belongs to.
   */

  function UIElementRectangle(object) {

    /**
    * The UI object the rectangle belongs to.
    * @property object
    * @type gs.Object_UIElement
     */
    this.object = object != null ? object : {};

    /**
    * The x-coordinate of the rectangle.
    * @property x
    * @type number
     */
    this.x = 0;

    /**
    * The y-coordinate of the rectangle.
    * @property y
    * @type number
     */
    this.y = 0;

    /**
    * The width of the rectangle.
    * @property width
    * @type number
     */
    this.width = 1;

    /**
    * The height of the rectangle.
    * @property height
    * @type number
     */
    this.height = 1;
  }

  UIElementRectangle.accessors("x", {
    set: function(x) {
      if (x !== this.x_) {
        this.x_ = x;
        return this.object.needsUpdate = true;
      }
    },
    get: function() {
      return this.x_;
    }
  });

  UIElementRectangle.accessors("y", {
    set: function(y) {
      if (y !== this.y_) {
        this.y_ = y;
        return this.object.needsUpdate = true;
      }
    },
    get: function() {
      return this.y_;
    }
  });

  UIElementRectangle.accessors("width", {
    set: function(width) {
      if (width !== this.width_) {
        this.width_ = width;
        return this.object.needsUpdate = true;
      }
    },
    get: function() {
      return this.width_;
    }
  });

  UIElementRectangle.accessors("height", {
    set: function(height) {
      if (height !== this.height_) {
        this.height_ = height;
        return this.object.needsUpdate = true;
      }
    },
    get: function() {
      return this.height_;
    }
  });

  UIElementRectangle.prototype.toRect = function() {
    return new gs.Rect(this.x, this.y, this.width, this.height);
  };

  UIElementRectangle.fromRect = function(object, rect) {
    var result;
    result = new ui.UIElementRectangle(object);
    result.x = rect.x;
    result.y = rect.y;
    result.width = rect.width;
    result.height = rect.height;
    return result;
  };

  return UIElementRectangle;

})(Rect);

ui.UIElementRectangle = UIElementRectangle;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUEsa0JBQUE7RUFBQTs7O0FBQU07Ozs7QUFDRjs7Ozs7Ozs7Ozs7OztFQVlhLDRCQUFDLE1BQUQ7O0FBQ1Q7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsb0JBQVUsU0FBUzs7QUFFbkI7Ozs7O0lBS0EsSUFBQyxDQUFBLENBQUQsR0FBSzs7QUFFTDs7Ozs7SUFLQSxJQUFDLENBQUEsQ0FBRCxHQUFLOztBQUVMOzs7OztJQUtBLElBQUMsQ0FBQSxLQUFELEdBQVM7O0FBRVQ7Ozs7O0lBS0EsSUFBQyxDQUFBLE1BQUQsR0FBVTtFQWxDRDs7RUFvQ2Isa0JBQUMsQ0FBQSxTQUFELENBQVcsR0FBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxFQUFUO1FBQ0ksSUFBQyxDQUFBLEVBQUQsR0FBTTtlQUNOLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQixLQUYxQjs7SUFEQyxDQUFMO0lBSUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUpMO0dBREo7O0VBT0Esa0JBQUMsQ0FBQSxTQUFELENBQVcsR0FBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxFQUFUO1FBQ0ksSUFBQyxDQUFBLEVBQUQsR0FBTTtlQUNOLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQixLQUYxQjs7SUFEQyxDQUFMO0lBSUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUpMO0dBREo7O0VBT0Esa0JBQUMsQ0FBQSxTQUFELENBQVcsT0FBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsS0FBRDtNQUNELElBQUcsS0FBQSxLQUFTLElBQUMsQ0FBQSxNQUFiO1FBQ0ksSUFBQyxDQUFBLE1BQUQsR0FBVTtlQUNWLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQixLQUYxQjs7SUFEQyxDQUFMO0lBSUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUpMO0dBREo7O0VBT0Esa0JBQUMsQ0FBQSxTQUFELENBQVcsUUFBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsTUFBRDtNQUNELElBQUcsTUFBQSxLQUFVLElBQUMsQ0FBQSxPQUFkO1FBQ0ksSUFBQyxDQUFBLE9BQUQsR0FBVztlQUNYLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQixLQUYxQjs7SUFEQyxDQUFMO0lBSUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUpMO0dBREo7OytCQU9BLE1BQUEsR0FBUSxTQUFBO1dBQU8sSUFBQSxFQUFFLENBQUMsSUFBSCxDQUFRLElBQUMsQ0FBQSxDQUFULEVBQVksSUFBQyxDQUFBLENBQWIsRUFBZ0IsSUFBQyxDQUFBLEtBQWpCLEVBQXdCLElBQUMsQ0FBQSxNQUF6QjtFQUFQOztFQUVSLGtCQUFDLENBQUEsUUFBRCxHQUFXLFNBQUMsTUFBRCxFQUFTLElBQVQ7QUFDUCxRQUFBO0lBQUEsTUFBQSxHQUFhLElBQUEsRUFBRSxDQUFDLGtCQUFILENBQXNCLE1BQXRCO0lBQ2IsTUFBTSxDQUFDLENBQVAsR0FBVyxJQUFJLENBQUM7SUFDaEIsTUFBTSxDQUFDLENBQVAsR0FBVyxJQUFJLENBQUM7SUFDaEIsTUFBTSxDQUFDLEtBQVAsR0FBZSxJQUFJLENBQUM7SUFDcEIsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsSUFBSSxDQUFDO0FBQ3JCLFdBQU87RUFOQTs7OztHQS9Fa0I7O0FBeUZqQyxFQUFFLENBQUMsa0JBQUgsR0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IFVJRWxlbWVudFJlY3RhbmdsZVxuI1xuIyAgICQkQ09QWVJJR0hUJCRcbiNcbiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxuY2xhc3MgVUlFbGVtZW50UmVjdGFuZ2xlIGV4dGVuZHMgUmVjdFxuICAgICMjIypcbiAgICAqIEFuIHVpIHJlY3RhbmdsZSBpcyBsaWtlIGEgcmVndWxhciBncy5SZWN0IHJlY3RhbmdsZSBidXQgaWYgb25lIG9mIHRoZVxuICAgICogcmVjdGFuZ2xlJ3MgY29vcmRpbmF0ZXMgaXMgY2hhbmdlZCB0aGUgPGI+bmVlZHNVcGRhdGU8L2I+IHByb3BlcnR5IG9mIHRoZVxuICAgICogYXNzaWduZWQgZ2FtZSBvYmplY3Qgd2lsbCBiZSBzZXQgdG8gPGI+dHJ1ZTwvYj4gdG8gdHJpZ2dlciBhIHJlZnJlc2guXG4gICAgKlxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIFVJRWxlbWVudFJlY3RhbmdsZVxuICAgICogQGV4dGVuZHMgZ3MuUmVjdFxuICAgICogQG1lbWJlcm9mIHVpXG4gICAgKiBAY29uc3RydWN0b3JcbiAgICAqIEBwYXJhbXMge09iamVjdH0gb2JqZWN0IC0gVGhlIFVJIG9iamVjdCB0aGUgcmVjdGFuZ2xlIGJlbG9uZ3MgdG8uXG4gICAgIyMjXG4gICAgY29uc3RydWN0b3I6IChvYmplY3QpIC0+XG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgVUkgb2JqZWN0IHRoZSByZWN0YW5nbGUgYmVsb25ncyB0by5cbiAgICAgICAgKiBAcHJvcGVydHkgb2JqZWN0XG4gICAgICAgICogQHR5cGUgZ3MuT2JqZWN0X1VJRWxlbWVudFxuICAgICAgICAjIyNcbiAgICAgICAgQG9iamVjdCA9IG9iamVjdCA/IHt9XG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHgtY29vcmRpbmF0ZSBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgICAgICAqIEBwcm9wZXJ0eSB4XG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAeCA9IDBcbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgeS1jb29yZGluYXRlIG9mIHRoZSByZWN0YW5nbGUuXG4gICAgICAgICogQHByb3BlcnR5IHlcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEB5ID0gMFxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSB3aWR0aCBvZiB0aGUgcmVjdGFuZ2xlLlxuICAgICAgICAqIEBwcm9wZXJ0eSB3aWR0aFxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQHdpZHRoID0gMVxuICAgICAgICBcbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBoZWlnaHQgb2YgdGhlIHJlY3RhbmdsZS5cbiAgICAgICAgKiBAcHJvcGVydHkgaGVpZ2h0XG4gICAgICAgICogQHR5cGUgbnVtYmVyXG4gICAgICAgICMjI1xuICAgICAgICBAaGVpZ2h0ID0gMVxuICAgIFxuICAgIEBhY2Nlc3NvcnMgXCJ4XCIsIFxuICAgICAgICBzZXQ6ICh4KSAtPlxuICAgICAgICAgICAgaWYgeCAhPSBAeF9cbiAgICAgICAgICAgICAgICBAeF8gPSB4XG4gICAgICAgICAgICAgICAgQG9iamVjdC5uZWVkc1VwZGF0ZSA9IHllc1xuICAgICAgICBnZXQ6IC0+IEB4X1xuICAgICAgICBcbiAgICBAYWNjZXNzb3JzIFwieVwiLCBcbiAgICAgICAgc2V0OiAoeSkgLT5cbiAgICAgICAgICAgIGlmIHkgIT0gQHlfXG4gICAgICAgICAgICAgICAgQHlfID0geVxuICAgICAgICAgICAgICAgIEBvYmplY3QubmVlZHNVcGRhdGUgPSB5ZXNcbiAgICAgICAgZ2V0OiAtPiBAeV9cbiAgICAgICAgXG4gICAgQGFjY2Vzc29ycyBcIndpZHRoXCIsIFxuICAgICAgICBzZXQ6ICh3aWR0aCkgLT5cbiAgICAgICAgICAgIGlmIHdpZHRoICE9IEB3aWR0aF9cbiAgICAgICAgICAgICAgICBAd2lkdGhfID0gd2lkdGhcbiAgICAgICAgICAgICAgICBAb2JqZWN0Lm5lZWRzVXBkYXRlID0geWVzXG4gICAgICAgIGdldDogLT4gQHdpZHRoX1xuICAgIFxuICAgIEBhY2Nlc3NvcnMgXCJoZWlnaHRcIiwgXG4gICAgICAgIHNldDogKGhlaWdodCkgLT5cbiAgICAgICAgICAgIGlmIGhlaWdodCAhPSBAaGVpZ2h0X1xuICAgICAgICAgICAgICAgIEBoZWlnaHRfID0gaGVpZ2h0XG4gICAgICAgICAgICAgICAgQG9iamVjdC5uZWVkc1VwZGF0ZSA9IHllc1xuICAgICAgICBnZXQ6IC0+IEBoZWlnaHRfXG4gICAgICAgIFxuICAgIHRvUmVjdDogLT4gbmV3IGdzLlJlY3QoQHgsIEB5LCBAd2lkdGgsIEBoZWlnaHQpXG4gICAgICAgIFxuICAgIEBmcm9tUmVjdDogKG9iamVjdCwgcmVjdCkgLT5cbiAgICAgICAgcmVzdWx0ID0gbmV3IHVpLlVJRWxlbWVudFJlY3RhbmdsZShvYmplY3QpXG4gICAgICAgIHJlc3VsdC54ID0gcmVjdC54XG4gICAgICAgIHJlc3VsdC55ID0gcmVjdC55XG4gICAgICAgIHJlc3VsdC53aWR0aCA9IHJlY3Qud2lkdGhcbiAgICAgICAgcmVzdWx0LmhlaWdodCA9IHJlY3QuaGVpZ2h0XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICAgICAgXG4gICAgXG4gICAgICAgXG51aS5VSUVsZW1lbnRSZWN0YW5nbGUgPSBVSUVsZW1lbnRSZWN0YW5nbGUiXX0=
//# sourceURL=UIElementRectangle_75.js
var UIElementPoint;

UIElementPoint = (function() {

  /**
  * An ui point is like a regular point with an x- and y-coordinate but if one of the
  * coordinates is changed the <b>needsUpdate</b> property of the
  * assigned game object will be set to <b>true</b> to trigger a refresh.
  *
  * @module ui
  * @class UIElementPoint
  * @memberof ui
  * @constructor
  * @params {Object} object - The UI object the rectangle belongs to.
   */
  function UIElementPoint(object) {

    /**
    * The UI object the rectangle belongs to.
    * @property object
    * @type gs.Object_UIElement
     */
    this.object = object != null ? object : {};

    /**
    * The x-coordinate of the point.
    * @property x
    * @type number
     */
    this.x = 0;

    /**
    * The y-coordinate of the point.
    * @property y
    * @type number
     */
    this.y = 0;
  }

  UIElementPoint.accessors("x", {
    set: function(x) {
      if (x !== this.x_) {
        this.x_ = x;
        return this.object.needsUpdate = true;
      }
    },
    get: function() {
      return this.x_;
    }
  });

  UIElementPoint.accessors("y", {
    set: function(y) {
      if (y !== this.y_) {
        this.y_ = y;
        return this.object.needsUpdate = true;
      }
    },
    get: function() {
      return this.y_;
    }
  });

  return UIElementPoint;

})();

ui.UIElementPoint = UIElementPoint;

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQU9BLElBQUE7O0FBQU07O0FBQ0Y7Ozs7Ozs7Ozs7O0VBV2Esd0JBQUMsTUFBRDs7QUFDVDs7Ozs7SUFLQSxJQUFDLENBQUEsTUFBRCxvQkFBVSxTQUFTOztBQUVuQjs7Ozs7SUFLQSxJQUFDLENBQUEsQ0FBRCxHQUFLOztBQUVMOzs7OztJQUtBLElBQUMsQ0FBQSxDQUFELEdBQUs7RUFwQkk7O0VBc0JiLGNBQUMsQ0FBQSxTQUFELENBQVcsR0FBWCxFQUNJO0lBQUEsR0FBQSxFQUFLLFNBQUMsQ0FBRDtNQUNELElBQUcsQ0FBQSxLQUFLLElBQUMsQ0FBQSxFQUFUO1FBQ0ksSUFBQyxDQUFBLEVBQUQsR0FBTTtlQUNOLElBQUMsQ0FBQSxNQUFNLENBQUMsV0FBUixHQUFzQixLQUYxQjs7SUFEQyxDQUFMO0lBSUEsR0FBQSxFQUFLLFNBQUE7YUFBRyxJQUFDLENBQUE7SUFBSixDQUpMO0dBREo7O0VBT0EsY0FBQyxDQUFBLFNBQUQsQ0FBVyxHQUFYLEVBQ0k7SUFBQSxHQUFBLEVBQUssU0FBQyxDQUFEO01BQ0QsSUFBRyxDQUFBLEtBQUssSUFBQyxDQUFBLEVBQVQ7UUFDSSxJQUFDLENBQUEsRUFBRCxHQUFNO2VBQ04sSUFBQyxDQUFBLE1BQU0sQ0FBQyxXQUFSLEdBQXNCLEtBRjFCOztJQURDLENBQUw7SUFJQSxHQUFBLEVBQUssU0FBQTthQUFHLElBQUMsQ0FBQTtJQUFKLENBSkw7R0FESjs7Ozs7O0FBT0osRUFBRSxDQUFDLGNBQUgsR0FBb0IiLCJzb3VyY2VzQ29udGVudCI6WyIjID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cbiNcbiMgICBTY3JpcHQ6IFVJRWxlbWVudFBvaW50XG4jXG4jICAgJCRDT1BZUklHSFQkJFxuI1xuIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XG5jbGFzcyBVSUVsZW1lbnRQb2ludFxuICAgICMjIypcbiAgICAqIEFuIHVpIHBvaW50IGlzIGxpa2UgYSByZWd1bGFyIHBvaW50IHdpdGggYW4geC0gYW5kIHktY29vcmRpbmF0ZSBidXQgaWYgb25lIG9mIHRoZVxuICAgICogY29vcmRpbmF0ZXMgaXMgY2hhbmdlZCB0aGUgPGI+bmVlZHNVcGRhdGU8L2I+IHByb3BlcnR5IG9mIHRoZVxuICAgICogYXNzaWduZWQgZ2FtZSBvYmplY3Qgd2lsbCBiZSBzZXQgdG8gPGI+dHJ1ZTwvYj4gdG8gdHJpZ2dlciBhIHJlZnJlc2guXG4gICAgKlxuICAgICogQG1vZHVsZSB1aVxuICAgICogQGNsYXNzIFVJRWxlbWVudFBvaW50XG4gICAgKiBAbWVtYmVyb2YgdWlcbiAgICAqIEBjb25zdHJ1Y3RvclxuICAgICogQHBhcmFtcyB7T2JqZWN0fSBvYmplY3QgLSBUaGUgVUkgb2JqZWN0IHRoZSByZWN0YW5nbGUgYmVsb25ncyB0by5cbiAgICAjIyNcbiAgICBjb25zdHJ1Y3RvcjogKG9iamVjdCkgLT5cbiAgICAgICAgIyMjKlxuICAgICAgICAqIFRoZSBVSSBvYmplY3QgdGhlIHJlY3RhbmdsZSBiZWxvbmdzIHRvLlxuICAgICAgICAqIEBwcm9wZXJ0eSBvYmplY3RcbiAgICAgICAgKiBAdHlwZSBncy5PYmplY3RfVUlFbGVtZW50XG4gICAgICAgICMjI1xuICAgICAgICBAb2JqZWN0ID0gb2JqZWN0ID8ge31cbiAgICAgICAgXG4gICAgICAgICMjIypcbiAgICAgICAgKiBUaGUgeC1jb29yZGluYXRlIG9mIHRoZSBwb2ludC5cbiAgICAgICAgKiBAcHJvcGVydHkgeFxuICAgICAgICAqIEB0eXBlIG51bWJlclxuICAgICAgICAjIyNcbiAgICAgICAgQHggPSAwXG4gICAgICAgIFxuICAgICAgICAjIyMqXG4gICAgICAgICogVGhlIHktY29vcmRpbmF0ZSBvZiB0aGUgcG9pbnQuXG4gICAgICAgICogQHByb3BlcnR5IHlcbiAgICAgICAgKiBAdHlwZSBudW1iZXJcbiAgICAgICAgIyMjXG4gICAgICAgIEB5ID0gMFxuICAgIFxuICAgIEBhY2Nlc3NvcnMgXCJ4XCIsIFxuICAgICAgICBzZXQ6ICh4KSAtPlxuICAgICAgICAgICAgaWYgeCAhPSBAeF9cbiAgICAgICAgICAgICAgICBAeF8gPSB4XG4gICAgICAgICAgICAgICAgQG9iamVjdC5uZWVkc1VwZGF0ZSA9IHllc1xuICAgICAgICBnZXQ6IC0+IEB4X1xuICAgICAgICBcbiAgICBAYWNjZXNzb3JzIFwieVwiLCBcbiAgICAgICAgc2V0OiAoeSkgLT5cbiAgICAgICAgICAgIGlmIHkgIT0gQHlfXG4gICAgICAgICAgICAgICAgQHlfID0geVxuICAgICAgICAgICAgICAgIEBvYmplY3QubmVlZHNVcGRhdGUgPSB5ZXNcbiAgICAgICAgZ2V0OiAtPiBAeV9cbiAgICAgICBcbnVpLlVJRWxlbWVudFBvaW50ID0gVUlFbGVtZW50UG9pbnQgICAiXX0=
//# sourceURL=UIElementPoint_87.js
var Main;

Main = (function() {

  /**
  * Defines the boot-process of the game.
  *
  * @module ui
  * @class Main
  * @memberof ui
  * @constructor
   */
  function Main() {
    window.$ = jQuery.noConflict();
    this.languagesLoaded = false;
    this.m1 = mat2d.create();
    this.m2 = mat2d.create();
    this.s = vec2.fromValues(100, 100);
    if ($PARAMS.preview != null) {
      this.frameCallback = (function(_this) {
        return function(time) {
          var ex;
          try {
            return _this.updateFrame();
          } catch (error) {
            ex = error;
            if ($PARAMS.preview || GameManager.inLivePreview) {
              $PARAMS.preview = {
                error: ex
              };
            }
            console.log(ex);
            throw ex;
          }
        };
      })(this);
    } else {
      this.frameCallback = (function(_this) {
        return function(time) {
          return _this.updateFrame();
        };
      })(this);
    }
  }

  Main.prototype.updateFrame = function() {
    if ($PARAMS.showDebugInfo) {
      window.startTime = window.performance != null ? window.performance.now() : Date.now();
    }
    SceneManager.update();
    Graphics.frameCount++;
    if ($PARAMS.showDebugInfo) {
      if (this.debugSprite == null) {
        this.debugSprite = new Sprite_Debug();
      }
      window.endTime = window.performance != null ? window.performance.now() : Date.now();
      if (Graphics.frameCount % 30 === 0) {
        this.debugSprite.frameTime = endTime - startTime;
        return this.debugSprite.redraw();
      }
    }
  };


  /**
  * Loads all system resources needed to start the actual game.
  *
  * @method load
  * @param {Function} callback - Called when all system resources are loaded.
   */

  Main.prototype.load = function(callback) {
    if ($PARAMS.test == null) {
      DataManager.getDocument("RESOURCES");
    }
    DataManager.getDocument("SUMMARIES");
    Live2D.init();
    Live2DFramework.setPlatformManager(new L2DPlatformManager());
    return DataManager.events.on("loaded", function() {
      var cg, character, i, j, l, language, len, len1, len2, m, ref, ref1, ref2, settings;
      GameManager.tempFields = new gs.GameTemp();
      window.$tempFields = GameManager.tempFields;
      if (this.languagesLoaded) {
        RecordManager.prepare();
        settings = GameStorage.getObject("settings");
        if ((settings == null) || settings.version !== 337) {
          GameManager.resetSettings();
          settings = GameManager.settings;
        }
        GameManager.globalData = GameStorage.getObject("globalData");
        GameManager.settings = settings;
        GameManager.settings.fullScreen = Graphics.isFullscreen();
        AudioManager.generalSoundVolume = settings.seVolume;
        AudioManager.generalMusicVolume = settings.bgmVolume;
        AudioManager.generalVoiceVolume = settings.voiceVolume;
        Graphics.keepRatio = !settings.adjustAspectRatio;
        Graphics.onResize();
        settings.renderer = 1;
        GameStorage.setObject("settings", settings);
        ResourceManager.loadFonts();
        ResourceLoader.loadSystemSounds(RecordManager.system);
        ResourceLoader.loadSystemGraphics(RecordManager.system);
        LanguageManager.initialize();
        ref = RecordManager.characters;
        for (i = j = 0, len = ref.length; j < len; i = ++j) {
          character = ref[i];
          if (character && !GameManager.settings.voicesByCharacter[i]) {
            GameManager.settings.voicesByCharacter[i] = 100;
          }
        }
        ref1 = RecordManager.cgGallery;
        for (i = l = 0, len1 = ref1.length; l < len1; i = ++l) {
          cg = ref1[i];
          if ((cg != null) && !GameManager.globalData.cgGallery[i]) {
            GameManager.globalData.cgGallery[i] = {
              unlocked: false
            };
          }
        }
        if (RecordManager.system.mouseSupport) {
          Input.Mouse.initialize();
        }
      } else {
        RecordManager.load();
        DataManager.getDocumentsByType("language_profile");
        DataManager.getDocumentsByType("vn.chapter");
      }
      if (this.languagesLoaded) {
        ref2 = LanguageManager.languages;
        for (m = 0, len2 = ref2.length; m < len2; m++) {
          language = ref2[m];
          if ((language.icon != null) && (language.icon.name != null) && language.icon.name.length > 0) {
            ResourceManager.getBitmap("Graphics/Icons/" + language.icon.name);
          }
        }
        gs.Fonts.initialize();
        DataManager.events.off("loaded");
        ResourceManager.events.on("loaded", (function(_this) {
          return function() {
            GameManager.setupCursor();
            ResourceManager.events.off("loaded");
            ui.UIManager.setup();
            return callback();
          };
        })(this));
      }
      return this.languagesLoaded = true;
    });
  };


  /**
  * Boots the game.
  *
  * @method start
   */

  Main.prototype.start = function() {
    var ex;
    window.ResourceManager = new window.ResourceManager();
    window.DataManager = new window.DataManager();
    window.Graphics = new Graphics_OpenGL();
    window.gs.Graphics = window.Graphics;
    window.Renderer = window.Renderer_OpenGL;
    Texture2D.filter = 1;
    try {
      Graphics.initialize($PARAMS.resolution.width, $PARAMS.resolution.height, document.body);
    } catch (error) {
      ex = error;
      console.log(ex);
    }
    Graphics.onFocusReceive = (function(_this) {
      return function() {
        return GameManager.tempSettings.skip = false;
      };
    })(this);
    Graphics.onDispose = (function(_this) {
      return function() {
        return ResourceManager.dispose();
      };
    })(this);
    Input.initialize();
    Graphics.formats = [320, 384, 427];
    Font.defaultSize = Math.round(9 / 240 * Graphics.height);
    Graphics.scale = 0.5 / 240 * Graphics.height;
    window.startTime = 0;
    Graphics.onEachFrame(this.frameCallback);
    return this.load(function() {
      var ref, ref1, ref2, ref3, scene;
      if (($PARAMS.preview != null) || (RecordManager.system.useIntroScene && DataManager.getDocumentSummary((ref = RecordManager.system.introInfo) != null ? (ref1 = ref.scene) != null ? ref1.uid : void 0 : void 0))) {
        scene = new vn.Object_Scene();
        scene.sceneData.uid = ((ref2 = $PARAMS.preview) != null ? ref2.scene.uid : void 0) || ((ref3 = RecordManager.system.introInfo) != null ? ref3.scene.uid : void 0);
        scene.events.on("dispose", function(e) {
          return GameManager.sceneData.uid = null;
        });
      } else {
        scene = new gs.Object_Layout("languageMenuLayout");
      }
      return SceneManager.switchTo(scene);
    });
  };

  return Main;

})();

window.Main = Main;

gs.Main = new Main();

$(document).ready(function() {
  return gs.Main.start();
});

Object.keys(gs).forEach(function(k) {
  gs[k].$namespace = "gs";
  return gs[k].$name = k;
});

Object.keys(vn).forEach(function(k) {
  vn[k].$namespace = "vn";
  return vn[k].$name = k;
});

Object.keys(ui).forEach(function(k) {
  ui[k].$namespace = "ui";
  return ui[k].$name = k;
});

//# sourceMappingURL=data:application/json;base64,
//# sourceURL=Main_97.js