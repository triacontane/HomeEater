{"uid":"07DD71F113931300","lastModificationTime":1408754634350,"items":{"name":"Scripts","type":"script_collection","scripts":[{"name":"DataOptimizer","content":"# ===================================================================\n#\n#   Script: DataOptimizer\n#     Created on: 2013-05-19\n#\n# \tCopyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n# \tClass: DataOptimizer\n#\n#   Description...\n#\n# ===================================================================\n\nclass DataOptimizer\n    constructor: ->\n        @documentsByUid = {}\n        @documents = []\n        @documentsLoaded = true\n        \n    arrayToNativeArray: (array) ->\n        result = null\n        length = array.length || Object.keys(array).length\n        if array?\n            if window.ArrayBuffer?\n                result = new ArrayBuffer(length * 2)\n                result = new Int16Array(result)\n            else\n                result = new Array(length)\n           \n            \n            for i in [0...length]\n                result[i] = array[i]\n                \n        return result\n    \n    nativeArray16: (size) ->\n        #result = new ArrayBuffer(size * 2)\n        #result = new Int16Array(result)\n        result = new Array(size)\n        return result\n        \n    nativeArray8: (size) ->\n       # result = new ArrayBuffer(size)\n        #result = new Int8Array(size)\n        result = new Array(size)\n        return result\n        \n    optimizeMap: (map) ->\n        if not map.optimized\n            map.mapData = @arrayToNativeArray(map.mapData)\n            map.optimized = yes\n    \n    optimizeTilesetArray: (tileset, attribute) ->\n        length = tileset[attribute].length || Object.keys(tileset[attribute]).length\n  \n        values = @nativeArray8(length + 384 - 8)\n        value = 0\n        for i in [0...384]\n            value = tileset[attribute][Math.floor(i / 48)]\n            values[i] = value\n            \n        for i in [384...values.length]\n            values[i] = tileset[attribute][i - (384 - 8)]\n \n        tileset[attribute] = values\n        \n    optimizeTileset: (tileset) ->\n        if not tileset.optimized\n            @optimizeTilesetArray(tileset, \"passages\")\n            @optimizeTilesetArray(tileset, \"terrainTags\")        \n            @optimizeTilesetArray(tileset, \"priorities\")\n        \n            tileset.optimized = yes\n        \n        \nwindow.DataOptimizer = new DataOptimizer()","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBEYXRhT3B0aW1pemVyOwoKICBEYXRhT3B0aW1pemVyID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gRGF0YU9wdGltaXplcigpIHsKICAgICAgdGhpcy5kb2N1bWVudHNCeVVpZCA9IHt9OwogICAgICB0aGlzLmRvY3VtZW50cyA9IFtdOwogICAgICB0aGlzLmRvY3VtZW50c0xvYWRlZCA9IHRydWU7CiAgICB9CgogICAgRGF0YU9wdGltaXplci5wcm90b3R5cGUuYXJyYXlUb05hdGl2ZUFycmF5ID0gZnVuY3Rpb24oYXJyYXkpIHsKICAgICAgdmFyIGksIGxlbmd0aCwgcmVzdWx0LCBfaTsKICAgICAgcmVzdWx0ID0gbnVsbDsKICAgICAgbGVuZ3RoID0gYXJyYXkubGVuZ3RoIHx8IE9iamVjdC5rZXlzKGFycmF5KS5sZW5ndGg7CiAgICAgIGlmIChhcnJheSAhPSBudWxsKSB7CiAgICAgICAgaWYgKHdpbmRvdy5BcnJheUJ1ZmZlciAhPSBudWxsKSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXlCdWZmZXIobGVuZ3RoICogMik7CiAgICAgICAgICByZXN1bHQgPSBuZXcgSW50MTZBcnJheShyZXN1bHQpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSBuZXcgQXJyYXkobGVuZ3RoKTsKICAgICAgICB9CiAgICAgICAgZm9yIChpID0gX2kgPSAwOyAwIDw9IGxlbmd0aCA/IF9pIDwgbGVuZ3RoIDogX2kgPiBsZW5ndGg7IGkgPSAwIDw9IGxlbmd0aCA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICByZXN1bHRbaV0gPSBhcnJheVtpXTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgRGF0YU9wdGltaXplci5wcm90b3R5cGUubmF0aXZlQXJyYXkxNiA9IGZ1bmN0aW9uKHNpemUpIHsKICAgICAgdmFyIHJlc3VsdDsKICAgICAgcmVzdWx0ID0gbmV3IEFycmF5KHNpemUpOwogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKCiAgICBEYXRhT3B0aW1pemVyLnByb3RvdHlwZS5uYXRpdmVBcnJheTggPSBmdW5jdGlvbihzaXplKSB7CiAgICAgIHZhciByZXN1bHQ7CiAgICAgIHJlc3VsdCA9IG5ldyBBcnJheShzaXplKTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgRGF0YU9wdGltaXplci5wcm90b3R5cGUub3B0aW1pemVNYXAgPSBmdW5jdGlvbihtYXApIHsKICAgICAgaWYgKCFtYXAub3B0aW1pemVkKSB7CiAgICAgICAgbWFwLm1hcERhdGEgPSB0aGlzLmFycmF5VG9OYXRpdmVBcnJheShtYXAubWFwRGF0YSk7CiAgICAgICAgcmV0dXJuIG1hcC5vcHRpbWl6ZWQgPSB0cnVlOwogICAgICB9CiAgICB9OwoKICAgIERhdGFPcHRpbWl6ZXIucHJvdG90eXBlLm9wdGltaXplVGlsZXNldEFycmF5ID0gZnVuY3Rpb24odGlsZXNldCwgYXR0cmlidXRlKSB7CiAgICAgIHZhciBpLCBsZW5ndGgsIHZhbHVlLCB2YWx1ZXMsIF9pLCBfaiwgX3JlZjsKICAgICAgbGVuZ3RoID0gdGlsZXNldFthdHRyaWJ1dGVdLmxlbmd0aCB8fCBPYmplY3Qua2V5cyh0aWxlc2V0W2F0dHJpYnV0ZV0pLmxlbmd0aDsKICAgICAgdmFsdWVzID0gdGhpcy5uYXRpdmVBcnJheTgobGVuZ3RoICsgMzg0IC0gOCk7CiAgICAgIHZhbHVlID0gMDsKICAgICAgZm9yIChpID0gX2kgPSAwOyBfaSA8IDM4NDsgaSA9ICsrX2kpIHsKICAgICAgICB2YWx1ZSA9IHRpbGVzZXRbYXR0cmlidXRlXVtNYXRoLmZsb29yKGkgLyA0OCldOwogICAgICAgIHZhbHVlc1tpXSA9IHZhbHVlOwogICAgICB9CiAgICAgIGZvciAoaSA9IF9qID0gMzg0LCBfcmVmID0gdmFsdWVzLmxlbmd0aDsgMzg0IDw9IF9yZWYgPyBfaiA8IF9yZWYgOiBfaiA+IF9yZWY7IGkgPSAzODQgPD0gX3JlZiA/ICsrX2ogOiAtLV9qKSB7CiAgICAgICAgdmFsdWVzW2ldID0gdGlsZXNldFthdHRyaWJ1dGVdW2kgLSAoMzg0IC0gOCldOwogICAgICB9CiAgICAgIHJldHVybiB0aWxlc2V0W2F0dHJpYnV0ZV0gPSB2YWx1ZXM7CiAgICB9OwoKICAgIERhdGFPcHRpbWl6ZXIucHJvdG90eXBlLm9wdGltaXplVGlsZXNldCA9IGZ1bmN0aW9uKHRpbGVzZXQpIHsKICAgICAgaWYgKCF0aWxlc2V0Lm9wdGltaXplZCkgewogICAgICAgIHRoaXMub3B0aW1pemVUaWxlc2V0QXJyYXkodGlsZXNldCwgInBhc3NhZ2VzIik7CiAgICAgICAgdGhpcy5vcHRpbWl6ZVRpbGVzZXRBcnJheSh0aWxlc2V0LCAidGVycmFpblRhZ3MiKTsKICAgICAgICB0aGlzLm9wdGltaXplVGlsZXNldEFycmF5KHRpbGVzZXQsICJwcmlvcml0aWVzIik7CiAgICAgICAgcmV0dXJuIHRpbGVzZXQub3B0aW1pemVkID0gdHJ1ZTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gRGF0YU9wdGltaXplcjsKCiAgfSkoKTsKCiAgd2luZG93LkRhdGFPcHRpbWl6ZXIgPSBuZXcgRGF0YU9wdGltaXplcigpOwoKfSkuY2FsbCh0aGlzKTsK","decoded":true,"editSession":null},{"name":"ResourceLoader","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogUmVzb3VyY2VMb2FkZXIKIyAgICAgQ3JlYXRlZCBvbjogMjAxMy0wNS0xOQojCiMgCUNvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogUmVzb3VyY2VMb2FkZXIKIwojICAgQSBoZWxwZXIgdG8gcHJlbG9hZCByZXNvdXJjZXMKIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFJlc291cmNlTG9hZGVyCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgIAogICAgbG9hZEl0ZW1BbmltYXRpb25zOiAoaW52ZW50b3J5KSAtPgogICAgICAgIGZvciBpZCBvZiBpbnZlbnRvcnkuaXRlbXMKICAgICAgICAgICAgaXRlbSA9IGludmVudG9yeS5pdGVtc1tpZF0KICAgICAgICAgICAgaWYgaXRlbSBhbmQgaXRlbS5jb3VudCA+IDAKICAgICAgICAgICAgICAgIEBsb2FkQ29tcGxleEFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLmFuaW1hdGlvbnNbaXRlbS5pdGVtLmFuaW1hdGlvbklkLTFdKQogICAgICAgIAogICAgbG9hZEFjdG9yQmF0dGxlQW5pbWF0aW9uczogKGFjdG9yKSAtPgogICAgICAgIGlmIGFjdG9yLnN0YW5kQW5pbWF0aW9uPyB0aGVuIEBsb2FkU2ltcGxlQW5pbWF0aW9uKGFjdG9yLnN0YW5kQW5pbWF0aW9uLnJlY29yZCkKICAgICAgICBpZiBhY3Rvci5tYWdpY0FuaW1hdGlvbj8gdGhlbiBAbG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5tYWdpY0FuaW1hdGlvbi5yZWNvcmQpCiAgICAgICAgaWYgYWN0b3IuYXR0YWNrQW5pbWF0aW9uPyB0aGVuIEBsb2FkU2ltcGxlQW5pbWF0aW9uKGFjdG9yLmF0dGFja0FuaW1hdGlvbi5yZWNvcmQpCiAgICAgICAgaWYgYWN0b3IuaXRlbUFuaW1hdGlvbj8gdGhlbiBAbG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5pdGVtQW5pbWF0aW9uLnJlY29yZCkKICAgICAgICBpZiBhY3Rvci5ndWFyZEFuaW1hdGlvbj8gdGhlbiBAbG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5ndWFyZEFuaW1hdGlvbi5yZWNvcmQpCiAgICAgICAgaWYgYWN0b3IucHJlTWFnaWNBbmltYXRpb24/IHRoZW4gQGxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IucHJlTWFnaWNBbmltYXRpb24ucmVjb3JkKQogICAgICAgIGlmIGFjdG9yLnByZUF0dGFja0FuaW1hdGlvbj8gdGhlbiBAbG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5wcmVBdHRhY2tBbmltYXRpb24ucmVjb3JkKQogICAgICAgIGlmIGFjdG9yLmRhbWFnZUFuaW1hdGlvbj8gdGhlbiBAbG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5kYW1hZ2VBbmltYXRpb24ucmVjb3JkKQogICAgICAgIGlmIGFjdG9yLmRlYXRoQW5pbWF0aW9uPyB0aGVuIEBsb2FkU2ltcGxlQW5pbWF0aW9uKGFjdG9yLmRlYXRoQW5pbWF0aW9uLnJlY29yZCkKICAgICAgICBpZiBhY3Rvci5iYWRTdGF0dXNBbmltYXRpb24/IHRoZW4gQGxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IuYmFkU3RhdHVzQW5pbWF0aW9uLnJlY29yZCkKICAgICAgICAKICAgIGxvYWRBY3RvclNraWxsQW5pbWF0aW9uczogKGFjdG9yKSAtPgogICAgICAgIGZvciBza2lsbFR5cGUgaW4gYWN0b3Iuc2tpbGxUeXBlcwogICAgICAgICAgICAgICAgaWYgc2tpbGxUeXBlPyBhbmQgYWN0b3Iuc2tpbGxzW3NraWxsVHlwZS5pbmRleF0/CiAgICAgICAgICAgICAgICAgICAgZm9yIHNraWxsIGluIGFjdG9yLnNraWxsc1tza2lsbFR5cGUuaW5kZXhdCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIHNraWxsPwogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gUmVjb3JkTWFuYWdlci5hbmltYXRpb25zW3NraWxsLmFuaW1hdGlvbklkLTFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbG9hZENvbXBsZXhBbmltYXRpb24oYW5pbWF0aW9uKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gUmVjb3JkTWFuYWdlci5hbmltYXRpb25zW3NraWxsLnVzZXJBbmltYXRpb25JZC0xXQogICAgICAgICAgICAgICAgICAgICAgICAgICAgQGxvYWRDb21wbGV4QW5pbWF0aW9uKGFuaW1hdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IFJlY29yZE1hbmFnZXIuYW5pbWF0aW9uc1tza2lsbC5mb3J3YXJkQW5pbWF0aW9uSWQtMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBsb2FkU2ltcGxlQW5pbWF0aW9uKGFuaW1hdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IFJlY29yZE1hbmFnZXIuYW5pbWF0aW9uc1tza2lsbC5iYWNrd2FyZEFuaW1hdGlvbklkLTFdCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbG9hZFNpbXBsZUFuaW1hdGlvbihhbmltYXRpb24pCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBSZWNvcmRNYW5hZ2VyLmFuaW1hdGlvbnNbc2tpbGwudXNlQW5pbWF0aW9uSWQtMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBsb2FkU2ltcGxlQW5pbWF0aW9uKGFuaW1hdGlvbikKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IFJlY29yZE1hbmFnZXIuYW5pbWF0aW9uc1tza2lsbC5wcmVwYXJlQW5pbWF0aW9uSWQtMV0KICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBsb2FkU2ltcGxlQW5pbWF0aW9uKGFuaW1hdGlvbikKCiAgICBsb2FkQ29tcGxleEFuaW1hdGlvbjogKGFuaW1hdGlvbikgLT4KICAgICAgICBpZiBhbmltYXRpb24/CiAgICAgICAgICAgIGlmIGFuaW1hdGlvbi5ncmFwaGljMT8KICAgICAgICAgICAgICAgIFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0FuaW1hdGlvbnMvI3thbmltYXRpb24uZ3JhcGhpYzEubmFtZX0iKQogICAgICAgICAgICBpZiBhbmltYXRpb24uZ3JhcGhpYzI/IGFuZCBhbmltYXRpb24uZ3JhcGhpYzIubmFtZSAhPSAiIgogICAgICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvQW5pbWF0aW9ucy8je2FuaW1hdGlvbi5ncmFwaGljMi5uYW1lfSIpCiAgICBsb2FkU2ltcGxlQW5pbWF0aW9uOiAoYW5pbWF0aW9uKSAtPgogICAgICAgIGlmIGFuaW1hdGlvbj8gYW5kIGFuaW1hdGlvbi5ncmFwaGljPwogICAgICAgICAgICBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9TaW1wbGVBbmltYXRpb25zLyN7YW5pbWF0aW9uLmdyYXBoaWMubmFtZX0iKQogICAgICAgIAp3aW5kb3cuUmVzb3VyY2VMb2FkZXIgPSBuZXcgUmVzb3VyY2VMb2FkZXIoKQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBSZXNvdXJjZUxvYWRlcjsKCiAgUmVzb3VyY2VMb2FkZXIgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBSZXNvdXJjZUxvYWRlcigpIHt9CgogICAgUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlLmxvYWRJdGVtQW5pbWF0aW9ucyA9IGZ1bmN0aW9uKGludmVudG9yeSkgewogICAgICB2YXIgaWQsIGl0ZW0sIF9yZXN1bHRzOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKGlkIGluIGludmVudG9yeS5pdGVtcykgewogICAgICAgIGl0ZW0gPSBpbnZlbnRvcnkuaXRlbXNbaWRdOwogICAgICAgIGlmIChpdGVtICYmIGl0ZW0uY291bnQgPiAwKSB7CiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMubG9hZENvbXBsZXhBbmltYXRpb24oUmVjb3JkTWFuYWdlci5hbmltYXRpb25zW2l0ZW0uaXRlbS5hbmltYXRpb25JZCAtIDFdKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICBSZXNvdXJjZUxvYWRlci5wcm90b3R5cGUubG9hZEFjdG9yQmF0dGxlQW5pbWF0aW9ucyA9IGZ1bmN0aW9uKGFjdG9yKSB7CiAgICAgIGlmIChhY3Rvci5zdGFuZEFuaW1hdGlvbiAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5sb2FkU2ltcGxlQW5pbWF0aW9uKGFjdG9yLnN0YW5kQW5pbWF0aW9uLnJlY29yZCk7CiAgICAgIH0KICAgICAgaWYgKGFjdG9yLm1hZ2ljQW5pbWF0aW9uICE9IG51bGwpIHsKICAgICAgICB0aGlzLmxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IubWFnaWNBbmltYXRpb24ucmVjb3JkKTsKICAgICAgfQogICAgICBpZiAoYWN0b3IuYXR0YWNrQW5pbWF0aW9uICE9IG51bGwpIHsKICAgICAgICB0aGlzLmxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IuYXR0YWNrQW5pbWF0aW9uLnJlY29yZCk7CiAgICAgIH0KICAgICAgaWYgKGFjdG9yLml0ZW1BbmltYXRpb24gIT0gbnVsbCkgewogICAgICAgIHRoaXMubG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5pdGVtQW5pbWF0aW9uLnJlY29yZCk7CiAgICAgIH0KICAgICAgaWYgKGFjdG9yLmd1YXJkQW5pbWF0aW9uICE9IG51bGwpIHsKICAgICAgICB0aGlzLmxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IuZ3VhcmRBbmltYXRpb24ucmVjb3JkKTsKICAgICAgfQogICAgICBpZiAoYWN0b3IucHJlTWFnaWNBbmltYXRpb24gIT0gbnVsbCkgewogICAgICAgIHRoaXMubG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5wcmVNYWdpY0FuaW1hdGlvbi5yZWNvcmQpOwogICAgICB9CiAgICAgIGlmIChhY3Rvci5wcmVBdHRhY2tBbmltYXRpb24gIT0gbnVsbCkgewogICAgICAgIHRoaXMubG9hZFNpbXBsZUFuaW1hdGlvbihhY3Rvci5wcmVBdHRhY2tBbmltYXRpb24ucmVjb3JkKTsKICAgICAgfQogICAgICBpZiAoYWN0b3IuZGFtYWdlQW5pbWF0aW9uICE9IG51bGwpIHsKICAgICAgICB0aGlzLmxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IuZGFtYWdlQW5pbWF0aW9uLnJlY29yZCk7CiAgICAgIH0KICAgICAgaWYgKGFjdG9yLmRlYXRoQW5pbWF0aW9uICE9IG51bGwpIHsKICAgICAgICB0aGlzLmxvYWRTaW1wbGVBbmltYXRpb24oYWN0b3IuZGVhdGhBbmltYXRpb24ucmVjb3JkKTsKICAgICAgfQogICAgICBpZiAoYWN0b3IuYmFkU3RhdHVzQW5pbWF0aW9uICE9IG51bGwpIHsKICAgICAgICByZXR1cm4gdGhpcy5sb2FkU2ltcGxlQW5pbWF0aW9uKGFjdG9yLmJhZFN0YXR1c0FuaW1hdGlvbi5yZWNvcmQpOwogICAgICB9CiAgICB9OwoKICAgIFJlc291cmNlTG9hZGVyLnByb3RvdHlwZS5sb2FkQWN0b3JTa2lsbEFuaW1hdGlvbnMgPSBmdW5jdGlvbihhY3RvcikgewogICAgICB2YXIgYW5pbWF0aW9uLCBza2lsbCwgc2tpbGxUeXBlLCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIF9yZWYgPSBhY3Rvci5za2lsbFR5cGVzOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICBza2lsbFR5cGUgPSBfcmVmW19pXTsKICAgICAgICBpZiAoKHNraWxsVHlwZSAhPSBudWxsKSAmJiAoYWN0b3Iuc2tpbGxzW3NraWxsVHlwZS5pbmRleF0gIT0gbnVsbCkpIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2goKGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgX2osIF9sZW4xLCBfcmVmMSwgX3Jlc3VsdHMxOwogICAgICAgICAgICBfcmVmMSA9IGFjdG9yLnNraWxsc1tza2lsbFR5cGUuaW5kZXhdOwogICAgICAgICAgICBfcmVzdWx0czEgPSBbXTsKICAgICAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjEubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7CiAgICAgICAgICAgICAgc2tpbGwgPSBfcmVmMVtfal07CiAgICAgICAgICAgICAgaWYgKHNraWxsICE9IG51bGwpIHsKICAgICAgICAgICAgICAgIGFuaW1hdGlvbiA9IFJlY29yZE1hbmFnZXIuYW5pbWF0aW9uc1tza2lsbC5hbmltYXRpb25JZCAtIDFdOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkQ29tcGxleEFuaW1hdGlvbihhbmltYXRpb24pOwogICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gUmVjb3JkTWFuYWdlci5hbmltYXRpb25zW3NraWxsLnVzZXJBbmltYXRpb25JZCAtIDFdOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkQ29tcGxleEFuaW1hdGlvbihhbmltYXRpb24pOwogICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gUmVjb3JkTWFuYWdlci5hbmltYXRpb25zW3NraWxsLmZvcndhcmRBbmltYXRpb25JZCAtIDFdOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkU2ltcGxlQW5pbWF0aW9uKGFuaW1hdGlvbik7CiAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBSZWNvcmRNYW5hZ2VyLmFuaW1hdGlvbnNbc2tpbGwuYmFja3dhcmRBbmltYXRpb25JZCAtIDFdOwogICAgICAgICAgICAgICAgdGhpcy5sb2FkU2ltcGxlQW5pbWF0aW9uKGFuaW1hdGlvbik7CiAgICAgICAgICAgICAgICBhbmltYXRpb24gPSBSZWNvcmRNYW5hZ2VyLmFuaW1hdGlvbnNbc2tpbGwudXNlQW5pbWF0aW9uSWQgLSAxXTsKICAgICAgICAgICAgICAgIHRoaXMubG9hZFNpbXBsZUFuaW1hdGlvbihhbmltYXRpb24pOwogICAgICAgICAgICAgICAgYW5pbWF0aW9uID0gUmVjb3JkTWFuYWdlci5hbmltYXRpb25zW3NraWxsLnByZXBhcmVBbmltYXRpb25JZCAtIDFdOwogICAgICAgICAgICAgICAgX3Jlc3VsdHMxLnB1c2godGhpcy5sb2FkU2ltcGxlQW5pbWF0aW9uKGFuaW1hdGlvbikpOwogICAgICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgICAgICBfcmVzdWx0czEucHVzaCh2b2lkIDApOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICByZXR1cm4gX3Jlc3VsdHMxOwogICAgICAgICAgfSkuY2FsbCh0aGlzKSk7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICBSZXNvdXJjZUxvYWRlci5wcm90b3R5cGUubG9hZENvbXBsZXhBbmltYXRpb24gPSBmdW5jdGlvbihhbmltYXRpb24pIHsKICAgICAgaWYgKGFuaW1hdGlvbiAhPSBudWxsKSB7CiAgICAgICAgaWYgKGFuaW1hdGlvbi5ncmFwaGljMSAhPSBudWxsKSB7CiAgICAgICAgICBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9BbmltYXRpb25zLyIgKyBhbmltYXRpb24uZ3JhcGhpYzEubmFtZSk7CiAgICAgICAgfQogICAgICAgIGlmICgoYW5pbWF0aW9uLmdyYXBoaWMyICE9IG51bGwpICYmIGFuaW1hdGlvbi5ncmFwaGljMi5uYW1lICE9PSAiIikgewogICAgICAgICAgcmV0dXJuIFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0FuaW1hdGlvbnMvIiArIGFuaW1hdGlvbi5ncmFwaGljMi5uYW1lKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgUmVzb3VyY2VMb2FkZXIucHJvdG90eXBlLmxvYWRTaW1wbGVBbmltYXRpb24gPSBmdW5jdGlvbihhbmltYXRpb24pIHsKICAgICAgaWYgKChhbmltYXRpb24gIT0gbnVsbCkgJiYgKGFuaW1hdGlvbi5ncmFwaGljICE9IG51bGwpKSB7CiAgICAgICAgcmV0dXJuIFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL1NpbXBsZUFuaW1hdGlvbnMvIiArIGFuaW1hdGlvbi5ncmFwaGljLm5hbWUpOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBSZXNvdXJjZUxvYWRlcjsKCiAgfSkoKTsKCiAgd2luZG93LlJlc291cmNlTG9hZGVyID0gbmV3IFJlc291cmNlTG9hZGVyKCk7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Scene","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgICBGaWxlOiBTY2VuZS5jb2ZmZWUKIyAJQ3JlYXRlZCBvbjogMjAxMy0wNS0xOQojCiMgCUNvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogU2NlbmUKIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNjZW5lCiAgY29uc3RydWN0b3I6IC0+CgogIGluaXRpYWxpemU6IC0+CgogIGRpc3Bvc2U6IC0+CgogIGxvYWRpbmc6IC0+CiAgICAjIFRPRE86IERpc3BsYXkgbG9hZGluZyBzY3JlZW4KICBwcmVwYXJlOiAtPiAjIFRPRE86IFNvbWUgc3R1ZmYgYWZ0ZXIgbG9hZGluZwoKICB1cGRhdGU6IC0+CiAgICBJbnB1dC51cGRhdGUoKQogICAgR3JhcGhpY3MudXBkYXRlKCkKCndpbmRvdy5TY2VuZSA9IFNjZW5lCg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZTsKCiAgU2NlbmUgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBTY2VuZSgpIHt9CgogICAgU2NlbmUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNjZW5lLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKSB7fTsKCiAgICBTY2VuZS5wcm90b3R5cGUubG9hZGluZyA9IGZ1bmN0aW9uKCkge307CgogICAgU2NlbmUucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNjZW5lLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgSW5wdXQudXBkYXRlKCk7CiAgICAgIHJldHVybiBHcmFwaGljcy51cGRhdGUoKTsKICAgIH07CgogICAgcmV0dXJuIFNjZW5lOwoKICB9KSgpOwoKICB3aW5kb3cuU2NlbmUgPSBTY2VuZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"ResourceManager","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIEZpbGU6IFJlc291cmNlTWFuYWdlci5jb2ZmZWUKIyAJQ3JlYXRlZCBvbjogMjAxMy0wNS0xOQojCiMgCUNvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogUmVzb3VyY2VNYW5hZ2VyCiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBSZXNvdXJjZU1hbmFnZXIKICBjb25zdHJ1Y3RvcjogLT4KICAgIEBjdXN0b21CaXRtYXBzQnlLZXkgPSB7fQogICAgQHJlc291cmNlc0J5UGF0aCA9IHt9CiAgICBAcmVzb3VyY2VzQnlQYXRoSHVlID0ge30KICAgIEByZXNvdXJjZXMgPSBbXQogICAgQHJlc291cmNlc0xvYWRlZCA9IHRydWUKCiAgbG9hZEZvbnRzOiAtPgogICAgcmVzb3VyY2UgPSB7IGxvYWRlZDogbm8gfQogICAgQHJlc291cmNlcy5wdXNoKHJlc291cmNlKQogICAgQHJlc291cmNlc0J5UGF0aFsiR3JhcGhpY3MvRm9udHMiXSA9IHJlc291cmNlCiAgICAKICAgIHVybCA9ICIiCiAgICBmYW1pbGllcyA9IFtdCiAgICAKICAgIGlmICRQQVJBTVMudGVzdD8KICAgICAgICB1cmwgPSAnL2ludm9rZT9jb250cm9sbGVyPWdzLlJlc291cmNlQ29udHJvbGxlciZtZXRob2Q9bG9hZEZvbnRzU3R5bGVzaGVldCcKICAgICAgICBmYW1pbGllcyA9ICRQQVJBTVMuZm9udEZhbWlsaWVzCiAgICBlbHNlCiAgICAgICAgdXJsID0gJ3Jlc291cmNlcy9mb250cy5jc3MnCiAgICAgICAgcmVzb3VyY2VzID0gR1MuZGF0YUNhY2hlWyJSRVNPVVJDRVMiXS5pdGVtcy5yZXNvdXJjZXMKICAgICAgIAogICAgICAgIGZvciBwYXRoIG9mIHJlc291cmNlcwogICAgICAgICAgICBpZiBwYXRoLnN0YXJ0c1dpdGgoIkdyYXBoaWNzL0ZvbnRzLyIpCiAgICAgICAgICAgICAgICBwYXJ0cyA9IHBhdGguc3BsaXQoIi8iKQogICAgICAgICAgICAgICAgZmFtaWxpZXMucHVzaChwYXJ0c1twYXJ0cy5sZW5ndGgtMV0pCiAgICAgICAKICAgICAgICAKICAgIFdlYkZvbnQubG9hZCh7CiAgICAgICAgICAgIGN1c3RvbTogeyAKICAgICAgICAgICAgICAgIGZhbWlsaWVzOiBmYW1pbGllcywKICAgICAgICAgICAgICAgIHVybHM6IFt1cmxdIH0sCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgYWN0aXZlOiA9PiAKICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCJsb2FkZWQiKQogICAgICAgICAgICAgICAgQHJlc291cmNlc0J5UGF0aFsiR3JhcGhpY3MvRm9udHMiXS5sb2FkZWQgPSB5ZXMKICAgICAgICB9KQogICAgICAgIAogIGdldEN1c3RvbUJpdG1hcDogKGtleSkgLT4KICAgIHJldHVybiBAY3VzdG9tQml0bWFwc0J5S2V5W2tleV0KICBzZXRDdXN0b21CaXRtYXA6IChrZXksIGJpdG1hcCkgLT4KICAgIEBjdXN0b21CaXRtYXBzQnlLZXlba2V5XSA9IGJpdG1hcAoKICBnZXRGb250OiAobmFtZSwgc2l6ZSkgLT4KICAgICAgcmVzdWx0ID0gbmV3IEZvbnQobmFtZSwgc2l6ZSkKICAgICAgCiAgICAgIEByZXNvdXJjZXMucHVzaChyZXN1bHQpCiAgICAgIEByZXNvdXJjZXNMb2FkZWQgPSBmYWxzZQogICAgICAKICAgICAgcmV0dXJuIHJlc3VsdAogIGdldEJpdG1hcDogKGZpbGVQYXRoLCBodWUsIG9wYWNpdHksIGJsZW5kaW5nLCB0b25lKSAtPgogICAgaWYgZmlsZVBhdGguZW5kc1dpdGgoIi8iKSB0aGVuIHJldHVybiBudWxsCgogICAgaHVlID0gaHVlIHx8IDAKICAgIHJlc3VsdCA9IEByZXNvdXJjZXNCeVBhdGhbZmlsZVBhdGhdCgogICAgaWYgbm90IHJlc3VsdD8KICAgICAgcHJvZmlsZSA9IExhbmd1YWdlTWFuYWdlci5wcm9maWxlCiAgICAgIHJlc3VsdCA9IG5ldyBCaXRtYXAoZmlsZVBhdGgsIChpZiBwcm9maWxlPyBhbmQgcHJvZmlsZS5pdGVtcz8gdGhlbiBwcm9maWxlLml0ZW1zLmNvZGUgZWxzZSBudWxsKSkKICAgICAgcmVzdWx0Lmh1ZSA9IFtodWVdCiAgICAgIHJlc3VsdC5maWxlUGF0aCA9IGZpbGVQYXRoCiAgICAgIEByZXNvdXJjZXNCeVBhdGhbZmlsZVBhdGhdID0gcmVzdWx0CiAgICAgIEByZXNvdXJjZXMucHVzaChyZXN1bHQpCiAgICAgIEByZXNvdXJjZXNMb2FkZWQgPSBmYWxzZQogICAgZWxzZSBpZiBub3QgcmVzdWx0LmxvYWRlZCBhbmQgcmVzdWx0Lmh1ZSAhPSBodWUKICAgICAgcHJvZmlsZSA9IExhbmd1YWdlTWFuYWdlci5wcm9maWxlCiAgICAgIHJlc3VsdCA9IG5ldyBCaXRtYXAoZmlsZVBhdGgsIChpZiBwcm9maWxlPyBhbmQgcHJvZmlsZS5pdGVtcz8gdGhlbiBwcm9maWxlLml0ZW1zLmNvZGUgZWxzZSBudWxsKSkKICAgICAgcmVzdWx0Lmh1ZSA9IGh1ZQogICAgICByZXN1bHQuZmlsZVBhdGggPSBmaWxlUGF0aAogICAgICBAcmVzb3VyY2VzLnB1c2gocmVzdWx0KQogICAgICBAcmVzb3VyY2VzTG9hZGVkID0gZmFsc2UgIAogICAgZWxzZSBpZiBodWUgPiAwCiAgICAgIGh1ZUJpdG1hcCA9IEByZXNvdXJjZXNCeVBhdGhIdWVbZmlsZVBhdGgrIkAiK2h1ZV0KICAgICAgaWYgbm90IGh1ZUJpdG1hcD8KICAgICAgICBodWVCaXRtYXAgPSBuZXcgQml0bWFwKHJlc3VsdC5pbWFnZSkKICAgICAgICBodWVCaXRtYXAuY2hhbmdlSHVlKGh1ZSkKICAgICAgICBAcmVzb3VyY2VzQnlQYXRoSHVlW2ZpbGVQYXRoKyJAIitodWVdID0gaHVlQml0bWFwCiAgICAgIHJlc3VsdCA9IGh1ZUJpdG1hcAogICAgICAKICAgICAgICAKCiAgICByZXR1cm4gcmVzdWx0CgogIGdldEltYWdlOiAoZmlsZVBhdGgpIC0+CiAgICByZXN1bHQgPSBAcmVzb3VyY2VzQnlQYXRoW2ZpbGVQYXRoXQoKICAgIGlmIG5vdCByZXN1bHQ/CiAgICAgIGlmICRQQVJBTVM/IGFuZCAkUEFSQU1TLnRlc3Q/CiAgICAgICAgcmVzdWx0ID0gbmV3IEJpdG1hcCgnL2ludm9rZT9jb250cm9sbGVyPWdzLlJlc291cmNlQ29udHJvbGxlciZtZXRob2Q9bG9hZEdyYXBoaWNSZXNvdXJjZSYnICsgJC5wYXJhbSgKICAgICAgICAgIGRhdGE6CiAgICAgICAgICAgIHJlc291cmNlOgogICAgICAgICAgICAgIHBhdGg6IGZpbGVQYXRoCiAgICAgICAgICAgIHN1cHBvcnRlZEZvcm1hdHM6IFsicG5nIiwgImpwZyJdCiAgICAgICAgKSkKICAgICAgZWxzZQogICAgICAgIHJlc3VsdCA9IG5ldyBCaXRtYXAoInJlc291cmNlcy8je2ZpbGVQYXRofS5wbmciKTsKCiAgICAgIEByZXNvdXJjZXNCeVBhdGhbZmlsZVBhdGhdID0gcmVzdWx0CiAgICAgIEByZXNvdXJjZXMucHVzaChyZXN1bHQpCiAgICAgIEByZXNvdXJjZXNMb2FkZWQgPSBmYWxzZQoKICAgIHJldHVybiByZXN1bHQKCiAgZ2V0QXVkaW9CdWZmZXI6IChmaWxlUGF0aCkgLT4KICAgIHJlc3VsdCA9IEByZXNvdXJjZXNCeVBhdGhbZmlsZVBhdGhdCiAgICBwcm9maWxlID0gTGFuZ3VhZ2VNYW5hZ2VyLnByb2ZpbGUKICAgIGxhbmd1YWdlQ29kZSA9IGlmIHByb2ZpbGU/IGFuZCBwcm9maWxlLml0ZW1zPyB0aGVuIHByb2ZpbGUuaXRlbXMuY29kZSBlbHNlIG51bGwKICAgIAogICAgaWYgbm90IHJlc3VsdD8KICAgICAgaWYgJFBBUkFNUz8gYW5kICRQQVJBTVMudGVzdD8KICAgICAgICByZXN1bHQgPSBuZXcgR1MuQXVkaW9CdWZmZXIoJy9pbnZva2U/Y29udHJvbGxlcj1ncy5SZXNvdXJjZUNvbnRyb2xsZXImbWV0aG9kPWxvYWRBdWRpb1Jlc291cmNlJicgKyAkLnBhcmFtKAogICAgICAgICAgZGF0YToKICAgICAgICAgICAgcmVzb3VyY2U6CiAgICAgICAgICAgICAgcGF0aDogZmlsZVBhdGgKICAgICAgICAgICAgc3VwcG9ydGVkRm9ybWF0czogWyJhYWMiLCAib2dnIiwgIndhdiJdCiAgICAgICAgICAgIGxhbmd1YWdlQ29kZTogbGFuZ3VhZ2VDb2RlCiAgICAgICAgKSkKICAgICAgZWxzZQogICAgICAgIHJlc291cmNlcyA9IEdTLmRhdGFDYWNoZVsiUkVTT1VSQ0VTIl0uaXRlbXMucmVzb3VyY2VzCiAgICAgICAgZmlsZVBhdGhMQyA9IGZpbGVQYXRoICsgIl8iICsgbGFuZ3VhZ2VDb2RlCiAgICAgICAgaWYgcmVzb3VyY2VzW2ZpbGVQYXRoTENdCiAgICAgICAgICAgIGV4dCA9IHJlc291cmNlc1tmaWxlUGF0aExDXSB8fCAiLndhdiI7CiAgICAgICAgICAgIHJlc3VsdCA9IG5ldyBHUy5BdWRpb0J1ZmZlcigicmVzb3VyY2VzLyN7ZmlsZVBhdGhMQ30je2V4dH0iKTsKICAgICAgICBlbHNlCiAgICAgICAgICAgIGV4dCA9IHJlc291cmNlc1tmaWxlUGF0aF0gfHwgIi53YXYiOwogICAgICAgICAgICByZXN1bHQgPSBuZXcgR1MuQXVkaW9CdWZmZXIoInJlc291cmNlcy8je2ZpbGVQYXRofSN7ZXh0fSIpOwogICAgICAgICAgICAKICAgICAgQHJlc291cmNlc0J5UGF0aFtmaWxlUGF0aF0gPSByZXN1bHQKICAgICAgQHJlc291cmNlcy5wdXNoKHJlc3VsdCkKICAgICAgQHJlc291cmNlc0xvYWRlZCA9IGZhbHNlCgogICAgcmV0dXJuIHJlc3VsdAoKICB1cGRhdGU6IC0+CiAgICBpZiBub3QgQHJlc291cmNlc0xvYWRlZAogICAgICBAcmVzb3VyY2VzTG9hZGVkID0gdHJ1ZQogICAgICBmb3IgaSBpbiBbMC4uLkByZXNvdXJjZXMubGVuZ3RoXQogICAgICAgIGlmIG5vdCBAcmVzb3VyY2VzW2ldLmxvYWRlZAogICAgICAgICAgQHJlc291cmNlc0xvYWRlZCA9IGZhbHNlCiAgICAgICAgICBicmVhawogICAgICAgIGVsc2UgaWYgQHJlc291cmNlc1tpXS5odWU/IGFuZCBAcmVzb3VyY2VzW2ldLmh1ZSA+IDAKICAgICAgICAgIGJpdG1hcCA9IG5ldyBCaXRtYXAoQHJlc291cmNlc1tpXS5pbWFnZSkKICAgICAgICAgIAogICAgICAgICAgQHJlc291cmNlc0J5UGF0aFtAcmVzb3VyY2VzW2ldLmZpbGVQYXRoXSA9IGJpdG1hcAogICAgICAgICAgQHJlc291cmNlc1tpXS5jaGFuZ2VIdWUoQHJlc291cmNlc1tpXS5odWUpCiAgICAgICAgICBAcmVzb3VyY2VzQnlQYXRoSHVlW0ByZXNvdXJjZXNbaV0uZmlsZVBhdGgrIkAiK0ByZXNvdXJjZXNbaV0uaHVlXSA9IEByZXNvdXJjZXNbaV0KICAgICAgICAgIGRlbGV0ZSBAcmVzb3VyY2VzW2ldLmZpbGVQYXRoCiAgICAgICAgICBkZWxldGUgQHJlc291cmNlc1tpXS5odWUKCiAgICByZXR1cm4gbnVsbAoKd2luZG93LlJlc291cmNlTWFuYWdlciA9IG5ldyBSZXNvdXJjZU1hbmFnZXIoKQ==","compiledContent":""},{"name":"SceneManager","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIEZpbGU6IFNjZW5lTWFuYWdlci5jb2ZmZWUKIyAJQ3JlYXRlZCBvbjogMjAxMy0wNS0xOQojCiMgCUNvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogU2NlbmVNYW5hZ2VyCiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTY2VuZU1hbmFnZXIKICBjb25zdHJ1Y3RvcjogLT4KICAgIEBzY2VuZSA9IG51bGwKICAgIEBwcmV2aW91c1NjZW5lcyA9IFtdCiAgICBAbG9hZGluZyA9IHRydWUKICAgIEBsb2FkaW5nRGF0YSA9IHRydWUKICAgIEBsb2FkaW5nUmVzb3VyY2VzID0gdHJ1ZQogICAgQG5leHRTY2VuZSA9IG51bGwKICAgIAogIHN3aXRjaFRvOiAoc2NlbmUsIHNhdmVQcmV2aW91cykgLT4KICAgIGlmIHNhdmVQcmV2aW91cwogICAgICAgIEBwcmV2aW91c1NjZW5lcy5wdXNoKEBzY2VuZSkKICAgIGVsc2UKICAgICAgICBmb3IgcHJldlNjZW5lIGluIEBwcmV2aW91c1NjZW5lcwogICAgICAgICAgICBwcmV2U2NlbmUuZGlzcG9zZSgpCiAgICAgICAgQHByZXZpb3VzU2NlbmVzID0gW10KICAgICAgICAKICAgIEBuZXh0U2NlbmUgPSBzY2VuZQogICAgCiAgcmV0dXJuVG9QcmV2aW91czogLT4KICAgICAgQG5leHRTY2VuZSA9IEBwcmV2aW91c1NjZW5lcy5wb3AoKQogICAgICBAbmV4dFNjZW5lLnNob3coeWVzKQogICAgICAKICB1cGRhdGU6IC0+CiAgICBpZiBAbmV4dFNjZW5lICE9IEBzY2VuZQogICAgICAgIGlmIEBzY2VuZT8KICAgICAgICAgICAgaWYgQHByZXZpb3VzU2NlbmVzLmluZGV4T2YoQHNjZW5lKSA9PSAtMQogICAgICAgICAgICAgICAgQHNjZW5lLmRpc3Bvc2UoKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBAc2NlbmUuc2hvdyhubykKICAgICAgICAKCiAgICAgICAgQHNjZW5lID0gQG5leHRTY2VuZQogICAgCiAgICAgICAgQGxvYWRpbmcgPSB0cnVlCiAgICAgICAgQGxvYWRpbmdEYXRhID0gdHJ1ZQogICAgICAgIEBsb2FkaW5nUmVzb3VyY2VzID0gdHJ1ZQogICAgICAgIGlmIEBzY2VuZT8gYW5kIG5vdCBAc2NlbmUuaW5pdGlhbGl6ZWQKICAgICAgICAgICAgQHNjZW5lLmluaXRpYWxpemUoKQogICAgICAgIAogICAgaWYgQHNjZW5lPwogICAgICBEYXRhTWFuYWdlci51cGRhdGUoKQogICAgICBSZXNvdXJjZU1hbmFnZXIudXBkYXRlKCkKICAgICAgQXVkaW9NYW5hZ2VyLnVwZGF0ZSgpCiAgICAgIAogICAgICBpZiBEYXRhTWFuYWdlci5kb2N1bWVudHNMb2FkZWQKICAgICAgICBpZiBAbG9hZGluZ0RhdGEgYW5kIG5vdCBAc2NlbmUuaW5pdGlhbGl6ZWQgdGhlbiBAc2NlbmUucHJlcGFyZURhdGEoKQogICAgICAgIEBsb2FkaW5nRGF0YSA9ICFEYXRhTWFuYWdlci5kb2N1bWVudHNMb2FkZWQKICAgICAgICAKICAgICAgaWYgbm90IEBsb2FkaW5nRGF0YSBhbmQgUmVzb3VyY2VNYW5hZ2VyLnJlc291cmNlc0xvYWRlZAogICAgICAgIGlmIEBsb2FkaW5nUmVzb3VyY2VzIGFuZCBub3QgQHNjZW5lLmluaXRpYWxpemVkCiAgICAgICAgICAgIEBzY2VuZS5wcmVwYXJlVmlzdWFsKCkKICAgICAgICAgICAgQHNjZW5lLmluaXRpYWxpemVkID0geWVzCiAgICAgICAgQGxvYWRpbmdSZXNvdXJjZXMgPSBmYWxzZQogICAKICAgICAgICAKICAgICAgICAKICAgICAgaWYgUmVzb3VyY2VNYW5hZ2VyLnJlc291cmNlc0xvYWRlZCBhbmQgRGF0YU1hbmFnZXIuZG9jdW1lbnRzTG9hZGVkCiAgICAgICAgQGxvYWRpbmcgPSBmYWxzZQogICAgICAgIGlmIEdyYXBoaWNzLmZyb3plbgogICAgICAgICAgICBHcmFwaGljcy51cGRhdGUoKQogICAgICAgIGVsc2UKICAgICAgICAgICAgQHNjZW5lLnVwZGF0ZSgpCiAgICAgIGVsc2UKICAgICAgICBAc2NlbmUubG9hZGluZygpCgoKd2luZG93LlNjZW5lTWFuYWdlciA9IG5ldyBTY2VuZU1hbmFnZXIoKQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZU1hbmFnZXI7CgogIFNjZW5lTWFuYWdlciA9IChmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIFNjZW5lTWFuYWdlcigpIHsKICAgICAgdGhpcy5zY2VuZSA9IG51bGw7CiAgICAgIHRoaXMucHJldmlvdXNTY2VuZXMgPSBbXTsKICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgdGhpcy5sb2FkaW5nRGF0YSA9IHRydWU7CiAgICAgIHRoaXMubG9hZGluZ1Jlc291cmNlcyA9IHRydWU7CiAgICAgIHRoaXMubmV4dFNjZW5lID0gbnVsbDsKICAgIH0KCiAgICBTY2VuZU1hbmFnZXIucHJvdG90eXBlLnN3aXRjaFRvID0gZnVuY3Rpb24oc2NlbmUsIHNhdmVQcmV2aW91cykgewogICAgICB2YXIgcHJldlNjZW5lLCBfaSwgX2xlbiwgX3JlZjsKICAgICAgaWYgKHNhdmVQcmV2aW91cykgewogICAgICAgIHRoaXMucHJldmlvdXNTY2VuZXMucHVzaCh0aGlzLnNjZW5lKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBfcmVmID0gdGhpcy5wcmV2aW91c1NjZW5lczsKICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgIHByZXZTY2VuZSA9IF9yZWZbX2ldOwogICAgICAgICAgcHJldlNjZW5lLmRpc3Bvc2UoKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5wcmV2aW91c1NjZW5lcyA9IFtdOwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLm5leHRTY2VuZSA9IHNjZW5lOwogICAgfTsKCiAgICBTY2VuZU1hbmFnZXIucHJvdG90eXBlLnJldHVyblRvUHJldmlvdXMgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5uZXh0U2NlbmUgPSB0aGlzLnByZXZpb3VzU2NlbmVzLnBvcCgpOwogICAgICByZXR1cm4gdGhpcy5uZXh0U2NlbmUuc2hvdyh0cnVlKTsKICAgIH07CgogICAgU2NlbmVNYW5hZ2VyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMubmV4dFNjZW5lICE9PSB0aGlzLnNjZW5lKSB7CiAgICAgICAgaWYgKHRoaXMuc2NlbmUgIT0gbnVsbCkgewogICAgICAgICAgaWYgKHRoaXMucHJldmlvdXNTY2VuZXMuaW5kZXhPZih0aGlzLnNjZW5lKSA9PT0gLTEpIHsKICAgICAgICAgICAgdGhpcy5zY2VuZS5kaXNwb3NlKCk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICB0aGlzLnNjZW5lLnNob3coZmFsc2UpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnNjZW5lID0gdGhpcy5uZXh0U2NlbmU7CiAgICAgICAgdGhpcy5sb2FkaW5nID0gdHJ1ZTsKICAgICAgICB0aGlzLmxvYWRpbmdEYXRhID0gdHJ1ZTsKICAgICAgICB0aGlzLmxvYWRpbmdSZXNvdXJjZXMgPSB0cnVlOwogICAgICAgIGlmICgodGhpcy5zY2VuZSAhPSBudWxsKSAmJiAhdGhpcy5zY2VuZS5pbml0aWFsaXplZCkgewogICAgICAgICAgdGhpcy5zY2VuZS5pbml0aWFsaXplKCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICh0aGlzLnNjZW5lICE9IG51bGwpIHsKICAgICAgICBEYXRhTWFuYWdlci51cGRhdGUoKTsKICAgICAgICBSZXNvdXJjZU1hbmFnZXIudXBkYXRlKCk7CiAgICAgICAgQXVkaW9NYW5hZ2VyLnVwZGF0ZSgpOwogICAgICAgIGlmIChEYXRhTWFuYWdlci5kb2N1bWVudHNMb2FkZWQpIHsKICAgICAgICAgIGlmICh0aGlzLmxvYWRpbmdEYXRhICYmICF0aGlzLnNjZW5lLmluaXRpYWxpemVkKSB7CiAgICAgICAgICAgIHRoaXMuc2NlbmUucHJlcGFyZURhdGEoKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMubG9hZGluZ0RhdGEgPSAhRGF0YU1hbmFnZXIuZG9jdW1lbnRzTG9hZGVkOwogICAgICAgIH0KICAgICAgICBpZiAoIXRoaXMubG9hZGluZ0RhdGEgJiYgUmVzb3VyY2VNYW5hZ2VyLnJlc291cmNlc0xvYWRlZCkgewogICAgICAgICAgaWYgKHRoaXMubG9hZGluZ1Jlc291cmNlcyAmJiAhdGhpcy5zY2VuZS5pbml0aWFsaXplZCkgewogICAgICAgICAgICB0aGlzLnNjZW5lLnByZXBhcmVWaXN1YWwoKTsKICAgICAgICAgICAgdGhpcy5zY2VuZS5pbml0aWFsaXplZCA9IHRydWU7CiAgICAgICAgICB9CiAgICAgICAgICB0aGlzLmxvYWRpbmdSZXNvdXJjZXMgPSBmYWxzZTsKICAgICAgICB9CiAgICAgICAgaWYgKFJlc291cmNlTWFuYWdlci5yZXNvdXJjZXNMb2FkZWQgJiYgRGF0YU1hbmFnZXIuZG9jdW1lbnRzTG9hZGVkKSB7CiAgICAgICAgICB0aGlzLmxvYWRpbmcgPSBmYWxzZTsKICAgICAgICAgIGlmIChHcmFwaGljcy5mcm96ZW4pIHsKICAgICAgICAgICAgcmV0dXJuIEdyYXBoaWNzLnVwZGF0ZSgpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2NlbmUudXBkYXRlKCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB0aGlzLnNjZW5lLmxvYWRpbmcoKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIFNjZW5lTWFuYWdlcjsKCiAgfSkoKTsKCiAgd2luZG93LlNjZW5lTWFuYWdlciA9IG5ldyBTY2VuZU1hbmFnZXIoKTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"DataManager","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogRGF0YU1hbmFnZXIKIyAJQ3JlYXRlZCBvbjogMjAxMy0wNS0xOQojCiMgCUNvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogRGF0YU1hbmFnZXIKIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIERhdGFNYW5hZ2VyCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBAZG9jdW1lbnRzQnlVaWQgPSB7fQogICAgICAgIEBkb2N1bWVudHMgPSBbXQogICAgICAgIEBkb2N1bWVudHNMb2FkZWQgPSB0cnVlCiAgICAgICAgQGNvdW50ZXIgPSAwCiAgICAgICAgCiAgICBnZXREb2N1bWVudHNCeVR5cGVBdE9uY2U6ICh0eXBlKSAtPgogICAgICAgIAogICAgZ2V0RG9jdW1lbnRzQnlUeXBlOiAodHlwZSkgLT4KICAgICAgICByZXN1bHQgPSBbXQogICAgICAgIAogICAgICAgIGZvciB1aWQgb2YgQHN1bW1hcmllcy5pdGVtcwogICAgICAgICAgICBzdW1tYXJ5ID0gQHN1bW1hcmllcy5pdGVtc1t1aWRdCiAgICAgICAgICAgIGlmIHN1bW1hcnkuaXRlbXM/IGFuZCBzdW1tYXJ5Lml0ZW1zLnR5cGUgPT0gdHlwZQogICAgICAgICAgICAgICAgcmVzdWx0LnB1c2goQGdldERvY3VtZW50KHVpZCkpCiAgICAgICAgY29uc29sZS5sb2cocmVzdWx0KQogICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAKICAgIGdldERvY3VtZW50czogKHVpZHMpIC0+CiAgICAgICAgCiAgICBnZXREb2N1bWVudDogKHVpZCkgLT4KICAgICAgICByZXN1bHQgPSBAZG9jdW1lbnRzQnlVaWRbdWlkXQogICAgCiAgICAgICAgaWYgbm90IHJlc3VsdD8KICAgICAgICAgICAgaWYgJFBBUkFNUy50ZXN0PwogICAgICAgICAgICAgICAgJC5wb3N0KCIvaW52b2tlIiwgCiAgICAgICAgICAgICAgICB7IGNvbnRyb2xsZXI6ICJncy5Eb2N1bWVudENvbnRyb2xsZXIiLCBtZXRob2Q6ICJsb2FkRG9jdW1lbnQiLCBkYXRhOiBKU09OLnN0cmluZ2lmeSh7IHVpZDogdWlkIH0pfSwKICAgICAgICAgICAgICAgIChkYXRhLCB0ZXh0U3RhdHVzLCB4aHIpID0+IAogICAgICAgICAgICAgICAgICAgIGRhdGFPYmplY3QgPSBKU09OLnBhcnNlKGRhdGEuZGF0YSkKICAgICAgICAgICAgICAgICAgICByID0gQGRvY3VtZW50c0J5VWlkW2RhdGFPYmplY3QudWlkXQogICAgICAgICAgICAgICAgICAgIHIuaXRlbXMgPSBkYXRhT2JqZWN0Lml0ZW1zCiAgICAgICAgICAgICAgICAgICAgci5sb2FkZWQgPSB0cnVlCiAgICAKICAgICAgICAgICAgICAgICwgImpzb24iKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAkLnBvc3QoIi4vZGF0YS8iICsgdWlkICsgIi5qc29uLmpzIiwge30sIChkYXRhKSA9PiAKICAgICAgICAgICAgICAgICAgICBldmFsKGRhdGEpCiAgICAgICAgICAgICAgICAgICAgZGF0YU9iamVjdCA9IEdTLmRhdGFDYWNoZVt1aWRdCiAgICAgICAgICAgICAgICAgICAgciA9IEBkb2N1bWVudHNCeVVpZFtkYXRhT2JqZWN0LnVpZF0KICAgICAgICAgICAgICAgICAgICByLml0ZW1zID0gZGF0YU9iamVjdC5pdGVtczsKICAgICAgICAgICAgICAgICAgICByLmxvYWRlZCA9IHRydWU7CiAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICMjIyBPZmZsaW5lIC0gRmlyZWZveAogICAgICAgICAgICAgICAgcmVxdWlyZShbIi4vZGF0YS8je3VpZH0uanNvbi5qcyJdLAogICAgICAgICAgICAgICAgKGRhdGEpID0+IAogICAgICAgICAgICAgICAgICAgIGRhdGFPYmplY3QgPSBHUy5kYXRhQ2FjaGVbdWlkXQogICAgICAgICAgICAgICAgICAgIHIgPSBAZG9jdW1lbnRzQnlVaWRbZGF0YU9iamVjdC51aWRdCiAgICAgICAgICAgICAgICAgICAgci5pdGVtcyA9IGRhdGFPYmplY3QuaXRlbXMKICAgICAgICAgICAgICAgICAgICByLmxvYWRlZCA9IHRydWUKICAgIAogICAgICAgICAgICAgICAgKQogICAgICAgICAgICAgICAgIyMjCiAgICAgICAgICAgIAogICAgICAgICAgICByZXN1bHQgPSB7IHVpZDogdWlkLCBsb2FkZWQ6IGZhbHNlIH0KICAgICAgICAgICAgQGRvY3VtZW50c0J5VWlkW3VpZF0gPSByZXN1bHQKICAgICAgICAgICAgQGRvY3VtZW50cy5wdXNoKHJlc3VsdCkKICAgICAgICAgICAgQGRvY3VtZW50c0xvYWRlZCA9IGZhbHNlCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiB1aWQgPT0gIlNVTU1BUklFUyIgdGhlbiBAc3VtbWFyaWVzID0gcmVzdWx0CiAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBpZiBub3QgQGRvY3VtZW50c0xvYWRlZAogICAgICAgICAgICBAZG9jdW1lbnRzTG9hZGVkID0gdHJ1ZQogICAgCiAgICAgICAgICAgIGZvciBpIGluIFswLi4uQGRvY3VtZW50cy5sZW5ndGhdCiAgICAgICAgICAgICAgICBpZiBub3QgQGRvY3VtZW50c1tpXS5sb2FkZWQKICAgICAgICAgICAgICAgICAgICBAZG9jdW1lbnRzTG9hZGVkID0gZmFsc2UKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgIAogICAgICAgIHJldHVybiBudWxsCgp3aW5kb3cuRGF0YU1hbmFnZXIgPSBuZXcgRGF0YU1hbmFnZXIoKQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBEYXRhTWFuYWdlcjsKCiAgRGF0YU1hbmFnZXIgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBEYXRhTWFuYWdlcigpIHsKICAgICAgdGhpcy5kb2N1bWVudHNCeVVpZCA9IHt9OwogICAgICB0aGlzLmRvY3VtZW50cyA9IFtdOwogICAgICB0aGlzLmRvY3VtZW50c0xvYWRlZCA9IHRydWU7CiAgICAgIHRoaXMuY291bnRlciA9IDA7CiAgICB9CgogICAgRGF0YU1hbmFnZXIucHJvdG90eXBlLmdldERvY3VtZW50c0J5VHlwZUF0T25jZSA9IGZ1bmN0aW9uKHR5cGUpIHt9OwoKICAgIERhdGFNYW5hZ2VyLnByb3RvdHlwZS5nZXREb2N1bWVudHNCeVR5cGUgPSBmdW5jdGlvbih0eXBlKSB7CiAgICAgIHZhciByZXN1bHQsIHN1bW1hcnksIHVpZDsKICAgICAgcmVzdWx0ID0gW107CiAgICAgIGZvciAodWlkIGluIHRoaXMuc3VtbWFyaWVzLml0ZW1zKSB7CiAgICAgICAgc3VtbWFyeSA9IHRoaXMuc3VtbWFyaWVzLml0ZW1zW3VpZF07CiAgICAgICAgaWYgKChzdW1tYXJ5Lml0ZW1zICE9IG51bGwpICYmIHN1bW1hcnkuaXRlbXMudHlwZSA9PT0gdHlwZSkgewogICAgICAgICAgcmVzdWx0LnB1c2godGhpcy5nZXREb2N1bWVudCh1aWQpKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgY29uc29sZS5sb2cocmVzdWx0KTsKICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgRGF0YU1hbmFnZXIucHJvdG90eXBlLmdldERvY3VtZW50cyA9IGZ1bmN0aW9uKHVpZHMpIHt9OwoKICAgIERhdGFNYW5hZ2VyLnByb3RvdHlwZS5nZXREb2N1bWVudCA9IGZ1bmN0aW9uKHVpZCkgewogICAgICB2YXIgcmVzdWx0LAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgcmVzdWx0ID0gdGhpcy5kb2N1bWVudHNCeVVpZFt1aWRdOwogICAgICBpZiAocmVzdWx0ID09IG51bGwpIHsKICAgICAgICBpZiAoJFBBUkFNUy50ZXN0ICE9IG51bGwpIHsKICAgICAgICAgICQucG9zdCgiL2ludm9rZSIsIHsKICAgICAgICAgICAgY29udHJvbGxlcjogImdzLkRvY3VtZW50Q29udHJvbGxlciIsCiAgICAgICAgICAgIG1ldGhvZDogImxvYWREb2N1bWVudCIsCiAgICAgICAgICAgIGRhdGE6IEpTT04uc3RyaW5naWZ5KHsKICAgICAgICAgICAgICB1aWQ6IHVpZAogICAgICAgICAgICB9KQogICAgICAgICAgfSwgZnVuY3Rpb24oZGF0YSwgdGV4dFN0YXR1cywgeGhyKSB7CiAgICAgICAgICAgIHZhciBkYXRhT2JqZWN0LCByOwogICAgICAgICAgICBkYXRhT2JqZWN0ID0gSlNPTi5wYXJzZShkYXRhLmRhdGEpOwogICAgICAgICAgICByID0gX3RoaXMuZG9jdW1lbnRzQnlVaWRbZGF0YU9iamVjdC51aWRdOwogICAgICAgICAgICByLml0ZW1zID0gZGF0YU9iamVjdC5pdGVtczsKICAgICAgICAgICAgcmV0dXJuIHIubG9hZGVkID0gdHJ1ZTsKICAgICAgICAgIH0sICJqc29uIik7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICQucG9zdCgiLi9kYXRhLyIgKyB1aWQgKyAiLmpzb24uanMiLCB7fSwgZnVuY3Rpb24oZGF0YSkgewogICAgICAgICAgICB2YXIgZGF0YU9iamVjdCwgcjsKICAgICAgICAgICAgZXZhbChkYXRhKTsKICAgICAgICAgICAgZGF0YU9iamVjdCA9IEdTLmRhdGFDYWNoZVt1aWRdOwogICAgICAgICAgICByID0gX3RoaXMuZG9jdW1lbnRzQnlVaWRbZGF0YU9iamVjdC51aWRdOwogICAgICAgICAgICByLml0ZW1zID0gZGF0YU9iamVjdC5pdGVtczsKICAgICAgICAgICAgcmV0dXJuIHIubG9hZGVkID0gdHJ1ZTsKICAgICAgICAgIH0pOwogICAgICAgIH0KICAgICAgICAvKiBPZmZsaW5lIC0gRmlyZWZveAogICAgICAgIHJlcXVpcmUoWyIuL2RhdGEvI3t1aWR9Lmpzb24uanMiXSwKICAgICAgICAoZGF0YSkgPT4gCiAgICAgICAgICAgIGRhdGFPYmplY3QgPSBHUy5kYXRhQ2FjaGVbdWlkXQogICAgICAgICAgICByID0gQGRvY3VtZW50c0J5VWlkW2RhdGFPYmplY3QudWlkXQogICAgICAgICAgICByLml0ZW1zID0gZGF0YU9iamVjdC5pdGVtcwogICAgICAgICAgICByLmxvYWRlZCA9IHRydWUKICAgICAgICAgICAgCiAgICAgICAgKQogICAgICAgICovCgogICAgICAgIHJlc3VsdCA9IHsKICAgICAgICAgIHVpZDogdWlkLAogICAgICAgICAgbG9hZGVkOiBmYWxzZQogICAgICAgIH07CiAgICAgICAgdGhpcy5kb2N1bWVudHNCeVVpZFt1aWRdID0gcmVzdWx0OwogICAgICAgIHRoaXMuZG9jdW1lbnRzLnB1c2gocmVzdWx0KTsKICAgICAgICB0aGlzLmRvY3VtZW50c0xvYWRlZCA9IGZhbHNlOwogICAgICAgIGlmICh1aWQgPT09ICJTVU1NQVJJRVMiKSB7CiAgICAgICAgICB0aGlzLnN1bW1hcmllcyA9IHJlc3VsdDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgRGF0YU1hbmFnZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaSwgX2ksIF9yZWY7CiAgICAgIGlmICghdGhpcy5kb2N1bWVudHNMb2FkZWQpIHsKICAgICAgICB0aGlzLmRvY3VtZW50c0xvYWRlZCA9IHRydWU7CiAgICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5kb2N1bWVudHMubGVuZ3RoOyAwIDw9IF9yZWYgPyBfaSA8IF9yZWYgOiBfaSA+IF9yZWY7IGkgPSAwIDw9IF9yZWYgPyArK19pIDogLS1faSkgewogICAgICAgICAgaWYgKCF0aGlzLmRvY3VtZW50c1tpXS5sb2FkZWQpIHsKICAgICAgICAgICAgdGhpcy5kb2N1bWVudHNMb2FkZWQgPSBmYWxzZTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBudWxsOwogICAgfTsKCiAgICByZXR1cm4gRGF0YU1hbmFnZXI7CgogIH0pKCk7CgogIHdpbmRvdy5EYXRhTWFuYWdlciA9IG5ldyBEYXRhTWFuYWdlcigpOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"AudioManager","content":"IwojICAgU2NyaXB0OiBBdWRpb01hbmFnZXIKIyAgIENyZWF0ZWQgb246IDIwMTMtMTEtMzAKIwojIAlDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAJQ2xhc3M6IEF1ZGlvTWFuYWdlcgojCiMgICBEZXNjcmlwdGlvbi4uLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgQXVkaW9NYW5hZ2VyCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBAYnVmZmVycyA9IFtdCiAgICAgICAgQGJ1ZmZlcnNCeVBhdGggPSB7fQogICAgICAgIEBtdXNpY0J1ZmZlciA9IG51bGwKICAgICAgICBAYmFja2dyb3VuZFNvdW5kQnVmZmVyID0gbnVsbAogICAgICAgIEBzb3VuZFJlZmVyZW5jZXMgPSB7fQogICAgICAgIEBtdXNpYwogICAgICAgIEBiYWNrZ3JvdW5kU291bmQKICAgIAogICAgbG9hZE11c2ljOiAobmFtZSkgLT4gCiAgICAgICAgbmFtZSA9IGlmIG5hbWU/IHRoZW4gKG5hbWUubmFtZSB8fCBuYW1lKSBlbHNlIG5hbWUKICAgICAgICBpZiBuYW1lIGFuZCBuYW1lLmxlbmd0aCA+IDAKICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEF1ZGlvQnVmZmVyKCJBdWRpby9NdXNpYy8je25hbWV9IikKICAgICAgICAgICAgCiAgICBsb2FkU291bmQ6IChuYW1lKSAtPiAKICAgICAgICBuYW1lID0gaWYgbmFtZT8gdGhlbiBuYW1lLm5hbWUgfHwgbmFtZSBlbHNlIG5hbWUKICAgICAgICBpZiBuYW1lIGFuZCBuYW1lLmxlbmd0aCA+IDAKICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEF1ZGlvQnVmZmVyKCJBdWRpby9Tb3VuZHMvI3tuYW1lfSIpCiAgICBsb2FkQmFja2dyb3VuZFNvdW5kOiAobmFtZSkgLT4gCiAgICAgICAgbmFtZSA9IGlmIG5hbWU/IHRoZW4gKG5hbWUubmFtZSB8fCBuYW1lKSBlbHNlIG5hbWUKICAgICAgICBpZiBuYW1lIGFuZCBuYW1lLmxlbmd0aCA+IDAKICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEF1ZGlvQnVmZmVyKCJBdWRpby9CYWNrZ3JvdW5kU291bmRzLyN7bmFtZX0iKQogICAgICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBpZiBAbXVzaWNCdWZmZXI/IHRoZW4gQG11c2ljQnVmZmVyLnVwZGF0ZSgpCiAgICAgICAgCiAgICBjaGFuZ2VNdXNpYzogKG11c2ljKSAtPgogICAgICAgIGlmIG11c2ljPyBhbmQgbXVzaWMubmFtZT8KICAgICAgICAgICAgaWYgQG11c2ljPyBhbmQgQG11c2ljLm5hbWUgIT0gbXVzaWMubmFtZQogICAgICAgICAgICAgICAgQHBsYXlNdXNpYyhtdXNpYykKICAgICAgICAgICAgZWxzZSBpZiBub3QgQG11c2ljPwogICAgICAgICAgICAgICAgQHBsYXlNdXNpYyhtdXNpYykKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBzdG9wTXVzaWMoKQogICAgICAgICAgICAKICAgICAgICAgIyAgIEBkaXNwb3NlTXVzaWMoKQogICAgICAgICAgICAgICAgCiAgICBjaGFuZ2VCYWNrZ3JvdW5kU291bmQ6IChzb3VuZCkgLT4KICAgICAgICBpZiBzb3VuZD8gYW5kIHNvdW5kLm5hbWU/CiAgICAgICAgICAgIGlmIEBiYWNrZ3JvdW5kU291bmQ/IGFuZCBAYmFja2dyb3VuZFNvdW5kLm5hbWUgIT0gc291bmQubmFtZQogICAgICAgICAgICAgICAgQHBsYXlCYWNrZ3JvdW5kU291bmQoc291bmQpCiAgICAgICAgICAgIGVsc2UgaWYgbm90IEBiYWNrZ3JvdW5kU291bmQ/CiAgICAgICAgICAgICAgICBAcGxheUJhY2tncm91bmRTb3VuZChzb3VuZCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBzdG9wQmFja2dyb3VuZFNvdW5kKCkKICAgICAgICAgICMgIEBkaXNwb3NlQmFja3JvdW5kU291bmQoKQogICAgICAgICAgICAgICAgCiAgICBwbGF5OiAocGF0aCwgdm9sdW1lLCByYXRlLCBmYWRlSW5UaW1lKSAtPgogICAgICAgCiAgICAgICAgYnVmZmVyID0gUmVzb3VyY2VNYW5hZ2VyLmdldEF1ZGlvQnVmZmVyKHBhdGgpCiAgICAgICAgCgogICAgICAgIGlmIGJ1ZmZlci5kZWNvZGVkCiAgICAgICAgICAgIGJ1ZmZlci52b2x1bWUgPSBpZiB2b2x1bWU/IHRoZW4gdm9sdW1lIC8gMTAwIGVsc2UgMS4wCiAgICAgICAgICAgIGJ1ZmZlci5wbGF5YmFja1JhdGUgPSBpZiByYXRlPyB0aGVuIHJhdGUgLyAxMDAgZWxzZSAxLjAKICAgICAgICAgICAgYnVmZmVyLnBsYXkoZmFkZUluVGltZSkKICAgICAgICBlbHNlCiAgICAgICAgICAgYnVmZmVyLm9uRmluaXNoRGVjb2RlID0gKHNvdXJjZSkgPT4gCiAgICAgICAgICAgICAgIHNvdXJjZS52b2x1bWUgPSBpZiB2b2x1bWU/IHRoZW4gdm9sdW1lIC8gMTAwIGVsc2UgMS4wCiAgICAgICAgICAgICAgIHNvdXJjZS5wbGF5YmFja1JhdGUgPSBpZiByYXRlPyB0aGVuIHJhdGUgLyAxMDAgZWxzZSAxLjAKICAgICAgICAgICAgICAgc291cmNlLnBsYXkoZmFkZUluVGltZSkKICAgICAgICAgICBidWZmZXIuZGVjb2RlKCkKICAgICAgICAgICAKICAgICAgICAgICAKICAgICAgICByZXR1cm4gYnVmZmVyCiAgICAgICAgCiAgICAgICAgCiAgICBwbGF5U291bmQ6IChuYW1lLCB2b2x1bWUsIHJhdGUsIG11c2ljRWZmZWN0KSAtPgogICAgICAgIAogICAgICAgIGlmIG5hbWUubmFtZT8KICAgICAgICAgICAgbmFtZSA9IG5hbWUubmFtZQogICAgICAgICAgICB2b2x1bWUgPSBuYW1lLnZvbHVtZQogICAgICAgICAgICByYXRlID0gbmFtZS5wbGF5YmFja1JhdGUKICAgICAgICAgCiAgICAgICAgaWYgbmFtZS5sZW5ndGggPT0gMCB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIGlmIG11c2ljRWZmZWN0CiAgICAgICAgICAgIEBzdG9wTXVzaWMoKQogICAgICAgIAogICAgICAgIGlmIG5vdCBAc291bmRSZWZlcmVuY2VzW25hbWVdPwogICAgICAgICAgICBAc291bmRSZWZlcmVuY2VzW25hbWVdID0gW10KICAgICAgICAKICAgICAgICByZWZlcmVuY2UgPSBudWxsCiAgICAgICAgZm9yIHIgaW4gQHNvdW5kUmVmZXJlbmNlc1tuYW1lXQogICAgICAgICAgICBpZiBub3Qgci5pc1BsYXlpbmcKICAgICAgICAgICAgICAgIHJlZmVyZW5jZSA9IHIKICAgICAgICAgICAgICAgIGlmIG11c2ljRWZmZWN0IHRoZW4gcmVmZXJlbmNlLm9uRW5kID0gPT4gQHJlc3VtZU11c2ljKDQwKQogICAgICAgICAgICAgICAgcmVmZXJlbmNlLnBsYXkoKQogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAgCiAgICAgICAgaWYgbm90IHJlZmVyZW5jZT8KICAgICAgICAgICAgYnVmZmVyID0gUmVzb3VyY2VNYW5hZ2VyLmdldEF1ZGlvQnVmZmVyKCJBdWRpby9Tb3VuZHMvI3tuYW1lfSIpCiAgICAgICAgICAgIGlmIGJ1ZmZlciBhbmQgYnVmZmVyLmxvYWRlZAogICAgICAgICAgICAgICAgaWYgYnVmZmVyLmRlY29kZWQKICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2UgPSBuZXcgR1MuQXVkaW9CdWZmZXJSZWZlcmVuY2UoYnVmZmVyKQogICAgICAgICAgICAgICAgICAgIGlmIG11c2ljRWZmZWN0IHRoZW4gcmVmZXJlbmNlLm9uRW5kID0gPT4gQHJlc3VtZU11c2ljKDQwKQogICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZS5wbGF5KCkKICAgICAgICAgICAgICAgICAgICBAc291bmRSZWZlcmVuY2VzW25hbWVdLnB1c2gocmVmZXJlbmNlKQogICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5uYW1lID0gbmFtZQogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5vbkRlY29kZUZpbmlzaCA9IChzb3VyY2UpID0+CiAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZW5jZSA9IG5ldyBHUy5BdWRpb0J1ZmZlclJlZmVyZW5jZShzb3VyY2UpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIG11c2ljRWZmZWN0IHRoZW4gcmVmZXJlbmNlLm9uRW5kID0gPT4gQHJlc3VtZU11c2ljKDQwKQogICAgICAgICAgICAgICAgICAgICAgICByZWZlcmVuY2UucGxheSgpCiAgICAgICAgICAgICAgICAgICAgICAgIEBzb3VuZFJlZmVyZW5jZXNbc291cmNlLm5hbWVdLnB1c2gocmVmZXJlbmNlKQogICAgICAgICAgICAgICAgICAgIGJ1ZmZlci5kZWNvZGUoKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgcGxheU11c2ljOiAobmFtZSwgdm9sdW1lLCByYXRlLCBmYWRlSW5UaW1lKSAtPgogICAgICAgIGlmIG5hbWU/IGFuZCBuYW1lLm5hbWU/CiAgICAgICAgICAgIGZhZGVJblRpbWUgPSB2b2x1bWUKICAgICAgICAgICAgdm9sdW1lID0gbmFtZS52b2x1bWUKICAgICAgICAgICAgcmF0ZSA9IG5hbWUucGxheWJhY2tSYXRlCiAgICAgICAgICAgIG5hbWUgPSBuYW1lLm5hbWUKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgICAgCiAgICAgICAgdm9sdW1lID0gaWYgdm9sdW1lPyB0aGVuIHZvbHVtZSBlbHNlIDEwMAogICAgICAgIEBkaXNwb3NlTXVzaWMoKQogICAgICAgIAogICAgICAgIGlmIG5hbWU/IGFuZCBuYW1lLmxlbmd0aCA+IDAKICAgICAgICAgICAgQG11c2ljID0gbmFtZTogbmFtZQogICAgICAgICAgICBAbXVzaWNCdWZmZXIgPSBAcGxheSgiQXVkaW8vTXVzaWMvI3tuYW1lfSIsIHZvbHVtZSwgcmF0ZSwgZmFkZUluVGltZSkKICAgICAgICAgICAgQG11c2ljQnVmZmVyLm9uRW5kID0gPT4gQG11c2ljQnVmZmVyLnBsYXkoKQogICAgICAgICAgICAKICAgIAogICAgcmVzdW1lTXVzaWM6IChmYWRlSW5UaW1lKSAtPgogICAgICAgIGlmIEBtdXNpY0J1ZmZlcj8KICAgICAgICAgICAgQG11c2ljQnVmZmVyLnJlc3VtZShmYWRlSW5UaW1lKQogICAgICAgICAgICAKICAgIHBsYXlCYWNrZ3JvdW5kU291bmQ6IChuYW1lLCB2b2x1bWUsIHJhdGUsIGZhZGVJblRpbWUpIC0+CiAgICAgICAgaWYgbmFtZT8gYW5kIG5hbWUubmFtZT8KICAgICAgICAgICAgZmFkZUluVGltZSA9IHZvbHVtZQogICAgICAgICAgICB2b2x1bWUgPSBuYW1lLnZvbHVtZQogICAgICAgICAgICByYXRlID0gbmFtZS5wbGF5YmFja1JhdGUKICAgICAgICAgICAgbmFtZSA9IG5hbWUubmFtZQogICAgICAgICAgICAgIAogICAgICAgIHZvbHVtZSA9IGlmIHZvbHVtZT8gdGhlbiB2b2x1bWUgZWxzZSAxMDAKICAgICAgICBAZGlzcG9zZUJhY2tncm91bmRTb3VuZCgpCiAgICAgICAgCiAgICAgICAgaWYgbmFtZT8gYW5kIG5hbWUubGVuZ3RoID4gMAogICAgICAgICAgICBAYmFja2dyb3VuZFNvdW5kID0gbmFtZTogbmFtZQogICAgICAgICAgICBAYmFja2dyb3VuZFNvdW5kQnVmZmVyID0gQHBsYXkoIkF1ZGlvL0JhY2tncm91bmRTb3VuZHMvI3tuYW1lfSIsIHZvbHVtZSwgcmF0ZSwgZmFkZUluVGltZSkKICAgICAgICAgICAgQGJhY2tncm91bmRTb3VuZEJ1ZmZlci5vbkVuZCA9ID0+IEBiYWNrZ3JvdW5kU291bmRCdWZmZXIucGxheSgpCiAgICAKICAgIHN0b3BNdXNpYzogKGZhZGVPdXRUaW1lKSAtPiAKICAgICAgICBpZiBAbXVzaWNCdWZmZXI/IHRoZW4gQG11c2ljQnVmZmVyLnN0b3AoZmFkZU91dFRpbWUpCiAgICAgICAgQG11c2ljID0gbnVsbAogICAgICAgIAogICAgc3RvcEJhY2tncm91bmRTb3VuZDogLT4gCiAgICAgICAgaWYgQGJhY2tncm91bmRTb3VuZEJ1ZmZlcj8gdGhlbiBAYmFja2dyb3VuZFNvdW5kQnVmZmVyLnN0b3AoKQogICAgICAgIEBiYWNrZ3JvdW5kU291bmQgPSBudWxsCiAgICAKICAgIGRpc3Bvc2VNdXNpYzogLT4KICAgICAgICBAc3RvcE11c2ljKCkKICAgICAgICBpZiBAbXVzaWNCdWZmZXI/IHRoZW4gQG11c2ljQnVmZmVyLmRpc3Bvc2UoKQogICAgZGlzcG9zZUJhY2tncm91bmRTb3VuZDogLT4KICAgICAgICBAc3RvcEJhY2tncm91bmRTb3VuZCgpCiAgICAgICAgaWYgQGJhY2tncm91bmRTb3VuZEJ1ZmZlcj8gdGhlbiBAYmFja2dyb3VuZFNvdW5kQnVmZmVyLmRpc3Bvc2UoKQogICAgICAgIAp3aW5kb3cuQXVkaW9NYW5hZ2VyID0gbmV3IEF1ZGlvTWFuYWdlcigp","compiledContent":""},{"name":"RecordManager","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogUmVjb3JkTWFuYWdlcgojICAgICBDcmVhdGVkIG9uOiAyMDEzLTA1LTE5CiMKIyAJQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgCUNsYXNzOiBSZWNvcmRNYW5hZ2VyCiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CmNsYXNzIFJlY29yZE1hbmFnZXIKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIEBkb2N1bWVudHMgPSBudWxsCiAgICAgICAgQGNvbGxlY3Rpb25Eb2N1bWVudHMgPSBbXQogICAgbG9hZDogLT4KICAgICAgICBAZG9jdW1lbnRzID0gRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnRzQnlUeXBlKCJkYXRhX3JlY29yZCIpCgogICAgcHJlcGFyZTogLT4KICAgICAgICBmb3IgZG9jdW1lbnQgaW4gQGRvY3VtZW50cwogICAgICAgICAgICBpZiBub3QgdGhpc1tkb2N1bWVudC5pdGVtcy5jYXRlZ29yeV0/CiAgICAgICAgICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5XSA9IFtdCiAgICAgICAgICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5ICsgIkNvbGxlY3Rpb24iXSA9IFtdCiAgICAgICAgICAgICAgICBAY29sbGVjdGlvbkRvY3VtZW50cy5wdXNoKHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnkgKyAiQ29sbGVjdGlvbiJdKQogICAgICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5XVtkb2N1bWVudC5pdGVtcy5pZF0gPSBkb2N1bWVudC5pdGVtcy5kYXRhCiAgICAgICAgICAgIHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnkgKyAiQ29sbGVjdGlvbiJdW2RvY3VtZW50Lml0ZW1zLmlkXSA9IGRvY3VtZW50CiAgICAgICAgICAgIAogICAgICAgIEBhY3RvcnMgPSBAaGVyb3MgIyBOYW1pbmcgbWlzdGFrZS4uLgogICAgICAgIEBzeXN0ZW0gPSBAc3lzdGVtWzBdCiAgICAgICAgQHZvY2FidWxhcnkgPSBAdm9jYWJ1bGFyeVswXQogICAgICAKCndpbmRvdy5SZWNvcmRNYW5hZ2VyID0gbmV3IFJlY29yZE1hbmFnZXIoKQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBSZWNvcmRNYW5hZ2VyOwoKICBSZWNvcmRNYW5hZ2VyID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gUmVjb3JkTWFuYWdlcigpIHsKICAgICAgdGhpcy5kb2N1bWVudHMgPSBudWxsOwogICAgICB0aGlzLmNvbGxlY3Rpb25Eb2N1bWVudHMgPSBbXTsKICAgIH0KCiAgICBSZWNvcmRNYW5hZ2VyLnByb3RvdHlwZS5sb2FkID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmRvY3VtZW50cyA9IERhdGFNYW5hZ2VyLmdldERvY3VtZW50c0J5VHlwZSgiZGF0YV9yZWNvcmQiKTsKICAgIH07CgogICAgUmVjb3JkTWFuYWdlci5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgZG9jdW1lbnQsIF9pLCBfbGVuLCBfcmVmOwogICAgICBfcmVmID0gdGhpcy5kb2N1bWVudHM7CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIGRvY3VtZW50ID0gX3JlZltfaV07CiAgICAgICAgaWYgKHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnldID09IG51bGwpIHsKICAgICAgICAgIHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnldID0gW107CiAgICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5ICsgIkNvbGxlY3Rpb24iXSA9IFtdOwogICAgICAgICAgdGhpcy5jb2xsZWN0aW9uRG9jdW1lbnRzLnB1c2godGhpc1tkb2N1bWVudC5pdGVtcy5jYXRlZ29yeSArICJDb2xsZWN0aW9uIl0pOwogICAgICAgIH0KICAgICAgICB0aGlzW2RvY3VtZW50Lml0ZW1zLmNhdGVnb3J5XVtkb2N1bWVudC5pdGVtcy5pZF0gPSBkb2N1bWVudC5pdGVtcy5kYXRhOwogICAgICAgIHRoaXNbZG9jdW1lbnQuaXRlbXMuY2F0ZWdvcnkgKyAiQ29sbGVjdGlvbiJdW2RvY3VtZW50Lml0ZW1zLmlkXSA9IGRvY3VtZW50OwogICAgICB9CiAgICAgIHRoaXMuYWN0b3JzID0gdGhpcy5oZXJvczsKICAgICAgdGhpcy5zeXN0ZW0gPSB0aGlzLnN5c3RlbVswXTsKICAgICAgcmV0dXJuIHRoaXMudm9jYWJ1bGFyeSA9IHRoaXMudm9jYWJ1bGFyeVswXTsKICAgIH07CgogICAgcmV0dXJuIFJlY29yZE1hbmFnZXI7CgogIH0pKCk7CgogIHdpbmRvdy5SZWNvcmRNYW5hZ2VyID0gbmV3IFJlY29yZE1hbmFnZXIoKTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"LanguageManager","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTGFuZ3VhZ2VNYW5hZ2VyCiMgICBDcmVhdGVkIG9uOiAyMDEzLTExLTA5CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogUmVjb3JkTWFuYWdlcgojCiMgICBEZXNjcmlwdGlvbi4uLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQpjbGFzcyBMYW5ndWFnZU1hbmFnZXIKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIEBkZWZhdWx0UHJvZmlsZSA9IG51bGwKICAgICAgICBAcHJvZmlsZSA9IG51bGwKICAgICAgICAKICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgQGxhbmd1YWdlcyA9IFtdCiAgICAgICAgZG9jdW1lbnRzID0gRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnRzQnlUeXBlKCJsYW5ndWFnZV9wcm9maWxlIikKICAgICAgICBmb3IgZG9jdW1lbnQgaW4gZG9jdW1lbnRzCiAgICAgICAgICAgIEBsYW5ndWFnZXMucHVzaCh7IG5hbWU6IGRvY3VtZW50Lml0ZW1zLm5hbWUsIHVpZDogZG9jdW1lbnQudWlkLCBpY29uOiBkb2N1bWVudC5pdGVtcy5pY29uIH0pCiAgICAgICAgICAgIGlmIGRvY3VtZW50LnVpZCA9PSAiMDdEREEwNzE2MTYxRjEwNCIKICAgICAgICAgICAgICAgIEBsYW5ndWFnZSA9IEBsYW5ndWFnZXNbQGxhbmd1YWdlcy5sZW5ndGgtMV0KICAgICAgICAgICAgICAgIEBkZWZhdWx0TGFuZ3VhZ2UgPSBAbGFuZ3VhZ2UKICAgICAgICAKICAgIGxvYWQ6IC0+CiAgICAgICAgQHByb2ZpbGUgPSBEYXRhTWFuYWdlci5nZXREb2N1bWVudChAbGFuZ3VhZ2UudWlkKQogICAgICAgIAogICAgICAgIGlmIEBsYW5ndWFnZS51aWQgIT0gQGRlZmF1bHRMYW5ndWFnZS51aWQKICAgICAgICAgICAgQGRlZmF1bHRQcm9maWxlID0gRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnQoQGRlZmF1bHRMYW5ndWFnZS51aWQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBAZGVmYXVsdFByb2ZpbGUgPSBAcHJvZmlsZQogICAgICAgICAgICAKICAgIGxvYWRCdW5kbGVzOiAtPgogICAgICAgIEBwcm9maWxlLmJ1bmRsZXMgPSBbXQogICAgICAgIEBwcm9maWxlLmJ1bmRsZXNCeVVpZCA9IHt9CiAgICAgICAgCiAgICAgICAgaWYgQGxhbmd1YWdlICE9IEBkZWZhdWx0TGFuZ3VhZ2UKICAgICAgICAgICAgQGRlZmF1bHRQcm9maWxlLmJ1bmRsZXMgPSBbXQogICAgICAgICAgICBAZGVmYXVsdFByb2ZpbGUuYnVuZGxlc0J5VWlkID0ge30KICAgICAgICAKICAgICAgICAgICAgZm9yIGNvbGxlY3Rpb24gaW4gQHByb2ZpbGUuaXRlbXMuZGF0YVJlY29yZENvbGxlY3Rpb25zCiAgICAgICAgICAgICAgICBAcHJvZmlsZS5idW5kbGVzQnlVaWRbY29sbGVjdGlvbl0gPSBEYXRhTWFuYWdlci5nZXREb2N1bWVudChjb2xsZWN0aW9uKQogICAgICAgICAgICAgICAgQHByb2ZpbGUuYnVuZGxlcy5wdXNoKEBwcm9maWxlLmJ1bmRsZXNCeVVpZFtjb2xsZWN0aW9uXSkKICAgICAgICAgICAgZm9yIGNvbGxlY3Rpb25Eb2N1bWVudCBpbiBSZWNvcmRNYW5hZ2VyLmNvbGxlY3Rpb25Eb2N1bWVudHMKICAgICAgICAgICAgICAgIEBkZWZhdWx0UHJvZmlsZS5idW5kbGVzQnlVaWRbY29sbGVjdGlvbkRvY3VtZW50LnVpZF0gPSBjb2xsZWN0aW9uRG9jdW1lbnQKICAgICAgICAgICAgICAgIEBkZWZhdWx0UHJvZmlsZS5idW5kbGVzLnB1c2goY29sbGVjdGlvbkRvY3VtZW50KQogICAgICAgIGVsc2UKICAgICAgICAgICAgZm9yIGNvbGxlY3Rpb25Eb2N1bWVudCBpbiBSZWNvcmRNYW5hZ2VyLmNvbGxlY3Rpb25Eb2N1bWVudHMKICAgICAgICAgICAgICAgIEBwcm9maWxlLmJ1bmRsZXNCeVVpZFtjb2xsZWN0aW9uRG9jdW1lbnQudWlkXSA9IGNvbGxlY3Rpb25Eb2N1bWVudAogICAgICAgICAgICAgICAgQHByb2ZpbGUuYnVuZGxlcy5wdXNoKGNvbGxlY3Rpb25Eb2N1bWVudCkKICAgIAogICAgbG9hZE1hcEJ1bmRsZTogKG1hcFVpZCkgLT4KICAgICAgICBpbmRleCA9IEBkZWZhdWx0UHJvZmlsZS5pdGVtcy5tYXBzLmluZGV4T2YobWFwVWlkKQogICAgICAgIGJ1bmRsZVVpZCA9IEBwcm9maWxlLml0ZW1zLm1hcHNbaW5kZXhdOwogICAgICAgCiAgICAgICAgaWYgaW5kZXggIT0gLTEgYW5kIGJ1bmRsZVVpZD8KICAgICAgICAgICAgQG1hcEJ1bmRsZSA9IERhdGFNYW5hZ2VyLmdldERvY3VtZW50KGJ1bmRsZVVpZCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBtYXBCdW5kbGUgPSBEYXRhTWFuYWdlci5nZXREb2N1bWVudChtYXBVaWQpCiAgICAgICAjIGZvciBtYXAgaW4gQHByb2ZpbGUuaXRlbXMubWFwcwogICAgICAgICAgICAKICAgIHByZXBhcmU6IC0+CiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKEBwcm9maWxlLmJ1bmRsZXNCeVVpZCkKICAgICAgICBidW5kbGUgPSBudWxsCiAgICAgICAgZm9yIGtleSBpbiBrZXlzCiAgICAgICAgICAgIGJ1bmRsZSA9IEBwcm9maWxlLmJ1bmRsZXNCeVVpZFtrZXldCiAgICAgICAgICAgIGRlbGV0ZSBAcHJvZmlsZS5idW5kbGVzQnlVaWRba2V5XQogICAgICAgICAgICBpZiBidW5kbGUuaXRlbXM/IHRoZW4gQHByb2ZpbGUuYnVuZGxlc0J5VWlkW2J1bmRsZS5pdGVtcy5kZWZhdWx0VWlkXSA9IGJ1bmRsZQogICAgICAgICAgICAKICAgIHNlbGVjdExhbmd1YWdlOiAobGFuZ3VhZ2UpIC0+CiAgICAgICAgQGxhbmd1YWdlID0gbGFuZ3VhZ2UKICAgICAgICAKICAgIHN0cmluZzogKGlkKSAtPiAKICAgICAgICByZXN1bHQgPSBudWxsCiAgICAgICAgZm9yIGJ1bmRsZSBpbiBAcHJvZmlsZS5idW5kbGVzCiAgICAgICAgICAgIGlmIGJ1bmRsZS5pdGVtcz8gYW5kIGJ1bmRsZS5pdGVtcy5sb2NhbGl6YWJsZVN0cmluZ3M/CiAgICAgICAgICAgICAgICByZXN1bHQgPSBidW5kbGUuaXRlbXMubG9jYWxpemFibGVTdHJpbmdzW2lkXQogICAgICAgICAgICAgICAgaWYgcmVzdWx0PwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICBpZiBub3QgcmVzdWx0PyBvciByZXN1bHQubGVuZ3RoID09IDAKICAgICAgICAgICAgcmVzdWx0ID0gQHN0cmluZ0Zyb21EZWZhdWx0KGlkKQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBzdHJpbmdGcm9tRGVmYXVsdDogKGlkKSAtPgogICAgICAgIHJlc3VsdCA9IG51bGwKICAgICAgICBmb3IgYnVuZGxlIGluIEBkZWZhdWx0UHJvZmlsZS5idW5kbGVzCiAgICAgICAgICAgIGlmIGJ1bmRsZS5pdGVtcz8gYW5kIGJ1bmRsZS5pdGVtcy5sb2NhbGl6YWJsZVN0cmluZ3M/CiAgICAgICAgICAgICAgICByZXN1bHQgPSBidW5kbGUuaXRlbXMubG9jYWxpemFibGVTdHJpbmdzW2lkXQogICAgICAgICAgICAgICAgaWYgcmVzdWx0PwogICAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICAjaWYgbm90IHJlc3VsdD8gb3IgcmVzdWx0Lmxlbmd0aCA9PSAwCiAgICAgICAgIyAgICByZXN1bHQgPSAiTk9UIEZPVU5EOiAje2lkfSIKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIAogICAgc3RyaW5nRnJvbUJ1bmRsZTogKGlkLCBidW5kbGUpIC0+CiAgICAgICAgcmVzdWx0ID0gbnVsbAogICAgICAgIAogICAgICAgIGlmIGJ1bmRsZS5pdGVtcy5sb2NhbGl6YWJsZVN0cmluZ3M/CiAgICAgICAgICAgIHJlc3VsdCA9IGJ1bmRsZS5pdGVtcy5sb2NhbGl6YWJsZVN0cmluZ3NbaWRdCiAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBzdHJpbmdGcm9tQnVuZGxlV2l0aFVpZDogKGlkLCBidW5kbGVVaWQpIC0+CiAgICAgICAgYnVuZGxlID0gQHByb2ZpbGUuYnVuZGxlc0J5VWlkW2J1bmRsZVVpZF0KICAgICAgICAKICAgICAgICByZXR1cm4gQHN0cmluZ0Zyb21CdW5kbGUoaWQsIGJ1bmRsZSkKIAp3aW5kb3cuTGFuZ3VhZ2VNYW5hZ2VyID0gbmV3IExhbmd1YWdlTWFuYWdlcigpCgp3aW5kb3cubGNzID0gKHZhbHVlKSAtPiByZXR1cm4gaWYgdmFsdWUubGNJZD8gdGhlbiB3aW5kb3cuTGFuZ3VhZ2VNYW5hZ2VyLnN0cmluZyh2YWx1ZS5sY0lkKSB8fCB2YWx1ZS5kZWZhdWx0VGV4dCBlbHNlIHZhbHVlCndpbmRvdy5sY3NtID0gKHZhbHVlKSAtPiByZXR1cm4gaWYgdmFsdWUubGNJZD8gdGhlbiB3aW5kb3cuTGFuZ3VhZ2VNYW5hZ2VyLnN0cmluZ0Zyb21CdW5kbGUodmFsdWUubGNJZCwgd2luZG93Lkxhbmd1YWdlTWFuYWdlci5tYXBCdW5kbGUpIHx8IHZhbHVlLmRlZmF1bHRUZXh0IGVsc2UgdmFsdWUKd2luZG93Lmxjc2QgPSAodmFsdWUsIHVpZCkgLT4gcmV0dXJuIGlmIHZhbHVlLmxjSWQ/IHRoZW4gd2luZG93Lkxhbmd1YWdlTWFuYWdlci5zdHJpbmdGcm9tQnVuZGxlV2l0aFVpZCh2YWx1ZS5sY0lkLCB1aWQpIHx8IHZhbHVlLmRlZmF1bHRUZXh0IGVsc2UgdmFsdWUKd2luZG93Lmxjc2RBY3RvcnMgPSAodmFsdWUpIC0+IHJldHVybiBsY3NkKHZhbHVlLCBSZWNvcmRNYW5hZ2VyLmFjdG9yc0NvbGxlY3Rpb24udWlkKQp3aW5kb3cubGNzZEVuZW1pZXMgPSAodmFsdWUpIC0+IHJldHVybiBsY3NkKHZhbHVlLCBSZWNvcmRNYW5hZ2VyLmVuZW1pZXNDb2xsZWN0aW9uLnVpZCkKd2luZG93Lmxjc2RJdGVtcyA9ICh2YWx1ZSkgLT4gcmV0dXJuIGxjc2QodmFsdWUsIFJlY29yZE1hbmFnZXIuaXRlbXNDb2xsZWN0aW9uLnVpZCkKd2luZG93Lmxjc2RXZWFwb25zID0gKHZhbHVlKSAtPiByZXR1cm4gbGNzZCh2YWx1ZSwgUmVjb3JkTWFuYWdlci53ZWFwb25zQ29sbGVjdGlvbi51aWQpCndpbmRvdy5sY3NkQXJtb3JzID0gKHZhbHVlKSAtPiByZXR1cm4gbGNzZCh2YWx1ZSwgUmVjb3JkTWFuYWdlci5hcm1vcnNDb2xsZWN0aW9uLnVpZCkKd2luZG93Lmxjc2RTdGF0ZXMgPSAodmFsdWUpIC0+IHJldHVybiBsY3NkKHZhbHVlLCBSZWNvcmRNYW5hZ2VyLnN0YXRlc0NvbGxlY3Rpb24udWlkKQp3aW5kb3cubGNzZFNraWxscyA9ICh2YWx1ZSkgLT4gcmV0dXJuIGxjc2QodmFsdWUsIFJlY29yZE1hbmFnZXIuc2tpbGxzQ29sbGVjdGlvbi51aWQpCndpbmRvdy5sY3NkU2tpbGxUeXBlcyA9ICh2YWx1ZSkgLT4gcmV0dXJuIGxjc2QodmFsdWUsIFJlY29yZE1hbmFnZXIuc2tpbGxUeXBlc0NvbGxlY3Rpb24udWlkKQp3aW5kb3cubGNzZFdlYXBvblR5cGVzID0gKHZhbHVlKSAtPiByZXR1cm4gbGNzZCh2YWx1ZSwgUmVjb3JkTWFuYWdlci53ZWFwb25UeXBlc0NvbGxlY3Rpb24udWlkKQp3aW5kb3cubGNzZENsYXNzZXMgPSAodmFsdWUpIC0+IHJldHVybiBsY3NkKHZhbHVlLCBSZWNvcmRNYW5hZ2VyLmNsYXNzZXNDb2xsZWN0aW9uLnVpZCkKd2luZG93Lmxjc2RUcm9vcHMgPSAodmFsdWUpIC0+IHJldHVybiBsY3NkKHZhbHVlLCBSZWNvcmRNYW5hZ2VyLnRyb29wc0NvbGxlY3Rpb24udWlkKQp3aW5kb3cubGNzZFRpbGVzZXRzID0gKHZhbHVlKSAtPiByZXR1cm4gbGNzZCh2YWx1ZSwgUmVjb3JkTWFuYWdlci50aWxlc2V0c0NvbGxlY3Rpb24udWlkKQp3aW5kb3cubGNzZEFuaW1hdGlvbnMgPSAodmFsdWUpIC0+IHJldHVybiBsY3NkKHZhbHVlLCBSZWNvcmRNYW5hZ2VyLmFuaW1hdGlvbnNDb2xsZWN0aW9uLnVpZCkKd2luZG93Lmxjc2RTaW1wbGVBbmltYXRpb25zID0gKHZhbHVlKSAtPiByZXR1cm4gbGNzZCh2YWx1ZSwgUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zQ29sbGVjdGlvbi51aWQpCndpbmRvdy5sY3NkU3lzdGVtID0gKHZhbHVlKSAtPiByZXR1cm4gbGNzZCh2YWx1ZSwgUmVjb3JkTWFuYWdlci5zeXN0ZW1Db2xsZWN0aW9uLnVpZCkKd2luZG93Lmxjc2RFdmVudFRlbXBsYXRlcyA9ICh2YWx1ZSkgLT4gcmV0dXJuIGxjc2QodmFsdWUsIFJlY29yZE1hbmFnZXIuZXZlbnRUZW1wbGF0ZXNDb2xsZWN0aW9uLnVpZCkKCiAgICAgICAgCg==","compiledContent":""},{"name":"Colors","content":"# ===================================================================\n#\n#   Script: Colors\n#   Created on: 2013-09-19\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n# \tClass: Colors\n#\n#   Common used colors\n#\n# ===================================================================\n\nclass Colors\n    @WHITE = new Color(255, 255, 255)\n    @BLACK = new Color(0, 0, 0)\n    @DARK_GREY = new Color(160, 160, 160)\n    @GREEN = new Color(0, 255, 0)\n    @RED = new Color(255, 0, 0)\n    @BLUE = new Color(0, 0, 255)\n    @YELLOW = new Color(255, 255, 0)\n    @ORANGE = new Color(255, 200, 0)\n    @TEXT_NORMAL = new Color(255, 255, 255)\n    @EXP_GAUGE1 = new Color(0, 120, 130)\n    @EXP_GAUGE2 = new Color(0, 160, 170)\n    @LP_GAUGE1 = new Color(255, 0, 0)\n    @LP_GAUGE2 = new Color(255, 150, 0)\n    @MP_GAUGE1 = new Color(0, 0, 255)\n    @MP_GAUGE2 = new Color(0, 150, 255)\n    @LP_DAMAGE = @RED\n    @MP_DAMAGE = new Color(0, 150, 255)\n    @BATTLER_SELECTION = new Color(255, 0, 0, 60)\n    @ENABLED_ITEM = new Color(255, 255, 255)\n    @DISABLED_ITEM = new Color(200, 200, 200)\n    @RAIN_PARTICLE = new Color(245, 245, 255)\n    @STORM_PARTICLE = @RAIN_PARTICLE\n    @SNOW_PARTICLE_FACE = new Color(255, 255, 255)\n    @SNOW_PARTICLE_EDGE = new Color(255, 255, 255, 0.5)\n    \n    \nwindow.Colors = Colors","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBDb2xvcnM7CgogIENvbG9ycyA9IChmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIENvbG9ycygpIHt9CgogICAgQ29sb3JzLldISVRFID0gbmV3IENvbG9yKDI1NSwgMjU1LCAyNTUpOwoKICAgIENvbG9ycy5CTEFDSyA9IG5ldyBDb2xvcigwLCAwLCAwKTsKCiAgICBDb2xvcnMuREFSS19HUkVZID0gbmV3IENvbG9yKDE2MCwgMTYwLCAxNjApOwoKICAgIENvbG9ycy5HUkVFTiA9IG5ldyBDb2xvcigwLCAyNTUsIDApOwoKICAgIENvbG9ycy5SRUQgPSBuZXcgQ29sb3IoMjU1LCAwLCAwKTsKCiAgICBDb2xvcnMuQkxVRSA9IG5ldyBDb2xvcigwLCAwLCAyNTUpOwoKICAgIENvbG9ycy5ZRUxMT1cgPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDApOwoKICAgIENvbG9ycy5PUkFOR0UgPSBuZXcgQ29sb3IoMjU1LCAyMDAsIDApOwoKICAgIENvbG9ycy5URVhUX05PUk1BTCA9IG5ldyBDb2xvcigyNTUsIDI1NSwgMjU1KTsKCiAgICBDb2xvcnMuRVhQX0dBVUdFMSA9IG5ldyBDb2xvcigwLCAxMjAsIDEzMCk7CgogICAgQ29sb3JzLkVYUF9HQVVHRTIgPSBuZXcgQ29sb3IoMCwgMTYwLCAxNzApOwoKICAgIENvbG9ycy5MUF9HQVVHRTEgPSBuZXcgQ29sb3IoMjU1LCAwLCAwKTsKCiAgICBDb2xvcnMuTFBfR0FVR0UyID0gbmV3IENvbG9yKDI1NSwgMTUwLCAwKTsKCiAgICBDb2xvcnMuTVBfR0FVR0UxID0gbmV3IENvbG9yKDAsIDAsIDI1NSk7CgogICAgQ29sb3JzLk1QX0dBVUdFMiA9IG5ldyBDb2xvcigwLCAxNTAsIDI1NSk7CgogICAgQ29sb3JzLkxQX0RBTUFHRSA9IENvbG9ycy5SRUQ7CgogICAgQ29sb3JzLk1QX0RBTUFHRSA9IG5ldyBDb2xvcigwLCAxNTAsIDI1NSk7CgogICAgQ29sb3JzLkJBVFRMRVJfU0VMRUNUSU9OID0gbmV3IENvbG9yKDI1NSwgMCwgMCwgNjApOwoKICAgIENvbG9ycy5FTkFCTEVEX0lURU0gPSBuZXcgQ29sb3IoMjU1LCAyNTUsIDI1NSk7CgogICAgQ29sb3JzLkRJU0FCTEVEX0lURU0gPSBuZXcgQ29sb3IoMjAwLCAyMDAsIDIwMCk7CgogICAgQ29sb3JzLlJBSU5fUEFSVElDTEUgPSBuZXcgQ29sb3IoMjQ1LCAyNDUsIDI1NSk7CgogICAgQ29sb3JzLlNUT1JNX1BBUlRJQ0xFID0gQ29sb3JzLlJBSU5fUEFSVElDTEU7CgogICAgQ29sb3JzLlNOT1dfUEFSVElDTEVfRkFDRSA9IG5ldyBDb2xvcigyNTUsIDI1NSwgMjU1KTsKCiAgICBDb2xvcnMuU05PV19QQVJUSUNMRV9FREdFID0gbmV3IENvbG9yKDI1NSwgMjU1LCAyNTUsIDAuNSk7CgogICAgcmV0dXJuIENvbG9yczsKCiAgfSkoKTsKCiAgd2luZG93LkNvbG9ycyA9IENvbG9yczsKCn0pLmNhbGwodGhpcyk7Cg==","decoded":true},{"name":"Fonts","content":"# ===================================================================\n#\n#   Script: Fonts\n#   Created on: 2013-10-06\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n#   Class: Fonts\n#\n#   Common used fonts\n#\n# ===================================================================\n\nclass Fonts\n    @DAMAGE = new Font(\"Verdana\", 12)\n    @TEXT = new Font(\"Verdana\", 11)\n    \n    @initialize: ->\n        size = if Graphics.width == 320 then 8 else 16\n        nameFont = RecordManager.system.nameFont\n        uiFont = RecordManager.system.uiFont\n        \n        @NAME = new Font(nameFont.name, size)\n        \n        #@NAME = ResourceManager.getFont(\"output_gsf\", 8) #new Font(nameFont.name, size)\n        @ACTION = @NAME #ResourceManager.getFont(\"output.gsf\", 8) #new Font(uiFont.name, size)\n        \n        @ACTION.border = uiFont.decoration.type == 2\n        @ACTION.shadow = uiFont.decoration.type == 1\n        @ACTION.color = new Color(uiFont.color)\n        @ACTION.borderColor = new Color(uiFont.decoration.color)\n        \n        @NAME.border = nameFont.decoration.type == 2\n        @NAME.shadow = nameFont.decoration.type == 1\n        @NAME.color = new Color(nameFont.color)\n        @NAME.borderColor = new Color(nameFont.decoration.color)\n        \n        @GAUGE = @ACTION\n        @MEMBER_NAME = @NAME\n        @DAMAGE = new Font(@ACTION)\n        @DAMAGE.border = yes\n        @TEXT = @ACTION # @DAMAGE #@actionFont\n    \nwindow.Fonts = Fonts","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBGb250czsKCiAgRm9udHMgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBGb250cygpIHt9CgogICAgRm9udHMuREFNQUdFID0gbmV3IEZvbnQoIlZlcmRhbmEiLCAxMik7CgogICAgRm9udHMuVEVYVCA9IG5ldyBGb250KCJWZXJkYW5hIiwgMTEpOwoKICAgIEZvbnRzLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIG5hbWVGb250LCBzaXplLCB1aUZvbnQ7CiAgICAgIHNpemUgPSBHcmFwaGljcy53aWR0aCA9PT0gMzIwID8gOCA6IDE2OwogICAgICBuYW1lRm9udCA9IFJlY29yZE1hbmFnZXIuc3lzdGVtLm5hbWVGb250OwogICAgICB1aUZvbnQgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS51aUZvbnQ7CiAgICAgIHRoaXMuTkFNRSA9IG5ldyBGb250KG5hbWVGb250Lm5hbWUsIHNpemUpOwogICAgICB0aGlzLkFDVElPTiA9IHRoaXMuTkFNRTsKICAgICAgdGhpcy5BQ1RJT04uYm9yZGVyID0gdWlGb250LmRlY29yYXRpb24udHlwZSA9PT0gMjsKICAgICAgdGhpcy5BQ1RJT04uc2hhZG93ID0gdWlGb250LmRlY29yYXRpb24udHlwZSA9PT0gMTsKICAgICAgdGhpcy5BQ1RJT04uY29sb3IgPSBuZXcgQ29sb3IodWlGb250LmNvbG9yKTsKICAgICAgdGhpcy5BQ1RJT04uYm9yZGVyQ29sb3IgPSBuZXcgQ29sb3IodWlGb250LmRlY29yYXRpb24uY29sb3IpOwogICAgICB0aGlzLk5BTUUuYm9yZGVyID0gbmFtZUZvbnQuZGVjb3JhdGlvbi50eXBlID09PSAyOwogICAgICB0aGlzLk5BTUUuc2hhZG93ID0gbmFtZUZvbnQuZGVjb3JhdGlvbi50eXBlID09PSAxOwogICAgICB0aGlzLk5BTUUuY29sb3IgPSBuZXcgQ29sb3IobmFtZUZvbnQuY29sb3IpOwogICAgICB0aGlzLk5BTUUuYm9yZGVyQ29sb3IgPSBuZXcgQ29sb3IobmFtZUZvbnQuZGVjb3JhdGlvbi5jb2xvcik7CiAgICAgIHRoaXMuR0FVR0UgPSB0aGlzLkFDVElPTjsKICAgICAgdGhpcy5NRU1CRVJfTkFNRSA9IHRoaXMuTkFNRTsKICAgICAgdGhpcy5EQU1BR0UgPSBuZXcgRm9udCh0aGlzLkFDVElPTik7CiAgICAgIHRoaXMuREFNQUdFLmJvcmRlciA9IHRydWU7CiAgICAgIHJldHVybiB0aGlzLlRFWFQgPSB0aGlzLkFDVElPTjsKICAgIH07CgogICAgcmV0dXJuIEZvbnRzOwoKICB9KSgpOwoKICB3aW5kb3cuRm9udHMgPSBGb250czsKCn0pLmNhbGwodGhpcyk7Cg==","decoded":true},{"name":"Logic_VariableStore","content":"","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19WYXJpYWJsZVN0b3JlOwoKICBMb2dpY19WYXJpYWJsZVN0b3JlID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gTG9naWNfVmFyaWFibGVTdG9yZSgpIHsKICAgICAgdGhpcy5udW1iZXJzID0gbmV3IEFycmF5KDUwMDApOwogICAgICB0aGlzLmJvb2xlYW5zID0gbmV3IEFycmF5KDUwMDApOwogICAgICB0aGlzLnN0cmluZ3MgPSBuZXcgQXJyYXkoNTAwMCk7CiAgICAgIHRoaXMubG9jYWxOdW1iZXJzID0ge307CiAgICAgIHRoaXMubG9jYWxTdHJpbmdzID0ge307CiAgICAgIHRoaXMubG9jYWxCb29sZWFucyA9IHt9OwogICAgICB0aGlzLnRlbXBOdW1iZXJzID0gbnVsbDsKICAgICAgdGhpcy50ZW1wU3RyaW5ncyA9IG51bGw7CiAgICAgIHRoaXMudGVtcEJvb2xlYW5zID0gbnVsbDsKICAgIH0KCiAgICBMb2dpY19WYXJpYWJsZVN0b3JlLnByb3RvdHlwZS5zZXR1cCA9IGZ1bmN0aW9uKG1hcCkgewogICAgICB0aGlzLm1hcCA9IG1hcDsKICAgICAgdGhpcy5zZXR1cEV2ZW50VmFyaWFibGVzKCJsb2NhbE51bWJlcnMiLCAwKTsKICAgICAgdGhpcy5zZXR1cEV2ZW50VmFyaWFibGVzKCJsb2NhbFN0cmluZ3MiLCAiIik7CiAgICAgIHRoaXMuc2V0dXBFdmVudFZhcmlhYmxlcygibG9jYWxCb29sZWFucyIsIGZhbHNlKTsKICAgICAgdGhpcy5zZXR1cENvbW1vbkV2ZW50VmFyaWFibGVzKCJsb2NhbE51bWJlcnMiLCAwKTsKICAgICAgdGhpcy5zZXR1cENvbW1vbkV2ZW50VmFyaWFibGVzKCJsb2NhbFN0cmluZ3MiLCAiIik7CiAgICAgIHJldHVybiB0aGlzLnNldHVwQ29tbW9uRXZlbnRWYXJpYWJsZXMoImxvY2FsQm9vbGVhbnMiLCBmYWxzZSk7CiAgICB9OwoKICAgIExvZ2ljX1ZhcmlhYmxlU3RvcmUucHJvdG90eXBlLnNldHVwRXZlbnRWYXJpYWJsZXMgPSBmdW5jdGlvbihwcm9wZXJ0eSwgZGVmYXVsdFZhbHVlKSB7CiAgICAgIHZhciBldmVudCwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICBpZiAodGhpc1twcm9wZXJ0eV1bdGhpcy5tYXAuaWRdID09IG51bGwpIHsKICAgICAgICB0aGlzW3Byb3BlcnR5XVt0aGlzLm1hcC5pZF0gPSBbXTsKICAgICAgfQogICAgICBfcmVmID0gdGhpcy5tYXAuZXZlbnRzOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICBldmVudCA9IF9yZWZbX2ldOwogICAgICAgIGlmICh0aGlzW3Byb3BlcnR5XVt0aGlzLm1hcC5pZF1bZXZlbnQuaWRdID09IG51bGwpIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godGhpc1twcm9wZXJ0eV1bdGhpcy5tYXAuaWRdW2V2ZW50LmlkXSA9IFtkZWZhdWx0VmFsdWVdKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3Jlc3VsdHMucHVzaCh2b2lkIDApOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIExvZ2ljX1ZhcmlhYmxlU3RvcmUucHJvdG90eXBlLnNldHVwQ29tbW9uRXZlbnRWYXJpYWJsZXMgPSBmdW5jdGlvbihwcm9wZXJ0eSwgZGVmYXVsdFZhbHVlKSB7CiAgICAgIHZhciBldmVudCwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICBpZiAodGhpc1twcm9wZXJ0eV1bJ0MtRVZFTlRTJ10gPT0gbnVsbCkgewogICAgICAgIHRoaXNbcHJvcGVydHldWydDLUVWRU5UUyddID0gW107CiAgICAgIH0KICAgICAgX3JlZiA9IEdhbWVNYW5hZ2VyLmNvbW1vbkV2ZW50czsKICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgZXZlbnQgPSBfcmVmW19pXTsKICAgICAgICBpZiAodGhpc1twcm9wZXJ0eV1bJ0MtRVZFTlRTJ11bZXZlbnQuaWRdID09IG51bGwpIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godGhpc1twcm9wZXJ0eV1bJ0MtRVZFTlRTJ11bZXZlbnQuaWRdID0gW2RlZmF1bHRWYWx1ZV0pOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgTG9naWNfVmFyaWFibGVTdG9yZS5wcm90b3R5cGUuc2V0TnVtYmVyVmFsdWVBdEluZGV4ID0gZnVuY3Rpb24oc2NvcGUsIGluZGV4LCB2YWx1ZSkgewogICAgICBpZiAoc2NvcGUgPT09IDEpIHsKICAgICAgICByZXR1cm4gdGhpcy5udW1iZXJzW2luZGV4XSA9IHZhbHVlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnRlbXBOdW1iZXJzICE9IG51bGwpIHsKICAgICAgICAgIHJldHVybiB0aGlzLnRlbXBOdW1iZXJzW2luZGV4XSA9IHZhbHVlOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbE51bWJlcnNbdGhpcy5tYXAuaWRdW3RoaXMubWFwLmN1cnJlbnRFdmVudC5pZF1baW5kZXhdID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX1ZhcmlhYmxlU3RvcmUucHJvdG90eXBlLnNldE51bWJlclZhbHVlVG8gPSBmdW5jdGlvbih2YXJpYWJsZSwgdmFsdWUsIGV2ZW50SWQsIG1hcElkKSB7CiAgICAgIHZhciBldmVudHMsIG51bWJlcnM7CiAgICAgIGlmICh2YXJpYWJsZS5zY29wZSA9PT0gMSkgewogICAgICAgIHJldHVybiB0aGlzLm51bWJlcnNbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHRoaXMudGVtcE51bWJlcnMgIT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIHRoaXMudGVtcE51bWJlcnNbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGV2ZW50cyA9IHRoaXMubG9jYWxOdW1iZXJzW21hcElkIHx8ICh0aGlzLm1hcC5jdXJyZW50RXZlbnQucGFyYW1ldGVycyAhPSBudWxsID8gIkMtRVZFTlRTIiA6IHRoaXMubWFwLmlkKV07CiAgICAgICAgICBudW1iZXJzID0gZXZlbnRzW2V2ZW50SWQgfHwgdGhpcy5tYXAuY3VycmVudEV2ZW50LmlkXTsKICAgICAgICAgIGlmIChudW1iZXJzID09IG51bGwpIHsKICAgICAgICAgICAgbnVtYmVycyA9IFtdOwogICAgICAgICAgICBldmVudHNbZXZlbnRJZCB8fCB0aGlzLm1hcC5jdXJyZW50RXZlbnQuaWRdID0gbnVtYmVyczsKICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBudW1iZXJzW3ZhcmlhYmxlLmluZGV4XSA9IHZhbHVlOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBMb2dpY19WYXJpYWJsZVN0b3JlLnByb3RvdHlwZS5zZXRCb29sZWFuVmFsdWVUbyA9IGZ1bmN0aW9uKHZhcmlhYmxlLCB2YWx1ZSwgZXZlbnRJZCwgbWFwSWQpIHsKICAgICAgdmFyIGJvb2xlYW5zLCBldmVudHM7CiAgICAgIGlmICh2YXJpYWJsZS5zY29wZSA9PT0gMSkgewogICAgICAgIHJldHVybiB0aGlzLmJvb2xlYW5zW3ZhcmlhYmxlLmluZGV4XSA9IHZhbHVlOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnRlbXBCb29sZWFucyAhPSBudWxsKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy50ZW1wQm9vbGVhbnNbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGV2ZW50cyA9IHRoaXMubG9jYWxCb29sZWFuc1ttYXBJZCB8fCAodGhpcy5tYXAuY3VycmVudEV2ZW50LnBhcmFtZXRlcnMgIT0gbnVsbCA/ICJDLUVWRU5UUyIgOiB0aGlzLm1hcC5pZCldOwogICAgICAgICAgYm9vbGVhbnMgPSBldmVudHNbZXZlbnRJZCB8fCB0aGlzLm1hcC5jdXJyZW50RXZlbnQuaWRdOwogICAgICAgICAgaWYgKCFib29sZWFucykgewogICAgICAgICAgICBib29sZWFucyA9IFtdOwogICAgICAgICAgICBldmVudHNbZXZlbnRJZCB8fCB0aGlzLm1hcC5jdXJyZW50RXZlbnQuaWRdID0gYm9vbGVhbnM7CiAgICAgICAgICB9CiAgICAgICAgICByZXR1cm4gYm9vbGVhbnNbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX1ZhcmlhYmxlU3RvcmUucHJvdG90eXBlLnNldFN0cmluZ1ZhbHVlVG8gPSBmdW5jdGlvbih2YXJpYWJsZSwgdmFsdWUsIGV2ZW50SWQsIG1hcElkKSB7CiAgICAgIHZhciBldmVudHMsIHN0cmluZ3M7CiAgICAgIGlmICh2YXJpYWJsZS5zY29wZSA9PT0gMSkgewogICAgICAgIHJldHVybiB0aGlzLnN0cmluZ3NbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgaWYgKHRoaXMudGVtcFN0cmluZ3MgIT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIHRoaXMudGVtcFN0cmluZ3NbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGV2ZW50cyA9IHRoaXMubG9jYWxTdHJpbmdzW21hcElkIHx8ICh0aGlzLm1hcC5jdXJyZW50RXZlbnQucGFyYW1ldGVycyAhPSBudWxsID8gIkMtRVZFTlRTIiA6IHRoaXMubWFwLmlkKV07CiAgICAgICAgICBzdHJpbmdzID0gZXZlbnRzW2V2ZW50SWQgfHwgdGhpcy5tYXAuY3VycmVudEV2ZW50LmlkXTsKICAgICAgICAgIGlmICghc3RyaW5ncykgewogICAgICAgICAgICBzdHJpbmdzID0gW107CiAgICAgICAgICAgIGV2ZW50c1tldmVudElkIHx8IHRoaXMubWFwLmN1cnJlbnRFdmVudC5pZF0gPSBzdHJpbmdzOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIHN0cmluZ3NbdmFyaWFibGUuaW5kZXhdID0gdmFsdWU7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX1ZhcmlhYmxlU3RvcmUucHJvdG90eXBlLm51bWJlclZhbHVlQXRJbmRleCA9IGZ1bmN0aW9uKHNjb3BlLCBpbmRleCkgewogICAgICB2YXIgcmVzdWx0OwogICAgICByZXN1bHQgPSAwOwogICAgICBpZiAoc2NvcGUgPT09IDEpIHsKICAgICAgICByZXN1bHQgPSB0aGlzLm51bWJlcnNbaW5kZXhdOwogICAgICB9IGVsc2UgewogICAgICAgIGlmICh0aGlzLnRlbXBOdW1iZXJzICE9IG51bGwpIHsKICAgICAgICAgIHJlc3VsdCA9IHRoaXMudGVtcE51bWJlcnNbaW5kZXhdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXN1bHQgPSB0aGlzLmxvY2FsTnVtYmVyc1t0aGlzLm1hcC5pZF1bdGhpcy5tYXAuY3VycmVudEV2ZW50LmlkXVtpbmRleF07CiAgICAgICAgfQogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwoKICAgIExvZ2ljX1ZhcmlhYmxlU3RvcmUucHJvdG90eXBlLm51bWJlclZhbHVlT2YgPSBmdW5jdGlvbihvYmplY3QpIHsKICAgICAgdmFyIGV2ZW50cywgbnVtYmVycywgcmVzdWx0OwogICAgICByZXN1bHQgPSAwOwogICAgICBpZiAoKG9iamVjdCAhPSBudWxsKSAmJiAob2JqZWN0LmluZGV4ICE9IG51bGwpKSB7CiAgICAgICAgaWYgKG9iamVjdC5zY29wZSA9PT0gMSkgewogICAgICAgICAgcmVzdWx0ID0gdGhpcy5udW1iZXJzW29iamVjdC5pbmRleF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmICh0aGlzLnRlbXBOdW1iZXJzICE9IG51bGwpIHsKICAgICAgICAgICAgcmVzdWx0ID0gdGhpcy50ZW1wTnVtYmVyc1tvYmplY3QuaW5kZXhdOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgZXZlbnRzID0gdGhpcy5sb2NhbE51bWJlcnNbdGhpcy5tYXAuY3VycmVudEV2ZW50LnBhcmFtZXRlcnMgIT0gbnVsbCA/ICJDLUVWRU5UUyIgOiB0aGlzLm1hcC5pZF07CiAgICAgICAgICAgIG51bWJlcnMgPSBldmVudHNbdGhpcy5tYXAuY3VycmVudEV2ZW50LmlkXTsKICAgICAgICAgICAgaWYgKG51bWJlcnMgIT0gbnVsbCkgewogICAgICAgICAgICAgIHJlc3VsdCA9IGV2ZW50c1t0aGlzLm1hcC5jdXJyZW50RXZlbnQuaWRdW29iamVjdC5pbmRleF07CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0ID0gb2JqZWN0OwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQgfHwgMDsKICAgIH07CgogICAgTG9naWNfVmFyaWFibGVTdG9yZS5wcm90b3R5cGUuc3RyaW5nVmFsdWVPZiA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICB2YXIgcmVzdWx0OwogICAgICByZXN1bHQgPSAiIjsKICAgICAgaWYgKChvYmplY3QgIT0gbnVsbCkgJiYgKG9iamVjdC5pbmRleCAhPSBudWxsKSkgewogICAgICAgIGlmIChvYmplY3Quc2NvcGUgPT09IDEpIHsKICAgICAgICAgIHJlc3VsdCA9IHRoaXMuc3RyaW5nc1tvYmplY3QuaW5kZXhdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBpZiAodGhpcy50ZW1wU3RyaW5ncyAhPSBudWxsKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudGVtcFN0cmluZ3Nbb2JqZWN0LmluZGV4XTsKICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMubG9jYWxTdHJpbmdzW3RoaXMubWFwLmlkXVt0aGlzLm1hcC5jdXJyZW50RXZlbnQuaWRdW29iamVjdC5pbmRleF07CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHJlc3VsdCA9IG9iamVjdDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0IHx8ICIiOwogICAgfTsKCiAgICBMb2dpY19WYXJpYWJsZVN0b3JlLnByb3RvdHlwZS5ib29sZWFuVmFsdWVPZiA9IGZ1bmN0aW9uKG9iamVjdCkgewogICAgICB2YXIgYm9vbGVhbnMsIHJlc3VsdDsKICAgICAgcmVzdWx0ID0gZmFsc2U7CiAgICAgIGlmICgob2JqZWN0ICE9IG51bGwpICYmIChvYmplY3QuaW5kZXggIT0gbnVsbCkpIHsKICAgICAgICBpZiAob2JqZWN0LnNjb3BlID09PSAxKSB7CiAgICAgICAgICByZXN1bHQgPSB0aGlzLmJvb2xlYW5zW29iamVjdC5pbmRleF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIGlmICh0aGlzLnRlbXBCb29sZWFucyAhPSBudWxsKSB7CiAgICAgICAgICAgIHJlc3VsdCA9IHRoaXMudGVtcEJvb2xlYW5zW29iamVjdC5pbmRleF07CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBib29sZWFucyA9IHRoaXMubG9jYWxCb29sZWFuc1t0aGlzLm1hcC5pZF1bdGhpcy5tYXAuY3VycmVudEV2ZW50LmlkXTsKICAgICAgICAgICAgaWYgKCFib29sZWFucykgewogICAgICAgICAgICAgIGJvb2xlYW5zID0gW107CiAgICAgICAgICAgICAgdGhpcy5sb2NhbEJvb2xlYW5zW3RoaXMubWFwLmlkXVt0aGlzLm1hcC5jdXJyZW50RXZlbnQuaWRdID0gYm9vbGVhbnM7CiAgICAgICAgICAgIH0KICAgICAgICAgICAgcmVzdWx0ID0gYm9vbGVhbnNbb2JqZWN0LmluZGV4XTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0gZWxzZSB7CiAgICAgICAgcmVzdWx0ID0gb2JqZWN0OwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwoKICAgIHJldHVybiBMb2dpY19WYXJpYWJsZVN0b3JlOwoKICB9KSgpOwoKICB3aW5kb3cuTG9naWNfVmFyaWFibGVTdG9yZSA9IExvZ2ljX1ZhcmlhYmxlU3RvcmU7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Logic_Screen","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfU2NyZWVuCiMgICBDcmVhdGVkIG9uOiAyMDEzLTEyLTAxCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IExvZ2ljX1NjcmVlbgojCiMgICBBIGNsYXNzIGZvciB0aGUgc2NyZWVuIHRvIGhhbmRsZSBzaGFraW5nLCB0aW50aW5nLCBldGMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBMb2dpY19TY3JlZW4KICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIEBzaGFrZVBvd2VyID0gMAogICAgICAgIEBzaGFrZVNwZWVkID0gMQogICAgICAgIEBzaGFrZUR1cmF0aW9uID0gLTEKICAgICAgICBAb3ggPSAwCiAgICAgICAgQG95ID0gMAogICAgICAgIEB4ID0gMAogICAgICAgIEB5ID0gMAogICAgICAgIEB0b25lID0gbmV3IFRvbmUoMCwgMCwgMCwgMCkKICAgICAgICBAdGludER1cmF0aW9uID0gMAogICAgICAgIEB0aW50VG9uZSA9IG5ldyBUb25lKDAsIDAsIDAsIDApCiAgICAgICAgQHRpbnRDb3VudGVyID0gMAogICAgICAgIAogICAgc3RhcnRTaGFrZTogKHBvd2VyLCBzcGVlZCwgZHVyYXRpb24pIC0+CiAgICAgICAgQHNoYWtlUmFuZ2UgPSAwCiAgICAgICAgQHNoYWtlUG93ZXIgPSBwb3dlciAqIDIKICAgICAgICBAc2hha2VTcGVlZCA9IHNwZWVkCiAgICAgICAgQHNoYWtlRHVyYXRpb24gPSBkdXJhdGlvbgogICAgc3RvcFNoYWtlOiAtPgogICAgICAgIEBzaGFrZVBvd2VyID0gMAogICAgICAgIEBzaGFrZVJhbmdlID0gMAogICAgICAgIAogICAgdGludDogKHRvbmUsIGR1cmF0aW9uKSAtPgogICAgICAgIEB0aW50VG9uZSA9IHRvbmUKICAgICAgICBAdGludER1cmF0aW9uID0gZHVyYXRpb24KICAgICAgICBAdGludENvdW50ZXIgPSBkdXJhdGlvbgogICAgICAgIGlmIEB0aW50RHVyYXRpb24gPT0gMAogICAgICAgICAgICBAdG9uZSA9IEB0aW50VG9uZQogICAgICAgICAgICAKICAgIHNjcm9sbDogKHN0ZXBzWCwgc3RlcHNZLCBkdXJhdGlvbikgLT4KICAgICAgICBtYXAgPSBHYW1lTWFuYWdlci5tYXAKICAgICAgICBAc2Nyb2xsU3RlcHNYID0gc3RlcHNYICogbWFwLnRpbGVTaXplCiAgICAgICAgQHNjcm9sbFN0ZXBzWSA9IHN0ZXBzWSAqIG1hcC50aWxlU2l6ZQogICAgICAgIEBzY3JvbGxEdXJhdGlvbiA9IGR1cmF0aW9uCiAgICAgICAgCiAgICAgICAgZHggPSAoQG94ICsgQHNjcm9sbFN0ZXBzWCkgLSBAb3gKICAgICAgICBkeSA9IChAb3kgKyBAc2Nyb2xsU3RlcHNZKSAtIEBveQogICAgICAgIAogICAgICAgIEBzY3JvbGxTcGVlZFggPSBkeCAvIGR1cmF0aW9uCiAgICAgICAgQHNjcm9sbFNwZWVkWSA9IGR5IC8gZHVyYXRpb24KICAgICAgICAKICAgIGNlbnRlck9uUGxheWVyOiAtPiBAY2VudGVyT24oR2FtZU1hbmFnZXIucGxheWVyLngsIEdhbWVNYW5hZ2VyLnBsYXllci55KQogICAgY2VudGVyT246ICh4LCB5KSAtPgogICAgICAgIG1hcCA9IEdhbWVNYW5hZ2VyLm1hcAogICAgICAgIHNwcml0ZSA9IFNjZW5lTWFuYWdlci5zY2VuZS5tYXAucGxheWVyCiAgICAgICAgcHcgPSBzcHJpdGUuc3JjUmVjdC53aWR0aAogICAgICAgIHBoID0gc3ByaXRlLnNyY1JlY3QuaGVpZ2h0CiAgICAgICAgCiAgICAgICAgeCA9IE1hdGguZmxvb3IoeCAtIChwdyAtIG1hcC50aWxlU2l6ZSkgLyAyKQoKICAgICAgICBAb3ggPSB4IC0gR3JhcGhpY3Mud2lkdGggLyAyICsgTWF0aC5jZWlsKHB3IC8gMikKICAgICAgICBAb3kgPSB5IC0gKEdyYXBoaWNzLmhlaWdodCAtIHBoKSAvIDIgLSBtYXAudGlsZVNpemUKICAgICAgICAKICAgICAgICBAb3ggPSBpZiBtYXAubG9vcFR5cGUgPT0gMiBvciBtYXAubG9vcFR5cGUgPT0gMyB0aGVuIEBveCBlbHNlIE1hdGgubWluKE1hdGgubWF4KEBveCwgMCksIG1hcC53aWR0aCptYXAudGlsZVNpemUtR3JhcGhpY3Mud2lkdGgpIAogICAgICAgIEBveSA9IGlmIG1hcC5sb29wVHlwZSA9PSAxIG9yIG1hcC5sb29wVHlwZSA9PSAzIHRoZW4gQG95IGVsc2UgTWF0aC5taW4oTWF0aC5tYXgoQG95LCAwKSwgbWFwLmhlaWdodCptYXAudGlsZVNpemUtR3JhcGhpY3MuaGVpZ2h0KQogICAgICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICAKICAgICAgICBAdXBkYXRlVGludGluZygpCiAgICAgICAgQHVwZGF0ZVNjcm9sbGluZygpCiAgICAgICAgQHVwZGF0ZVBsYXllclNjcm9sbGluZygpCiAgICAgICAgQHVwZGF0ZVNoYWtpbmcoKQogICAgICAgIAogICAgdXBkYXRlU2hha2luZzogLT4KICAgICAgICBpZiBAc2hha2VQb3dlciA9PSAwCiAgICAgICAgICAgIEBzaGFrZVJhbmdlID0gMAogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICBAc2hha2VSYW5nZSArPSBAc2hha2VTcGVlZAogICAgCiAgICAgICAgaWYgQHNoYWtlUmFuZ2UgPj0gQHNoYWtlUG93ZXIgb3IgQHNoYWtlUmFuZ2UgPD0gLUBzaGFrZVBvd2VyCiAgICAgICAgICAgIEBzaGFrZVNwZWVkID0gQHNoYWtlU3BlZWQgKiAtMQogICAgIAogICAgICAgIGlmIEBzaGFrZUR1cmF0aW9uID4gMCB0aGVuIEBzaGFrZUR1cmF0aW9uLS0KICAgICAgICBpZiBAc2hha2VEdXJhdGlvbiA9PSAwCiAgICAgICAgICAgIEBzaGFrZVBvd2VyID0gMAogICAgICAgICAgCiAgICAgICAgCiAgICB1cGRhdGVUaW50aW5nOiAtPgogICAgICAgIGlmIEB0aW50RHVyYXRpb24gPT0gMCB0aGVuIHJldHVybgogICAgICAgIGEgPSAoQHRpbnRDb3VudGVyIC8gQHRpbnREdXJhdGlvbikgKiAyNTUKICAgICAgICAKICAgICAgICBAdG9uZS5yZWQgPSBNYXRoLmZsb29yKChAdG9uZS5yZWQgKiBhICsgQHRpbnRUb25lLnJlZCAqICgyNTUgLSBhKSkgLyAyNTUpCiAgICAgICAgQHRvbmUuZ3JlZW4gPSBNYXRoLmZsb29yKChAdG9uZS5ncmVlbiAqIGEgKyBAdGludFRvbmUuZ3JlZW4gKiAoMjU1IC0gYSkpIC8gMjU1KQogICAgICAgIEB0b25lLmJsdWUgPSBNYXRoLmZsb29yKChAdG9uZS5ibHVlICogYSArIEB0aW50VG9uZS5ibHVlICogKDI1NSAtIGEpKSAvIDI1NSkKICAgICAgICBAdG9uZS5ncmV5ID0gTWF0aC5mbG9vcigoQHRvbmUuZ3JleSAqIGEgKyBAdGludFRvbmUuZ3JleSAqICgyNTUgLSBhKSkgLyAyNTUpCiAgICAgICAgCiAgICAgICAgQHRpbnRDb3VudGVyLS0KICAgICAgICAKICAgICAgICBpZiBAdGludENvdW50ZXIgPD0gMAogICAgICAgICAgICBAdGludENvdW50ZXIgPSAwCiAgICAgICAgICAgIEB0aW50RHVyYXRpb24gPSAwCiAgICAgICAgICAgIEB0b25lID0gQHRpbnRUb25lCiAgICAgICAgICAgIAogICAgdXBkYXRlU2Nyb2xsaW5nOiAtPgogICAgICAgIGlmIEBzY3JvbGxEdXJhdGlvbiA+IDAKICAgICAgICAgICAgbWFwID0gR2FtZU1hbmFnZXIubWFwCiAgICAgICAgICAgIEBzY3JvbGxEdXJhdGlvbi0tCiAgICAgICAgICAgIAogICAgICAgICAgICBAb3ggKz0gQHNjcm9sbFNwZWVkWAogICAgICAgICAgICBAb3kgKz0gQHNjcm9sbFNwZWVkWQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgQHNjcm9sbER1cmF0aW9uID09IDAKICAgICAgICAgICAgICAgIEBveCA9IE1hdGguZmxvb3IoQG94IC8gbWFwLnRpbGVTaXplKSAqIG1hcC50aWxlU2l6ZQogICAgICAgICAgICAgICAgQG95ID0gTWF0aC5mbG9vcihAb3kgLyBtYXAudGlsZVNpemUpICogbWFwLnRpbGVTaXplCiAgICAgICAgICAgICAgICAKICAgIHVwZGF0ZVBsYXllclNjcm9sbGluZzogLT4KICAgICAgICBwbGF5ZXIgPSBHYW1lTWFuYWdlci5wbGF5ZXIKICAgICAgICBtYXAgPSBHYW1lTWFuYWdlci5tYXAKICAgICAgICAKICAgICAgICBpZiBub3QgbWFwPyBvciBub3QgcGxheWVyPyBvciBub3QgU2NlbmVNYW5hZ2VyLnNjZW5lLm1hcD8gdGhlbiByZXR1cm4KICAgICAgICAKICAgICAgICBzcHJpdGUgPSBTY2VuZU1hbmFnZXIuc2NlbmUubWFwLnBsYXllcgogICAgICAgIHB3ID0gc3ByaXRlLnNyY1JlY3Qud2lkdGgKICAgICAgICBwaCA9IHNwcml0ZS5zcmNSZWN0LmhlaWdodAogICAgICAgIGNlbnRlclggPSBHcmFwaGljcy53aWR0aCAvIDIKICAgICAgICBjZW50ZXJZID0gR3JhcGhpY3MuaGVpZ2h0IC8gMgogICAgICAgIHBsYXllckNlbnRlclggPSBzcHJpdGUueC1zcHJpdGUudmlld3BvcnQub3gtc3ByaXRlLm94ICsgTWF0aC5jZWlsKHB3IC8gMikKICAgICAgICBwbGF5ZXJDZW50ZXJZID0gc3ByaXRlLnktc3ByaXRlLnZpZXdwb3J0Lm95LXNwcml0ZS5veSArIE1hdGguZmxvb3IocGggLyAyKQogICAgICAgIGxvb3BUeXBlID0gbWFwLmxvb3BUeXBlCiAgICAgICAgCgogICAgICAgIGlmIHBsYXllci5pc01vdmluZwogICAgICAgICAgICBpZiBwbGF5ZXJDZW50ZXJZIDw9IGNlbnRlclkgYW5kIHBsYXllci5kaXJlY3Rpb24gPT0gNiAKICAgICAgICAgICAgICAgIEBveSA9IGlmIGxvb3BUeXBlID09IDEgb3IgbG9vcFR5cGUgPT0gMyB0aGVuIChAb3kgLSBwbGF5ZXIubW92ZVNwZWVkKSAlIChtYXAuaGVpZ2h0Km1hcC50aWxlU2l6ZSkgZWxzZSBNYXRoLm1heChAb3kgLSBwbGF5ZXIubW92ZVNwZWVkLCAwKQogICAgICAgICAgICBpZiBwbGF5ZXJDZW50ZXJZID49IGNlbnRlclkgYW5kIHBsYXllci5kaXJlY3Rpb24gPT0gMgogICAgICAgICAgICAgICAgQG95ID0gaWYgbG9vcFR5cGUgPT0gMSBvciBsb29wVHlwZSA9PSAzIHRoZW4gKEBveSArIHBsYXllci5tb3ZlU3BlZWQpICUgKG1hcC5oZWlnaHQqbWFwLnRpbGVTaXplKSBlbHNlIE1hdGgubWluKEBveSArIHBsYXllci5tb3ZlU3BlZWQsIG1hcC5oZWlnaHQgKiBtYXAudGlsZVNpemUgLSBHcmFwaGljcy5oZWlnaHQpCiAgICAgICAgICAgIGlmIHBsYXllckNlbnRlclggPD0gY2VudGVyWCBhbmQgcGxheWVyLmRpcmVjdGlvbiA9PSA0CiAgICAgICAgICAgICAgICBAb3ggPSBpZiBsb29wVHlwZSA9PSAyIG9yIGxvb3BUeXBlID09IDMgdGhlbiAoQG94IC0gcGxheWVyLm1vdmVTcGVlZCkgJSAobWFwLndpZHRoKm1hcC50aWxlU2l6ZSkgZWxzZSBNYXRoLm1heChAb3ggLSBwbGF5ZXIubW92ZVNwZWVkLCAwKQogICAgICAgICAgICBpZiBwbGF5ZXJDZW50ZXJYID49IGNlbnRlclggIGFuZCBwbGF5ZXIuZGlyZWN0aW9uID09IDgKICAgICAgICAgICAgICAgIEBveCA9IGlmIGxvb3BUeXBlID09IDIgb3IgbG9vcFR5cGUgPT0gMyB0aGVuIChAb3ggKyBwbGF5ZXIubW92ZVNwZWVkKSAlIChtYXAud2lkdGgqbWFwLnRpbGVTaXplKSBlbHNlIE1hdGgubWluKEBveCArIHBsYXllci5tb3ZlU3BlZWQsIG1hcC53aWR0aCAqIG1hcC50aWxlU2l6ZSAtIEdyYXBoaWNzLndpZHRoKQogICAgIAogICAgIAogICAgICAgIEBveCA9IGlmIGxvb3BUeXBlID09IDIgb3IgbG9vcFR5cGUgPT0gMyB0aGVuIEBveCBlbHNlIE1hdGgubWF4KEBveCwgMCkKICAgICAgICBAb3kgPSBpZiBsb29wVHlwZSA9PSAxIG9yIGxvb3BUeXBlID09IDMgdGhlbiBAb3kgZWxzZSBNYXRoLm1heChAb3ksIDApCiAgICAgICAgCiAgICAgICAgCiAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKd2luZG93LkxvZ2ljX1NjcmVlbiA9IExvZ2ljX1NjcmVlbg==","compiledContent":""},{"name":"Logic_Character","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfQ2hhcmFjdGVyCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTAxCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IExvZ2ljX0NoYXJhY3RlcgojCiMgICBBIGJhc2UgY2xhc3MgZm9yIGFsbCBvdGhlciB3aW5kb3cgY2xhc3Nlcy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIExvZ2ljX0NoYXJhY3RlcgogICAgY29uc3RydWN0b3I6IC0+CiAgICAgICAgcyA9IFdpbmRvd19CYXNlLnNjYWxlCiAgICAgICAgQGlzTW92aW5nID0gbm8KICAgICAgICBAaXNGbHlpbmcgPSBubwogICAgICAgIEBpc1NvYXJpbmcgPSBubwogICAgICAgIEBpc0xhbmRpbmcgPSBubwogICAgICAgIEBpc0p1bXBpbmcgPSBubwogICAgICAgIEBidXNoRmxhZyA9IG5vCiAgICAgICAgQGRpcmVjdGlvbiA9IDAKICAgICAgICBAZGlyZWN0aW9ucyA9IFsyLCA0LCA2LCA4XQogICAgICAgIEBzcGVlZHMgPSAgICAgICBbMC41KnMsIDEqcywgMipzLCA0KnMsIDgqc10KICAgICAgICBAZnJlcXVlbmNpZXMgPSAgWzAuMDMxMjUsIDAuMDYyNSwgMC4xMjUsIDAuMjUsIDAuNV0KICAgICAgICBAbW92ZVJvdXRlRnJlcXVlbmNpZXMgPSBbMjQwLCAxMjAsIDYwLCAzMCwgMF0KICAgICAgICBAbW92ZVNwZWVkID0gQHNwZWVkc1syXQogICAgICAgIEBmcmVxdWVuY3kgPSBAZnJlcXVlbmNpZXNbMl0KICAgICAgICBAbW92ZVJvdXRlRnJlcXVlbmN5ID0gQG1vdmVSb3V0ZUZyZXF1ZW5jaWVzWzJdCiAgICAgICAgQHggPSAwCiAgICAgICAgQHkgPSAzMgogICAgICAgIEBwYXR0ZXJuID0gMAogICAgICAgIEBzdWJQYXR0ZXJuID0gMAogICAgICAgIEBjdXJyZW50U3ViUGF0dGVybiA9IDAKICAgICAgICBAbW92ZVN0ZXBzID0gMAogICAgICAgIEBwYXR0ZXJuQ291bnQgPSAwCiAgICAgICAgQGxhc3RQYXR0ZXJuQ291bnQgPSAwCiAgICAgICAgQG1hcERhdGEgPSBudWxsCiAgICAgICAgQG1hcCA9IG51bGwKICAgICAgICBAdGlsZXNldCA9IG51bGwKICAgICAgICBAdGVycmFpblRhZyA9IDAKICAgICAgICBAcm91dGUgPSBudWxsCiAgICAgICAgQHJvdXRlUG9pbnRlciA9IDAKICAgICAgICBAcm91dGVXYWl0Q291bnRlciA9IDAKICAgICAgICBAcHJlZGVmaW5lZFJvdXRlcyA9IFt7IGNvbW1hbmRzOiBbeyBpZDogOCB9XSwgcmVwZWF0OiB5ZXMsIHNraXA6IHllcyB9LAogICAgICAgICAgICAgICAgICAgICAgICAgICAgIHsgY29tbWFuZHM6IFt7IGlkOiA5IH1dLCByZXBlYXQ6IHllcywgc2tpcDogeWVzIH1dCiAgICAgICAgQGNvbGxpc2lvbk1hcCA9IG51bGwKICAgICAgICBAYWx0aXR1ZGUgPSAwCiAgICAgICAgQGFuaW1hdGlvbkNvdW50ZXIgPSAwCiAgICAgICAgQHdhbGtpbmdBbmltYXRpb24gPSB5ZXMKICAgICAgICBAc3RlcHBpbmdBbmltYXRpb24gPSBubwogICAgICAgIEB0aHJvdWdoID0gbm8KICAgICAgICBAZGlyZWN0aW9uRml4ID0gbm8KICAgICAgICBAZ3JhcGhpYyA9IG51bGwKICAgICAgICBAb3BhY2l0eSA9IDI1NQogICAgICAgIEBibGVuZGluZyA9IDAKICAgICAgICBAdG9uZSA9IG5ldyBUb25lKDAsIDAsIDAsIDApCiAgICAgICAgQHZpc2libGUgPSB5ZXMKICAgICAgICBAbW90aW9uQmx1ciA9IG5vCiAgICAgICAgQG1vdGlvbkJsdXJMZW5ndGggPSAzCiAgICAgICAgQG1vdGlvbkJsdXJPcGFjaXR5ID0gMTAwCiAgICAgICAgQG1vdGlvbkJsdXJGaXhlZE9wYWNpdHkgPSBubwogICAgICAgIEBtb3Rpb25CbHVyQ29sb3IgPSBDb2xvci5UUkFOU1BBUkVOVAogICAgICAgIEBwYXNzYWdlcyA9IG51bGwKICAgICAgICBAaXNMb2NrZWQgPSBubwogICAgdXBkYXRlOiAtPiAKICAgICAgICBAdXBkYXRlUm91dGUoKQogICAgICAgIEB1cGRhdGVQYXR0ZXJuKCkKICAgICAgICBAdXBkYXRlTW92ZSgpCiAgICAgICAgCiAgICAgICAgQHVwZGF0ZVNvYXJpbmcoKQogICAgICAgIEB1cGRhdGVMYW5kaW5nKCkKICAgICAgICBAdXBkYXRlSnVtcCgpCiAgICAgICAgCiAgICAgICAgd2lkdGggPSBAbWFwLndpZHRoICogQG1hcC50aWxlU2l6ZQogICAgICAgIGhlaWdodCA9IEBtYXAuaGVpZ2h0ICogQG1hcC50aWxlU2l6ZQogICAgICAgIAogICAgICAgIGlmIEBtYXAubG9vcFR5cGUgPT0gMiBvciBAbWFwLmxvb3BUeXBlID09IDMKICAgICAgICAgICAgQHggPSBpZiBAeCA8IDAgdGhlbiBAeCsod2lkdGgpIGVsc2UgQHgKICAgICAgICAgICAgQHggPSBpZiBAeCA+PSB3aWR0aCB0aGVuIEB4LXdpZHRoIGVsc2UgQHgKICAgICAgICBlbHNlCiAgICAgICAgICAgIEB4ID0gTWF0aC5taW4oTWF0aC5tYXgoQHgsIDApLCB3aWR0aC1AbWFwLnRpbGVTaXplKQogICAgICAgICAgICAKICAgICAgICBpZiBAbWFwLmxvb3BUeXBlID09IDEgb3IgQG1hcC5sb29wVHlwZSA9PSAzCiAgICAgICAgICAgIEB5ID0gaWYgQHkgPCAwIHRoZW4gQHkrKGhlaWdodCkgZWxzZSBAeQogICAgICAgICAgICBAeSA9IGlmIEB5ID49IGhlaWdodCB0aGVuIEB5LWhlaWdodCBlbHNlIEB5CiAgICAgICAgZWxzZQogICAgICAgICAgICBAeSA9IE1hdGgubWluKE1hdGgubWF4KEB5LCAwKSwgaGVpZ2h0LUBtYXAudGlsZVNpemUpCiAgICAgICAgCiAgICB1cGRhdGVTb2FyaW5nOiAtPgogICAgICAgIGlmIEBpc1NvYXJpbmcKICAgICAgICAgICBAeSAtPSBAbW92ZVNwZWVkCiAgICAgICAgICAgQGFuaW1hdGlvbkNvdW50ZXIgLT0gQG1vdmVTcGVlZAogICAgICAgICAgIEBpc1NvYXJpbmcgPSBAYW5pbWF0aW9uQ291bnRlciA+IDAKICAgIHVwZGF0ZUxhbmRpbmc6IC0+CiAgICAgICAgaWYgQGlzTGFuZGluZwogICAgICAgICAgICBAeSArPSBAbW92ZVNwZWVkCiAgICAgICAgICAgIEBhbmltYXRpb25Db3VudGVyIC09IEBtb3ZlU3BlZWQKICAgICAgICAgICAgQGlzTGFuZGluZyA9IEBhbmltYXRpb25Db3VudGVyID4gMAogICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgQGlzTGFuZGluZwogICAgICAgICAgICAgICAgdHggPSBAdHgoKQogICAgICAgICAgICAgICAgdHkgPSBAdHkoKQogICAgICAgICAgICAgICAgQGNvbGxpc2lvbk1hcFsodHktMSkgKiBAbWFwLndpZHRoICsgdHhdLnJlbW92ZSh0aGlzKQogICAgICAgICAgICAgICAgQGNvbGxpc2lvbk1hcFsodHkpICogQG1hcC53aWR0aCArIHR4XS5wdXNoKHRoaXMpCiAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAKICAgIHVwZGF0ZUZseTogLT4KCiAgICB1cGRhdGVKdW1wOiAtPiAgICAgICAKICAgICAgICBpZiBAaXNKdW1waW5nCiAgICAgICAgICAgIEBqdW1wQ291bnRlci0tCiAgICAgICAgICAgIEB4ID0gKEB4ICogQGp1bXBDb3VudGVyICsgQGp1bXBYKSAvIChAanVtcENvdW50ZXIrMSkKICAgICAgICAgICAgQHNoYWRvd1kgPSAoQHNoYWRvd1kgKiBAanVtcENvdW50ZXIgKyBAanVtcFkpIC8gKEBqdW1wQ291bnRlcisxKQoKICAgICAgICAgICAgaWYgKEBqdW1wQ291bnRlcikgPj0gQGp1bXBDb3VudGVySGFsZgogICAgICAgICAgICAgICAgQGp1bXBIZWlnaHQgKz0gTWF0aC5yb3VuZChAanVtcFZhbHVlICogKChAanVtcENvdW50ZXIgLSBAanVtcENvdW50ZXJIYWxmKSAvIEBqdW1wQ291bnRlckhhbGYpKQogICAgICAgICAgICAgICAgQHkgPSBAc2hhZG93WSAtIEBqdW1wSGVpZ2h0CiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIEBqdW1wSGVpZ2h0ID0gTWF0aC5tYXgoQGp1bXBIZWlnaHQgLSBNYXRoLnJvdW5kKEBqdW1wVmFsdWUgKiAoKEBqdW1wQ291bnRlckhhbGYgLSBAanVtcENvdW50ZXIpIC8gQGp1bXBDb3VudGVySGFsZikpLCAwKQogICAgICAgICAgICAgICAgQHkgPSBAc2hhZG93WSAtIEBqdW1wSGVpZ2h0CiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgaWYgQGlzSnVtcGluZyBhbmQgQGp1bXBDb3VudGVyID09IDAKICAgICAgICAgICAgICAgIEBpc0p1bXBpbmcgPSBubwogICAgICAgICAgICAgICAgQHggPSBNYXRoLnJvdW5kKEB4IC8gQG1hcC50aWxlU2l6ZSkgKiBAbWFwLnRpbGVTaXplCiAgICAgICAgICAgICAgICBAeSA9IE1hdGgucm91bmQoQG1hcC50aWxlU2l6ZSkgKiBAbWFwLnRpbGVTaXplICAgCiAgICAgICAgICAgICAgICAgICAgICAgCiAgICB1cGRhdGVNb3ZlOiAtPgogICAgICAgIGlmIEBpc01vdmluZwogICAgICAgICAgICBAbW92ZVN0ZXBzICs9IEBtb3ZlU3BlZWQKICAgICAgICAgICAgc3dpdGNoIEBkaXJlY3Rpb24KICAgICAgICAgICAgICAgIHdoZW4gMiAjIERPV04KICAgICAgICAgICAgICAgICAgICBAeSArPSBAbW92ZVNwZWVkCiAgICAgICAgICAgICAgICAgICAgaWYgQG1vdmVTdGVwcyA+PSBAbWFwLnRpbGVTaXplIHRoZW4gQHkgLT0gQG1vdmVTdGVwcyAtIEBtYXAudGlsZVNpemUKICAgICAgICAgICAgICAgIHdoZW4gNCAjIExFRlQKICAgICAgICAgICAgICAgICAgICBAeCAtPSBAbW92ZVNwZWVkCiAgICAgICAgICAgICAgICAgICAgaWYgQG1vdmVTdGVwcyA+PSBAbWFwLnRpbGVTaXplIHRoZW4gQHggKz0gQG1vdmVTdGVwcyAtIEBtYXAudGlsZVNpemUKICAgICAgICAgICAgICAgIHdoZW4gNiAjIFVQCiAgICAgICAgICAgICAgICAgICAgQHkgLT0gQG1vdmVTcGVlZAogICAgICAgICAgICAgICAgICAgIGlmIEBtb3ZlU3RlcHMgPj0gQG1hcC50aWxlU2l6ZSB0aGVuIEB5ICs9IEBtb3ZlU3RlcHMgLSBAbWFwLnRpbGVTaXplCiAgICAgICAgICAgICAgICB3aGVuIDggIyBSSUdIVAogICAgICAgICAgICAgICAgICAgIEB4ICs9IEBtb3ZlU3BlZWQKICAgICAgICAgICAgICAgICAgICBpZiBAbW92ZVN0ZXBzID49IEBtYXAudGlsZVNpemUgdGhlbiBAeCAtPSBAbW92ZVN0ZXBzIC0gQG1hcC50aWxlU2l6ZQogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiBAbW92ZVN0ZXBzID49IEBtYXAudGlsZVNpemUKICAgICAgICAgICAgICAgIEBtb3ZlU3RlcHMgPSAwCiAgICAgICAgICAgICAgICBAaXNNb3ZpbmcgPSBubwogICAgICAgICAgICAgICAgQG9uTW92ZUZpbmlzaCgpCiAgICAgICAgZWxzZSBpZiBub3QgQHN0ZXBwaW5nQW5pbWF0aW9uCiAgICAgICAgICAgIHAgPSBNYXRoLmZsb29yKEBsYXN0UGF0dGVybkNvdW50ICogQGZyZXF1ZW5jeSkgJSA0CiAgICAgICAgICAgIGlmICBwID09IDAgfHwgcCA9PSAzCiAgICAgICAgICAgICAgICBAcGF0dGVybkNvdW50ID0gTWF0aC5mbG9vcigxIC8gQGZyZXF1ZW5jeSkgCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIEBwYXR0ZXJuQ291bnQgPSBNYXRoLmZsb29yKDMgLyBAZnJlcXVlbmN5KSAKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICBvbk1vdmVGaW5pc2g6IC0+ICMgSW1wbGVtZW50IGluIGRlcml2ZWQgY2xhc3NlcwogICAgICAgIAogICAgc3ViUGF0dGVybkNvbHVtbjogLT4gaWYgQHdhbGtpbmdBbmltYXRpb24gdGhlbiAwIGVsc2UgQHN1YlBhdHRlcm4gJSA0CiAgICB1cGRhdGVQYXR0ZXJuOiAtPgogICAgICAgIG1vdmluZyA9IChAaXNNb3ZpbmcgYW5kIEB3YWxraW5nQW5pbWF0aW9uKSBvciBAc3RlcHBpbmdBbmltYXRpb24KICAgICAgICBkaXJlY3Rpb24gPSBpZiBAZGlyZWN0aW9uRml4ZWQgYW5kIG1vdmluZyB0aGVuIEBkaXJlY3Rpb25zWyhNYXRoLmZsb29yKChAc3ViUGF0dGVybikgLyA0KSsyKSAlIDRdIGVsc2UgQGRpcmVjdGlvbgogICAgICAgIGNvbHVtbiA9IEBzdWJQYXR0ZXJuQ29sdW1uKCkKICAgICAgICAKICAgICAgICBzd2l0Y2ggZGlyZWN0aW9uCiAgICAgICAgICAgIHdoZW4gMiAjIERPV04gICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBAc3ViUGF0dGVybiA9IGlmIG1vdmluZyB0aGVuIDAgKyAoTWF0aC5mbG9vcihAcGF0dGVybkNvdW50ICogQGZyZXF1ZW5jeSkgJSA0KSBlbHNlIGNvbHVtbgogICAgICAgICAgICAgICAgI2lmIEBzdWJQYXR0ZXJuID09IDkgdGhlbiBAc3ViUGF0dGVybiA9IDcKICAgICAgICAgICAgd2hlbiA0ICMgTEVGVAogICAgICAgICAgICAgICAgQHN1YlBhdHRlcm4gPSBpZiBtb3ZpbmcgdGhlbiA0ICsgKE1hdGguZmxvb3IoQHBhdHRlcm5Db3VudCAqIEBmcmVxdWVuY3kpICUgNCkgZWxzZSBjb2x1bW4rNAogICAgICAgICAgICAgICAgI2lmIEBzdWJQYXR0ZXJuID09IDEyIHRoZW4gQHN1YlBhdHRlcm4gPSAxMAogICAgICAgICAgICB3aGVuIDYgIyBVUAogICAgICAgICAgICAgICAgQHN1YlBhdHRlcm4gPSBpZiBtb3ZpbmcgdGhlbiAxMiArIChNYXRoLmZsb29yKEBwYXR0ZXJuQ291bnQgKiBAZnJlcXVlbmN5KSAlIDQpIGVsc2UgY29sdW1uKzEyCiAgICAgICAgICAgICAgICAjaWYgQHN1YlBhdHRlcm4gPT0gMyB0aGVuIEBzdWJQYXR0ZXJuID0gMQogICAgICAgICAgICB3aGVuIDggIyBSSUdIVAogICAgICAgICAgICAgICAgQHN1YlBhdHRlcm4gPSBpZiBtb3ZpbmcgdGhlbiA4ICsgKE1hdGguZmxvb3IoQHBhdHRlcm5Db3VudCAqIEBmcmVxdWVuY3kpICUgNCkgZWxzZSBjb2x1bW4rOAogICAgICAgICAgICAgICAgI2lmIEBzdWJQYXR0ZXJuID09IDYgdGhlbiBAc3ViUGF0dGVybiA9IDQKICAgICAgICAgICAgICAgIAogICAgICAgIAogICAgICAgIGlmIG1vdmluZwogICAgICAgICAgICBAbGFzdFBhdHRlcm5Db3VudCA9IEBwYXR0ZXJuQ291bnQKICAgICAgICAgICAgQHBhdHRlcm5Db3VudCsrCiAgICAgIAogICAgdXBkYXRlUm91dGU6IC0+CiAgICAgICAgY29tbWFuZCA9IG51bGwKICAgICAgICBtb3ZlZCA9IHllcwogIAogICAgICAgIGlmIEByb3V0ZT8gYW5kIG5vdCBAaXNNb3ZpbmcgYW5kIG5vdCBAaXNKdW1waW5nCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBAcm91dGVXYWl0Q291bnRlciA+IDAKICAgICAgICAgICAgICAgIEByb3V0ZVdhaXRDb3VudGVyLS0KICAgICAgICAgICAgCiAgICAgICAgICAgIHdoaWxlIG1vdmVkIGFuZCBub3QgQGlzTW92aW5nIGFuZCBub3QgQGlzU29hcmluZyBhbmQgbm90IEBpc0xhbmRpbmcgYW5kIG5vdCBAaXNKdW1waW5nIGFuZCAoQHJvdXRlV2FpdENvdW50ZXIgPT0gMCkgYW5kIEByb3V0ZT8KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgQHJvdXRlUG9pbnRlciA+PSBAcm91dGUuY29tbWFuZHMubGVuZ3RoIGFuZCBAcm91dGVXYWl0Q291bnRlciA8PSAwCiAgICAgICAgICAgICAgICAgICAgQHJvdXRlUG9pbnRlciA9IDAKICAgICAgICAgICAgICAgICAgICBpZiBub3QgQHJvdXRlLnJlcGVhdAogICAgICAgICAgICAgICAgICAgICAgICBAcm91dGUgPSBudWxsCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIEBvblJvdXRlRmluaXNoPyB0aGVuIEBvblJvdXRlRmluaXNoKCkKICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWUKICAgICAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICBjb21tYW5kID0gQHJvdXRlLmNvbW1hbmRzW0Byb3V0ZVBvaW50ZXJdCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgIHN3aXRjaCBjb21tYW5kLmlkCiAgICAgICAgICAgICAgICAgICAgIyBNb3ZlIERvd24KICAgICAgICAgICAgICAgICAgICB3aGVuIDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDIpCiAgICAgICAgICAgICAgICAgICAgIyBNb3ZlIExlZnQKICAgICAgICAgICAgICAgICAgICB3aGVuIDEgdGhlbiBtb3ZlZCA9IEBtb3ZlKDQpCiAgICAgICAgICAgICAgICAgICAgIyBNb3ZlIFVwCiAgICAgICAgICAgICAgICAgICAgd2hlbiAyIHRoZW4gbW92ZWQgPSBAbW92ZSg2KQogICAgICAgICAgICAgICAgICAgICMgTW92ZSBSaWdodAogICAgICAgICAgICAgICAgICAgIHdoZW4gMyB0aGVuIG1vdmVkID0gQG1vdmUoOCkKICAgICAgICAgICAgICAgICAgICAjIE1vdmUgTG93ZXIgTGVmdAogICAgICAgICAgICAgICAgICAgIHdoZW4gNAogICAgICAgICAgICAgICAgICAgICAgICBAcm91dGUuY29tbWFuZHMuc3BsaWNlKEByb3V0ZVBvaW50ZXIsIDEsIHsgaWQ6IDAgfSwgeyBpZDogMSB9KQogICAgICAgICAgICAgICAgICAgICAgICBAcm91dGVQb2ludGVyLS0gICAgCiAgICAgICAgICAgICAgICAgICAgIyBNb3ZlIExvd2VyIFJpZ2h0CiAgICAgICAgICAgICAgICAgICAgd2hlbiA1CiAgICAgICAgICAgICAgICAgICAgICAgIEByb3V0ZS5jb21tYW5kcy5zcGxpY2UoQHJvdXRlUG9pbnRlciwgMSwgeyBpZDogMCB9LCB7IGlkOiAzIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIEByb3V0ZVBvaW50ZXItLQogICAgICAgICAgICAgICAgICAgICMgTW92ZSBVcHBlciBMZWZ0CiAgICAgICAgICAgICAgICAgICAgd2hlbiA2CiAgICAgICAgICAgICAgICAgICAgICAgIEByb3V0ZS5jb21tYW5kcy5zcGxpY2UoQHJvdXRlUG9pbnRlciwgMSwgeyBpZDogMiB9LCB7IGlkOiAxIH0pCiAgICAgICAgICAgICAgICAgICAgICAgIEByb3V0ZVBvaW50ZXItLQogICAgICAgICAgICAgICAgICAgICMgTW92ZSBVcHBlciBSaWdodAogICAgICAgICAgICAgICAgICAgIHdoZW4gNwogICAgICAgICAgICAgICAgICAgICAgICBAcm91dGUuY29tbWFuZHMuc3BsaWNlKEByb3V0ZVBvaW50ZXIsIDEsIHsgaWQ6IDIgfSwgeyBpZDogMyB9KQogICAgICAgICAgICAgICAgICAgICAgICBAcm91dGVQb2ludGVyLS0KICAgICAgICAgICAgICAgICAgICAjIE1vdmUgUmFuZG9tCiAgICAgICAgICAgICAgICAgICAgd2hlbiA4IHRoZW4gbW92ZWQgPSBAbW92ZShbMiwgNCwgNiwgOF1bTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNCldKQogICAgICAgICAgICAgICAgICAgICMgTW92ZSB0b3dhcmQgUGxheWVyCiAgICAgICAgICAgICAgICAgICAgd2hlbiA5CiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllciA9IEdhbWVNYW5hZ2VyLnBsYXllcgogICAgICAgICAgICAgICAgICAgICAgICBkeCA9IEB4IC0gcGxheWVyLngKICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSBAeSAtIHBsYXllci55CiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVkID0gbm8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgTWF0aC5hYnMoZHgpIDwgTWF0aC5hYnMoZHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeSA+IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeSA8IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDIpICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgTWF0aC5hYnMoZHgpID49IE1hdGguYWJzKGR5KSBvciBub3QgbW92ZWQKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGR4ID4gMCB0aGVuIG1vdmVkID0gQG1vdmUoNCkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIGR4IDwgMCB0aGVuIG1vdmVkID0gQG1vdmUoOCkKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IG1vdmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeSA+IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDYpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeSA8IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDIpIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAgICAgIyBNb3ZlIGF3YXkgZnJvbSBQbGF5ZXIKICAgICAgICAgICAgICAgICAgICB3aGVuIDEwCiAgICAgICAgICAgICAgICAgICAgICAgIHBsYXllciA9IEdhbWVNYW5hZ2VyLnBsYXllcgogICAgICAgICAgICAgICAgICAgICAgICBkeCA9IEB4IC0gcGxheWVyLngKICAgICAgICAgICAgICAgICAgICAgICAgZHkgPSBAeSAtIHBsYXllci55CiAgICAgICAgICAgICAgICAgICAgICAgIG1vdmVkID0gbm8KICAgICAgICAgICAgICAgICAgICAgICAgaWYgTWF0aC5hYnMoZHgpIDwgTWF0aC5hYnMoZHkpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeCA+IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeCA8IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDQpCiAgICAgICAgICAgICAgICAgICAgICAgIGlmIE1hdGguYWJzKGR4KSA+PSBNYXRoLmFicyhkeSkgb3Igbm90IG1vdmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeSA+IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDIpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeSA8IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDYpICAKICAgICAgICAgICAgICAgICAgICAgICAgaWYgbm90IG1vdmVkCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeCA+IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDgpCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiBkeCA8IDAgdGhlbiBtb3ZlZCA9IEBtb3ZlKDQpCiAgICAgICAgICAgICAgICAgICAgIyBNb3ZlIEZvcndhcmQKICAgICAgICAgICAgICAgICAgICB3aGVuIDExIHRoZW4gbW92ZWQgPSBAbW92ZShAZGlyZWN0aW9uKQogICAgICAgICAgICAgICAgICAgICMgTW92ZSBCYWNrd2FyZAogICAgICAgICAgICAgICAgICAgIHdoZW4gMTIgdGhlbiBtb3ZlZCA9IEBtb3ZlKEBkaXJlY3Rpb25zWyhAZGlyZWN0aW9ucy5pbmRleE9mKEBkaXJlY3Rpb24pICsgMikgJSA0XSkKICAgICAgICAgICAgICAgICAgICAjIFdhaXQKICAgICAgICAgICAgICAgICAgICB3aGVuIDEzIHRoZW4gQHJvdXRlV2FpdENvdW50ZXIgPSBjb21tYW5kLnRpbWUKICAgICAgICAgICAgICAgICAgICAjIEp1bXAKICAgICAgICAgICAgICAgICAgICB3aGVuIDE0IHRoZW4gQGp1bXAoY29tbWFuZC5zdGVwc1ggKiBAbWFwLnRpbGVTaXplLCBjb21tYW5kLnN0ZXBzWSAqIEBtYXAudGlsZVNpemUpCiAgICAgICAgICAgICAgICAgICAgIyBUdXJuIERvd24KICAgICAgICAgICAgICAgICAgICB3aGVuIDE1IHRoZW4gQGRpcmVjdGlvbiA9IDIKICAgICAgICAgICAgICAgICAgICAjIFR1cm4gTGVmdAogICAgICAgICAgICAgICAgICAgIHdoZW4gMTYgdGhlbiBAZGlyZWN0aW9uID0gNAogICAgICAgICAgICAgICAgICAgICMgVHVybiBVcAogICAgICAgICAgICAgICAgICAgIHdoZW4gMTcgdGhlbiBAZGlyZWN0aW9uID0gNgogICAgICAgICAgICAgICAgICAgICMgVHVybiBSaWdodAogICAgICAgICAgICAgICAgICAgIHdoZW4gMTggdGhlbiBAZGlyZWN0aW9uID0gOAogICAgICAgICAgICAgICAgICAgICMgVHVybiA5MLAgTGVmdAogICAgICAgICAgICAgICAgICAgIHdoZW4gMTkgdGhlbiBAZGlyZWN0aW9uID0gQGRpcmVjdGlvbnNbKEBkaXJlY3Rpb25zLmluZGV4T2YoQGRpcmVjdGlvbikgLSAxKSAlIDRdCiAgICAgICAgICAgICAgICAgICAgIyBUdXJuIDkwsCBSaWdodAogICAgICAgICAgICAgICAgICAgIHdoZW4gMjAgdGhlbiBAZGlyZWN0aW9uID0gQGRpcmVjdGlvbnNbKEBkaXJlY3Rpb25zLmluZGV4T2YoQGRpcmVjdGlvbikgKyAxKSAlIDRdCiAgICAgICAgICAgICAgICAgICAgIyBUdXJuIDkwsCBMZWZ0IG9yIFJpZ2h0CiAgICAgICAgICAgICAgICAgICAgd2hlbiAyMSB0aGVuIEBkaXJlY3Rpb24gPSBAZGlyZWN0aW9uc1soQGRpcmVjdGlvbnMuaW5kZXhPZihAZGlyZWN0aW9uKSArICgtMSAqIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSkpKSAlIDRdCiAgICAgICAgICAgICAgICAgICAgIyBUdXJuIDE4MLAKICAgICAgICAgICAgICAgICAgICB3aGVuIDIyIHRoZW4gQGRpcmVjdGlvbiA9IEBkaXJlY3Rpb25zWyhAZGlyZWN0aW9ucy5pbmRleE9mKEBkaXJlY3Rpb24pICsgMikgJSA0XQogICAgICAgICAgICAgICAgICAgICMgVHVybiBSYW5kb20KICAgICAgICAgICAgICAgICAgICB3aGVuIDIzIHRoZW4gQGRpcmVjdGlvbiA9IEBkaXJlY3Rpb25zW01hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDMpXQogICAgICAgICAgICAgICAgICAgICMgVHVybiB0b3dhcmQgUGxheWVyCiAgICAgICAgICAgICAgICAgICAgd2hlbiAyNCB0aGVuIEBkaXJlY3Rpb24gPSBAZGlyZWN0aW9uVG93YXJkRXZlbnQoR2FtZU1hbmFnZXIucGxheWVyKQogICAgICAgICAgICAgICAgICAgICMgVHVybiBhd2F5IGZyb20gUGxheWVyCiAgICAgICAgICAgICAgICAgICAgd2hlbiAyNSB0aGVuIEBkaXJlY3Rpb24gPSBAZGlyZWN0aW9uQXdheUZyb21FdmVudChHYW1lTWFuYWdlci5wbGF5ZXIpCiAgICAgICAgICAgICAgICAgICAgIyBTd2l0Y2ggT04KICAgICAgICAgICAgICAgICAgICB3aGVuIDI2CiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW5zID0gaWYgY29tbWFuZC5zd2l0Y2guc2NvcGUgPT0gImdsb2JhbCIgdGhlbiBHYW1lTWFuYWdlci5ib29sZWFucyBlbHNlIEBib29sZWFucwogICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuc1tjb21tYW5kLnN3aXRjaC5pbmRleF0gPSB5ZXMKICAgICAgICAgICAgICAgICAgICB3aGVuIDI3CiAgICAgICAgICAgICAgICAgICAgIyBTd2l0Y2ggT0ZGCiAgICAgICAgICAgICAgICAgICAgICAgIGJvb2xlYW5zID0gaWYgY29tbWFuZC5zd2l0Y2guc2NvcGUgPT0gImdsb2JhbCIgdGhlbiBHYW1lTWFuYWdlci5ib29sZWFucyBlbHNlIEBib29sZWFucwogICAgICAgICAgICAgICAgICAgICAgICBib29sZWFuc1tjb21tYW5kLnN3aXRjaC5pbmRleF0gPSBubwogICAgICAgICAgICAgICAgICAgICMgQ2hhbmdlIFNwZWVkCiAgICAgICAgICAgICAgICAgICAgd2hlbiAyOCB0aGVuIEBtb3ZlU3BlZWQgPSBAc3BlZWRzW2NvbW1hbmQuc3BlZWRdCiAgICAgICAgICAgICAgICAgICAgIyBDaGFuZ2UgRnJlcXVlbmN5CiAgICAgICAgICAgICAgICAgICAgd2hlbiAyOSB0aGVuIEBmcmVxdWVuY3kgPSBAZnJlcXVlbmNpZXNbY29tbWFuZC5mcmVxdWVuY3ldCiAgICAgICAgICAgICAgICAgICAgIyBXYWxraW5nIEFuaW1hdGlvbiBPTgogICAgICAgICAgICAgICAgICAgIHdoZW4gMzAgdGhlbiBAd2Fsa2luZ0FuaW1hdGlvbiA9IHllcwogICAgICAgICAgICAgICAgICAgICMgV2Fsa2luZyBBbmltYXRpb24gT0ZGCiAgICAgICAgICAgICAgICAgICAgd2hlbiAzMSB0aGVuIEB3YWxraW5nQW5pbWF0aW9uID0gbm8KICAgICAgICAgICAgICAgICAgICAjIFN0ZXBwaW5nIEFuaW1hdGlvbiBPTgogICAgICAgICAgICAgICAgICAgIHdoZW4gMzIgdGhlbiBAc3RlcHBpbmdBbmltYXRpb24gPSB5ZXMKICAgICAgICAgICAgICAgICAgICAjIFN0ZXBwaW5nIEFuaW1hdGlvbiBPRkYKICAgICAgICAgICAgICAgICAgICB3aGVuIDMzIHRoZW4gQHN0ZXBwaW5nQW5pbWF0aW9uID0gbm8KICAgICAgICAgICAgICAgICAgICAjIERpcmVjdGlvbiBGaXggT04KICAgICAgICAgICAgICAgICAgICB3aGVuIDM0IHRoZW4gQGRpcmVjdGlvbkZpeCA9IHllcwogICAgICAgICAgICAgICAgICAgICMgRGlyZWN0aW9uIEZpeCBPRkYKICAgICAgICAgICAgICAgICAgICB3aGVuIDM1IHRoZW4gQGRpcmVjdGlvbkZpeCA9IG5vCiAgICAgICAgICAgICAgICAgICAgIyBUaHJvdWdoIE9OCiAgICAgICAgICAgICAgICAgICAgd2hlbiAzNiB0aGVuIEB0aHJvdWdoID0geWVzCiAgICAgICAgICAgICAgICAgICAgIyBUaHJvdWdoIE9GRgogICAgICAgICAgICAgICAgICAgIHdoZW4gMzcgdGhlbiBAdGhyb3VnaCA9IG5vCiAgICAgICAgICAgICAgICAgICAgIyBUcmFuc3BhcmVudCBPTgogICAgICAgICAgICAgICAgICAgIHdoZW4gMzggdGhlbiBAb3BhY2l0eSA9IDEyOAogICAgICAgICAgICAgICAgICAgICMgVHJhbnNwYXJlbnQgT0ZGCiAgICAgICAgICAgICAgICAgICAgd2hlbiAzOSB0aGVuIEBvcGFjaXR5ID0gMjU1CiAgICAgICAgICAgICAgICAgICAgIyBNb3Rpb24tQmx1ciBPTgogICAgICAgICAgICAgICAgICAgIHdoZW4gNDAgdGhlbiBAbW90aW9uQmx1ciA9IHllcwogICAgICAgICAgICAgICAgICAgICMgTW90aW9uLUJsdXIgT0ZGCiAgICAgICAgICAgICAgICAgICAgd2hlbiA0MSB0aGVuIEBtb3Rpb25CbHVyID0gbm8KICAgICAgICAgICAgICAgICAgICAjIENoYW5nZSBNb3Rpb24tQmx1cgogICAgICAgICAgICAgICAgICAgIHdoZW4gNDIKICAgICAgICAgICAgICAgICAgICAgICAgQG1vdGlvbkJsdXJMZW5ndGggPSBjb21tYW5kLnNoYWRvd0NvdW50CiAgICAgICAgICAgICAgICAgICAgICAgIEBtb3Rpb25CbHVyT3BhY2l0eSA9IGNvbW1hbmQub3BhY2l0eQogICAgICAgICAgICAgICAgICAgICAgICBAbW90aW9uQmx1ckZpeGVkT3BhY2l0eSA9IGNvbW1hbmQuZml4ZWRPcGFjaXR5CiAgICAgICAgICAgICAgICAgICAgICAgIEBtb3Rpb25CbHVyQ29sb3IgPSBuZXcgQ29sb3IoY29tbWFuZC5jb2xvcikKICAgICAgICAgICAgICAgICAgICAjIEZseQogICAgICAgICAgICAgICAgICAgIHdoZW4gNDMgdGhlbiBAZmx5KGNvbW1hbmQuYWx0aXR1ZGUpCiAgICAgICAgICAgICAgICAgICAgIyBDaGFuZ2UgR3JhcGhpYwogICAgICAgICAgICAgICAgICAgIHdoZW4gNDQKICAgICAgICAgICAgICAgICAgICAgICAgQGdyYXBoaWMgPSBjb21tYW5kLnJlc291cmNlCiAgICAgICAgICAgICAgICAgICAgIyBDaGFuZ2UgT3BhY2l0eQogICAgICAgICAgICAgICAgICAgIHdoZW4gNDUgdGhlbiBAb3BhY2l0eSA9IGNvbW1hbmQub3BhY2l0eQogICAgICAgICAgICAgICAgICAgICMgQ2hhbmdlIEJsZW5kaW5nCiAgICAgICAgICAgICAgICAgICAgd2hlbiA0NiB0aGVuIEBibGVuZGluZyA9IGNvbW1hbmQuYmxlbmRpbmcKICAgICAgICAgICAgICAgICAgICAjIFBsYXkgU291bmQKICAgICAgICAgICAgICAgICAgICB3aGVuIDQ3IHRoZW4gQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChjb21tYW5kLnJlc291cmNlKQogICAgICAgICAgICAgICAgICAgICMgTGFuZAogICAgICAgICAgICAgICAgICAgIHdoZW4gNDggdGhlbiBAbGFuZCgpCiAgICAgICAgICAgICAgICAgICAgIyBDaGFuZ2UgVG9uZQogICAgICAgICAgICAgICAgICAgIHdoZW4gNDkgdGhlbiBAdG9uZSA9IG5ldyBUb25lKGNvbW1hbmQudG9uZS5yZWQsIGNvbW1hbmQudG9uZS5ncmVlbiwgY29tbWFuZC50b25lLmJsdWUsIGNvbW1hbmQudG9uZS5ncmV5KQogICAgICAgICAgICAgICAgICAgICMgU2NyaXB0CiAgICAgICAgICAgICAgICAgICAgd2hlbiA1MCB0aGVuIGV2YWwoY29tbWFuZC5zY3JpcHQpICMgRklYTUU6IFNob3VsZCBiZSBjb21waWxlZCBpbnRvIGEgZnVuY3Rpb24uIAogICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgbW92ZWQgb3IgQHJvdXRlLnNraXAKICAgICAgICAgICAgICAgICAgICBAcm91dGVQb2ludGVyKysKICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgIAogICAgZGlyZWN0aW9uVG93YXJkRXZlbnQ6IChldmVudCkgLT4KICAgICAgICBkeCA9IEB4IC0gZXZlbnQueAogICAgICAgIGR5ID0gQHkgLSBldmVudC55CiAgICAgICAgcmVzdWx0ID0gMAogICAgICAgIGlmIE1hdGguYWJzKGR4KSA8IE1hdGguYWJzKGR5KQogICAgICAgICAgICBpZiBkeSA+IDAgdGhlbiByZXN1bHQgPSA2CiAgICAgICAgICAgIGlmIGR5IDwgMCB0aGVuIHJlc3VsdCA9IDIKICAgICAgICBpZiBNYXRoLmFicyhkeCkgPj0gTWF0aC5hYnMoZHkpCiAgICAgICAgICAgIGlmIGR4ID4gMCB0aGVuIHJlc3VsdCA9IDQKICAgICAgICAgICAgaWYgZHggPCAwIHRoZW4gcmVzdWx0ID0gOAogICAgICAgIAogICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAKICAgIGRpcmVjdGlvbkF3YXlGcm9tRXZlbnQ6IChldmVudCkgLT4KICAgICAgICBkeCA9IEB4IC0gZXZlbnQueAogICAgICAgIGR5ID0gQHkgLSBldmVudC55CiAgICAgICAgcmVzdWx0ID0gMAogICAgICAgIGlmIE1hdGguYWJzKGR4KSA8IE1hdGguYWJzKGR5KQogICAgICAgICAgICBpZiBkeSA+IDAgdGhlbiByZXN1bHQgPSAyCiAgICAgICAgICAgIGlmIGR5IDwgMCB0aGVuIHJlc3VsdCA9IDYKICAgICAgICBpZiBNYXRoLmFicyhkeCkgPj0gTWF0aC5hYnMoZHkpCiAgICAgICAgICAgIGlmIGR4ID4gMCB0aGVuIHJlc3VsdCA9IDgKICAgICAgICAgICAgaWYgZHggPCAwIHRoZW4gcmVzdWx0ID0gNCAKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgICAgICAKICAgIGN1cnJlbnRQb3NpdGlvbkluZGV4OiAtPgogICAgICAgIHR4ID0gTWF0aC5mbG9vcihAeCAvIEBtYXAudGlsZVNpemUpCiAgICAgICAgdHkgPSBNYXRoLmZsb29yKEB5IC8gQG1hcC50aWxlU2l6ZSkKICAgICAgICAKICAgICAgICByZXR1cm4gdHkgKiBAbWFwLndpZHRoICsgdHgKICAgICAgICAKICAgIG5leHRQb3NpdGlvbkluZGV4OiAoZGlyZWN0aW9uLCBhbGxvd0NvdW50ZXJGbGFncykgLT4KICAgICAgICB0eCA9IE1hdGguZmxvb3IoQHggLyBAbWFwLnRpbGVTaXplKQogICAgICAgIHR5ID0gTWF0aC5mbG9vcihAeSAvIEBtYXAudGlsZVNpemUpCiAgICAgICAgcG9zaXRpb24gPSBudWxsCiAgICAgICAgbG9vcEggPSBAbWFwTG9naWMubG9vcFR5cGUgPj0gMgogICAgICAgIGxvb3BWID0gQG1hcExvZ2ljLmxvb3BUeXBlID09IDEgb3IgQG1hcExvZ2ljLmxvb3BUeXBlID09IDMKICAgICAgICAgICAgCiAgICAgICAgbG9vcAogICAgICAgICAgICBzd2l0Y2ggZGlyZWN0aW9uCiAgICAgICAgICAgICAgICB3aGVuIDIgdGhlbiB0eSA9IChpZiBsb29wViB0aGVuIChpZiB0eSA9PSBAbWFwLmhlaWdodC0xIHRoZW4gMCBlbHNlIHR5KzEpIGVsc2UgIE1hdGgubWluKHR5KzEsIEBtYXAuaGVpZ2h0LTEpKQogICAgICAgICAgICAgICAgd2hlbiA0IHRoZW4gdHggPSAoaWYgbG9vcEggdGhlbiAoaWYgdHggPT0gMCB0aGVuIEBtYXAud2lkdGgtMSBlbHNlIHR4LTEpIGVsc2UgTWF0aC5tYXgodHgtMSwgMCkpCiAgICAgICAgICAgICAgICB3aGVuIDYgdGhlbiB0eSA9IChpZiBsb29wViB0aGVuIChpZiB0eSA9PSAwIHRoZW4gQG1hcC5oZWlnaHQtMSBlbHNlIHR5LTEpIGVsc2UgTWF0aC5tYXgodHktMSwgMCkpCiAgICAgICAgICAgICAgICB3aGVuIDggdGhlbiB0eCA9IChpZiBsb29wSCB0aGVuIChpZiB0eCA9PSBAbWFwLndpZHRoLTEgdGhlbiAwIGVsc2UgdHgrMSkgZWxzZSBNYXRoLm1pbih0eCsxLCBAbWFwLndpZHRoLTEpKQoKICAgICAgICAgICAgcG9zaXRpb24gPSB0eSAqIEBtYXAud2lkdGggKyB0eCAgICAgICAgCiAgICAgICAgICAgIGJyZWFrIGlmIG5vdCBhbGxvd0NvdW50ZXJGbGFncyBvciBub3QgQGNoZWNrQ291bnRlckZsYWcocG9zaXRpb24pCiAgICAgICAgCiAgICAgICAgcmV0dXJuIHBvc2l0aW9uCiAgICBmbHk6IChhbHRpdHVkZSkgLT4KICAgICAgICBAaXNGbHlpbmcgPSB5ZXMKICAgICAgICBAaXNTb2FyaW5nID0geWVzCiAgICAgICAgQGFuaW1hdGlvbkNvdW50ZXIgPSBhbHRpdHVkZSAqIEBtYXAudGlsZVNpemUKICAgICAgICBAYWx0aXR1ZGUgPSBhbHRpdHVkZQogICAgICAgIAogICAgbGFuZDogLT4KICAgICAgICBAaXNGbHlpbmcgPSBubwogICAgICAgIEBpc1NvYXJpbmcgPSBubwogICAgICAgIEBpc0xhbmRpbmcgPSB5ZXMKICAgICAgICBAYW5pbWF0aW9uQ291bnRlciA9IEBhbHRpdHVkZSAqIEBtYXAudGlsZVNpemUKICAgICAgICBAYWx0aXR1ZGUgPSAwCiAgICAgICAgCiAgICB0eDogLT4gTWF0aC5mbG9vcihAeCAvIEBtYXAudGlsZVNpemUpCiAgICB0eTogLT4gTWF0aC5mbG9vcihAeSAvIEBtYXAudGlsZVNpemUpCiAgICAgICAgCiAgICBzZXRUaWxlTG9jYXRpb246ICh4LCB5KSAtPgogICAgICAgIHggPSBNYXRoLm1heChNYXRoLm1pbih4LCBAbWFwLndpZHRoLTEpLCAwKQogICAgICAgIHkgPSBNYXRoLm1heChNYXRoLm1pbih5LCBAbWFwLmhlaWdodC0xKSwgMCkKICAgICAgICAKICAgICAgICB0eCA9IE1hdGguZmxvb3IoQHggLyBAbWFwLnRpbGVTaXplKQogICAgICAgIHR5ID0gTWF0aC5mbG9vcihAeSAvIEBtYXAudGlsZVNpemUpCiAgICAKICAgICAgICBAY29sbGlzaW9uTWFwW3R5ICogQG1hcC53aWR0aCArIHR4XS5yZW1vdmUodGhpcykKICAgICAgICBAY29sbGlzaW9uTWFwW3kgKiBAbWFwLndpZHRoICsgeF0ucHVzaCh0aGlzKQogICAgICAgICAgICAKICAgICAgICBAeCA9IHggKiBAbWFwLnRpbGVTaXplCiAgICAgICAgQHkgPSB5ICogQG1hcC50aWxlU2l6ZQogICAgICAgIAogICAganVtcDogKHgsIHkpIC0+CiAgICAgICAgaWYgTWF0aC5hYnMoeCkgPCBNYXRoLmFicyh5KQogICAgICAgICAgICBpZiB5ID4gMCB0aGVuIEBkaXJlY3Rpb24gPSAyCiAgICAgICAgICAgIGlmIHkgPCAwIHRoZW4gQGRpcmVjdGlvbiA9IDYgIAogICAgICAgIGVsc2UKICAgICAgICAgICAgaWYgeCA+IDAgdGhlbiBAZGlyZWN0aW9uID0gOAogICAgICAgICAgICBpZiB4IDwgMCB0aGVuIEBkaXJlY3Rpb24gPSA0CiAgICAgICAgICAgIAogICAgICAgIEBpc0p1bXBpbmcgPSB5ZXMKICAgICAgICAKICAgICAgICBkaXN0YW5jZSA9IE1hdGgucm91bmQoTWF0aC5zcXJ0KHggKiB4ICsgeSAqIHkpKQogICAgICAgIEBzaGFkb3dZID0gQHkKICAgICAgICBAanVtcFggPSBAeCArIHgKICAgICAgICBAanVtcFkgPSBAeSArIHkKICAgICAgICBAanVtcFBlYWsgPSAxMDAgKyBkaXN0YW5jZQogICAgICAgIEBqdW1wQ291bnRlciA9IE1hdGgucm91bmQoQGp1bXBQZWFrIC8gKEBtb3ZlU3BlZWQqMykpCiAgICAgICAgQGp1bXBDb3VudGVySGFsZiA9IE1hdGgucm91bmQoQGp1bXBDb3VudGVyIC8gMikKICAgICAgICBAanVtcFZhbHVlID0gTWF0aC5yb3VuZChAanVtcFBlYWsgLyBAanVtcENvdW50ZXJIYWxmKQogICAgICAgIEBqdW1wSGVpZ2h0ID0gMAogICAgbW92ZTogKGRpcmVjdGlvbikgLT4KICAgICAgICBpZiBub3QgQGlzTW92aW5nIGFuZCBub3QgQGlzTG9ja2VkCiAgICAgICAgICAgIEBpc01vdmluZyA9IHllcwogICAgICAgICAgICBAZGlyZWN0aW9uID0gZGlyZWN0aW9uCiAgICAgICAgICAgIAogICAgICAgICAgICB0eCA9IE1hdGguZmxvb3IoQHggLyBAbWFwLnRpbGVTaXplKQogICAgICAgICAgICB0eSA9IE1hdGguZmxvb3IoQHkgLyBAbWFwLnRpbGVTaXplKQogICAgICAgICAgICBwb3NpdGlvbiA9IEBuZXh0UG9zaXRpb25JbmRleChkaXJlY3Rpb24pCiAgICAgICAgICAgIAogICAgICAgICAgICBAY2hlY2tCdXNoRmxhZyhwb3NpdGlvbikKICAgCiAgICAgICAgICAgIEBjb2xsaXNpb25NYXBbdHkgKiBAbWFwLndpZHRoICsgdHhdLnJlbW92ZSh0aGlzKQogICAgICAgICAgICBAY29sbGlzaW9uTWFwW3Bvc2l0aW9uXS5wdXNoKHRoaXMpCiAgICAgICAgICAgIAogICAgICAgICAgICByZXR1cm4geWVzICAgCiAgICAgICAgZWxzZQogICAgICAgICAgICByZXR1cm4gbm8KICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgbW92ZVJvdXRlOiAocm91dGUpIC0+CiAgICAgICAgQHJvdXRlID0gcm91dGUKICAgICAgICBAcm91dGVQb2ludGVyID0gMAogICAgICAgIEByb3V0ZVdhaXRDb3VudGVyID0gMAogICAgICAgICAgICAKICAgIGNhbk1vdmU6IChkaXJlY3Rpb24pIC0+CiAgICAgICAgb2Zmc2V0ID0gMAogICAgICAgIHRpbGUgPSAwCiAgICAgICAgc2l6ZSA9IDAKICAgICAgICByZXN1bHQgPSBubwogICAgICAgIHBvc2l0aW9uID0gQG5leHRQb3NpdGlvbkluZGV4KGRpcmVjdGlvbikKICAgICAgICBjdXJyZW50ID0gQGN1cnJlbnRQb3NpdGlvbkluZGV4KCkKICAgICAgICAKICAgICAgICBpZiBAdGhyb3VnaAogICAgICAgICAgICByZXN1bHQgPSBwb3NpdGlvbiA+PSAwIGFuZCBwb3NpdGlvbiA8IChAbWFwLndpZHRoICogQG1hcC5oZWlnaHQpCiAgICAgICAgZWxzZQogICAgICAgICAgICBzaXplID0gQG1hcC53aWR0aCAqIEBtYXAuaGVpZ2h0CiAgICAgICAgICAgIGZvciBpIGluIFswLi4uQG1hcC5kZXB0aF0KICAgICAgICAgICAgICAgIHRpbGUgPSBAbWFwRGF0YVtwb3NpdGlvbiArIGkgKiBzaXplXQogICAgICAgICAgICAgICAgY3VycmVudFRpbGUgPSBAbWFwRGF0YVtjdXJyZW50ICsgaSAqIHNpemVdCiAgICAgICAgICAgICAgICB0YWcgPSBAdGlsZXNldC50ZXJyYWluVGFnc1t0aWxlXQogICAgICAgICAgICAgICAgaWYgQHBhc3NhZ2VzPyBhbmQgQHBhc3NhZ2VzLmxlbmd0aCA+IDAgYW5kIHRhZyA+IDAgIyBTcGVjaWFsIFBhc3NhZ2VzIC0gSWdub3JlIFRpbGVzZXQgUGFzc2FnZXMgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHRlcnJhaW4gPSBAdGVycmFpbnNbdGFnXQogICAgICAgICAgIAogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IG5vCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gaWYgdGVycmFpbj8gYW5kIEBwYXNzYWdlc1t0ZXJyYWluLmluZGV4XT8gdGhlbiBAcGFzc2FnZXNbdGVycmFpbi5pbmRleF0gPT0gMCBlbHNlIHJlc3VsdAogICAgICAgICAgICAgICAgICAgIGlmIG5vdCByZXN1bHQgdGhlbiBicmVhawogICAgICAgICAgICAgICAgZWxzZSAjIFVzZSBUaWxlc2V0IFBhc3NhZ2VzCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0gQGNoZWNrUGFzc2FnZShAdGlsZXNldC5wYXNzYWdlc1t0aWxlXSwgZGlyZWN0aW9uKQogICAgICAgICAgICAgICAgICAgIGlmIHJlc3VsdCB0aGVuIHJlc3VsdCA9IEBjaGVja1Bhc3NhZ2VSZXZlcnNlKEB0aWxlc2V0LnBhc3NhZ2VzW2N1cnJlbnRUaWxlXSwgZGlyZWN0aW9uKQogICAgICAgICAgICAgICAgICAgIGlmIG5vdCByZXN1bHQgdGhlbiBicmVhawogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXN1bHQKICAgICAgICAgICAgICAgIHJlc3VsdCA9IEBjb2xsaXNpb25NYXBbcG9zaXRpb25dPyBhbmQgQGNvbGxpc2lvbk1hcFtwb3NpdGlvbl0ubGVuZ3RoID09IDAgb3IgQGNhbk1vdmVUaHJvdWdoKEBjb2xsaXNpb25NYXBbcG9zaXRpb25dKQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBjYW5Nb3ZlVGhyb3VnaDogKGNoYXJhY3RlcnMpIC0+CiAgICAgICAgcmVzdWx0ID0geWVzCiAgICAgICAgCiAgICAgICAgaWYgY2hhcmFjdGVycz8gCiAgICAgICAgICAgIGZvciBjaGFyYWN0ZXIgaW4gY2hhcmFjdGVycwogICAgCiAgICAgICAgICAgICAgICBpZiBub3QgY2hhcmFjdGVyLnRocm91Z2gKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBjaGFyYWN0ZXIubGF5ZXIgIT0gQGxheWVyCiAgICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBjaGVja1Bhc3NhZ2U6IChwYXNzYWdlLCBkaXJlY3Rpb24pIC0+CiAgICAgICAgcmVzdWx0ID0gcGFzc2FnZSA9PSAwCiAgICAgICAgCiAgICAgICAgaWYgbm90IHJlc3VsdAogICAgICAgICAgICBzd2l0Y2ggZGlyZWN0aW9uCiAgICAgICAgICAgICAgICB3aGVuIDIgdGhlbiByZXN1bHQgPSBub3QgKHBhc3NhZ2UgJiAweDA4KQogICAgICAgICAgICAgICAgd2hlbiA0IHRoZW4gcmVzdWx0ID0gbm90IChwYXNzYWdlICYgMHgwNCkKICAgICAgICAgICAgICAgIHdoZW4gNiB0aGVuIHJlc3VsdCA9IG5vdCAocGFzc2FnZSAmIDB4MDEpCiAgICAgICAgICAgICAgICB3aGVuIDggdGhlbiByZXN1bHQgPSBub3QgKHBhc3NhZ2UgJiAweDAyKQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBjaGVja1Bhc3NhZ2VSZXZlcnNlOiAocGFzc2FnZSwgZGlyZWN0aW9uKSAtPgogICAgICAgIHJlc3VsdCA9IHBhc3NhZ2UgPT0gMAogICAgICAgIAogICAgICAgIGlmIG5vdCByZXN1bHQKICAgICAgICAgICAgc3dpdGNoIGRpcmVjdGlvbgogICAgICAgICAgICAgICAgd2hlbiA2IHRoZW4gcmVzdWx0ID0gbm90IChwYXNzYWdlICYgMHgwOCkKICAgICAgICAgICAgICAgIHdoZW4gOCB0aGVuIHJlc3VsdCA9IG5vdCAocGFzc2FnZSAmIDB4MDQpCiAgICAgICAgICAgICAgICB3aGVuIDIgdGhlbiByZXN1bHQgPSBub3QgKHBhc3NhZ2UgJiAweDAxKQogICAgICAgICAgICAgICAgd2hlbiA0IHRoZW4gcmVzdWx0ID0gbm90IChwYXNzYWdlICYgMHgwMikKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIAogICAgY2hlY2tDb3VudGVyRmxhZzogKHBvc2l0aW9uKSAtPgogICAgICAgIHNpemUgPSBAbWFwLndpZHRoICogQG1hcC5oZWlnaHQKICAgICAgICBmb3IgaSBpbiBbMC4uLkBtYXAuZGVwdGhdCiAgICAgICAgICAgIHJlc3VsdCA9IEB0aWxlc2V0LnBhc3NhZ2VzW0BtYXBEYXRhW3Bvc2l0aW9uICsgaSAqIHNpemVdXSAmIDB4ODAKICAgICAgICAgICAgaWYgcmVzdWx0IHRoZW4gYnJlYWsKICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBjaGVja0J1c2hGbGFnOiAocG9zaXRpb24pIC0+CiAgICAgICAgc2l6ZSA9IEBtYXAud2lkdGggKiBAbWFwLmhlaWdodAogICAgICAgIHBvc2l0aW9uID0gaWYgcG9zaXRpb24/IHRoZW4gcG9zaXRpb24gZWxzZSBAY3VycmVudFBvc2l0aW9uSW5kZXgoKQogICAgICAgIEBidXNoRmxhZyA9IG5vCiAgICAgICAgZm9yIGkgaW4gWzAuLi5AbWFwLmRlcHRoXQogICAgICAgICAgICB0aWxlID0gQG1hcERhdGFbcG9zaXRpb24gKyBpICogc2l6ZV0KICAgICAgICAgICAgYnVzaEZsYWcgPSBAdGlsZXNldC5wYXNzYWdlc1t0aWxlXSAmIDB4NDAKICAgICAgICAgICAgaWYgYnVzaEZsYWcKICAgICAgICAgICAgICAgIEBidXNoRmxhZyA9IHllcwogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKd2luZG93LkxvZ2ljX0NoYXJhY3RlciA9IExvZ2ljX0NoYXJhY3Rlcg==","compiledContent":""},{"name":"Logic_Event","content":"","compiledContent":""},{"name":"Logic_GlobalEvent","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfR2xvYmFsRXZlbnQKIyAgIENyZWF0ZWQgb246IDIwMTMtMTEtMDMKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogTG9naWNfR2xvYmFsRXZlbnQKIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBMb2dpY19HbG9iYWxFdmVudCBleHRlbmRzIExvZ2ljX0V2ZW50CiAgICBjb25zdHJ1Y3RvcjogKGV2ZW50LCBpZCkgLT4KICAgICAgICBzdXBlcihldmVudCwgaWQpCiAgICAgICAgQG1hcFVpZCA9IGV2ZW50Lm1hcFVpZAogICAgICAgIEBtYXBJZCA9IEBtYXBVaWQKICAgICAgICBAc3RlcHMgPSAwCiAgICAgICAgQGlzUGxheWVyID0gbm8KICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIHN1cGVyKCkgCiAgICAgICAgCiAgICAgICAgaWYgQGlzUGxheWVyCiAgICAgICAgICAgIEB1cGRhdGVQbGF5ZXIoKQogICAgICAgICAgICBAdXBkYXRlVGVycmFpblRhZygpCiAgICAgICAgICAKICAgIHVwZGF0ZVRlcnJhaW5UYWc6IC0+CiAgICAgICAgcG9zaXRpb24gPSBAY3VycmVudFBvc2l0aW9uSW5kZXgoKQogICAgICAgIG9mZnNldCA9IEBtYXAud2lkdGggKiBAbWFwLmhlaWdodAogICAgICAgIAogICAgICAgIGZvciBpIGluIFtAbWFwLmRlcHRoLi4uMF0KICAgICAgICAgICAgdGlsZSA9IEBtYXBEYXRhW3Bvc2l0aW9uICsgb2Zmc2V0KihpLTEpXQogICAgICAgICAgICBAdGVycmFpblRhZyA9IEB0aWxlc2V0LnRlcnJhaW5UYWdzW3RpbGVdCiAgICAgICAgICAgIGlmIEB0ZXJyYWluVGFnICE9IDAgdGhlbiBicmVhawogICAgICAgIAogICAgdXBkYXRlUGxheWVyOiAtPgogICAgICAgIGRpcmVjdGlvbiA9IElucHV0LmRpcjQoKQogICAgICAgIHBvc2l0aW9uID0gMAogICAgICAgIGV2ZW50cyA9IG51bGwKICAgICAgICBjaGFyYWN0ZXJzID0gbnVsbAogICAgCiAgICAgICAgCiAgICAgICAgaWYgZGlyZWN0aW9uID4gMCBhbmQgbm90IEBpc01vdmluZwogICAgICAgICAgICBAZGlyZWN0aW9uID0gZGlyZWN0aW9uCiAgICAgICAgICAgIAogICAgICAgICAgICBtb3ZlZCA9IEBtb3ZlKGRpcmVjdGlvbikKICAgICAgICAgICAgaWYgbW92ZWQgdGhlbiBAc3RlcHMrKwogICAgICAgICAgICBAYXBwbHlUZXJyYWluKEB0ZXJyYWluKQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgbW92ZWQKICAgICAgICAgICAgICAgIGZvciBtZW1iZXIgaW4gR2FtZU1hbmFnZXIucGFydHkubWVtYmVycwogICAgICAgICAgICAgICAgICAgIG1lbWJlci5jaGVja1N0YXRlcyhubywgbm8sIG5vLCAwLCBAc3RlcHMsIDApCiAgICAgICAgICAgIAogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuQykgYW5kIG5vdCBAaXNNb3ZpbmcKICAgICAgICAgICAgcG9zaXRpb24gPSBAbmV4dFBvc2l0aW9uSW5kZXgoQGRpcmVjdGlvbiwgeWVzKQogICAgICAgICAgICBldmVudHMgPSBAY29sbGlzaW9uTWFwW3Bvc2l0aW9uXQogICAgICAgICAgICBzdGFydGVkID0gbm8KICAgICAgICAgICAgaWYgZXZlbnRzPwogICAgICAgICAgICAgICAgZm9yIGV2ZW50IGluIGV2ZW50cwogICAgICAgICAgICAgICAgICAgIGlmIGV2ZW50LnN0YXJ0Q29uZGl0aW9uID09IDAKICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRlZCA9IHllcwogICAgICAgICAgICAgICAgICAgICAgICBJbnB1dC5jbGVhcigpCiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0YXJ0KCkKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgaWYgKG5vdCBzdGFydGVkKSBhbmQgQHN0YXJ0Q29uZGl0aW9uID09IDAgYW5kIEBjdXJyZW50UGFnZS5jb21tYW5kcz8gYW5kIEBjdXJyZW50UGFnZS5jb21tYW5kcy5sZW5ndGggPiAwCiAgICAgICAgICAgICAgICAgICAgSW5wdXQuY2xlYXIoKQogICAgICAgICAgICAgICAgICAgIEBzdGFydCgpCiAgICAgICAgICAgICAgICAKICAgICAgICAgICAgICAgICAgICAKICAgIGFwcGx5VGVycmFpbjogKHRlcnJhaW4pIC0+CiAgICAgICAgaWYgbm90IHRlcnJhaW4/IHRoZW4gcmV0dXJuCiAgICAgICAgCiAgICAgICAgaWYgdGVycmFpbi5kYW1hZ2UudHlwZSA+IDAKICAgICAgICAgICAgZm9yIG1lbWJlciBpbiBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzCiAgICAgICAgICAgICAgICBtZW1iZXIudGFrZURhbWFnZSh0ZXJyYWluLmRhbWFnZSkKICAgICAgICAgICAgICAgIGlmIHRlcnJhaW4ucGxheVNvdW5kT25EYW1hZ2UKICAgICAgICAgICAgICAgICAgICBBdWRpb01hbmFnZXIucGxheVNvdW5kKHRlcnJhaW4uc291bmQpCiAgICAgICAgCiAgICAgICAgaWYgbm90IHRlcnJhaW4ucGxheVNvdW5kT25EYW1hZ2UKICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZCh0ZXJyYWluLnNvdW5kKQogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICAgICAgCndpbmRvdy5Mb2dpY19HbG9iYWxFdmVudCA9IExvZ2ljX0dsb2JhbEV2ZW50","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19HbG9iYWxFdmVudCwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIExvZ2ljX0dsb2JhbEV2ZW50ID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKExvZ2ljX0dsb2JhbEV2ZW50LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIExvZ2ljX0dsb2JhbEV2ZW50KGV2ZW50LCBpZCkgewogICAgICBMb2dpY19HbG9iYWxFdmVudC5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBldmVudCwgaWQpOwogICAgICB0aGlzLm1hcFVpZCA9IGV2ZW50Lm1hcFVpZDsKICAgICAgdGhpcy5tYXBJZCA9IHRoaXMubWFwVWlkOwogICAgICB0aGlzLnN0ZXBzID0gMDsKICAgICAgdGhpcy5pc1BsYXllciA9IGZhbHNlOwogICAgfQoKICAgIExvZ2ljX0dsb2JhbEV2ZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgTG9naWNfR2xvYmFsRXZlbnQuX19zdXBlcl9fLnVwZGF0ZS5jYWxsKHRoaXMpOwogICAgICBpZiAodGhpcy5pc1BsYXllcikgewogICAgICAgIHRoaXMudXBkYXRlUGxheWVyKCk7CiAgICAgICAgcmV0dXJuIHRoaXMudXBkYXRlVGVycmFpblRhZygpOwogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX0dsb2JhbEV2ZW50LnByb3RvdHlwZS51cGRhdGVUZXJyYWluVGFnID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpLCBvZmZzZXQsIHBvc2l0aW9uLCB0aWxlLCBfaSwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIHBvc2l0aW9uID0gdGhpcy5jdXJyZW50UG9zaXRpb25JbmRleCgpOwogICAgICBvZmZzZXQgPSB0aGlzLm1hcC53aWR0aCAqIHRoaXMubWFwLmhlaWdodDsKICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgZm9yIChpID0gX2kgPSBfcmVmID0gdGhpcy5tYXAuZGVwdGg7IF9yZWYgPD0gMCA/IF9pIDwgMCA6IF9pID4gMDsgaSA9IF9yZWYgPD0gMCA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgdGlsZSA9IHRoaXMubWFwRGF0YVtwb3NpdGlvbiArIG9mZnNldCAqIChpIC0gMSldOwogICAgICAgIHRoaXMudGVycmFpblRhZyA9IHRoaXMudGlsZXNldC50ZXJyYWluVGFnc1t0aWxlXTsKICAgICAgICBpZiAodGhpcy50ZXJyYWluVGFnICE9PSAwKSB7CiAgICAgICAgICBicmVhazsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgX3Jlc3VsdHMucHVzaCh2b2lkIDApOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIExvZ2ljX0dsb2JhbEV2ZW50LnByb3RvdHlwZS51cGRhdGVQbGF5ZXIgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNoYXJhY3RlcnMsIGRpcmVjdGlvbiwgZXZlbnQsIGV2ZW50cywgbWVtYmVyLCBtb3ZlZCwgcG9zaXRpb24sIHN0YXJ0ZWQsIF9pLCBfaiwgX2xlbiwgX2xlbjEsIF9yZWY7CiAgICAgIGRpcmVjdGlvbiA9IElucHV0LmRpcjQoKTsKICAgICAgcG9zaXRpb24gPSAwOwogICAgICBldmVudHMgPSBudWxsOwogICAgICBjaGFyYWN0ZXJzID0gbnVsbDsKICAgICAgaWYgKGRpcmVjdGlvbiA+IDAgJiYgIXRoaXMuaXNNb3ZpbmcpIHsKICAgICAgICB0aGlzLmRpcmVjdGlvbiA9IGRpcmVjdGlvbjsKICAgICAgICBtb3ZlZCA9IHRoaXMubW92ZShkaXJlY3Rpb24pOwogICAgICAgIGlmIChtb3ZlZCkgewogICAgICAgICAgdGhpcy5zdGVwcysrOwogICAgICAgIH0KICAgICAgICB0aGlzLmFwcGx5VGVycmFpbih0aGlzLnRlcnJhaW4pOwogICAgICAgIGlmIChtb3ZlZCkgewogICAgICAgICAgX3JlZiA9IEdhbWVNYW5hZ2VyLnBhcnR5Lm1lbWJlcnM7CiAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgICAgbWVtYmVyID0gX3JlZltfaV07CiAgICAgICAgICAgIG1lbWJlci5jaGVja1N0YXRlcyhmYWxzZSwgZmFsc2UsIGZhbHNlLCAwLCB0aGlzLnN0ZXBzLCAwKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuQykgJiYgIXRoaXMuaXNNb3ZpbmcpIHsKICAgICAgICBwb3NpdGlvbiA9IHRoaXMubmV4dFBvc2l0aW9uSW5kZXgodGhpcy5kaXJlY3Rpb24sIHRydWUpOwogICAgICAgIGV2ZW50cyA9IHRoaXMuY29sbGlzaW9uTWFwW3Bvc2l0aW9uXTsKICAgICAgICBzdGFydGVkID0gZmFsc2U7CiAgICAgICAgaWYgKGV2ZW50cyAhPSBudWxsKSB7CiAgICAgICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBldmVudHMubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7CiAgICAgICAgICAgIGV2ZW50ID0gZXZlbnRzW19qXTsKICAgICAgICAgICAgaWYgKGV2ZW50LnN0YXJ0Q29uZGl0aW9uID09PSAwKSB7CiAgICAgICAgICAgICAgc3RhcnRlZCA9IHRydWU7CiAgICAgICAgICAgICAgSW5wdXQuY2xlYXIoKTsKICAgICAgICAgICAgICBldmVudC5zdGFydCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9CiAgICAgICAgICBpZiAoKCFzdGFydGVkKSAmJiB0aGlzLnN0YXJ0Q29uZGl0aW9uID09PSAwICYmICh0aGlzLmN1cnJlbnRQYWdlLmNvbW1hbmRzICE9IG51bGwpICYmIHRoaXMuY3VycmVudFBhZ2UuY29tbWFuZHMubGVuZ3RoID4gMCkgewogICAgICAgICAgICBJbnB1dC5jbGVhcigpOwogICAgICAgICAgICByZXR1cm4gdGhpcy5zdGFydCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBMb2dpY19HbG9iYWxFdmVudC5wcm90b3R5cGUuYXBwbHlUZXJyYWluID0gZnVuY3Rpb24odGVycmFpbikgewogICAgICB2YXIgbWVtYmVyLCBfaSwgX2xlbiwgX3JlZjsKICAgICAgaWYgKHRlcnJhaW4gPT0gbnVsbCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGVycmFpbi5kYW1hZ2UudHlwZSA+IDApIHsKICAgICAgICBfcmVmID0gR2FtZU1hbmFnZXIucGFydHkubWVtYmVyczsKICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgIG1lbWJlciA9IF9yZWZbX2ldOwogICAgICAgICAgbWVtYmVyLnRha2VEYW1hZ2UodGVycmFpbi5kYW1hZ2UpOwogICAgICAgICAgaWYgKHRlcnJhaW4ucGxheVNvdW5kT25EYW1hZ2UpIHsKICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZCh0ZXJyYWluLnNvdW5kKTsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKCF0ZXJyYWluLnBsYXlTb3VuZE9uRGFtYWdlKSB7CiAgICAgICAgcmV0dXJuIEF1ZGlvTWFuYWdlci5wbGF5U291bmQodGVycmFpbi5zb3VuZCk7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIExvZ2ljX0dsb2JhbEV2ZW50OwoKICB9KShMb2dpY19FdmVudCk7CgogIHdpbmRvdy5Mb2dpY19HbG9iYWxFdmVudCA9IExvZ2ljX0dsb2JhbEV2ZW50OwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Logic_CommonEvent","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfQ29tbW9uRXZlbnQKIyAgIENyZWF0ZWQgb246IDIwMTMtMTItMTMKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogTG9naWNfQ29tbW9uRXZlbnQKIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBMb2dpY19Db21tb25FdmVudAogICAgY29uc3RydWN0b3I6IChldmVudCwgaWQpIC0+CiAgICAgICAgQGlkID0gaWQKICAgICAgICBAZXZlbnQgPSBldmVudAogICAgICAgICAKICAgICAgICBAaW50ZXJwcmV0ZXIgPSBudWxsCiAgIAogICAgICAgIAogICAgICAgIEBwYXJhbWV0ZXJzID0gaWYgQGV2ZW50LnBhcmFtZXRlcnM/IHRoZW4gQGV2ZW50LnBhcmFtZXRlcnMgZWxzZSBbXQogICAgICAgIEBzdGFydENvbmRpdGlvbiA9IGlmIEBldmVudC5zdGFydENvbmRpdGlvbj8gdGhlbiBAZXZlbnQuc3RhcnRDb25kaXRpb24gZWxzZSAwCiAgICAgICAgQHBhcmFsbGVsID0gaWYgQGV2ZW50LnBhcmFsbGVsPyB0aGVuIEBldmVudC5wYXJhbGxlbCBlbHNlIG5vCiAgICAgICAgQGNvbmRpdGlvblN3aXRjaCA9IGlmIEBldmVudC5jb25kaXRpb25Td2l0Y2g/IHRoZW4gQGV2ZW50LmNvbmRpdGlvblN3aXRjaCBlbHNlIG51bGwKICAgICAgICBAaGFzQ29uZGl0aW9uID0gQGV2ZW50LmNvbmRpdGlvbkVuYWJsZWQKICAgICAgICBAaW50ZXJwcmV0ZXIgPSBpZiBAc3RhcnRDb25kaXRpb24gPT0gMSBhbmQgbm90IEBwYXJhbGxlbCB0aGVuIEdhbWVNYW5hZ2VyLmludGVycHJldGVyIGVsc2UgbmV3IENvbW1hbmRJbnRlcnByZXRlcihAZXZlbnQuY29tbWFuZHMpCiAgICAgICAgQHJlYWR5VG9TdGFydCA9IG5vCiAgICBzdGFydDogKHBhcmFtZXRlcnMpIC0+CiAgICAgICAgQHN0YXJ0UGFyYW1ldGVycyA9IHBhcmFtZXRlcnMgICAgICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgaWYgQGludGVycHJldGVyPyBhbmQgbm90IEBpbnRlcnByZXRlci5pc1J1bm5pbmcKICAgICAgICAgICAgQGludGVycHJldGVyLnJlcGVhdCA9IEBzdGFydENvbmRpdGlvbiA9PSAxCiAgICAgICAgICAgIEBpbnRlcnByZXRlci5jb21tYW5kcyA9IEBldmVudC5jb21tYW5kcwogICAgICAgICAgICBAcmVhZHlUb1N0YXJ0ID0geWVzCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICBpZiBAcGFyYWxsZWwgYW5kIEBvbkZpbmlzaD8gdGhlbiBAb25GaW5pc2godGhpcykKICAKICAgIGNhbGw6IChwYXJhbWV0ZXJzKSAtPgogICAgICAgIGludGVycHJldGVyID0gbmV3IENvbW1hbmRJbnRlcnByZXRlcihAZXZlbnQuY29tbWFuZHMpCiAgICAgICAgaW50ZXJwcmV0ZXIudGVtcE51bWJlcnMgPSBbXQogICAgICAgIGludGVycHJldGVyLnRlbXBTdHJpbmdzID0gW10KICAgICAgICBpbnRlcnByZXRlci50ZW1wQm9vbGVhbnMgPSBbXQogICAgICAgIAogICAgICAgIEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUudGVtcE51bWJlcnMgPSBpbnRlcnByZXRlci50ZW1wTnVtYmVycwogICAgICAgIEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUudGVtcFN0cmluZ3MgPSBpbnRlcnByZXRlci50ZW1wU3RyaW5ncwogICAgICAgIEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUudGVtcEJvb2xlYW5zID0gaW50ZXJwcmV0ZXIudGVtcEJvb2xlYW5zCiAgICAgICAgCiAgICAgICAgaWYgcGFyYW1ldGVycz8gYW5kIHBhcmFtZXRlcnMudmFsdWVzPwogICAgICAgICAgICBmb3IgaSBpbiBbMC4uLnBhcmFtZXRlcnMudmFsdWVzLmxlbmd0aF0KICAgICAgICAgICAgICAgIHZhbHVlID0gcGFyYW1ldGVycy52YWx1ZXNbaV0KICAgICAgICAgICAgICAgIHBhcmFtZXRlciA9IEBwYXJhbWV0ZXJzW2ldCiAgICAgICAgICAgICAgICBpZiBwYXJhbWV0ZXI/IGFuZCB2YWx1ZT8KICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggcGFyYW1ldGVyLnR5cGUKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiAxICMgTnVtYmVyCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldE51bWJlclZhbHVlVG8ocGFyYW1ldGVyLm51bWJlclZhcmlhYmxlLCB2YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiAyICMgQm9vbGVhbgogICAgICAgICAgICAgICAgICAgICAgICAgICAgR2FtZU1hbmFnZXIudmFyaWFibGVTdG9yZS5zZXRCb29sZWFuVmFsdWVUbyhwYXJhbWV0ZXIuYm9vbGVhblZhcmlhYmxlLCB2YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiAzICMgU3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldFN0cmluZ1ZhbHVlVG8ocGFyYW1ldGVyLnN0cmluZ1ZhcmlhYmxlLCB2YWx1ZSkKICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKICAgICAgICByZXR1cm4gaW50ZXJwcmV0ZXIKICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBpZiBAaW50ZXJwcmV0ZXI/IGFuZCBAcmVhZHlUb1N0YXJ0CiAgICAgICAgICAgIEByZWFkeVRvU3RhcnQgPSBubwogICAgICAgICAgICBwYXJhbWV0ZXJzID0gQHN0YXJ0UGFyYW1ldGVycwogICAgICAgICAgICBpZiBwYXJhbWV0ZXJzPyBhbmQgcGFyYW1ldGVycy52YWx1ZXM/CiAgICAgICAgICAgICAgICBmb3IgaSBpbiBbMC4uLnBhcmFtZXRlcnMudmFsdWVzLmxlbmd0aF0KICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IHBhcmFtZXRlcnMudmFsdWVzW2ldCiAgICAgICAgICAgICAgICAgICAgcGFyYW1ldGVyID0gQHBhcmFtZXRlcnNbaV0KICAgICAgICAgICAgICAgICAgICBpZiBwYXJhbWV0ZXI/IGFuZCB2YWx1ZT8KICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIHBhcmFtZXRlci50eXBlCiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGVuIDEgIyBOdW1iZXIKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldE51bWJlclZhbHVlVG8ocGFyYW1ldGVyLm51bWJlclZhcmlhYmxlLCB2YWx1ZSkKICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoZW4gMiAjIEJvb2xlYW4KICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldEJvb2xlYW5WYWx1ZVRvKHBhcmFtZXRlci5ib29sZWFuVmFyaWFibGUsIHZhbHVlKQogICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hlbiAzICMgU3RyaW5nCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgR2FtZU1hbmFnZXIudmFyaWFibGVTdG9yZS5zZXRTdHJpbmdWYWx1ZVRvKHBhcmFtZXRlci5zdHJpbmdWYXJpYWJsZSwgdmFsdWUpCiAgICAgICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBAaW50ZXJwcmV0ZXIuc3RhcnQoKQogICAgICAgICAgICAKICAgICAgICBpZiBAaW50ZXJwcmV0ZXI/CiAgICAgICAgICAgIEBpbnRlcnByZXRlci51cGRhdGUoKQogICAgICAgICAgICAKICAgICAgICBpZiBAaW50ZXJwcmV0ZXI/IGFuZCBub3QgQGludGVycHJldGVyLmlzUnVubmluZyBhbmQgbm90IEBwYXJhbGxlbAogICAgICAgICAgICBpZiBub3QgQHBhcmFsbGVsIGFuZCBAb25GaW5pc2g/IHRoZW4gQG9uRmluaXNoKHRoaXMpCiAgICAgICAgICAgIAogICAgICAgIGlmIEBpbnRlcnByZXRlcj8gYW5kIEBzdGFydENvbmRpdGlvbiA9PSAxIGFuZCBub3QgQGludGVycHJldGVyLmlzUnVubmluZwogICAgICAgICAgICBpZiBAaGFzQ29uZGl0aW9uCiAgICAgICAgICAgICAgICBpZiBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLmJvb2xlYW5WYWx1ZU9mKEBjb25kaXRpb25Td2l0Y2gpCiAgICAgICAgICAgICAgICAgICAgQHN0YXJ0KCkKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgQHN0YXJ0KCkKICAgICAgICAgICAgICAgICAgICAgICAgIAogICAgCiAgICAgICAgICAgIAogICAgZXJhc2U6IC0+CiAgICAgICAgCndpbmRvdy5Mb2dpY19Db21tb25FdmVudCA9IExvZ2ljX0NvbW1vbkV2ZW50","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19Db21tb25FdmVudDsKCiAgTG9naWNfQ29tbW9uRXZlbnQgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBMb2dpY19Db21tb25FdmVudChldmVudCwgaWQpIHsKICAgICAgdGhpcy5pZCA9IGlkOwogICAgICB0aGlzLmV2ZW50ID0gZXZlbnQ7CiAgICAgIHRoaXMuaW50ZXJwcmV0ZXIgPSBudWxsOwogICAgICB0aGlzLnBhcmFtZXRlcnMgPSB0aGlzLmV2ZW50LnBhcmFtZXRlcnMgIT0gbnVsbCA/IHRoaXMuZXZlbnQucGFyYW1ldGVycyA6IFtdOwogICAgICB0aGlzLnN0YXJ0Q29uZGl0aW9uID0gdGhpcy5ldmVudC5zdGFydENvbmRpdGlvbiAhPSBudWxsID8gdGhpcy5ldmVudC5zdGFydENvbmRpdGlvbiA6IDA7CiAgICAgIHRoaXMucGFyYWxsZWwgPSB0aGlzLmV2ZW50LnBhcmFsbGVsICE9IG51bGwgPyB0aGlzLmV2ZW50LnBhcmFsbGVsIDogZmFsc2U7CiAgICAgIHRoaXMuY29uZGl0aW9uU3dpdGNoID0gdGhpcy5ldmVudC5jb25kaXRpb25Td2l0Y2ggIT0gbnVsbCA/IHRoaXMuZXZlbnQuY29uZGl0aW9uU3dpdGNoIDogbnVsbDsKICAgICAgdGhpcy5oYXNDb25kaXRpb24gPSB0aGlzLmV2ZW50LmNvbmRpdGlvbkVuYWJsZWQ7CiAgICAgIHRoaXMuaW50ZXJwcmV0ZXIgPSB0aGlzLnN0YXJ0Q29uZGl0aW9uID09PSAxICYmICF0aGlzLnBhcmFsbGVsID8gR2FtZU1hbmFnZXIuaW50ZXJwcmV0ZXIgOiBuZXcgQ29tbWFuZEludGVycHJldGVyKHRoaXMuZXZlbnQuY29tbWFuZHMpOwogICAgICB0aGlzLnJlYWR5VG9TdGFydCA9IGZhbHNlOwogICAgfQoKICAgIExvZ2ljX0NvbW1vbkV2ZW50LnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKHBhcmFtZXRlcnMpIHsKICAgICAgdGhpcy5zdGFydFBhcmFtZXRlcnMgPSBwYXJhbWV0ZXJzOwogICAgICBpZiAoKHRoaXMuaW50ZXJwcmV0ZXIgIT0gbnVsbCkgJiYgIXRoaXMuaW50ZXJwcmV0ZXIuaXNSdW5uaW5nKSB7CiAgICAgICAgdGhpcy5pbnRlcnByZXRlci5yZXBlYXQgPSB0aGlzLnN0YXJ0Q29uZGl0aW9uID09PSAxOwogICAgICAgIHRoaXMuaW50ZXJwcmV0ZXIuY29tbWFuZHMgPSB0aGlzLmV2ZW50LmNvbW1hbmRzOwogICAgICAgIHRoaXMucmVhZHlUb1N0YXJ0ID0gdHJ1ZTsKICAgICAgfQogICAgICBpZiAodGhpcy5wYXJhbGxlbCAmJiAodGhpcy5vbkZpbmlzaCAhPSBudWxsKSkgewogICAgICAgIHJldHVybiB0aGlzLm9uRmluaXNoKHRoaXMpOwogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX0NvbW1vbkV2ZW50LnByb3RvdHlwZS5jYWxsID0gZnVuY3Rpb24ocGFyYW1ldGVycykgewogICAgICB2YXIgaSwgaW50ZXJwcmV0ZXIsIHBhcmFtZXRlciwgdmFsdWUsIF9pLCBfcmVmOwogICAgICBpbnRlcnByZXRlciA9IG5ldyBDb21tYW5kSW50ZXJwcmV0ZXIodGhpcy5ldmVudC5jb21tYW5kcyk7CiAgICAgIGludGVycHJldGVyLnRlbXBOdW1iZXJzID0gW107CiAgICAgIGludGVycHJldGVyLnRlbXBTdHJpbmdzID0gW107CiAgICAgIGludGVycHJldGVyLnRlbXBCb29sZWFucyA9IFtdOwogICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnRlbXBOdW1iZXJzID0gaW50ZXJwcmV0ZXIudGVtcE51bWJlcnM7CiAgICAgIEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUudGVtcFN0cmluZ3MgPSBpbnRlcnByZXRlci50ZW1wU3RyaW5nczsKICAgICAgR2FtZU1hbmFnZXIudmFyaWFibGVTdG9yZS50ZW1wQm9vbGVhbnMgPSBpbnRlcnByZXRlci50ZW1wQm9vbGVhbnM7CiAgICAgIGlmICgocGFyYW1ldGVycyAhPSBudWxsKSAmJiAocGFyYW1ldGVycy52YWx1ZXMgIT0gbnVsbCkpIHsKICAgICAgICBmb3IgKGkgPSBfaSA9IDAsIF9yZWYgPSBwYXJhbWV0ZXJzLnZhbHVlcy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICB2YWx1ZSA9IHBhcmFtZXRlcnMudmFsdWVzW2ldOwogICAgICAgICAgcGFyYW1ldGVyID0gdGhpcy5wYXJhbWV0ZXJzW2ldOwogICAgICAgICAgaWYgKChwYXJhbWV0ZXIgIT0gbnVsbCkgJiYgKHZhbHVlICE9IG51bGwpKSB7CiAgICAgICAgICAgIHN3aXRjaCAocGFyYW1ldGVyLnR5cGUpIHsKICAgICAgICAgICAgICBjYXNlIDE6CiAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldE51bWJlclZhbHVlVG8ocGFyYW1ldGVyLm51bWJlclZhcmlhYmxlLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgICBjYXNlIDI6CiAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldEJvb2xlYW5WYWx1ZVRvKHBhcmFtZXRlci5ib29sZWFuVmFyaWFibGUsIHZhbHVlKTsKICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgIGNhc2UgMzoKICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUuc2V0U3RyaW5nVmFsdWVUbyhwYXJhbWV0ZXIuc3RyaW5nVmFyaWFibGUsIHZhbHVlKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gaW50ZXJwcmV0ZXI7CiAgICB9OwoKICAgIExvZ2ljX0NvbW1vbkV2ZW50LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGksIHBhcmFtZXRlciwgcGFyYW1ldGVycywgdmFsdWUsIF9pLCBfcmVmOwogICAgICBpZiAoKHRoaXMuaW50ZXJwcmV0ZXIgIT0gbnVsbCkgJiYgdGhpcy5yZWFkeVRvU3RhcnQpIHsKICAgICAgICB0aGlzLnJlYWR5VG9TdGFydCA9IGZhbHNlOwogICAgICAgIHBhcmFtZXRlcnMgPSB0aGlzLnN0YXJ0UGFyYW1ldGVyczsKICAgICAgICBpZiAoKHBhcmFtZXRlcnMgIT0gbnVsbCkgJiYgKHBhcmFtZXRlcnMudmFsdWVzICE9IG51bGwpKSB7CiAgICAgICAgICBmb3IgKGkgPSBfaSA9IDAsIF9yZWYgPSBwYXJhbWV0ZXJzLnZhbHVlcy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICAgIHZhbHVlID0gcGFyYW1ldGVycy52YWx1ZXNbaV07CiAgICAgICAgICAgIHBhcmFtZXRlciA9IHRoaXMucGFyYW1ldGVyc1tpXTsKICAgICAgICAgICAgaWYgKChwYXJhbWV0ZXIgIT0gbnVsbCkgJiYgKHZhbHVlICE9IG51bGwpKSB7CiAgICAgICAgICAgICAgc3dpdGNoIChwYXJhbWV0ZXIudHlwZSkgewogICAgICAgICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldE51bWJlclZhbHVlVG8ocGFyYW1ldGVyLm51bWJlclZhcmlhYmxlLCB2YWx1ZSk7CiAgICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICAgICAgICBHYW1lTWFuYWdlci52YXJpYWJsZVN0b3JlLnNldEJvb2xlYW5WYWx1ZVRvKHBhcmFtZXRlci5ib29sZWFuVmFyaWFibGUsIHZhbHVlKTsKICAgICAgICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUuc2V0U3RyaW5nVmFsdWVUbyhwYXJhbWV0ZXIuc3RyaW5nVmFyaWFibGUsIHZhbHVlKTsKICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgdGhpcy5pbnRlcnByZXRlci5zdGFydCgpOwogICAgICB9CiAgICAgIGlmICh0aGlzLmludGVycHJldGVyICE9IG51bGwpIHsKICAgICAgICB0aGlzLmludGVycHJldGVyLnVwZGF0ZSgpOwogICAgICB9CiAgICAgIGlmICgodGhpcy5pbnRlcnByZXRlciAhPSBudWxsKSAmJiAhdGhpcy5pbnRlcnByZXRlci5pc1J1bm5pbmcgJiYgIXRoaXMucGFyYWxsZWwpIHsKICAgICAgICBpZiAoIXRoaXMucGFyYWxsZWwgJiYgKHRoaXMub25GaW5pc2ggIT0gbnVsbCkpIHsKICAgICAgICAgIHRoaXMub25GaW5pc2godGhpcyk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmICgodGhpcy5pbnRlcnByZXRlciAhPSBudWxsKSAmJiB0aGlzLnN0YXJ0Q29uZGl0aW9uID09PSAxICYmICF0aGlzLmludGVycHJldGVyLmlzUnVubmluZykgewogICAgICAgIGlmICh0aGlzLmhhc0NvbmRpdGlvbikgewogICAgICAgICAgaWYgKEdhbWVNYW5hZ2VyLnZhcmlhYmxlU3RvcmUuYm9vbGVhblZhbHVlT2YodGhpcy5jb25kaXRpb25Td2l0Y2gpKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0KCk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB0aGlzLnN0YXJ0KCk7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX0NvbW1vbkV2ZW50LnByb3RvdHlwZS5lcmFzZSA9IGZ1bmN0aW9uKCkge307CgogICAgcmV0dXJuIExvZ2ljX0NvbW1vbkV2ZW50OwoKICB9KSgpOwoKICB3aW5kb3cuTG9naWNfQ29tbW9uRXZlbnQgPSBMb2dpY19Db21tb25FdmVudDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Logic_Player","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfUGxheWVyCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTAxCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IExvZ2ljX1BsYXllcgojCiMgICBBIGJhc2UgY2xhc3MgZm9yIGFsbCBvdGhlciB3aW5kb3cgY2xhc3Nlcy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIExvZ2ljX1BsYXllciBleHRlbmRzIExvZ2ljX0NoYXJhY3RlcgogICAgY29uc3RydWN0b3I6IC0+CiAgICAgICAgc3VwZXIoKQogICAgICAgIEBncmFwaGljID0gbmFtZTogImNoYXJhY3RlcnMyIgogICAgICAgIEBwYXR0ZXJuID0gNAogICAgICAgIEBzdWJQYXR0ZXJuID0gMQogICAgICAgIEBzdGVwcyA9IDAKICAgIHVwZGF0ZTogLT4KICAgICAgICBzdXBlcgogICAgICAgIAogICAgICAgIGRpcmVjdGlvbiA9IElucHV0LmRpcjQoKQogICAgICAgIHBvc2l0aW9uID0gMAogICAgICAgIGV2ZW50cyA9IG51bGwKICAgICAgICBjaGFyYWN0ZXJzID0gbnVsbAogICAgICAgIAogICAgICAgIGlmIGRpcmVjdGlvbiA+IDAgYW5kIG5vdCBAaXNNb3ZpbmcKICAgICAgICAgICAgQGRpcmVjdGlvbiA9IGRpcmVjdGlvbgogICAgICAgICAgICBpZiBAY2FuTW92ZShkaXJlY3Rpb24pCiAgICAgICAgICAgICAgICBAbW92ZShkaXJlY3Rpb24pCiAgICAgICAgICAgICAgICBAc3RlcHMrKwogICAgICAgICAgICBwb3NpdGlvbiA9IEBuZXh0UG9zaXRpb25JbmRleChkaXJlY3Rpb24pCiAgICAgICAgICAgIGNoYXJhY3RlcnMgPSBAY29sbGlzaW9uTWFwW3Bvc2l0aW9uXQogICAgICAgICAgICBmb3IgY2hhcmFjdGVyIGluIGNoYXJhY3RlcnMKICAgICAgICAgICAgICAgIGlmIGNoYXJhY3RlciAhPSB0aGlzIGFuZCBjaGFyYWN0ZXIuY3VycmVudFBhZ2Uuc3RhcnRDb25kaXRpb24gPT0gMgogICAgICAgICAgICAgICAgICAgIGNoYXJhY3Rlci5zdGFydCgpCiAgICAgICAgICAgIAogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuQykgYW5kIG5vdCBAaXNNb3ZpbmcKICAgICAgICAgICAgcG9zaXRpb24gPSBAbmV4dFBvc2l0aW9uSW5kZXgoQGRpcmVjdGlvbikKICAgICAgICAgICAgZXZlbnRzID0gQGNvbGxpc2lvbk1hcFtwb3NpdGlvbl0KICAgICAgICAgICAgZm9yIGV2ZW50IGluIGV2ZW50cwogICAgICAgICAgICAgICAgaWYgZXZlbnQuY3VycmVudFBhZ2Uuc3RhcnRDb25kaXRpb24gPT0gMAogICAgICAgICAgICAgICAgICAgIGV2ZW50LnN0YXJ0KCkKICAgICAgICAgICAgICAgICAgICAKICAgIAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKd2luZG93LkxvZ2ljX1BsYXllciA9IExvZ2ljX1BsYXllcg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19QbGF5ZXIsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBMb2dpY19QbGF5ZXIgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoTG9naWNfUGxheWVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIExvZ2ljX1BsYXllcigpIHsKICAgICAgTG9naWNfUGxheWVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpOwogICAgICB0aGlzLmdyYXBoaWMgPSB7CiAgICAgICAgbmFtZTogImNoYXJhY3RlcnMyIgogICAgICB9OwogICAgICB0aGlzLnBhdHRlcm4gPSA0OwogICAgICB0aGlzLnN1YlBhdHRlcm4gPSAxOwogICAgICB0aGlzLnN0ZXBzID0gMDsKICAgIH0KCiAgICBMb2dpY19QbGF5ZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgY2hhcmFjdGVyLCBjaGFyYWN0ZXJzLCBkaXJlY3Rpb24sIGV2ZW50LCBldmVudHMsIHBvc2l0aW9uLCBfaSwgX2osIF9sZW4sIF9sZW4xLCBfcmVzdWx0czsKICAgICAgTG9naWNfUGxheWVyLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgZGlyZWN0aW9uID0gSW5wdXQuZGlyNCgpOwogICAgICBwb3NpdGlvbiA9IDA7CiAgICAgIGV2ZW50cyA9IG51bGw7CiAgICAgIGNoYXJhY3RlcnMgPSBudWxsOwogICAgICBpZiAoZGlyZWN0aW9uID4gMCAmJiAhdGhpcy5pc01vdmluZykgewogICAgICAgIHRoaXMuZGlyZWN0aW9uID0gZGlyZWN0aW9uOwogICAgICAgIGlmICh0aGlzLmNhbk1vdmUoZGlyZWN0aW9uKSkgewogICAgICAgICAgdGhpcy5tb3ZlKGRpcmVjdGlvbik7CiAgICAgICAgICB0aGlzLnN0ZXBzKys7CiAgICAgICAgfQogICAgICAgIHBvc2l0aW9uID0gdGhpcy5uZXh0UG9zaXRpb25JbmRleChkaXJlY3Rpb24pOwogICAgICAgIGNoYXJhY3RlcnMgPSB0aGlzLmNvbGxpc2lvbk1hcFtwb3NpdGlvbl07CiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBjaGFyYWN0ZXJzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgICBjaGFyYWN0ZXIgPSBjaGFyYWN0ZXJzW19pXTsKICAgICAgICAgIGlmIChjaGFyYWN0ZXIgIT09IHRoaXMgJiYgY2hhcmFjdGVyLmN1cnJlbnRQYWdlLnN0YXJ0Q29uZGl0aW9uID09PSAyKSB7CiAgICAgICAgICAgIGNoYXJhY3Rlci5zdGFydCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBpZiAoSW5wdXQudHJpZ2dlcihJbnB1dC5DKSAmJiAhdGhpcy5pc01vdmluZykgewogICAgICAgIHBvc2l0aW9uID0gdGhpcy5uZXh0UG9zaXRpb25JbmRleCh0aGlzLmRpcmVjdGlvbik7CiAgICAgICAgZXZlbnRzID0gdGhpcy5jb2xsaXNpb25NYXBbcG9zaXRpb25dOwogICAgICAgIF9yZXN1bHRzID0gW107CiAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gZXZlbnRzLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykgewogICAgICAgICAgZXZlbnQgPSBldmVudHNbX2pdOwogICAgICAgICAgaWYgKGV2ZW50LmN1cnJlbnRQYWdlLnN0YXJ0Q29uZGl0aW9uID09PSAwKSB7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goZXZlbnQuc3RhcnQoKSk7CiAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICBfcmVzdWx0cy5wdXNoKHZvaWQgMCk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gTG9naWNfUGxheWVyOwoKICB9KShMb2dpY19DaGFyYWN0ZXIpOwoKICB3aW5kb3cuTG9naWNfUGxheWVyID0gTG9naWNfUGxheWVyOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Logic_Map","content":"","compiledContent":""},{"name":"Logic_Actor","content":"","compiledContent":""},{"name":"Logic_Enemy","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfRW5lbXkKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjkKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogTG9naWNfRW5lbXkKIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBMb2dpY19FbmVteSBleHRlbmRzIExvZ2ljX0FjdG9yCiAgICBjb25zdHJ1Y3RvcjogKGVuZW15KSAtPgogICAgICAgIHN1cGVyKG51bGwpCiAgICAgICAgQG5hbWUgPSBlbmVteS5uYW1lCiAgICAgICAgQGxldmVsID0gMAogICAgICAgIEBncmFwaGljID0gZW5lbXkuZ3JhcGhpYwogICAgICAgIEBlbmVteSA9IGVuZW15CiAgICAgICAgQGRyb3BJdGVtcyA9IGVuZW15LmRyb3BJdGVtcwogICAgICAgIEBtb25leSA9IGVuZW15Lm1vbmV5CiAgICAgICAgQG1scCA9IGVuZW15LnBhcmFtc1swXQogICAgICAgIEBtbXAgPSBlbmVteS5wYXJhbXNbMV0KICAgICAgICBAYXRrID0gZW5lbXkucGFyYW1zWzJdCiAgICAgICAgQGRlZiA9IGVuZW15LnBhcmFtc1szXQogICAgICAgIEBtYXQgPSBlbmVteS5wYXJhbXNbNF0KICAgICAgICBAbWRmID0gZW5lbXkucGFyYW1zWzVdCiAgICAgICAgQGFnaSA9IGVuZW15LnBhcmFtc1s2XQogICAgICAgIEBsdWsgPSBlbmVteS5wYXJhbXNbN10KICAgICAgICBAbHAgPSBAbWxwCiAgICAgICAgQG1wID0gQG1tcAogICAgICAgIEBleFBhcmFtZXRlcnMgPSBbMCwgMCwgMCwgMCwgMCwgMCwgMF0KICAgICAgICBAc3BQYXJhbWV0ZXJzID0gWzEwMCwgMTAwLCAxMDAsIDEwMCwgMTAwLCAxMDBdCiAgICAgICAgQGFuaW1hdGlvbnMgPSB7fQogICAgICAgIEBpc0FsaXZlID0geWVzCiAgICAgICAgQHByb3BlcnRpZXMgPSBbXQogICAgICAgIEBleHAgPSBlbmVteS5leHAKICAgICAgICBAZXhwVG9OZXh0TGV2ZWwgPSAwCiAgICAgICAgQHNraWxsVHlwZXMgPSBbXQogICAgICAgIEB3ZWFwb25UeXBlcyA9IFtdCiAgICAgICAgQGFybW9yVHlwZXMgPSBbXQogICAgICAgIEBza2lsbHMgPSBbXQogICAgICAgIEBwYXJhbXMgPSBbXQogICAgICAgIEBiYXNlUHJvcGVydGllcyA9IFtdCiAgICAgICAgQHByb3BlcnRpZXMgPSBbXQogICAgICAgIEBidWZmcyA9IFtbXSxbXSxbXSxbXSxbXSxbXSxbXSxbXV0KICAgICAgICBAZGVidWZmcyA9IFtbXSxbXSxbXSxbXSxbXSxbXSxbXSxbXV0KICAgICAgICBAc3RhdGVzID0gW10KICAgICAgICBAYWN0aW9uUGF0dGVybnMgPSBlbmVteS5hY3Rpb25QYXR0ZXJucwogICAgICAgIEBlcXVpcG1lbnRTbG90cyA9IFt7IGZpeGVkOiBubywgc2VhbGVkOiBub30sIHsgZml4ZWQ6IG5vLCBzZWFsZWQ6IG5vfSwgeyBmaXhlZDogbm8sIHNlYWxlZDogbm99LCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBmaXhlZDogbm8sIHNlYWxlZDogbm99LCB7IGZpeGVkOiBubywgc2VhbGVkOiBub31dCiAgICAgICAgQHNsb3RUeXBlID0gMAogICAgICAgIEBhY3Rpb25UaW1lID0gMTAwCiAgICAgICAgQGd1YXJkID0gbm8KICAgICAgICAKICAgICAgICBAZXZhc2lvblJhdGUgPSAwCiAgICAgICAgQGNyaXRpY2FsSGl0UmF0ZSA9IDAKICAgICAgICBAY3JpdGljYWxFdmFzaW9uUmF0ZSA9IDAKICAgICAgICBAbWFnaWNFdmFzaW9uUmF0ZSA9IDAKICAgICAgICBAbWFnaWNSZWZsZWN0aW9uUmF0ZSA9IDAKICAgICAgICBAY291bnRlclJhdGUgPSAwCiAgICAgICAgQGxwUmVnZW5lcmF0aW9uUmF0ZSA9IDAKICAgICAgICBAbXBSZWdlbmVyYXRpb25SYXRlID0gMAogICAgICAgIEBlbGVtZW50UmF0ZXMgPSBbXQogICAgICAgIEBhdHRhY2tTa2lsbCA9IE9iamVjdC5jb3B5KFJlY29yZE1hbmFnZXIuc2tpbGxzWzBdKQogICAgICAgIAogICAgICAgIEBoaXRSYXRlID0gMTAwCiAgICAgICAgQGRlZmVuc2VSYXRlID0gMTAwCiAgICAgICAgCiAgICAgICAgaWYgQGVuZW15LnN0YW5kQW5pbWF0aW9uSWQ/IGFuZCBSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15LnN0YW5kQW5pbWF0aW9uSWRdPwogICAgICAgICAgICBAc3RhbmRBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkuc3RhbmRBbmltYXRpb25JZF0pCiAgICAgICAgaWYgQGVuZW15Lm1hZ2ljQW5pbWF0aW9uSWQ/IGFuZCBSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15Lm1hZ2ljQW5pbWF0aW9uSWRdPwogICAgICAgICAgICBAbWFnaWNBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkubWFnaWNBbmltYXRpb25JZF0pCiAgICAgICAgaWYgQGVuZW15LmF0dGFja0FuaW1hdGlvbklkPyBhbmQgUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW0BlbmVteS5hdHRhY2tBbmltYXRpb25JZF0/CiAgICAgICAgICAgIEBhdHRhY2tBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkuYXR0YWNrQW5pbWF0aW9uSWRdKQogICAgICAgIGlmIEBlbmVteS5pdGVtQW5pbWF0aW9uSWQ/IGFuZCBSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15Lml0ZW1BbmltYXRpb25JZF0/CiAgICAgICAgICAgIEBpdGVtQW5pbWF0aW9uID0gbmV3IExvZ2ljX1NpbXBsZUFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15Lml0ZW1BbmltYXRpb25JZF0pCiAgICAgICAgaWYgQGVuZW15Lmd1YXJkQW5pbWF0aW9uSWQ/IGFuZCBSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15Lmd1YXJkQW5pbWF0aW9uSWRdPwogICAgICAgICAgICBAZ3VhcmRBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkuZ3VhcmRBbmltYXRpb25JZF0pCiAgICAgICAgaWYgQGVuZW15LnByZU1hZ2ljQW5pbWF0aW9uSWQ/IGFuZCBSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15LnByZU1hZ2ljQW5pbWF0aW9uSWRdPwogICAgICAgICAgICBAcHJlTWFnaWNBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkucHJlTWFnaWNBbmltYXRpb25JZF0pCiAgICAgICAgaWYgQGVuZW15LnByZUF0dGFja0FuaW1hdGlvbklkPyBhbmQgUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW0BlbmVteS5wcmVBdHRhY2tBbmltYXRpb25JZF0/CiAgICAgICAgICAgIEBwcmVBdHRhY2tBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkucHJlQXR0YWNrQW5pbWF0aW9uSWRdKQogICAgICAgIGlmIEBlbmVteS5kYW1hZ2VBbmltYXRpb25JZD8gYW5kIFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkuZGFtYWdlQW5pbWF0aW9uSWRdPwogICAgICAgICAgICBAZGFtYWdlQW5pbWF0aW9uID0gbmV3IExvZ2ljX1NpbXBsZUFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15LmRhbWFnZUFuaW1hdGlvbklkXSkKICAgICAgICBpZiBAZW5lbXkuZGVhdGhBbmltYXRpb25JZD8gYW5kIFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1tAZW5lbXkuZGVhdGhBbmltYXRpb25JZF0/CiAgICAgICAgICAgIEBkZWF0aEFuaW1hdGlvbiA9IG5ldyBMb2dpY19TaW1wbGVBbmltYXRpb24oUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW0BlbmVteS5kZWF0aEFuaW1hdGlvbklkXSkKICAgICAgICBpZiBAZW5lbXkuYmFkU3RhdHVzQW5pbWF0aW9uSWQ/IGFuZCBSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbQGVuZW15LmJhZFN0YXR1c0FuaW1hdGlvbklkXT8KICAgICAgICAgICAgQGJhZFN0YXR1c0FuaW1hdGlvbiA9IG5ldyBMb2dpY19TaW1wbGVBbmltYXRpb24oUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW0BlbmVteS5iYWRTdGF0dXNBbmltYXRpb25JZF0pCiAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgZm9yIGkgaW4gWzAuLi44XQogICAgICAgICAgICBAcGFyYW1zLnB1c2goW2VuZW15LnBhcmFtc1tpXV0pCiAgICAgICAgICAgIAogICAgdXBkYXRlOiAtPgogCiAgICAgICAgCndpbmRvdy5Mb2dpY19FbmVteSA9IExvZ2ljX0VuZW15","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19FbmVteSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIExvZ2ljX0VuZW15ID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKExvZ2ljX0VuZW15LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIExvZ2ljX0VuZW15KGVuZW15KSB7CiAgICAgIHZhciBpLCBfaTsKICAgICAgTG9naWNfRW5lbXkuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgbnVsbCk7CiAgICAgIHRoaXMubmFtZSA9IGVuZW15Lm5hbWU7CiAgICAgIHRoaXMubGV2ZWwgPSAwOwogICAgICB0aGlzLmdyYXBoaWMgPSBlbmVteS5ncmFwaGljOwogICAgICB0aGlzLmVuZW15ID0gZW5lbXk7CiAgICAgIHRoaXMuZHJvcEl0ZW1zID0gZW5lbXkuZHJvcEl0ZW1zOwogICAgICB0aGlzLm1vbmV5ID0gZW5lbXkubW9uZXk7CiAgICAgIHRoaXMubWxwID0gZW5lbXkucGFyYW1zWzBdOwogICAgICB0aGlzLm1tcCA9IGVuZW15LnBhcmFtc1sxXTsKICAgICAgdGhpcy5hdGsgPSBlbmVteS5wYXJhbXNbMl07CiAgICAgIHRoaXMuZGVmID0gZW5lbXkucGFyYW1zWzNdOwogICAgICB0aGlzLm1hdCA9IGVuZW15LnBhcmFtc1s0XTsKICAgICAgdGhpcy5tZGYgPSBlbmVteS5wYXJhbXNbNV07CiAgICAgIHRoaXMuYWdpID0gZW5lbXkucGFyYW1zWzZdOwogICAgICB0aGlzLmx1ayA9IGVuZW15LnBhcmFtc1s3XTsKICAgICAgdGhpcy5scCA9IHRoaXMubWxwOwogICAgICB0aGlzLm1wID0gdGhpcy5tbXA7CiAgICAgIHRoaXMuZXhQYXJhbWV0ZXJzID0gWzAsIDAsIDAsIDAsIDAsIDAsIDBdOwogICAgICB0aGlzLnNwUGFyYW1ldGVycyA9IFsxMDAsIDEwMCwgMTAwLCAxMDAsIDEwMCwgMTAwXTsKICAgICAgdGhpcy5hbmltYXRpb25zID0ge307CiAgICAgIHRoaXMuaXNBbGl2ZSA9IHRydWU7CiAgICAgIHRoaXMucHJvcGVydGllcyA9IFtdOwogICAgICB0aGlzLmV4cCA9IGVuZW15LmV4cDsKICAgICAgdGhpcy5leHBUb05leHRMZXZlbCA9IDA7CiAgICAgIHRoaXMuc2tpbGxUeXBlcyA9IFtdOwogICAgICB0aGlzLndlYXBvblR5cGVzID0gW107CiAgICAgIHRoaXMuYXJtb3JUeXBlcyA9IFtdOwogICAgICB0aGlzLnNraWxscyA9IFtdOwogICAgICB0aGlzLnBhcmFtcyA9IFtdOwogICAgICB0aGlzLmJhc2VQcm9wZXJ0aWVzID0gW107CiAgICAgIHRoaXMucHJvcGVydGllcyA9IFtdOwogICAgICB0aGlzLmJ1ZmZzID0gW1tdLCBbXSwgW10sIFtdLCBbXSwgW10sIFtdLCBbXV07CiAgICAgIHRoaXMuZGVidWZmcyA9IFtbXSwgW10sIFtdLCBbXSwgW10sIFtdLCBbXSwgW11dOwogICAgICB0aGlzLnN0YXRlcyA9IFtdOwogICAgICB0aGlzLmFjdGlvblBhdHRlcm5zID0gZW5lbXkuYWN0aW9uUGF0dGVybnM7CiAgICAgIHRoaXMuZXF1aXBtZW50U2xvdHMgPSBbCiAgICAgICAgewogICAgICAgICAgZml4ZWQ6IGZhbHNlLAogICAgICAgICAgc2VhbGVkOiBmYWxzZQogICAgICAgIH0sIHsKICAgICAgICAgIGZpeGVkOiBmYWxzZSwKICAgICAgICAgIHNlYWxlZDogZmFsc2UKICAgICAgICB9LCB7CiAgICAgICAgICBmaXhlZDogZmFsc2UsCiAgICAgICAgICBzZWFsZWQ6IGZhbHNlCiAgICAgICAgfSwgewogICAgICAgICAgZml4ZWQ6IGZhbHNlLAogICAgICAgICAgc2VhbGVkOiBmYWxzZQogICAgICAgIH0sIHsKICAgICAgICAgIGZpeGVkOiBmYWxzZSwKICAgICAgICAgIHNlYWxlZDogZmFsc2UKICAgICAgICB9CiAgICAgIF07CiAgICAgIHRoaXMuc2xvdFR5cGUgPSAwOwogICAgICB0aGlzLmFjdGlvblRpbWUgPSAxMDA7CiAgICAgIHRoaXMuZ3VhcmQgPSBmYWxzZTsKICAgICAgdGhpcy5ldmFzaW9uUmF0ZSA9IDA7CiAgICAgIHRoaXMuY3JpdGljYWxIaXRSYXRlID0gMDsKICAgICAgdGhpcy5jcml0aWNhbEV2YXNpb25SYXRlID0gMDsKICAgICAgdGhpcy5tYWdpY0V2YXNpb25SYXRlID0gMDsKICAgICAgdGhpcy5tYWdpY1JlZmxlY3Rpb25SYXRlID0gMDsKICAgICAgdGhpcy5jb3VudGVyUmF0ZSA9IDA7CiAgICAgIHRoaXMubHBSZWdlbmVyYXRpb25SYXRlID0gMDsKICAgICAgdGhpcy5tcFJlZ2VuZXJhdGlvblJhdGUgPSAwOwogICAgICB0aGlzLmVsZW1lbnRSYXRlcyA9IFtdOwogICAgICB0aGlzLmF0dGFja1NraWxsID0gT2JqZWN0LmNvcHkoUmVjb3JkTWFuYWdlci5za2lsbHNbMF0pOwogICAgICB0aGlzLmhpdFJhdGUgPSAxMDA7CiAgICAgIHRoaXMuZGVmZW5zZVJhdGUgPSAxMDA7CiAgICAgIGlmICgodGhpcy5lbmVteS5zdGFuZEFuaW1hdGlvbklkICE9IG51bGwpICYmIChSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5zdGFuZEFuaW1hdGlvbklkXSAhPSBudWxsKSkgewogICAgICAgIHRoaXMuc3RhbmRBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1t0aGlzLmVuZW15LnN0YW5kQW5pbWF0aW9uSWRdKTsKICAgICAgfQogICAgICBpZiAoKHRoaXMuZW5lbXkubWFnaWNBbmltYXRpb25JZCAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkubWFnaWNBbmltYXRpb25JZF0gIT0gbnVsbCkpIHsKICAgICAgICB0aGlzLm1hZ2ljQW5pbWF0aW9uID0gbmV3IExvZ2ljX1NpbXBsZUFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5tYWdpY0FuaW1hdGlvbklkXSk7CiAgICAgIH0KICAgICAgaWYgKCh0aGlzLmVuZW15LmF0dGFja0FuaW1hdGlvbklkICE9IG51bGwpICYmIChSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5hdHRhY2tBbmltYXRpb25JZF0gIT0gbnVsbCkpIHsKICAgICAgICB0aGlzLmF0dGFja0FuaW1hdGlvbiA9IG5ldyBMb2dpY19TaW1wbGVBbmltYXRpb24oUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkuYXR0YWNrQW5pbWF0aW9uSWRdKTsKICAgICAgfQogICAgICBpZiAoKHRoaXMuZW5lbXkuaXRlbUFuaW1hdGlvbklkICE9IG51bGwpICYmIChSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5pdGVtQW5pbWF0aW9uSWRdICE9IG51bGwpKSB7CiAgICAgICAgdGhpcy5pdGVtQW5pbWF0aW9uID0gbmV3IExvZ2ljX1NpbXBsZUFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5pdGVtQW5pbWF0aW9uSWRdKTsKICAgICAgfQogICAgICBpZiAoKHRoaXMuZW5lbXkuZ3VhcmRBbmltYXRpb25JZCAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkuZ3VhcmRBbmltYXRpb25JZF0gIT0gbnVsbCkpIHsKICAgICAgICB0aGlzLmd1YXJkQW5pbWF0aW9uID0gbmV3IExvZ2ljX1NpbXBsZUFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5ndWFyZEFuaW1hdGlvbklkXSk7CiAgICAgIH0KICAgICAgaWYgKCh0aGlzLmVuZW15LnByZU1hZ2ljQW5pbWF0aW9uSWQgIT0gbnVsbCkgJiYgKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1t0aGlzLmVuZW15LnByZU1hZ2ljQW5pbWF0aW9uSWRdICE9IG51bGwpKSB7CiAgICAgICAgdGhpcy5wcmVNYWdpY0FuaW1hdGlvbiA9IG5ldyBMb2dpY19TaW1wbGVBbmltYXRpb24oUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkucHJlTWFnaWNBbmltYXRpb25JZF0pOwogICAgICB9CiAgICAgIGlmICgodGhpcy5lbmVteS5wcmVBdHRhY2tBbmltYXRpb25JZCAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkucHJlQXR0YWNrQW5pbWF0aW9uSWRdICE9IG51bGwpKSB7CiAgICAgICAgdGhpcy5wcmVBdHRhY2tBbmltYXRpb24gPSBuZXcgTG9naWNfU2ltcGxlQW5pbWF0aW9uKFJlY29yZE1hbmFnZXIuc2ltcGxlQW5pbWF0aW9uc1t0aGlzLmVuZW15LnByZUF0dGFja0FuaW1hdGlvbklkXSk7CiAgICAgIH0KICAgICAgaWYgKCh0aGlzLmVuZW15LmRhbWFnZUFuaW1hdGlvbklkICE9IG51bGwpICYmIChSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5kYW1hZ2VBbmltYXRpb25JZF0gIT0gbnVsbCkpIHsKICAgICAgICB0aGlzLmRhbWFnZUFuaW1hdGlvbiA9IG5ldyBMb2dpY19TaW1wbGVBbmltYXRpb24oUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkuZGFtYWdlQW5pbWF0aW9uSWRdKTsKICAgICAgfQogICAgICBpZiAoKHRoaXMuZW5lbXkuZGVhdGhBbmltYXRpb25JZCAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkuZGVhdGhBbmltYXRpb25JZF0gIT0gbnVsbCkpIHsKICAgICAgICB0aGlzLmRlYXRoQW5pbWF0aW9uID0gbmV3IExvZ2ljX1NpbXBsZUFuaW1hdGlvbihSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5kZWF0aEFuaW1hdGlvbklkXSk7CiAgICAgIH0KICAgICAgaWYgKCh0aGlzLmVuZW15LmJhZFN0YXR1c0FuaW1hdGlvbklkICE9IG51bGwpICYmIChSZWNvcmRNYW5hZ2VyLnNpbXBsZUFuaW1hdGlvbnNbdGhpcy5lbmVteS5iYWRTdGF0dXNBbmltYXRpb25JZF0gIT0gbnVsbCkpIHsKICAgICAgICB0aGlzLmJhZFN0YXR1c0FuaW1hdGlvbiA9IG5ldyBMb2dpY19TaW1wbGVBbmltYXRpb24oUmVjb3JkTWFuYWdlci5zaW1wbGVBbmltYXRpb25zW3RoaXMuZW5lbXkuYmFkU3RhdHVzQW5pbWF0aW9uSWRdKTsKICAgICAgfQogICAgICBmb3IgKGkgPSBfaSA9IDA7IF9pIDwgODsgaSA9ICsrX2kpIHsKICAgICAgICB0aGlzLnBhcmFtcy5wdXNoKFtlbmVteS5wYXJhbXNbaV1dKTsKICAgICAgfQogICAgfQoKICAgIExvZ2ljX0VuZW15LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHt9OwoKICAgIHJldHVybiBMb2dpY19FbmVteTsKCiAgfSkoTG9naWNfQWN0b3IpOwoKICB3aW5kb3cuTG9naWNfRW5lbXkgPSBMb2dpY19FbmVteTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Logic_Party","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfUGFydHkKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMTUKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogTG9naWNfUGFydHkKIwojICAgQSBsb2dpYyB3aGljaCBob2xkcyB0aGUgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGN1cnJlbnQgcGFydHkuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBMb2dpY19QYXJ0eQogICAgY29uc3RydWN0b3I6ICgpIC0+CiAgICAgICAgQG1lbWJlcnMgPSBbXQogICAgICAgIGlmIFJlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yMSAhPSAtMQogICAgICAgICAgICBAYWRkKFJlY29yZE1hbmFnZXIuYWN0b3JzW1JlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yMV0pCiAgICAgICAgaWYgUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3IyPwogICAgICAgICAgICBAYWRkKFJlY29yZE1hbmFnZXIuYWN0b3JzW1JlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yMl0pCiAgICAgICAgaWYgUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3IzPwogICAgICAgICAgICBAYWRkKFJlY29yZE1hbmFnZXIuYWN0b3JzW1JlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yM10pCiAgICAgICAgaWYgUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3I0PwogICAgICAgICAgICBAYWRkKFJlY29yZE1hbmFnZXIuYWN0b3JzW1JlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yNF0pCiAgICAgICAgCiAgICByZWZyZXNoOiAtPgogICAgICAgIGZvciBtZW1iZXIgaW4gQG1lbWJlcnMKICAgICAgICAgICAgbWVtYmVyLnJlZnJlc2goKQogICAgICAgICAgICAKICAgIGlzQWxpdmU6IC0+CiAgICAgICAgcmVzdWx0ID0gbm8KICAgICAgICAKICAgICAgICBmb3IgbWVtYmVyIGluIEBtZW1iZXJzCiAgICAgICAgICAgIGlmIG1lbWJlci5scCA+IDAKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHllcwogICAgICAgICAgICAgICAgYnJlYWsKICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICBsZXZlbDogLT4KICAgICAgICByZXN1bHQgPSAwCiAgICAgICAgCiAgICAgICAgZm9yIG1lbWJlciBpbiBAbWVtYmVycwogICAgICAgICAgICByZXN1bHQgKz0gbWVtYmVyLmxldmVsCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBNYXRoLmNlaWwocmVzdWx0IC8gQG1lbWJlcnMubGVuZ3RoKQogICAgdG9EYXRhQnVuZGxlOiAtPgogICAgICAgIGJ1bmRsZSA9IHsgbWVtYmVyczogW10gfQogICAgICAgIAogICAgICAgIGZvciBtZW1iZXIgaW4gQG1lbWJlcnMKICAgICAgICAgICAgYnVuZGxlLm1lbWJlcnMucHVzaChtZW1iZXIudG9EYXRhQnVuZGxlKCkpCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiBidW5kbGUKICAgICAgICAKICAgIG1lbWJlckJ5SWQ6IChpZCkgLT4KICAgICAgICBpbmRleCA9IEBtZW1iZXJzLnRvUHJvcGVydHlBcnJheSgnYWN0b3JJZCcpLmluZGV4T2YoaWQpCiAgICAgICAgCiAgICAgICAgcmV0dXJuIGlmIGluZGV4ICE9IC0xIHRoZW4gQG1lbWJlcnNbaW5kZXhdIGVsc2UgbnVsbAogICAgICAgIAogICAgYWRkOiAoYWN0b3IpIC0+CiAgICAgICAgbWVtYmVySWRzID0gQG1lbWJlcnMudG9Qcm9wZXJ0eUFycmF5KCdhY3RvcklkJykKICAgICAgICBpbmRleCA9IG1lbWJlcklkcy5pbmRleE9mKGFjdG9yLmluZGV4KQogICAgICAgIAogICAgICAgIGlmIGluZGV4ID09IC0xCiAgICAgICAgICAgIEBtZW1iZXJzLnB1c2gobmV3IExvZ2ljX0FjdG9yKGFjdG9yKSkKICAgICAgICAgICAgCiAgICByZW1vdmU6IChhY3RvcikgLT4KICAgICAgICBtZW1iZXJJZHMgPSBAbWVtYmVycy50b1Byb3BlcnR5QXJyYXkoJ2FjdG9ySWQnKQogICAgICAgIGluZGV4ID0gbWVtYmVySWRzLmluZGV4T2YoYWN0b3IuaW5kZXgpCiAgICAgICAgCiAgICAgICAgaWYgaW5kZXggIT0gLTEgdGhlbiBAbWVtYmVycy5zcGxpY2UoaW5kZXgsIDEpCndpbmRvdy5Mb2dpY19QYXJ0eSA9IExvZ2ljX1BhcnR5","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19QYXJ0eTsKCiAgTG9naWNfUGFydHkgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBMb2dpY19QYXJ0eSgpIHsKICAgICAgdGhpcy5tZW1iZXJzID0gW107CiAgICAgIGlmIChSZWNvcmRNYW5hZ2VyLnN5c3RlbS5hY3RvcjEgIT09IC0xKSB7CiAgICAgICAgdGhpcy5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3IxXSk7CiAgICAgIH0KICAgICAgaWYgKFJlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yMiAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3IyXSk7CiAgICAgIH0KICAgICAgaWYgKFJlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yMyAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3IzXSk7CiAgICAgIH0KICAgICAgaWYgKFJlY29yZE1hbmFnZXIuc3lzdGVtLmFjdG9yNCAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbUmVjb3JkTWFuYWdlci5zeXN0ZW0uYWN0b3I0XSk7CiAgICAgIH0KICAgIH0KCiAgICBMb2dpY19QYXJ0eS5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWVtYmVyLCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIF9yZWYgPSB0aGlzLm1lbWJlcnM7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIG1lbWJlciA9IF9yZWZbX2ldOwogICAgICAgIF9yZXN1bHRzLnB1c2gobWVtYmVyLnJlZnJlc2goKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICBMb2dpY19QYXJ0eS5wcm90b3R5cGUuaXNBbGl2ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWVtYmVyLCByZXN1bHQsIF9pLCBfbGVuLCBfcmVmOwogICAgICByZXN1bHQgPSBmYWxzZTsKICAgICAgX3JlZiA9IHRoaXMubWVtYmVyczsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgbWVtYmVyID0gX3JlZltfaV07CiAgICAgICAgaWYgKG1lbWJlci5scCA+IDApIHsKICAgICAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgTG9naWNfUGFydHkucHJvdG90eXBlLmxldmVsID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBtZW1iZXIsIHJlc3VsdCwgX2ksIF9sZW4sIF9yZWY7CiAgICAgIHJlc3VsdCA9IDA7CiAgICAgIF9yZWYgPSB0aGlzLm1lbWJlcnM7CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIG1lbWJlciA9IF9yZWZbX2ldOwogICAgICAgIHJlc3VsdCArPSBtZW1iZXIubGV2ZWw7CiAgICAgIH0KICAgICAgcmV0dXJuIE1hdGguY2VpbChyZXN1bHQgLyB0aGlzLm1lbWJlcnMubGVuZ3RoKTsKICAgIH07CgogICAgTG9naWNfUGFydHkucHJvdG90eXBlLnRvRGF0YUJ1bmRsZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYnVuZGxlLCBtZW1iZXIsIF9pLCBfbGVuLCBfcmVmOwogICAgICBidW5kbGUgPSB7CiAgICAgICAgbWVtYmVyczogW10KICAgICAgfTsKICAgICAgX3JlZiA9IHRoaXMubWVtYmVyczsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgbWVtYmVyID0gX3JlZltfaV07CiAgICAgICAgYnVuZGxlLm1lbWJlcnMucHVzaChtZW1iZXIudG9EYXRhQnVuZGxlKCkpOwogICAgICB9CiAgICAgIHJldHVybiBidW5kbGU7CiAgICB9OwoKICAgIExvZ2ljX1BhcnR5LnByb3RvdHlwZS5tZW1iZXJCeUlkID0gZnVuY3Rpb24oaWQpIHsKICAgICAgdmFyIGluZGV4OwogICAgICBpbmRleCA9IHRoaXMubWVtYmVycy50b1Byb3BlcnR5QXJyYXkoJ2FjdG9ySWQnKS5pbmRleE9mKGlkKTsKICAgICAgaWYgKGluZGV4ICE9PSAtMSkgewogICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnNbaW5kZXhdOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBudWxsOwogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX1BhcnR5LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbihhY3RvcikgewogICAgICB2YXIgaW5kZXgsIG1lbWJlcklkczsKICAgICAgbWVtYmVySWRzID0gdGhpcy5tZW1iZXJzLnRvUHJvcGVydHlBcnJheSgnYWN0b3JJZCcpOwogICAgICBpbmRleCA9IG1lbWJlcklkcy5pbmRleE9mKGFjdG9yLmluZGV4KTsKICAgICAgaWYgKGluZGV4ID09PSAtMSkgewogICAgICAgIHJldHVybiB0aGlzLm1lbWJlcnMucHVzaChuZXcgTG9naWNfQWN0b3IoYWN0b3IpKTsKICAgICAgfQogICAgfTsKCiAgICBMb2dpY19QYXJ0eS5wcm90b3R5cGUucmVtb3ZlID0gZnVuY3Rpb24oYWN0b3IpIHsKICAgICAgdmFyIGluZGV4LCBtZW1iZXJJZHM7CiAgICAgIG1lbWJlcklkcyA9IHRoaXMubWVtYmVycy50b1Byb3BlcnR5QXJyYXkoJ2FjdG9ySWQnKTsKICAgICAgaW5kZXggPSBtZW1iZXJJZHMuaW5kZXhPZihhY3Rvci5pbmRleCk7CiAgICAgIGlmIChpbmRleCAhPT0gLTEpIHsKICAgICAgICByZXR1cm4gdGhpcy5tZW1iZXJzLnNwbGljZShpbmRleCwgMSk7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIExvZ2ljX1BhcnR5OwoKICB9KSgpOwoKICB3aW5kb3cuTG9naWNfUGFydHkgPSBMb2dpY19QYXJ0eTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Logic_Inventory","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfSW52ZW50b3J5CiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTIyCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IExvZ2ljX0ludmVudG9yeQojCiMgICBBIGxvZ2ljIHdoaWNoIGhvbGRzIHRoZSBpbmZvcm1hdGlvbiBhYm91dCB0aGUgaW52ZW50b3J5IChpdGVtcywgd2VhcG9ucywgLi4uKQojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgTG9naWNfSW52ZW50b3J5CiAgICBjb25zdHJ1Y3RvcjogKGRhdGEpIC0+CiAgICAgICAgQGl0ZW1zID0gW10KICAgICAgICBAd2VhcG9ucyA9IFtdCiAgICAgICAgQGFybW9ycyA9IFtdCiAgICAgICAgQGtleUl0ZW1zID0gW10KICAgICAgICAKICAgICAgICBpZiBkYXRhPwogICAgICAgICAgICBmb3IgaXRlbSBpbiBkYXRhLml0ZW1zCiAgICAgICAgICAgICAgICBAaXRlbXNbaXRlbS5pZF0gPSB7IGl0ZW06IFJlY29yZE1hbmFnZXIuaXRlbXNbaXRlbS5pZF0sIGNvdW50OiBpdGVtLmNvdW50IH0KICAgICAgICAgICAgZm9yIGl0ZW0gaW4gZGF0YS53ZWFwb25zCiAgICAgICAgICAgICAgICBAd2VhcG9uc1tpdGVtLmlkXSA9IHsgaXRlbTogUmVjb3JkTWFuYWdlci53ZWFwb25zW2l0ZW0uaWRdLCBjb3VudDogaXRlbS5jb3VudCB9CiAgICAgICAgICAgIGZvciBpdGVtIGluIGRhdGEuYXJtb3JzCiAgICAgICAgICAgICAgICBAYXJtb3JzW2l0ZW0uaWRdID0geyBpdGVtOiBSZWNvcmRNYW5hZ2VyLmFybW9yc1tpdGVtLmlkXSwgY291bnQ6IGl0ZW0uY291bnQgfQogICAgICAgICAgICBmb3IgaXRlbSBpbiBkYXRhLmtleUl0ZW1zCiAgICAgICAgICAgICAgICBAa2V5SXRlbXNbaXRlbS5pZF0gPSB7IGl0ZW06IFJlY29yZE1hbmFnZXIuaXRlbXNbaXRlbS5pZF0sIGNvdW50OiBpdGVtLmNvdW50IH0KICAgICAgICAgICAgICAgIAogICAgIAogICAgCiAgICB0b0RhdGFCdW5kbGU6IC0+CiAgICAgICAgYnVuZGxlID0geyBpdGVtczogW10sIHdlYXBvbnM6IFtdLCBhcm1vcnM6IFtdLCBrZXlJdGVtczogW10gfQogICAgICAgIAogICAgICAgIGZvciBpdGVtIGluIEBpdGVtcwogICAgICAgICAgICBidW5kbGUuaXRlbXMucHVzaCh7IGlkOiBpdGVtLml0ZW0uaW5kZXgsIGNvdW50OiBpdGVtLmNvdW50IH0pCiAgICAgICAgCiAgICAgICAgZm9yIGl0ZW0gaW4gQHdlYXBvbnMKICAgICAgICAgICAgYnVuZGxlLndlYXBvbnMucHVzaCh7IGlkOiBpdGVtLml0ZW0uaW5kZXgsIGNvdW50OiBpdGVtLmNvdW50IH0pCiAgICAgICAgICAgIAogICAgICAgIGZvciBpdGVtIGluIEBhcm1vcnMKICAgICAgICAgICAgYnVuZGxlLmFybW9ycy5wdXNoKHsgaWQ6IGl0ZW0uaXRlbS5pbmRleCwgY291bnQ6IGl0ZW0uY291bnQgfSkKICAgICAgICAgICAgCiAgICAgICAgZm9yIGl0ZW0gaW4gQGtleUl0ZW1zCiAgICAgICAgICAgIGJ1bmRsZS5rZXlJdGVtcy5wdXNoKHsgaWQ6IGl0ZW0uaXRlbS5pbmRleCwgY291bnQ6IGl0ZW0uY291bnQgfSkKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIGJ1bmRsZQogICAgICAgIAogICAgYWRkSXRlbTogKGl0ZW0sIGFtb3VudCkgLT4KICAgICAgICBpdGVtcyA9IG51bGwKICAgICAgICBpZiBpdGVtLml0ZW1UeXBlPyB0aGVuIGl0ZW1zID0gQGl0ZW1zCiAgICAgICAgaWYgaXRlbS53ZWFwb25UeXBlPyB0aGVuIGl0ZW1zID0gQHdlYXBvbnMKICAgICAgICBpZiBpdGVtLmFybW9yVHlwZT8gdGhlbiBpdGVtcyA9IEBhcm1vcnMKICAgICAgICAKICAgICAgICBpZiBpdGVtcz8KICAgICAgICAgICAgaWYgaXRlbXNbaXRlbS5pbmRleF0/IAogICAgICAgICAgICAgICAgaXRlbXNbaXRlbS5pbmRleF0uY291bnQgPSBNYXRoLm1pbihpdGVtc1tpdGVtLmluZGV4XS5jb3VudCArIGFtb3VudCwgOTkpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIGl0ZW1zW2l0ZW0uaW5kZXhdID0geyBpdGVtOiBpdGVtLCBjb3VudDogYW1vdW50IH0KICAgICAgICAgICAgICAgIAogICAgcmVtb3ZlSXRlbTogKGl0ZW0sIGFtb3VudCkgLT4KICAgICAgICBpdGVtcyA9IG51bGwKICAgICAgICBpZiBpdGVtLml0ZW1UeXBlPyB0aGVuIGl0ZW1zID0gQGl0ZW1zCiAgICAgICAgaWYgaXRlbS53ZWFwb25UeXBlPyB0aGVuIGl0ZW1zID0gQHdlYXBvbnMKICAgICAgICBpZiBpdGVtLmFybW9yVHlwZT8gdGhlbiBpdGVtcyA9IEBhcm1vcnMKICAgICAgICAKICAgICAgICBpZiBpdGVtcz8KICAgICAgICAgICAgaWYgaXRlbXNbaXRlbS5pbmRleF0/IAogICAgICAgICAgICAgICAgaXRlbXNbaXRlbS5pbmRleF0uY291bnQgPSBNYXRoLm1heChpdGVtc1tpdGVtLmluZGV4XS5jb3VudCAtIGFtb3VudCwgMCkKICAgICAgICAgICAgICAgIAogICAgaXRlbTogKHR5cGUsIGlkKSAtPgogICAgICAgIHJlc3VsdCA9IG51bGwKICAgICAgICAKICAgICAgICBzd2l0Y2ggdHlwZQogICAgICAgICAgICB3aGVuIDAgIyBJdGVtcwogICAgICAgICAgICAgICAgaWYgbm90IEBpdGVtc1tpZF0/CiAgICAgICAgICAgICAgICAgICAgQGl0ZW1zW2lkXSA9IHsgaXRlbTogUmVjb3JkTWFuYWdlci5pdGVtc1tpZF0sIGNvdW50OiAwIH0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IEBpdGVtc1tpZF0KICAgICAgICAgICAgd2hlbiAxICMgV2VhcG9ucwogICAgICAgICAgICAgICAgaWYgbm90IEB3ZWFwb25zW2lkXT8KICAgICAgICAgICAgICAgICAgICBAd2VhcG9uc1tpZF0gPSB7IGl0ZW06IFJlY29yZE1hbmFnZXIud2VhcG9uc1tpZF0sIGNvdW50OiAwIH0KICAgICAgICAgICAgICAgIHJlc3VsdCA9IEB3ZWFwb25zW2lkXQogICAgICAgICAgICB3aGVuIDIgIyBBcm1vcnMKICAgICAgICAgICAgICAgIGlmIG5vdCBAYXJtb3JzW2lkXT8KICAgICAgICAgICAgICAgICAgICBAYXJtb3JzW2lkXSA9IHsgaXRlbTogUmVjb3JkTWFuYWdlci5hcm1vcnNbaWRdLCBjb3VudDogMCB9CiAgICAgICAgICAgICAgICByZXN1bHQgPSBAYXJtb3JzW2lkXQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAKCndpbmRvdy5Mb2dpY19JbnZlbnRvcnkgPSBMb2dpY19JbnZlbnRvcnk=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19JbnZlbnRvcnk7CgogIExvZ2ljX0ludmVudG9yeSA9IChmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIExvZ2ljX0ludmVudG9yeShkYXRhKSB7CiAgICAgIHZhciBpdGVtLCBfaSwgX2osIF9rLCBfbCwgX2xlbiwgX2xlbjEsIF9sZW4yLCBfbGVuMywgX3JlZiwgX3JlZjEsIF9yZWYyLCBfcmVmMzsKICAgICAgdGhpcy5pdGVtcyA9IFtdOwogICAgICB0aGlzLndlYXBvbnMgPSBbXTsKICAgICAgdGhpcy5hcm1vcnMgPSBbXTsKICAgICAgdGhpcy5rZXlJdGVtcyA9IFtdOwogICAgICBpZiAoZGF0YSAhPSBudWxsKSB7CiAgICAgICAgX3JlZiA9IGRhdGEuaXRlbXM7CiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgICBpdGVtID0gX3JlZltfaV07CiAgICAgICAgICB0aGlzLml0ZW1zW2l0ZW0uaWRdID0gewogICAgICAgICAgICBpdGVtOiBSZWNvcmRNYW5hZ2VyLml0ZW1zW2l0ZW0uaWRdLAogICAgICAgICAgICBjb3VudDogaXRlbS5jb3VudAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgICAgX3JlZjEgPSBkYXRhLndlYXBvbnM7CiAgICAgICAgZm9yIChfaiA9IDAsIF9sZW4xID0gX3JlZjEubGVuZ3RoOyBfaiA8IF9sZW4xOyBfaisrKSB7CiAgICAgICAgICBpdGVtID0gX3JlZjFbX2pdOwogICAgICAgICAgdGhpcy53ZWFwb25zW2l0ZW0uaWRdID0gewogICAgICAgICAgICBpdGVtOiBSZWNvcmRNYW5hZ2VyLndlYXBvbnNbaXRlbS5pZF0sCiAgICAgICAgICAgIGNvdW50OiBpdGVtLmNvdW50CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgICBfcmVmMiA9IGRhdGEuYXJtb3JzOwogICAgICAgIGZvciAoX2sgPSAwLCBfbGVuMiA9IF9yZWYyLmxlbmd0aDsgX2sgPCBfbGVuMjsgX2srKykgewogICAgICAgICAgaXRlbSA9IF9yZWYyW19rXTsKICAgICAgICAgIHRoaXMuYXJtb3JzW2l0ZW0uaWRdID0gewogICAgICAgICAgICBpdGVtOiBSZWNvcmRNYW5hZ2VyLmFybW9yc1tpdGVtLmlkXSwKICAgICAgICAgICAgY291bnQ6IGl0ZW0uY291bnQKICAgICAgICAgIH07CiAgICAgICAgfQogICAgICAgIF9yZWYzID0gZGF0YS5rZXlJdGVtczsKICAgICAgICBmb3IgKF9sID0gMCwgX2xlbjMgPSBfcmVmMy5sZW5ndGg7IF9sIDwgX2xlbjM7IF9sKyspIHsKICAgICAgICAgIGl0ZW0gPSBfcmVmM1tfbF07CiAgICAgICAgICB0aGlzLmtleUl0ZW1zW2l0ZW0uaWRdID0gewogICAgICAgICAgICBpdGVtOiBSZWNvcmRNYW5hZ2VyLml0ZW1zW2l0ZW0uaWRdLAogICAgICAgICAgICBjb3VudDogaXRlbS5jb3VudAogICAgICAgICAgfTsKICAgICAgICB9CiAgICAgIH0KICAgIH0KCiAgICBMb2dpY19JbnZlbnRvcnkucHJvdG90eXBlLnRvRGF0YUJ1bmRsZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYnVuZGxlLCBpdGVtLCBfaSwgX2osIF9rLCBfbCwgX2xlbiwgX2xlbjEsIF9sZW4yLCBfbGVuMywgX3JlZiwgX3JlZjEsIF9yZWYyLCBfcmVmMzsKICAgICAgYnVuZGxlID0gewogICAgICAgIGl0ZW1zOiBbXSwKICAgICAgICB3ZWFwb25zOiBbXSwKICAgICAgICBhcm1vcnM6IFtdLAogICAgICAgIGtleUl0ZW1zOiBbXQogICAgICB9OwogICAgICBfcmVmID0gdGhpcy5pdGVtczsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgaXRlbSA9IF9yZWZbX2ldOwogICAgICAgIGJ1bmRsZS5pdGVtcy5wdXNoKHsKICAgICAgICAgIGlkOiBpdGVtLml0ZW0uaW5kZXgsCiAgICAgICAgICBjb3VudDogaXRlbS5jb3VudAogICAgICAgIH0pOwogICAgICB9CiAgICAgIF9yZWYxID0gdGhpcy53ZWFwb25zOwogICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMS5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHsKICAgICAgICBpdGVtID0gX3JlZjFbX2pdOwogICAgICAgIGJ1bmRsZS53ZWFwb25zLnB1c2goewogICAgICAgICAgaWQ6IGl0ZW0uaXRlbS5pbmRleCwKICAgICAgICAgIGNvdW50OiBpdGVtLmNvdW50CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgX3JlZjIgPSB0aGlzLmFybW9yczsKICAgICAgZm9yIChfayA9IDAsIF9sZW4yID0gX3JlZjIubGVuZ3RoOyBfayA8IF9sZW4yOyBfaysrKSB7CiAgICAgICAgaXRlbSA9IF9yZWYyW19rXTsKICAgICAgICBidW5kbGUuYXJtb3JzLnB1c2goewogICAgICAgICAgaWQ6IGl0ZW0uaXRlbS5pbmRleCwKICAgICAgICAgIGNvdW50OiBpdGVtLmNvdW50CiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgX3JlZjMgPSB0aGlzLmtleUl0ZW1zOwogICAgICBmb3IgKF9sID0gMCwgX2xlbjMgPSBfcmVmMy5sZW5ndGg7IF9sIDwgX2xlbjM7IF9sKyspIHsKICAgICAgICBpdGVtID0gX3JlZjNbX2xdOwogICAgICAgIGJ1bmRsZS5rZXlJdGVtcy5wdXNoKHsKICAgICAgICAgIGlkOiBpdGVtLml0ZW0uaW5kZXgsCiAgICAgICAgICBjb3VudDogaXRlbS5jb3VudAogICAgICAgIH0pOwogICAgICB9CiAgICAgIHJldHVybiBidW5kbGU7CiAgICB9OwoKICAgIExvZ2ljX0ludmVudG9yeS5wcm90b3R5cGUuYWRkSXRlbSA9IGZ1bmN0aW9uKGl0ZW0sIGFtb3VudCkgewogICAgICB2YXIgaXRlbXM7CiAgICAgIGl0ZW1zID0gbnVsbDsKICAgICAgaWYgKGl0ZW0uaXRlbVR5cGUgIT0gbnVsbCkgewogICAgICAgIGl0ZW1zID0gdGhpcy5pdGVtczsKICAgICAgfQogICAgICBpZiAoaXRlbS53ZWFwb25UeXBlICE9IG51bGwpIHsKICAgICAgICBpdGVtcyA9IHRoaXMud2VhcG9uczsKICAgICAgfQogICAgICBpZiAoaXRlbS5hcm1vclR5cGUgIT0gbnVsbCkgewogICAgICAgIGl0ZW1zID0gdGhpcy5hcm1vcnM7CiAgICAgIH0KICAgICAgaWYgKGl0ZW1zICE9IG51bGwpIHsKICAgICAgICBpZiAoaXRlbXNbaXRlbS5pbmRleF0gIT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIGl0ZW1zW2l0ZW0uaW5kZXhdLmNvdW50ID0gTWF0aC5taW4oaXRlbXNbaXRlbS5pbmRleF0uY291bnQgKyBhbW91bnQsIDk5KTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIGl0ZW1zW2l0ZW0uaW5kZXhdID0gewogICAgICAgICAgICBpdGVtOiBpdGVtLAogICAgICAgICAgICBjb3VudDogYW1vdW50CiAgICAgICAgICB9OwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBMb2dpY19JbnZlbnRvcnkucHJvdG90eXBlLnJlbW92ZUl0ZW0gPSBmdW5jdGlvbihpdGVtLCBhbW91bnQpIHsKICAgICAgdmFyIGl0ZW1zOwogICAgICBpdGVtcyA9IG51bGw7CiAgICAgIGlmIChpdGVtLml0ZW1UeXBlICE9IG51bGwpIHsKICAgICAgICBpdGVtcyA9IHRoaXMuaXRlbXM7CiAgICAgIH0KICAgICAgaWYgKGl0ZW0ud2VhcG9uVHlwZSAhPSBudWxsKSB7CiAgICAgICAgaXRlbXMgPSB0aGlzLndlYXBvbnM7CiAgICAgIH0KICAgICAgaWYgKGl0ZW0uYXJtb3JUeXBlICE9IG51bGwpIHsKICAgICAgICBpdGVtcyA9IHRoaXMuYXJtb3JzOwogICAgICB9CiAgICAgIGlmIChpdGVtcyAhPSBudWxsKSB7CiAgICAgICAgaWYgKGl0ZW1zW2l0ZW0uaW5kZXhdICE9IG51bGwpIHsKICAgICAgICAgIHJldHVybiBpdGVtc1tpdGVtLmluZGV4XS5jb3VudCA9IE1hdGgubWF4KGl0ZW1zW2l0ZW0uaW5kZXhdLmNvdW50IC0gYW1vdW50LCAwKTsKICAgICAgICB9CiAgICAgIH0KICAgIH07CgogICAgTG9naWNfSW52ZW50b3J5LnByb3RvdHlwZS5pdGVtID0gZnVuY3Rpb24odHlwZSwgaWQpIHsKICAgICAgdmFyIHJlc3VsdDsKICAgICAgcmVzdWx0ID0gbnVsbDsKICAgICAgc3dpdGNoICh0eXBlKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgaWYgKHRoaXMuaXRlbXNbaWRdID09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5pdGVtc1tpZF0gPSB7CiAgICAgICAgICAgICAgaXRlbTogUmVjb3JkTWFuYWdlci5pdGVtc1tpZF0sCiAgICAgICAgICAgICAgY291bnQ6IDAKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdCA9IHRoaXMuaXRlbXNbaWRdOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgaWYgKHRoaXMud2VhcG9uc1tpZF0gPT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLndlYXBvbnNbaWRdID0gewogICAgICAgICAgICAgIGl0ZW06IFJlY29yZE1hbmFnZXIud2VhcG9uc1tpZF0sCiAgICAgICAgICAgICAgY291bnQ6IDAKICAgICAgICAgICAgfTsKICAgICAgICAgIH0KICAgICAgICAgIHJlc3VsdCA9IHRoaXMud2VhcG9uc1tpZF07CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBpZiAodGhpcy5hcm1vcnNbaWRdID09IG51bGwpIHsKICAgICAgICAgICAgdGhpcy5hcm1vcnNbaWRdID0gewogICAgICAgICAgICAgIGl0ZW06IFJlY29yZE1hbmFnZXIuYXJtb3JzW2lkXSwKICAgICAgICAgICAgICBjb3VudDogMAogICAgICAgICAgICB9OwogICAgICAgICAgfQogICAgICAgICAgcmVzdWx0ID0gdGhpcy5hcm1vcnNbaWRdOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwoKICAgIHJldHVybiBMb2dpY19JbnZlbnRvcnk7CgogIH0pKCk7CgogIHdpbmRvdy5Mb2dpY19JbnZlbnRvcnkgPSBMb2dpY19JbnZlbnRvcnk7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Logic_Animation","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfQW5pbWF0aW9uCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTI5CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IExvZ2ljX0FuaW1hdGlvbgojCiMgICBBIGJhc2UgY2xhc3MgZm9yIGFsbCBvdGhlciB3aW5kb3cgY2xhc3Nlcy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIExvZ2ljX0FuaW1hdGlvbgogICAgY29uc3RydWN0b3I6IChyZWNvcmQpIC0+CiAgICAgICAgQHJlY29yZCA9IHJlY29yZAogICAgICAgIEBmcmFtZXMgPSByZWNvcmQuZnJhbWVzCiAgICAgICAgQGZyYW1lQ291bnQgPSByZWNvcmQubWF4RnJhbWVzCiAgICAgICAgQGdyYXBoaWMxID0gcmVjb3JkLmdyYXBoaWMxCiAgICAgICAgQGdyYXBoaWMyID0gcmVjb3JkLmdyYXBoaWMyCiAgICAgICAgQGVmZmVjdHMgPSByZWNvcmQuZWZmZWN0cwogICAgICAgIEBjdXJyZW50RnJhbWUgPSBAZnJhbWVzWzBdCiAgICAgICAgQGN1cnJlbnRFZmZlY3QgPSBudWxsCiAgICAgICAgQHJlcGVhdCA9IG5vCiAgICAgICAgQGZyYW1lRHVyYXRpb24gPSA0CiAgICAgICAgQGZyYW1lQ291bnRlciA9IDAKICAgICAgICBAZHVyYXRpb24gPSBAZnJhbWVEdXJhdGlvbiAqIEBmcmFtZXMubGVuZ3RoCiAgICAgICAgQGlzUnVubmluZyA9IG5vCiAgICAgICAgQGxhc3RFZmZlY3QgPSBudWxsCiAgICBzdGFydDogLT4KICAgICAgICBAaXNSdW5uaW5nID0geWVzCiAgICAgICAgCiAgICB1cGRhdGU6IC0+CiAgICAgICAgaWYgbm90IEBpc1J1bm5pbmcgdGhlbiByZXR1cm4KICAgICAgICAKICAgICAgICBpZiBAZnJhbWVDb3VudGVyID49IEBkdXJhdGlvbgogICAgICAgICAgICBpZiBAcmVwZWF0CiAgICAgICAgICAgICAgICBAZnJhbWVDb3VudGVyID0gMAogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBAaXNSdW5uaW5nID0gbm8KICAgICAgICAgICAgICAgIHJldHVybgogICAKICAgICAgICBmcmFtZUluZGV4ID0gTWF0aC5mbG9vcihAZnJhbWVDb3VudGVyIC8gQGZyYW1lRHVyYXRpb24pCiAgICAgICAgQGN1cnJlbnRGcmFtZSA9IEBmcmFtZXNbZnJhbWVJbmRleF0KICAgICAgICBAY3VycmVudEVmZmVjdCA9IG51bGwKICAgICAgICAKICAgICAgICBpZiBAZWZmZWN0cz8KICAgICAgICAgICAgZm9yIGkgaW4gWzAuLi5AZWZmZWN0cy5sZW5ndGhdCiAgICAgICAgICAgICAgICBpZiAoQGVmZmVjdHNbaV0uZnJhbWUgKiA0KSA8PSAoQGZyYW1lQ291bnRlcikgYW5kICgoQGZyYW1lQ291bnRlciAtIChAZWZmZWN0c1tpXS5mcmFtZSAqIDQpKSA8IEBlZmZlY3RzW2ldLmR1cmF0aW9uICogNCkgCiAgICAgICAgICAgICAgICAgICAgaWYgQGxhc3RFZmZlY3QgIT0gQGVmZmVjdHNbaV0KICAgICAgICAgICAgICAgICAgICAgICAgQGN1cnJlbnRFZmZlY3QgPSBAZWZmZWN0c1tpXQogICAgICAgICAgICAgICAgICAgICAgICBAbGFzdEVmZmVjdCA9IEBjdXJyZW50RWZmZWN0CiAgICAgICAgICAgICAgICAgICAgICAgIGlmIEBjdXJyZW50RWZmZWN0LnNvdW5kLm5hbWUubGVuZ3RoID4gMAogICAgICAgICAgICAgICAgICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZChAY3VycmVudEVmZmVjdC5zb3VuZCkKICAgICAgICAgICAgICAgICAgICBicmVhawogICAgICAgICAgICAKICAgICAgICAKICAgICAgICBAZnJhbWVDb3VudGVyKysKICAgICAgICAKICAgICAgICAKCiAKICAgICAgICAKd2luZG93LkxvZ2ljX0FuaW1hdGlvbiA9IExvZ2ljX0FuaW1hdGlvbg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19BbmltYXRpb247CgogIExvZ2ljX0FuaW1hdGlvbiA9IChmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIExvZ2ljX0FuaW1hdGlvbihyZWNvcmQpIHsKICAgICAgdGhpcy5yZWNvcmQgPSByZWNvcmQ7CiAgICAgIHRoaXMuZnJhbWVzID0gcmVjb3JkLmZyYW1lczsKICAgICAgdGhpcy5mcmFtZUNvdW50ID0gcmVjb3JkLm1heEZyYW1lczsKICAgICAgdGhpcy5ncmFwaGljMSA9IHJlY29yZC5ncmFwaGljMTsKICAgICAgdGhpcy5ncmFwaGljMiA9IHJlY29yZC5ncmFwaGljMjsKICAgICAgdGhpcy5lZmZlY3RzID0gcmVjb3JkLmVmZmVjdHM7CiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy5mcmFtZXNbMF07CiAgICAgIHRoaXMuY3VycmVudEVmZmVjdCA9IG51bGw7CiAgICAgIHRoaXMucmVwZWF0ID0gZmFsc2U7CiAgICAgIHRoaXMuZnJhbWVEdXJhdGlvbiA9IDQ7CiAgICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMDsKICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMuZnJhbWVEdXJhdGlvbiAqIHRoaXMuZnJhbWVzLmxlbmd0aDsKICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgICAgdGhpcy5sYXN0RWZmZWN0ID0gbnVsbDsKICAgIH0KCiAgICBMb2dpY19BbmltYXRpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzUnVubmluZyA9IHRydWU7CiAgICB9OwoKICAgIExvZ2ljX0FuaW1hdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBmcmFtZUluZGV4LCBpLCBfaSwgX3JlZjsKICAgICAgaWYgKCF0aGlzLmlzUnVubmluZykgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAodGhpcy5mcmFtZUNvdW50ZXIgPj0gdGhpcy5kdXJhdGlvbikgewogICAgICAgIGlmICh0aGlzLnJlcGVhdCkgewogICAgICAgICAgdGhpcy5mcmFtZUNvdW50ZXIgPSAwOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgICBmcmFtZUluZGV4ID0gTWF0aC5mbG9vcih0aGlzLmZyYW1lQ291bnRlciAvIHRoaXMuZnJhbWVEdXJhdGlvbik7CiAgICAgIHRoaXMuY3VycmVudEZyYW1lID0gdGhpcy5mcmFtZXNbZnJhbWVJbmRleF07CiAgICAgIHRoaXMuY3VycmVudEVmZmVjdCA9IG51bGw7CiAgICAgIGlmICh0aGlzLmVmZmVjdHMgIT0gbnVsbCkgewogICAgICAgIGZvciAoaSA9IF9pID0gMCwgX3JlZiA9IHRoaXMuZWZmZWN0cy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICBpZiAoKHRoaXMuZWZmZWN0c1tpXS5mcmFtZSAqIDQpIDw9IHRoaXMuZnJhbWVDb3VudGVyICYmICgodGhpcy5mcmFtZUNvdW50ZXIgLSAodGhpcy5lZmZlY3RzW2ldLmZyYW1lICogNCkpIDwgdGhpcy5lZmZlY3RzW2ldLmR1cmF0aW9uICogNCkpIHsKICAgICAgICAgICAgaWYgKHRoaXMubGFzdEVmZmVjdCAhPT0gdGhpcy5lZmZlY3RzW2ldKSB7CiAgICAgICAgICAgICAgdGhpcy5jdXJyZW50RWZmZWN0ID0gdGhpcy5lZmZlY3RzW2ldOwogICAgICAgICAgICAgIHRoaXMubGFzdEVmZmVjdCA9IHRoaXMuY3VycmVudEVmZmVjdDsKICAgICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50RWZmZWN0LnNvdW5kLm5hbWUubGVuZ3RoID4gMCkgewogICAgICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLnBsYXlTb3VuZCh0aGlzLmN1cnJlbnRFZmZlY3Quc291bmQpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgICAgICBicmVhazsKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb3VudGVyKys7CiAgICB9OwoKICAgIHJldHVybiBMb2dpY19BbmltYXRpb247CgogIH0pKCk7CgogIHdpbmRvdy5Mb2dpY19BbmltYXRpb24gPSBMb2dpY19BbmltYXRpb247Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Logic_SimpleAnimation","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfU2ltcGxlQW5pbWF0aW9uCiMgICBDcmVhdGVkIG9uOiAyMDEzLTEwLTEzCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IExvZ2ljX1NpbXBsZUFuaW1hdGlvbgojCiMgICBBIGJhc2UgY2xhc3MgZm9yIGFsbCBvdGhlciB3aW5kb3cgY2xhc3Nlcy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIExvZ2ljX1NpbXBsZUFuaW1hdGlvbgogICAgY29uc3RydWN0b3I6IChyZWNvcmQpIC0+CiAgICAgICAgQHJlY29yZCA9IHJlY29yZAogICAgICAgIEByZWZyZXNoKHJlY29yZCkKICAgICAgICAKICAgIHJlZnJlc2g6IChyZWNvcmQpIC0+CiAgICAgICAgQG5hbWUgPSByZWNvcmQubmFtZQogICAgICAgIEBmcmFtZXNYID0gcmVjb3JkLmZyYW1lc1ggfHwgMQogICAgICAgIEBmcmFtZXNZID0gcmVjb3JkLmZyYW1lc1kgfHwgMQogICAgICAgIEBmcmFtZVJhbmdlID0gaWYgcmVjb3JkLnVzZUZyYW1lUmFuZ2UgdGhlbiByZWNvcmQuZnJhbWVSYW5nZSBlbHNlIHsgc3RhcnQ6IDAsIGVuZDogKEBmcmFtZXNYICogQGZyYW1lc1kpLTEgfQogICAgICAgIEByZXBldGl0aW9uRnJhbWVSYW5nZSA9IGlmIHJlY29yZC51c2VSZXBldGl0aW9uRnJhbWVSYW5nZSBhbmQgcmVjb3JkLnJlcGV0aXRpb25GcmFtZVJhbmdlPyB0aGVuIHJlY29yZC5yZXBldGl0aW9uRnJhbWVSYW5nZSBlbHNlIEBmcmFtZVJhbmdlCiAgICAgICAgQGZyYW1lQ291bnQgPSAoQGZyYW1lUmFuZ2UuZW5kIC0gQGZyYW1lUmFuZ2Uuc3RhcnQpICsgMQogICAgICAgIEBncmFwaGljID0gcmVjb3JkLmdyYXBoaWMKICAgICAgICBAcmVwZWF0ID0gcmVjb3JkLnJlcGVhdCB8fCBubwogICAgICAgIEBwb3NpdGlvbiA9IHJlY29yZC5wb3NpdGlvbgoKICAgICAgICBAZnJhbWVEdXJhdGlvbiA9IGlmIHJlY29yZC5kdXJhdGlvbj8gdGhlbiBNYXRoLnJvdW5kKHJlY29yZC5kdXJhdGlvbiAvIEBmcmFtZUNvdW50KSBlbHNlIDEwCiAgICAgICAgQGZyYW1lQ291bnRlciA9IDAKICAgICAgICBAZHVyYXRpb24gPSByZWNvcmQuZHVyYXRpb24gfHwgMTAKICAgICAgICBAaXNSdW5uaW5nID0gbm8KICAgICAgICBAcGF0dGVybk9mZnNldCA9IEBmcmFtZVJhbmdlLnN0YXJ0CiAgICAgICAgQHBhdHRlcm4gPSBAcGF0dGVybk9mZnNldAogICAgICAgIEBmaXJzdFJ1biA9IHllcwogICAgc3RhcnQ6IC0+CiAgICAgICAgQGlzUnVubmluZyA9IHllcwogICAgICAgIEBmaXJzdFJ1biA9IHllcwogICAgICAgIEBmcmFtZUNvdW50ZXIgPSAwCiAgICAgICAgQGZyYW1lQ291bnQgPSAoQGZyYW1lUmFuZ2UuZW5kIC0gQGZyYW1lUmFuZ2Uuc3RhcnQpICsgMQogICAgICAgIEBmcmFtZUR1cmF0aW9uID0gTWF0aC5yb3VuZChAZHVyYXRpb24gLyBAZnJhbWVDb3VudCkKICAgICAgICBAcGF0dGVybk9mZnNldCA9IEBmcmFtZVJhbmdlLnN0YXJ0CiAgICB1cGRhdGU6IC0+CiAgICAgICAgaWYgbm90IEBpc1J1bm5pbmcgdGhlbiByZXR1cm4KICAgICAgICAKICAgICAgICBpZiBAZnJhbWVDb3VudGVyID49IEBkdXJhdGlvbgogICAgICAgICAgICBpZiBAcmVwZWF0CiAgICAgICAgICAgICAgICBAZmlyc3RSdW4gPSBubwogICAgICAgICAgICAgICAgQGZyYW1lQ291bnRlciA9IDAKICAgICAgICAgICAgICAgIEBmcmFtZUNvdW50ID0gKEByZXBldGl0aW9uRnJhbWVSYW5nZS5lbmQgLSBAcmVwZXRpdGlvbkZyYW1lUmFuZ2Uuc3RhcnQpICsgMQogICAgICAgICAgICAgICAgQGZyYW1lRHVyYXRpb24gPSBNYXRoLnJvdW5kKEBkdXJhdGlvbiAvIEBmcmFtZUNvdW50KQogICAgICAgICAgICAgICAgQHBhdHRlcm5PZmZzZXQgPSBAcmVwZXRpdGlvbkZyYW1lUmFuZ2Uuc3RhcnQKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgQGlzUnVubmluZyA9IG5vCiAgICAgICAgICAgICAgICBpZiBAb25GaW5pc2g/IHRoZW4gQG9uRmluaXNoKHRoaXMpCiAgICAgICAgICAgICAgICByZXR1cm4KCiAgICAgICAgCiAgICAgICAgQHBhdHRlcm4gPSBAcGF0dGVybk9mZnNldCArIE1hdGguZmxvb3IoQGZyYW1lQ291bnRlciAvIEBmcmFtZUR1cmF0aW9uKSAgCiAgICAgICAgQGZyYW1lQ291bnRlcisrCiAgICAgICAgCiAgICAgICAgCgogCiAgICAgICAgCndpbmRvdy5Mb2dpY19TaW1wbGVBbmltYXRpb24gPSBMb2dpY19TaW1wbGVBbmltYXRpb24=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19TaW1wbGVBbmltYXRpb247CgogIExvZ2ljX1NpbXBsZUFuaW1hdGlvbiA9IChmdW5jdGlvbigpIHsKICAgIGZ1bmN0aW9uIExvZ2ljX1NpbXBsZUFuaW1hdGlvbihyZWNvcmQpIHsKICAgICAgdGhpcy5yZWNvcmQgPSByZWNvcmQ7CiAgICAgIHRoaXMucmVmcmVzaChyZWNvcmQpOwogICAgfQoKICAgIExvZ2ljX1NpbXBsZUFuaW1hdGlvbi5wcm90b3R5cGUucmVmcmVzaCA9IGZ1bmN0aW9uKHJlY29yZCkgewogICAgICB0aGlzLm5hbWUgPSByZWNvcmQubmFtZTsKICAgICAgdGhpcy5mcmFtZXNYID0gcmVjb3JkLmZyYW1lc1ggfHwgMTsKICAgICAgdGhpcy5mcmFtZXNZID0gcmVjb3JkLmZyYW1lc1kgfHwgMTsKICAgICAgdGhpcy5mcmFtZVJhbmdlID0gcmVjb3JkLnVzZUZyYW1lUmFuZ2UgPyByZWNvcmQuZnJhbWVSYW5nZSA6IHsKICAgICAgICBzdGFydDogMCwKICAgICAgICBlbmQ6ICh0aGlzLmZyYW1lc1ggKiB0aGlzLmZyYW1lc1kpIC0gMQogICAgICB9OwogICAgICB0aGlzLnJlcGV0aXRpb25GcmFtZVJhbmdlID0gcmVjb3JkLnVzZVJlcGV0aXRpb25GcmFtZVJhbmdlICYmIChyZWNvcmQucmVwZXRpdGlvbkZyYW1lUmFuZ2UgIT0gbnVsbCkgPyByZWNvcmQucmVwZXRpdGlvbkZyYW1lUmFuZ2UgOiB0aGlzLmZyYW1lUmFuZ2U7CiAgICAgIHRoaXMuZnJhbWVDb3VudCA9ICh0aGlzLmZyYW1lUmFuZ2UuZW5kIC0gdGhpcy5mcmFtZVJhbmdlLnN0YXJ0KSArIDE7CiAgICAgIHRoaXMuZ3JhcGhpYyA9IHJlY29yZC5ncmFwaGljOwogICAgICB0aGlzLnJlcGVhdCA9IHJlY29yZC5yZXBlYXQgfHwgZmFsc2U7CiAgICAgIHRoaXMucG9zaXRpb24gPSByZWNvcmQucG9zaXRpb247CiAgICAgIHRoaXMuZnJhbWVEdXJhdGlvbiA9IHJlY29yZC5kdXJhdGlvbiAhPSBudWxsID8gTWF0aC5yb3VuZChyZWNvcmQuZHVyYXRpb24gLyB0aGlzLmZyYW1lQ291bnQpIDogMTA7CiAgICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMDsKICAgICAgdGhpcy5kdXJhdGlvbiA9IHJlY29yZC5kdXJhdGlvbiB8fCAxMDsKICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgICAgdGhpcy5wYXR0ZXJuT2Zmc2V0ID0gdGhpcy5mcmFtZVJhbmdlLnN0YXJ0OwogICAgICB0aGlzLnBhdHRlcm4gPSB0aGlzLnBhdHRlcm5PZmZzZXQ7CiAgICAgIHJldHVybiB0aGlzLmZpcnN0UnVuID0gdHJ1ZTsKICAgIH07CgogICAgTG9naWNfU2ltcGxlQW5pbWF0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmlzUnVubmluZyA9IHRydWU7CiAgICAgIHRoaXMuZmlyc3RSdW4gPSB0cnVlOwogICAgICB0aGlzLmZyYW1lQ291bnRlciA9IDA7CiAgICAgIHRoaXMuZnJhbWVDb3VudCA9ICh0aGlzLmZyYW1lUmFuZ2UuZW5kIC0gdGhpcy5mcmFtZVJhbmdlLnN0YXJ0KSArIDE7CiAgICAgIHRoaXMuZnJhbWVEdXJhdGlvbiA9IE1hdGgucm91bmQodGhpcy5kdXJhdGlvbiAvIHRoaXMuZnJhbWVDb3VudCk7CiAgICAgIHJldHVybiB0aGlzLnBhdHRlcm5PZmZzZXQgPSB0aGlzLmZyYW1lUmFuZ2Uuc3RhcnQ7CiAgICB9OwoKICAgIExvZ2ljX1NpbXBsZUFuaW1hdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudGVyID49IHRoaXMuZHVyYXRpb24pIHsKICAgICAgICBpZiAodGhpcy5yZXBlYXQpIHsKICAgICAgICAgIHRoaXMuZmlyc3RSdW4gPSBmYWxzZTsKICAgICAgICAgIHRoaXMuZnJhbWVDb3VudGVyID0gMDsKICAgICAgICAgIHRoaXMuZnJhbWVDb3VudCA9ICh0aGlzLnJlcGV0aXRpb25GcmFtZVJhbmdlLmVuZCAtIHRoaXMucmVwZXRpdGlvbkZyYW1lUmFuZ2Uuc3RhcnQpICsgMTsKICAgICAgICAgIHRoaXMuZnJhbWVEdXJhdGlvbiA9IE1hdGgucm91bmQodGhpcy5kdXJhdGlvbiAvIHRoaXMuZnJhbWVDb3VudCk7CiAgICAgICAgICB0aGlzLnBhdHRlcm5PZmZzZXQgPSB0aGlzLnJlcGV0aXRpb25GcmFtZVJhbmdlLnN0YXJ0OwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlOwogICAgICAgICAgaWYgKHRoaXMub25GaW5pc2ggIT0gbnVsbCkgewogICAgICAgICAgICB0aGlzLm9uRmluaXNoKHRoaXMpOwogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLnBhdHRlcm4gPSB0aGlzLnBhdHRlcm5PZmZzZXQgKyBNYXRoLmZsb29yKHRoaXMuZnJhbWVDb3VudGVyIC8gdGhpcy5mcmFtZUR1cmF0aW9uKTsKICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb3VudGVyKys7CiAgICB9OwoKICAgIHJldHVybiBMb2dpY19TaW1wbGVBbmltYXRpb247CgogIH0pKCk7CgogIHdpbmRvdy5Mb2dpY19TaW1wbGVBbmltYXRpb24gPSBMb2dpY19TaW1wbGVBbmltYXRpb247Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Logic_MovableAnimation","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfTW92YWJsZUFuaW1hdGlvbgojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0xMwojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBMb2dpY19TaW1wbGVBbmltYXRpb24KIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uIGV4dGVuZHMgTG9naWNfU2ltcGxlQW5pbWF0aW9uCiAgICBjb25zdHJ1Y3RvcjogKHJlY29yZCkgLT4KICAgICAgICBzdXBlcihyZWNvcmQpCiAgICAgICAgQHNvdXJjZSA9IG51bGwKICAgICAgICBAdGFyZ2V0ID0gbnVsbAogICAgICAgIEBtb3ZlRHVyYXRpb24gPSByZWNvcmQubW92ZUR1cmF0aW9uIHx8IDYwCiAgICBzdGFydDogLT4KICAgICAgICBzdXBlcgogICAgICAKICAgICAgICBAeCA9IEBzb3VyY2UueAogICAgICAgIEB5ID0gQHNvdXJjZS55CiAgICAgICAgQHRpbWUgPSBAbW92ZUR1cmF0aW9uCiAgICAgICAgQHZ4ID0gKChAdGFyZ2V0LnggLSBAc291cmNlLngpIC8gQHRpbWUpCiAgICAgICAgQHZ5ID0gKChAdGFyZ2V0LnkgLSBAc291cmNlLnkpIC8gQHRpbWUpCiAgICAgICAgQGlzUnVubmluZyA9IHllcwogICAgICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIHN1cGVyCiAgICAgICAgaWYgbm90IEBpc1J1bm5pbmcgdGhlbiByZXR1cm4KCiAgICAgICAgQGZpcnN0UnVuID0geWVzCiAgICAgICAgQHggKz0gQHZ4CiAgICAgICAgQHkgKz0gQHZ5CiAgICAgICAgCiAgICAgICAgQHRpbWUtLQogICAgICAgIAogICAgICAgIGlmIEB0aW1lIDw9IDAKICAgICAgICAgICAgQGlzUnVubmluZyA9IG5vCiAgICAgICAgICAgIGNvbnNvbGUubG9nKCJOT08iKQoKICAgICAgICAKICAgICAgICAKCiAKICAgICAgICAKd2luZG93LkxvZ2ljX01vdmFibGVBbmltYXRpb24gPSBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9u","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgTG9naWNfTW92YWJsZUFuaW1hdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIExvZ2ljX01vdmFibGVBbmltYXRpb24ocmVjb3JkKSB7CiAgICAgIExvZ2ljX01vdmFibGVBbmltYXRpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgcmVjb3JkKTsKICAgICAgdGhpcy5zb3VyY2UgPSBudWxsOwogICAgICB0aGlzLnRhcmdldCA9IG51bGw7CiAgICAgIHRoaXMubW92ZUR1cmF0aW9uID0gcmVjb3JkLm1vdmVEdXJhdGlvbiB8fCA2MDsKICAgIH0KCiAgICBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uLnByb3RvdHlwZS5zdGFydCA9IGZ1bmN0aW9uKCkgewogICAgICBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uLl9fc3VwZXJfXy5zdGFydC5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB0aGlzLnggPSB0aGlzLnNvdXJjZS54OwogICAgICB0aGlzLnkgPSB0aGlzLnNvdXJjZS55OwogICAgICB0aGlzLnRpbWUgPSB0aGlzLm1vdmVEdXJhdGlvbjsKICAgICAgdGhpcy52eCA9ICh0aGlzLnRhcmdldC54IC0gdGhpcy5zb3VyY2UueCkgLyB0aGlzLnRpbWU7CiAgICAgIHRoaXMudnkgPSAodGhpcy50YXJnZXQueSAtIHRoaXMuc291cmNlLnkpIC8gdGhpcy50aW1lOwogICAgICByZXR1cm4gdGhpcy5pc1J1bm5pbmcgPSB0cnVlOwogICAgfTsKCiAgICBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgTG9naWNfTW92YWJsZUFuaW1hdGlvbi5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5maXJzdFJ1biA9IHRydWU7CiAgICAgIHRoaXMueCArPSB0aGlzLnZ4OwogICAgICB0aGlzLnkgKz0gdGhpcy52eTsKICAgICAgdGhpcy50aW1lLS07CiAgICAgIGlmICh0aGlzLnRpbWUgPD0gMCkgewogICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7CiAgICAgICAgcmV0dXJuIGNvbnNvbGUubG9nKCJOT08iKTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gTG9naWNfTW92YWJsZUFuaW1hdGlvbjsKCiAgfSkoTG9naWNfU2ltcGxlQW5pbWF0aW9uKTsKCiAgd2luZG93LkxvZ2ljX01vdmFibGVBbmltYXRpb24gPSBMb2dpY19Nb3ZhYmxlQW5pbWF0aW9uOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Logic_TextAnimation","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfVGV4dEFuaW1hdGlvbgojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0xOQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBMb2dpY19UZXh0QW5pbWF0aW9uCiMKIyAgIEEgYmFzZSBjbGFzcyBmb3IgYWxsIG90aGVyIHdpbmRvdyBjbGFzc2VzLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgTG9naWNfVGV4dEFuaW1hdGlvbgogICAgY29uc3RydWN0b3I6ICh0ZXh0LCBjb2xvcikgLT4KICAgICAgICBAdGV4dCA9IHRleHQgfHwgIiIKICAgICAgICBAY29sb3IgPSBjb2xvciB8fCBDb2xvcnMuV0hJVEUKICAgICAgICBAcmVwZWF0ID0gbm8KICAgICAgICBAaXNSdW5uaW5nID0gbm8KICAgICAgICBAZHVyYXRpb24gPSAwCiAgICAgICAgQHggPSAwCiAgICAgICAgQHkgPSAwCiAgICAgICAgQG9wYWNpdHkgPSAyNTUKICAgIHN0YXJ0OiAtPgogICAgICAgIEBvcGFjaXR5ID0gMjU1CiAgICAgICAgQGlzUnVubmluZyA9IHllcwogICAgICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIGlmIG5vdCBAaXNSdW5uaW5nIHRoZW4gcmV0dXJuCiAgICAgICAgCiAgICAgICAgaWYgQG9wYWNpdHkgPT0gMAogICAgICAgICAgICBpZiBAcmVwZWF0CiAgICAgICAgICAgICAgICBAc3RhcnQoKQogICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICBAaXNSdW5uaW5nID0gbm8KICAgICAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIEBvcGFjaXR5ID0gTWF0aC5tYXgoQG9wYWNpdHkgLSA0LCAwKQogICAgICAgIEB5IC09IDIKICAgICAgICAKICAgICAgICAKCiAKICAgICAgICAKd2luZG93LkxvZ2ljX1RleHRBbmltYXRpb24gPSBMb2dpY19UZXh0QW5pbWF0aW9u","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19UZXh0QW5pbWF0aW9uOwoKICBMb2dpY19UZXh0QW5pbWF0aW9uID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gTG9naWNfVGV4dEFuaW1hdGlvbih0ZXh0LCBjb2xvcikgewogICAgICB0aGlzLnRleHQgPSB0ZXh0IHx8ICIiOwogICAgICB0aGlzLmNvbG9yID0gY29sb3IgfHwgQ29sb3JzLldISVRFOwogICAgICB0aGlzLnJlcGVhdCA9IGZhbHNlOwogICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlOwogICAgICB0aGlzLmR1cmF0aW9uID0gMDsKICAgICAgdGhpcy54ID0gMDsKICAgICAgdGhpcy55ID0gMDsKICAgICAgdGhpcy5vcGFjaXR5ID0gMjU1OwogICAgfQoKICAgIExvZ2ljX1RleHRBbmltYXRpb24ucHJvdG90eXBlLnN0YXJ0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMub3BhY2l0eSA9IDI1NTsKICAgICAgcmV0dXJuIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTsKICAgIH07CgogICAgTG9naWNfVGV4dEFuaW1hdGlvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKHRoaXMub3BhY2l0eSA9PT0gMCkgewogICAgICAgIGlmICh0aGlzLnJlcGVhdCkgewogICAgICAgICAgdGhpcy5zdGFydCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmlzUnVubmluZyA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuOwogICAgICAgIH0KICAgICAgfQogICAgICB0aGlzLm9wYWNpdHkgPSBNYXRoLm1heCh0aGlzLm9wYWNpdHkgLSA0LCAwKTsKICAgICAgcmV0dXJuIHRoaXMueSAtPSAyOwogICAgfTsKCiAgICByZXR1cm4gTG9naWNfVGV4dEFuaW1hdGlvbjsKCiAgfSkoKTsKCiAgd2luZG93LkxvZ2ljX1RleHRBbmltYXRpb24gPSBMb2dpY19UZXh0QW5pbWF0aW9uOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Logic_Battler","content":"","compiledContent":""},{"name":"Logic_Picture","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfUGljdHVyZQojICAgQ3JlYXRlZCBvbjogMjAxMy0xMi0wMQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBMb2dpY19QaWN0dXJlCiMKIyAgIEEgY2xhc3MgZm9yIHRoZSBzY3JlZW4gdG8gaGFuZGxlIHNoYWtpbmcsIHRpbnRpbmcsIGV0Yy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIExvZ2ljX1BpY3R1cmUKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIEB4ID0gMAogICAgICAgIEB5ID0gMAogICAgICAgIEB6b29tWCA9IDEuMAogICAgICAgIEB6b29tWSA9IDEuMAogICAgICAgIEBvcGFjaXR5ID0gMjU1CiAgICAgICAgQGFuZ2xlID0gMAogICAgICAgIEBpc01vdmluZyA9IG5vCiAgICAgICAgQGlzWm9vbWluZyA9IG5vCiAgICAgICAgQGlzQmxlbmRpbmcgPSBubwogICAgICAgIEBpc1RpbnRpbmcgPSBubwogICAgICAgIEBpc0NvbG9yaW5nID0gbm8KICAgICAgICBAaXNSb3RhdGluZyA9IG5vCiAgICAgICAgQHRvbmUgPSBuZXcgVG9uZSgwLCAwLCAwLCAwKQogICAgICAgIEBjb2xvciA9IG5ldyBDb2xvcigwLCAwLCAwLCAwKQogICAgICAgIAogICAgbW92ZVRvOiAoeCwgeSwgZHVyYXRpb24pIC0+CiAgICAgICAgaWYgQHggPT0geCBhbmQgQHkgPT0geSB0aGVuIHJldHVybgogICAgICAgIGlmIGR1cmF0aW9uID09IDAKICAgICAgICAgICAgQHggPSB4CiAgICAgICAgICAgIEB5ID0geQogICAgICAgIGVsc2UKICAgICAgICAgICAgQGlzTW92aW5nID0geWVzCiAgICAgICAgICAgIEBtb3ZlRHVyYXRpb24gPSBkdXJhdGlvbgogICAgICAgICAgICBAdGFyZ2V0WCA9IHgKICAgICAgICAgICAgQHRhcmdldFkgPSB5CiAgICAgICAgICAgIEBtb3ZlSW5jcmVtZW50WCA9IChAdGFyZ2V0WCAtIEB4KSAvIGR1cmF0aW9uCiAgICAgICAgICAgIEBtb3ZlSW5jcmVtZW50WSA9IChAdGFyZ2V0WSAtIEB5KSAvIGR1cmF0aW9uCiAgICAgICAgCiAgICAgICAgCiAgICB6b29tVG86ICh4LCB5LCBkdXJhdGlvbikgLT4KICAgICAgICBpZiBAem9vbVggPT0geCBhbmQgQHpvb21ZID09IHkgdGhlbiByZXR1cm4KICAgICAgICBpZiBkdXJhdGlvbiA9PSAwCiAgICAgICAgICAgIEB6b29tWCA9IHgKICAgICAgICAgICAgQHpvb21ZID0geQogICAgICAgIGVsc2UKICAgICAgICAgICAgQGlzWm9vbWluZyA9IHllcwogICAgICAgICAgICBAem9vbUR1cmF0aW9uID0gZHVyYXRpb24KICAgICAgICAgICAgQHRhcmdldFpvb21YID0geAogICAgICAgICAgICBAdGFyZ2V0Wm9vbVkgPSB5CiAgICAgICAgICAgIEB6b29tSW5jcmVtZW50WCA9IChAdGFyZ2V0Wm9vbVggLSBAem9vbVgpIC8gZHVyYXRpb24KICAgICAgICAgICAgQHpvb21JbmNyZW1lbnRZID0gKEB0YXJnZXRab29tWSAtIEB6b29tWSkgLyBkdXJhdGlvbgogICAgICAgIAogICAgYmxlbmRUbzogKG9wYWNpdHksIGR1cmF0aW9uKSAtPgogICAgICAgIGlmIEBvcGFjaXR5ID09IG9wYWNpdHkgdGhlbiByZXR1cm4KICAgICAgICBpZiBkdXJhdGlvbiA9PSAwCiAgICAgICAgICAgIEBvcGFjaXR5ID0gb3BhY2l0eQogICAgICAgIGVsc2UKICAgICAgICAgICAgQGlzQmxlbmRpbmcgPSB5ZXMKICAgICAgICAgICAgQGJsZW5kRHVyYXRpb24gPSBkdXJhdGlvbgogICAgICAgICAgICBAdGFyZ2V0T3BhY2l0eSA9IG9wYWNpdHkKICAgICAgICAgICAgQGJsZW5kSW5jcmVtZW50ID0gKEB0YXJnZXRPcGFjaXR5IC0gQG9wYWNpdHkpIC8gZHVyYXRpb24KICAgICAgICAKICAgIHRpbnRUbzogKHRvbmUsIGR1cmF0aW9uKSAtPgogICAgICAgIGlmIEB0b25lLnJlZCA9PSB0b25lLnJlZCBhbmQgQHRvbmUuZ3JlZW4gPT0gdG9uZS5ncmVlbiBhbmQKICAgICAgICAgICBAdG9uZS5ibHVlID09IHRvbmUuYmx1ZSBhbmQgQHRvbmUuZ3JleSA9PSB0b25lLmdyZXkgdGhlbiByZXR1cm4KICAgICAgICBpZiBkdXJhdGlvbiA9PSAwCiAgICAgICAgICAgIEB0b25lID0gdG9uZQogICAgICAgIGVsc2UKICAgICAgICAgICAgQGlzVGludGluZyA9IHllcwogICAgICAgICAgICBAdGludER1cmF0aW9uID0gZHVyYXRpb24KICAgICAgICAgICAgQHRhcmdldFRvbmUgPSB0b25lCiAgICAgICAgICAgIEB0aW50Q291bnRlciA9IGR1cmF0aW9uCiAgICAgICAgICAgIAogICAgY29sb3JUbzogKGNvbG9yLCBkdXJhdGlvbikgLT4KICAgICAgICBpZiBAY29sb3IucmVkID09IGNvbG9yLnJlZCBhbmQgQGNvbG9yLmdyZWVuID09IGNvbG9yLmdyZWVuIGFuZAogICAgICAgICAgIEBjb2xvci5ibHVlID09IGNvbG9yLmJsdWUgYW5kIEBjb2xvci5hbHBoYSA9PSBjb2xvci5hbHBoYSB0aGVuIHJldHVybgogICAgCiAgICAgICAgaWYgZHVyYXRpb24gPT0gMAogICAgICAgICAgICBAY29sb3IgPSBjb2xvcgogICAgICAgIGVsc2UKICAgICAgICAgICAgQGlzQ29sb3JpbmcgPSB5ZXMKICAgICAgICAgICAgQGNvbG9yRHVyYXRpb24gPSBkdXJhdGlvbgogICAgICAgICAgICBAdGFyZ2V0Q29sb3IgPSBjb2xvcgogICAgICAgICAgICBAY29sb3JDb3VudGVyID0gZHVyYXRpb24KICAgICAgICAgICAgCiAgICByb3RhdGU6IChkaXJlY3Rpb24sIHNwZWVkLCBkdXJhdGlvbikgLT4KICAgICAgICBAaXNSb3RhdGluZyA9IHllcwogICAgICAgIEByb3RhdGlvbkRpcmVjdGlvbiA9IGRpcmVjdGlvbgogICAgICAgIEByb3RhdGlvblNwZWVkID0gc3BlZWQKICAgICAgICBAcm90YXRpb25EdXJhdGlvbiA9IGR1cmF0aW9uCiAgICAgICAgICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIEB1cGRhdGVNb3ZpbmcoKQogICAgICAgIEB1cGRhdGVab29taW5nKCkKICAgICAgICBAdXBkYXRlQmxlbmRpbmcoKQogICAgICAgIEB1cGRhdGVUaW50aW5nKCkKICAgICAgICBAdXBkYXRlQ29sb3JpbmcoKQogICAgICAgIEB1cGRhdGVSb3RhdGlvbigpCiAgICAgICAgCiAgICB1cGRhdGVNb3Zpbmc6IC0+CiAgICAgICAgaWYgbm90IEBpc01vdmluZyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIEB4ICs9IEBtb3ZlSW5jcmVtZW50WAogICAgICAgIEB5ICs9IEBtb3ZlSW5jcmVtZW50WQogICAgICAgIEBtb3ZlRHVyYXRpb24tLQogICAgICAgIAogICAgICAgIGlmIEBtb3ZlRHVyYXRpb24gPT0gMAogICAgICAgICAgICBAeCA9IEB0YXJnZXRYCiAgICAgICAgICAgIEB5ID0gQHRhcmdldFkKICAgICAgICAgICAgQGlzTW92aW5nID0gbm8KICAgICAgICAKICAgIHVwZGF0ZVpvb21pbmc6IC0+CiAgICAgICAgaWYgbm90IEBpc1pvb21pbmcgdGhlbiByZXR1cm4KICAgICAgICAKICAgICAgICBAem9vbVggKz0gQHpvb21JbmNyZW1lbnRYCiAgICAgICAgQHpvb21ZICs9IEB6b29tSW5jcmVtZW50WQogICAgICAgIEB6b29tRHVyYXRpb24tLQogICAgICAgIAogICAgICAgIGlmIEB6b29tRHVyYXRpb24gPT0gMAogICAgICAgICAgICBAem9vbVggPSBAdGFyZ2V0Wm9vbVgKICAgICAgICAgICAgQHpvb21ZID0gQHRhcmdldFpvb21ZCiAgICAgICAgICAgIEBpc1pvb21pbmcgPSBubyAgICAKICAgICAgICAgICAgCiAgICB1cGRhdGVCbGVuZGluZzogLT4KICAgICAgICBpZiBub3QgQGlzQmxlbmRpbmcgdGhlbiByZXR1cm4KICAgICAgICAKICAgICAgICBAb3BhY2l0eSA9IE1hdGgubWF4KE1hdGgubWluKEBvcGFjaXR5ICsgQGJsZW5kSW5jcmVtZW50LCAyNTUpLCAwKQoKICAgICAgICBAYmxlbmREdXJhdGlvbi0tCiAgICAgICAgCiAgICAgICAgaWYgQGJsZW5kRHVyYXRpb24gPT0gMAogICAgICAgICAgICBAb3BhY2l0eSA9IEB0YXJnZXRPcGFjaXR5CiAgICAgICAgICAgIEBpc0JsZW5kaW5nID0gbm8KICAgICAgICAgICAgCiAgICB1cGRhdGVUaW50aW5nOiAtPgogICAgICAgIGlmIG5vdCBAaXNUaW50aW5nIHRoZW4gcmV0dXJuCiAgICAgICAgCiAgICAgICAgYSA9IChAdGludENvdW50ZXIgLyBAdGludER1cmF0aW9uKSAqIDI1NQogICAgICAgIAogICAgICAgIEB0b25lLnJlZCA9IE1hdGguZmxvb3IoKEB0b25lLnJlZCAqIGEgKyBAdGFyZ2V0VG9uZS5yZWQgKiAoMjU1IC0gYSkpIC8gMjU1KQogICAgICAgIEB0b25lLmdyZWVuID0gTWF0aC5mbG9vcigoQHRvbmUuZ3JlZW4gKiBhICsgQHRhcmdldFRvbmUuZ3JlZW4gKiAoMjU1IC0gYSkpIC8gMjU1KQogICAgICAgIEB0b25lLmJsdWUgPSBNYXRoLmZsb29yKChAdG9uZS5ibHVlICogYSArIEB0YXJnZXRUb25lLmJsdWUgKiAoMjU1IC0gYSkpIC8gMjU1KQogICAgICAgIEB0b25lLmdyZXkgPSBNYXRoLmZsb29yKChAdG9uZS5ncmV5ICogYSArIEB0YXJnZXRUb25lLmdyZXkgKiAoMjU1IC0gYSkpIC8gMjU1KQogICAgICAgIAogICAgICAgIEB0aW50Q291bnRlci0tCiAgICAgICAgCiAgICAgICAgaWYgQHRpbnRDb3VudGVyIDw9IDAKICAgICAgICAgICAgQGlzVGludGluZyA9IG5vCiAgICAgICAgICAgIEB0aW50Q291bnRlciA9IDAKICAgICAgICAgICAgQHRpbnREdXJhdGlvbiA9IDAKICAgICAgICAgICAgQHRvbmUgPSBAdGFyZ2V0VG9uZQogICAgICAgICAgICAKICAgIHVwZGF0ZUNvbG9yaW5nOiAtPgogICAgICAgIGlmIG5vdCBAaXNDb2xvcmluZyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIGEgPSAoQGNvbG9yQ291bnRlciAvIEBjb2xvckR1cmF0aW9uKSAqIDI1NQogICAgCiAgICAgICAgCiAgICAgICAgQGNvbG9yLnJlZCA9IE1hdGguZmxvb3IoKEBjb2xvci5yZWQgKiBhICsgQHRhcmdldENvbG9yLnJlZCAqICgyNTUgLSBhKSkgLyAyNTUpCiAgICAgICAgQGNvbG9yLmdyZWVuID0gTWF0aC5mbG9vcigoQGNvbG9yLmdyZWVuICogYSArIEB0YXJnZXRDb2xvci5ncmVlbiAqICgyNTUgLSBhKSkgLyAyNTUpCiAgICAgICAgQGNvbG9yLmJsdWUgPSBNYXRoLmZsb29yKChAY29sb3IuYmx1ZSAqIGEgKyBAdGFyZ2V0Q29sb3IuYmx1ZSAqICgyNTUgLSBhKSkgLyAyNTUpCiAgICAgICAgQGNvbG9yLmFscGhhID0gTWF0aC5mbG9vcigoQGNvbG9yLmFscGhhICogYSArIEB0YXJnZXRDb2xvci5hbHBoYSAqICgyNTUgLSBhKSkgLyAyNTUpCiAgICAgICAgCiAgICAgICAgQGNvbG9yQ291bnRlci0tCiAgICAgICAgCiAgICAgICAgaWYgQGNvbG9yQ291bnRlciA8PSAwCiAgICAgICAgICAgIEBpc0NvbG9yaW5nID0gbm8KICAgICAgICAgICAgQGNvbG9yQ291bnRlciA9IDAKICAgICAgICAgICAgQGNvbG9yRHVyYXRpb24gPSAwCiAgICAgICAgICAgIEBjb2xvciA9IEB0YXJnZXRDb2xvcgogICAgICAgICAgICAKICAgIHVwZGF0ZVJvdGF0aW9uOiAtPgogICAgICAgIGlmIG5vdCBAaXNSb3RhdGluZyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIGlmIEByb3RhdGlvbkRpcmVjdGlvbiA9PSAwCiAgICAgICAgICAgIEBhbmdsZSArPSBAcm90YXRpb25TcGVlZAogICAgICAgIGVsc2UKICAgICAgICAgICAgQGFuZ2xlIC09IEByb3RhdGlvblNwZWVkCiAgICAgICAgIAogICAgICAgIGlmIEByb3RhdGlvbkR1cmF0aW9uID4gMCB0aGVuIEByb3RhdGlvbkR1cmF0aW9uLS0KICAgICAgICBpZiBAcm90YXRpb25EdXJhdGlvbiA9PSAwIHRoZW4gQGlzUm90YXRpbmcgPSBubwogICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCndpbmRvdy5Mb2dpY19QaWN0dXJlID0gTG9naWNfUGljdHVyZQ==","compiledContent":""},{"name":"Logic_Timer","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfVGltZXIKIyAgIENyZWF0ZWQgb246IDIwMTMtMTItMDkKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogTG9naWNfVGltZXIKIwojICAgQSBjbGFzcyBmb3IgdGhlIHNjcmVlbiB0byBoYW5kbGUgc2hha2luZywgdGludGluZywgZXRjLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgTG9naWNfVGltZXIKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIEBtaW51dGVzID0gMAogICAgICAgIEBzZWNvbmRzID0gMAogICAgICAgIEBpc1J1bm5pbmcgPSBubwogICAgICAgIEBmcmFtZUNvdW50ID0gMAogICAgICAgIEBzdG9wV2F0Y2ggPSBubwogICAgc3RhcnQ6IC0+IAogICAgICAgIEBpc1J1bm5pbmcgPSB5ZXMKICAgICAgICBpZiBAc3RvcFdhdGNoCiAgICAgICAgICAgIEBmcmFtZUNvdW50ID0gMAogICAgICAgIGVsc2UKICAgICAgICAgICAgQGZyYW1lQ291bnQgPSBAbWludXRlcyAqIDYwICogNjAgKyBAc2Vjb25kcyAqIDYwCiAgICAgICAgCiAgICBzdG9wOiAtPiBAaXNSdW5uaW5nID0gbm8KICAgIAogICAgcmVzdW1lOiAtPiBAaXNSdW5uaW5nID0geWVzCiAgICAKICAgIHBhdXNlOiAtPiBAaXNSdW5uaW5nID0gbm8KICAgICAgICAKICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIGlmIEBzdG9wV2F0Y2gKICAgICAgICAgICAgQHVwZGF0ZVN0b3BXYXRjaCgpCiAgICAgICAgZWxzZQogICAgICAgICAgICBAdXBkYXRlVGltZXIoKQogICAgICAgICAgICAKICAgIHVwZGF0ZVRpbWVyOiAtPgogICAgICAgIGlmIEBmcmFtZUNvdW50ID09IDAgdGhlbiBAaXNSdW5uaW5nID0gbm8KICAgICAgICBpZiBub3QgQGlzUnVubmluZyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIHNlY29uZHMgPSBNYXRoLnJvdW5kKEBmcmFtZUNvdW50IC8gNjApCiAgICAgICAgCiAgICAgICAgQHNlY29uZHMgPSBzZWNvbmRzICUgNjAKICAgICAgICBAbWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKQogICAgICAgIAogICAgICAgIEBmcmFtZUNvdW50LS0KICAgIHVwZGF0ZVN0b3BXYXRjaDogLT4KICAgICAgICBpZiBub3QgQGlzUnVubmluZyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIHNlY29uZHMgPSBNYXRoLnJvdW5kKEBmcmFtZUNvdW50IC8gNjApCiAgICAgICAgCiAgICAgICAgQHNlY29uZHMgPSBzZWNvbmRzICUgNjAKICAgICAgICBAbWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKQogICAgICAgIAogICAgICAgIEBmcmFtZUNvdW50KysKICAgICAgICAKICAgICAgICAgICAgCgogICAgICAgIAogCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCndpbmRvdy5Mb2dpY19UaW1lciA9IExvZ2ljX1RpbWVy","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19UaW1lcjsKCiAgTG9naWNfVGltZXIgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBMb2dpY19UaW1lcigpIHsKICAgICAgdGhpcy5taW51dGVzID0gMDsKICAgICAgdGhpcy5zZWNvbmRzID0gMDsKICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgICAgdGhpcy5mcmFtZUNvdW50ID0gMDsKICAgICAgdGhpcy5zdG9wV2F0Y2ggPSBmYWxzZTsKICAgIH0KCiAgICBMb2dpY19UaW1lci5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5pc1J1bm5pbmcgPSB0cnVlOwogICAgICBpZiAodGhpcy5zdG9wV2F0Y2gpIHsKICAgICAgICByZXR1cm4gdGhpcy5mcmFtZUNvdW50ID0gMDsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5mcmFtZUNvdW50ID0gdGhpcy5taW51dGVzICogNjAgKiA2MCArIHRoaXMuc2Vjb25kcyAqIDYwOwogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX1RpbWVyLnByb3RvdHlwZS5zdG9wID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzUnVubmluZyA9IGZhbHNlOwogICAgfTsKCiAgICBMb2dpY19UaW1lci5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLmlzUnVubmluZyA9IHRydWU7CiAgICB9OwoKICAgIExvZ2ljX1RpbWVyLnByb3RvdHlwZS5wYXVzZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgIH07CgogICAgTG9naWNfVGltZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodGhpcy5zdG9wV2F0Y2gpIHsKICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVTdG9wV2F0Y2goKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy51cGRhdGVUaW1lcigpOwogICAgICB9CiAgICB9OwoKICAgIExvZ2ljX1RpbWVyLnByb3RvdHlwZS51cGRhdGVUaW1lciA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgc2Vjb25kczsKICAgICAgaWYgKHRoaXMuZnJhbWVDb3VudCA9PT0gMCkgewogICAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLmlzUnVubmluZykgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBzZWNvbmRzID0gTWF0aC5yb3VuZCh0aGlzLmZyYW1lQ291bnQgLyA2MCk7CiAgICAgIHRoaXMuc2Vjb25kcyA9IHNlY29uZHMgJSA2MDsKICAgICAgdGhpcy5taW51dGVzID0gTWF0aC5mbG9vcihzZWNvbmRzIC8gNjApOwogICAgICByZXR1cm4gdGhpcy5mcmFtZUNvdW50LS07CiAgICB9OwoKICAgIExvZ2ljX1RpbWVyLnByb3RvdHlwZS51cGRhdGVTdG9wV2F0Y2ggPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNlY29uZHM7CiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgc2Vjb25kcyA9IE1hdGgucm91bmQodGhpcy5mcmFtZUNvdW50IC8gNjApOwogICAgICB0aGlzLnNlY29uZHMgPSBzZWNvbmRzICUgNjA7CiAgICAgIHRoaXMubWludXRlcyA9IE1hdGguZmxvb3Ioc2Vjb25kcyAvIDYwKTsKICAgICAgcmV0dXJuIHRoaXMuZnJhbWVDb3VudCsrOwogICAgfTsKCiAgICByZXR1cm4gTG9naWNfVGltZXI7CgogIH0pKCk7CgogIHdpbmRvdy5Mb2dpY19UaW1lciA9IExvZ2ljX1RpbWVyOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Logic_BattleMessage","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogTG9naWNfQmF0dGxlTWVzc2FnZQojICAgQ3JlYXRlZCBvbjogMjAxMy0xMi0yMgojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBMb2dpY19CYXR0bGVNZXNzYWdlCiMKIyAgIEEgY2xhc3MgZm9yIHRoZSBzY3JlZW4gdG8gaGFuZGxlIHNoYWtpbmcsIHRpbnRpbmcsIGV0Yy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIExvZ2ljX0JhdHRsZU1lc3NhZ2UKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIEBtZXNzYWdlcyA9IFtdCiAgICAgICAgQHRpbWVyID0gMAogICAgICAgIEB3YWl0Rm9yS2V5ID0gbm8KICAgICAgICBAY3VycmVudFBhZ2UgPSAwCiAgICAgICAgQHJlZnJlc2hOZWVkZWQgPSB5ZXMKICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBpZiBAbWVzc2FnZXMubGVuZ3RoID4gMCBhbmQgQG1lc3NhZ2VzW0BjdXJyZW50UGFnZV0/IGFuZCBAbWVzc2FnZXNbQGN1cnJlbnRQYWdlXS5sZW5ndGggPiAwCiAgICAgICAgICAgIGlmIEB0aW1lciA9PSAwIHRoZW4gQHRpbWVyID0gMTIwICAgICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIEB0aW1lciA+IDAgdGhlbiBAdGltZXItLQogICAgICAgICAgICAKICAgICAgICAgICAgaWYgQHdhaXRGb3JLZXkKICAgICAgICAgICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuQykKICAgICAgICAgICAgICAgICAgICBAY3VycmVudFBhZ2UrKwogICAgICAgICAgICAgICAgICAgIGlmIEBjdXJyZW50UGFnZSA+PSBAbWVzc2FnZXMubGVuZ3RoCiAgICAgICAgICAgICAgICAgICAgICAgIEBjdXJyZW50UGFnZSA9IDAKICAgICAgICAgICAgICAgICAgICAgICAgQG1lc3NhZ2VzID0gW10KICAgICAgICAgICAgICAgICAgICAgICAgaWYgQG9uVGltZXJUaWNrPyB0aGVuIEBvblRpbWVyVGljaygpCiAgICAgICAgICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgICAgICAgICBAcmVmcmVzaE5lZWRlZCA9IHllcwogICAgICAgICAgICBlbHNlIGlmIEB0aW1lciA9PSAwCiAgICAgICAgICAgICAgICBAY3VycmVudFBhZ2UrKwogICAgICAgICAgICAgICAgaWYgQGN1cnJlbnRQYWdlID49IEBtZXNzYWdlcy5sZW5ndGgKICAgICAgICAgICAgICAgICAgICBAY3VycmVudFBhZ2UgPSAwCiAgICAgICAgICAgICAgICAgICAgQG1lc3NhZ2VzID0gW10KICAgICAgICAgICAgICAgICAgICBpZiBAb25UaW1lclRpY2s/IHRoZW4gQG9uVGltZXJUaWNrKCkKICAgICAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgICAgICBAcmVmcmVzaE5lZWRlZCA9IHllcwogICAgICAgICAgICAgICAgICAgIAogICAgYWRkTWVzc2FnZTogKHBhZ2UsIG1lc3NhZ2UsIGZpbmlzaEhhbmRsZXIpIC0+CiAgICAgICAgaWYgbm90IEBtZXNzYWdlc1twYWdlXT8gdGhlbiBAbWVzc2FnZXNbcGFnZV0gPSBbXQogICAgICAgIEBtZXNzYWdlc1twYWdlXS5wdXNoKHsgdGV4dDogbWVzc2FnZSwgb25GaW5pc2g6IGZpbmlzaEhhbmRsZXJ9KQogICAgICAgIEByZWZyZXNoTmVlZGVkID0geWVzCiAgICAgICAgICAgIAoKICAgICAgICAKIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAp3aW5kb3cuTG9naWNfQmF0dGxlTWVzc2FnZSA9IExvZ2ljX0JhdHRsZU1lc3NhZ2U=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBMb2dpY19CYXR0bGVNZXNzYWdlOwoKICBMb2dpY19CYXR0bGVNZXNzYWdlID0gKGZ1bmN0aW9uKCkgewogICAgZnVuY3Rpb24gTG9naWNfQmF0dGxlTWVzc2FnZSgpIHsKICAgICAgdGhpcy5tZXNzYWdlcyA9IFtdOwogICAgICB0aGlzLnRpbWVyID0gMDsKICAgICAgdGhpcy53YWl0Rm9yS2V5ID0gZmFsc2U7CiAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwOwogICAgICB0aGlzLnJlZnJlc2hOZWVkZWQgPSB0cnVlOwogICAgfQoKICAgIExvZ2ljX0JhdHRsZU1lc3NhZ2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodGhpcy5tZXNzYWdlcy5sZW5ndGggPiAwICYmICh0aGlzLm1lc3NhZ2VzW3RoaXMuY3VycmVudFBhZ2VdICE9IG51bGwpICYmIHRoaXMubWVzc2FnZXNbdGhpcy5jdXJyZW50UGFnZV0ubGVuZ3RoID4gMCkgewogICAgICAgIGlmICh0aGlzLnRpbWVyID09PSAwKSB7CiAgICAgICAgICB0aGlzLnRpbWVyID0gMTIwOwogICAgICAgIH0KICAgICAgICBpZiAodGhpcy50aW1lciA+IDApIHsKICAgICAgICAgIHRoaXMudGltZXItLTsKICAgICAgICB9CiAgICAgICAgaWYgKHRoaXMud2FpdEZvcktleSkgewogICAgICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuQykpIHsKICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrOwogICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50UGFnZSA+PSB0aGlzLm1lc3NhZ2VzLmxlbmd0aCkgewogICAgICAgICAgICAgIHRoaXMuY3VycmVudFBhZ2UgPSAwOwogICAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTsKICAgICAgICAgICAgICBpZiAodGhpcy5vblRpbWVyVGljayAhPSBudWxsKSB7CiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5vblRpbWVyVGljaygpOwogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoTmVlZGVkID0gdHJ1ZTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgIH0gZWxzZSBpZiAodGhpcy50aW1lciA9PT0gMCkgewogICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSsrOwogICAgICAgICAgaWYgKHRoaXMuY3VycmVudFBhZ2UgPj0gdGhpcy5tZXNzYWdlcy5sZW5ndGgpIHsKICAgICAgICAgICAgdGhpcy5jdXJyZW50UGFnZSA9IDA7CiAgICAgICAgICAgIHRoaXMubWVzc2FnZXMgPSBbXTsKICAgICAgICAgICAgaWYgKHRoaXMub25UaW1lclRpY2sgIT0gbnVsbCkgewogICAgICAgICAgICAgIHJldHVybiB0aGlzLm9uVGltZXJUaWNrKCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0gZWxzZSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlZnJlc2hOZWVkZWQgPSB0cnVlOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICBMb2dpY19CYXR0bGVNZXNzYWdlLnByb3RvdHlwZS5hZGRNZXNzYWdlID0gZnVuY3Rpb24ocGFnZSwgbWVzc2FnZSwgZmluaXNoSGFuZGxlcikgewogICAgICBpZiAodGhpcy5tZXNzYWdlc1twYWdlXSA9PSBudWxsKSB7CiAgICAgICAgdGhpcy5tZXNzYWdlc1twYWdlXSA9IFtdOwogICAgICB9CiAgICAgIHRoaXMubWVzc2FnZXNbcGFnZV0ucHVzaCh7CiAgICAgICAgdGV4dDogbWVzc2FnZSwKICAgICAgICBvbkZpbmlzaDogZmluaXNoSGFuZGxlcgogICAgICB9KTsKICAgICAgcmV0dXJuIHRoaXMucmVmcmVzaE5lZWRlZCA9IHRydWU7CiAgICB9OwoKICAgIHJldHVybiBMb2dpY19CYXR0bGVNZXNzYWdlOwoKICB9KSgpOwoKICB3aW5kb3cuTG9naWNfQmF0dGxlTWVzc2FnZSA9IExvZ2ljX0JhdHRsZU1lc3NhZ2U7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Sprite_Character","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX0NoYXJhY3RlcgojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0wMQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBTcHJpdGVfQ2hhcmFjdGVyCiMKIyAgIEEgYmFzZSBjbGFzcyBmb3IgYWxsIG90aGVyIHdpbmRvdyBjbGFzc2VzLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgU3ByaXRlX0NoYXJhY3RlciBleHRlbmRzIFNwcml0ZQogICAgY29uc3RydWN0b3I6IChsb2dpYywgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIodmlld3BvcnQpCiAgICAgICAgQGxvZ2ljID0gbG9naWMKICAgICAgICBAZ3JhcGhpYyA9IEBsb2dpYy5ncmFwaGljCiAgICAgICAgaWYgQGxvZ2ljLmdyYXBoaWM/IGFuZCBAbG9naWMuZ3JhcGhpYy5uYW1lPwogICAgICAgICAgICBAYml0bWFwID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvQ2hhcmFjdGVycy8je0Bsb2dpYy5ncmFwaGljLm5hbWV9IiwgQGxvZ2ljLmdyYXBoaWMuaHVlKQogICAgICAgIGVsc2UKICAgICAgICAgICAgQGJpdG1hcCA9IG51bGwKICAgICAgICBAb3ggPSAwCiAgICAgICAgQG95ID0gMAogICAgICAgIEB4ID0gQGxvZ2ljLngKICAgICAgICBAeSA9IEBsb2dpYy55CiAgICAgICAgQHpCeUxheWVyID0gWzE2NSwgNDgsIDQwXQogICAgICAgIEB6ID0gQHpCeUxheWVyW0Bsb2dpYy5sYXllcl0KICAgICAgICBAcGF0dGVybiA9IEBsb2dpYy5wYXR0ZXJuCiAgICAgICAgQHN1YlBhdHRlcm4gPSBAbG9naWMuc3ViUGF0dGVybgogICAgICAgIEBzcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgMSwgMSkKICAgIHByZXBhcmU6IC0+CiAgICAgICAgQHVwZGF0ZVBhdHRlcm4oKQogICAgCiAgICB1cGRhdGVQYXR0ZXJuOiAtPgogICAgICAgIGlmIG5vdCBAYml0bWFwPyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIHdpZHRoID0gTWF0aC5mbG9vcihAYml0bWFwLndpZHRoIC8gNCkKICAgICAgICBoZWlnaHQgPSBNYXRoLmZsb29yKEBiaXRtYXAuaGVpZ2h0IC8gNCkKICAgICAgICBjb2x1bW4gPSAoQHBhdHRlcm4gJSA0KSAqIDQgKyAoQHN1YlBhdHRlcm4gJSA0KQogICAgICAgIHJvdyA9IE1hdGguZmxvb3IoQHBhdHRlcm4gLyA0KSAqIDQgKyBNYXRoLmZsb29yKEBzdWJQYXR0ZXJuIC8gNCkgICAgICAgCgogICAgICAgIEBzcmNSZWN0ID0gbmV3IFJlY3QoY29sdW1uICogd2lkdGgsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgcm93ICogaGVpZ2h0LCB3aWR0aCwgaGVpZ2h0KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgCgogICAgdXBkYXRlOiAtPgogICAgICAgIHN1cGVyCiAgICAgICAgQHVwZGF0ZVBhdHRlcm4oKQogICAgICAgIAogICAgICAgIAogICAgICAKICAgICAgICBAeCA9IE1hdGguZmxvb3IoQGxvZ2ljLnggLSAoQHNyY1JlY3Qud2lkdGggLSBAbG9naWMubWFwLnRpbGVTaXplKSAvIDIpCiAgICAgICAgQHkgPSBNYXRoLmZsb29yKEBsb2dpYy55IC0gQHNyY1JlY3QuaGVpZ2h0ICsgQGxvZ2ljLm1hcC50aWxlU2l6ZSkKICAgICAgICAKICAgICAgICB3aWR0aCA9IEBsb2dpYy5tYXAud2lkdGggKiBAbG9naWMubWFwLnRpbGVTaXplCiAgICAgICAgaGVpZ2h0ID0gQGxvZ2ljLm1hcC5oZWlnaHQgKiBAbG9naWMubWFwLnRpbGVTaXplCgogICAgICAgIGlmIEBsb2dpYy5tYXAubG9vcFR5cGUgPT0gMiBvciBAbG9naWMubWFwLmxvb3BUeXBlID09IDMKICAgICAgICAgICAgQG94ID0gTWF0aC5mbG9vcigoKEB4K0BzcmNSZWN0LndpZHRoKSAtIChAdmlld3BvcnQub3gpKSAvIHdpZHRoKSAqIHdpZHRoCiAgICAgICAgaWYgQGxvZ2ljLm1hcC5sb29wVHlwZSA9PSAxIG9yIEBsb2dpYy5tYXAubG9vcFR5cGUgPT0gMwogICAgICAgICAgICBAb3kgPSBNYXRoLmZsb29yKCgoQHkrQHNyY1JlY3QuaGVpZ2h0KSAtIChAdmlld3BvcnQub3kpKSAvIGhlaWdodCkgKiBoZWlnaHQKIAogICAgICAgIEB6ID0gQHpCeUxheWVyW0Bsb2dpYy5sYXllcl0KICAgICAgICBAcGF0dGVybiA9IEBsb2dpYy5wYXR0ZXJuCiAgICAgICAgQHN1YlBhdHRlcm4gPSBAbG9naWMuc3ViUGF0dGVybgogICAgICAgIAogICAgICAgICMgU2hvdyBJZGxlLVBhdHRlcm4gb25seSBpZiB0aGUgY2hhcmFjdGVyIGlzIG5vdCBtb3ZpbmcKICAgICAgICBpZiBAc3ViUGF0dGVybiA9PSAwICYmIEBsb2dpYy5pc01vdmluZyB0aGVuIEBzdWJQYXR0ZXJuID0gMgogICAgICAgIGVsc2UgaWYgQHN1YlBhdHRlcm4gPT0gNCAmJiBAbG9naWMuaXNNb3ZpbmcgdGhlbiBAc3ViUGF0dGVybiA9IDYKICAgICAgICBlbHNlIGlmIEBzdWJQYXR0ZXJuID09IDEyICYmIEBsb2dpYy5pc01vdmluZyB0aGVuIEBzdWJQYXR0ZXJuID0gMTQKICAgICAgICBlbHNlIGlmIEBzdWJQYXR0ZXJuID09IDggJiYgQGxvZ2ljLmlzTW92aW5nIHRoZW4gQHN1YlBhdHRlcm4gPSAxMAogICAgCiAgICAgICAgQG9wYWNpdHkgPSBAbG9naWMub3BhY2l0eQogICAgICAgIEBibGVuZGluZ01vZGUgPSBAbG9naWMuYmxlbmRpbmcKICAgICAgICBAdG9uZSA9IEBsb2dpYy50b25lCiAgICAgICAgQHZpc2libGUgPSBAbG9naWMudmlzaWJsZQogICAgICAgIEBtb3Rpb25CbHVyID0gQGxvZ2ljLm1vdGlvbkJsdXIKICAgICAgICBAbW90aW9uQmx1ckxlbmd0aCA9IEBsb2dpYy5tb3Rpb25CbHVyTGVuZ3RoCiAgICAgICAgQG1vdGlvbkJsdXJPcGFjaXR5ID0gQGxvZ2ljLm1vdGlvbkJsdXJPcGFjaXR5CiAgICAgICAgQG1vdGlvbkJsdXJDb2xvciA9IEBsb2dpYy5tb3Rpb25CbHVyQ29sb3IgfHwgQ29sb3IuVFJBTlNQQVJFTlQKICAgICAgICBpZiBAbG9naWMuZ3JhcGhpYyAhPSBAZ3JhcGhpYwogICAgICAgICAgICBAZ3JhcGhpYyA9IEBsb2dpYy5ncmFwaGljCiAgICAgICAgICAgIGlmIEBncmFwaGljPwogICAgICAgICAgICAgICAgQGJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0NoYXJhY3RlcnMvI3tAZ3JhcGhpYy5uYW1lfSIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIEBiaXRtYXAgPSBudWxsCiAgICAgICAgICAgICAgICAKICAgICAgIAogICAgICAgIEBzdWJPcGFjaXR5ID0gaWYgQGxvZ2ljLmJ1c2hGbGFnIHRoZW4gMTI4IGVsc2UgMAogICAgICAgIEBzdWJPcGFjaXR5SGVpZ2h0ID0gaWYgQGxvZ2ljLmJ1c2hGbGFnIHRoZW4gMTIgKiBXaW5kb3dfQmFzZS5zY2FsZSBlbHNlIDAKICAgICAgICAKCiAgICAgICAgCndpbmRvdy5TcHJpdGVfQ2hhcmFjdGVyID0gU3ByaXRlX0NoYXJhY3Rlcg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfQ2hhcmFjdGVyLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU3ByaXRlX0NoYXJhY3RlciA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTcHJpdGVfQ2hhcmFjdGVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9DaGFyYWN0ZXIobG9naWMsIHZpZXdwb3J0KSB7CiAgICAgIFNwcml0ZV9DaGFyYWN0ZXIuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdmlld3BvcnQpOwogICAgICB0aGlzLmxvZ2ljID0gbG9naWM7CiAgICAgIHRoaXMuZ3JhcGhpYyA9IHRoaXMubG9naWMuZ3JhcGhpYzsKICAgICAgaWYgKCh0aGlzLmxvZ2ljLmdyYXBoaWMgIT0gbnVsbCkgJiYgKHRoaXMubG9naWMuZ3JhcGhpYy5uYW1lICE9IG51bGwpKSB7CiAgICAgICAgdGhpcy5iaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9DaGFyYWN0ZXJzLyIgKyB0aGlzLmxvZ2ljLmdyYXBoaWMubmFtZSwgdGhpcy5sb2dpYy5ncmFwaGljLmh1ZSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5iaXRtYXAgPSBudWxsOwogICAgICB9CiAgICAgIHRoaXMub3ggPSAwOwogICAgICB0aGlzLm95ID0gMDsKICAgICAgdGhpcy54ID0gdGhpcy5sb2dpYy54OwogICAgICB0aGlzLnkgPSB0aGlzLmxvZ2ljLnk7CiAgICAgIHRoaXMuekJ5TGF5ZXIgPSBbMTY1LCA0OCwgNDBdOwogICAgICB0aGlzLnogPSB0aGlzLnpCeUxheWVyW3RoaXMubG9naWMubGF5ZXJdOwogICAgICB0aGlzLnBhdHRlcm4gPSB0aGlzLmxvZ2ljLnBhdHRlcm47CiAgICAgIHRoaXMuc3ViUGF0dGVybiA9IHRoaXMubG9naWMuc3ViUGF0dGVybjsKICAgICAgdGhpcy5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgMSwgMSk7CiAgICB9CgogICAgU3ByaXRlX0NoYXJhY3Rlci5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy51cGRhdGVQYXR0ZXJuKCk7CiAgICB9OwoKICAgIFNwcml0ZV9DaGFyYWN0ZXIucHJvdG90eXBlLnVwZGF0ZVBhdHRlcm4gPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbHVtbiwgaGVpZ2h0LCByb3csIHdpZHRoOwogICAgICBpZiAodGhpcy5iaXRtYXAgPT0gbnVsbCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB3aWR0aCA9IE1hdGguZmxvb3IodGhpcy5iaXRtYXAud2lkdGggLyA0KTsKICAgICAgaGVpZ2h0ID0gTWF0aC5mbG9vcih0aGlzLmJpdG1hcC5oZWlnaHQgLyA0KTsKICAgICAgY29sdW1uID0gKHRoaXMucGF0dGVybiAlIDQpICogNCArICh0aGlzLnN1YlBhdHRlcm4gJSA0KTsKICAgICAgcm93ID0gTWF0aC5mbG9vcih0aGlzLnBhdHRlcm4gLyA0KSAqIDQgKyBNYXRoLmZsb29yKHRoaXMuc3ViUGF0dGVybiAvIDQpOwogICAgICByZXR1cm4gdGhpcy5zcmNSZWN0ID0gbmV3IFJlY3QoY29sdW1uICogd2lkdGgsIHJvdyAqIGhlaWdodCwgd2lkdGgsIGhlaWdodCk7CiAgICB9OwoKICAgIFNwcml0ZV9DaGFyYWN0ZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaGVpZ2h0LCB3aWR0aDsKICAgICAgU3ByaXRlX0NoYXJhY3Rlci5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIHRoaXMudXBkYXRlUGF0dGVybigpOwogICAgICB0aGlzLnggPSBNYXRoLmZsb29yKHRoaXMubG9naWMueCAtICh0aGlzLnNyY1JlY3Qud2lkdGggLSB0aGlzLmxvZ2ljLm1hcC50aWxlU2l6ZSkgLyAyKTsKICAgICAgdGhpcy55ID0gTWF0aC5mbG9vcih0aGlzLmxvZ2ljLnkgLSB0aGlzLnNyY1JlY3QuaGVpZ2h0ICsgdGhpcy5sb2dpYy5tYXAudGlsZVNpemUpOwogICAgICB3aWR0aCA9IHRoaXMubG9naWMubWFwLndpZHRoICogdGhpcy5sb2dpYy5tYXAudGlsZVNpemU7CiAgICAgIGhlaWdodCA9IHRoaXMubG9naWMubWFwLmhlaWdodCAqIHRoaXMubG9naWMubWFwLnRpbGVTaXplOwogICAgICBpZiAodGhpcy5sb2dpYy5tYXAubG9vcFR5cGUgPT09IDIgfHwgdGhpcy5sb2dpYy5tYXAubG9vcFR5cGUgPT09IDMpIHsKICAgICAgICB0aGlzLm94ID0gTWF0aC5mbG9vcigoKHRoaXMueCArIHRoaXMuc3JjUmVjdC53aWR0aCkgLSB0aGlzLnZpZXdwb3J0Lm94KSAvIHdpZHRoKSAqIHdpZHRoOwogICAgICB9CiAgICAgIGlmICh0aGlzLmxvZ2ljLm1hcC5sb29wVHlwZSA9PT0gMSB8fCB0aGlzLmxvZ2ljLm1hcC5sb29wVHlwZSA9PT0gMykgewogICAgICAgIHRoaXMub3kgPSBNYXRoLmZsb29yKCgodGhpcy55ICsgdGhpcy5zcmNSZWN0LmhlaWdodCkgLSB0aGlzLnZpZXdwb3J0Lm95KSAvIGhlaWdodCkgKiBoZWlnaHQ7CiAgICAgIH0KICAgICAgdGhpcy56ID0gdGhpcy56QnlMYXllclt0aGlzLmxvZ2ljLmxheWVyXTsKICAgICAgdGhpcy5wYXR0ZXJuID0gdGhpcy5sb2dpYy5wYXR0ZXJuOwogICAgICB0aGlzLnN1YlBhdHRlcm4gPSB0aGlzLmxvZ2ljLnN1YlBhdHRlcm47CiAgICAgIGlmICh0aGlzLnN1YlBhdHRlcm4gPT09IDAgJiYgdGhpcy5sb2dpYy5pc01vdmluZykgewogICAgICAgIHRoaXMuc3ViUGF0dGVybiA9IDI7CiAgICAgIH0gZWxzZSBpZiAodGhpcy5zdWJQYXR0ZXJuID09PSA0ICYmIHRoaXMubG9naWMuaXNNb3ZpbmcpIHsKICAgICAgICB0aGlzLnN1YlBhdHRlcm4gPSA2OwogICAgICB9IGVsc2UgaWYgKHRoaXMuc3ViUGF0dGVybiA9PT0gMTIgJiYgdGhpcy5sb2dpYy5pc01vdmluZykgewogICAgICAgIHRoaXMuc3ViUGF0dGVybiA9IDE0OwogICAgICB9IGVsc2UgaWYgKHRoaXMuc3ViUGF0dGVybiA9PT0gOCAmJiB0aGlzLmxvZ2ljLmlzTW92aW5nKSB7CiAgICAgICAgdGhpcy5zdWJQYXR0ZXJuID0gMTA7CiAgICAgIH0KICAgICAgdGhpcy5vcGFjaXR5ID0gdGhpcy5sb2dpYy5vcGFjaXR5OwogICAgICB0aGlzLmJsZW5kaW5nTW9kZSA9IHRoaXMubG9naWMuYmxlbmRpbmc7CiAgICAgIHRoaXMudG9uZSA9IHRoaXMubG9naWMudG9uZTsKICAgICAgdGhpcy52aXNpYmxlID0gdGhpcy5sb2dpYy52aXNpYmxlOwogICAgICB0aGlzLm1vdGlvbkJsdXIgPSB0aGlzLmxvZ2ljLm1vdGlvbkJsdXI7CiAgICAgIHRoaXMubW90aW9uQmx1ckxlbmd0aCA9IHRoaXMubG9naWMubW90aW9uQmx1ckxlbmd0aDsKICAgICAgdGhpcy5tb3Rpb25CbHVyT3BhY2l0eSA9IHRoaXMubG9naWMubW90aW9uQmx1ck9wYWNpdHk7CiAgICAgIHRoaXMubW90aW9uQmx1ckNvbG9yID0gdGhpcy5sb2dpYy5tb3Rpb25CbHVyQ29sb3IgfHwgQ29sb3IuVFJBTlNQQVJFTlQ7CiAgICAgIGlmICh0aGlzLmxvZ2ljLmdyYXBoaWMgIT09IHRoaXMuZ3JhcGhpYykgewogICAgICAgIHRoaXMuZ3JhcGhpYyA9IHRoaXMubG9naWMuZ3JhcGhpYzsKICAgICAgICBpZiAodGhpcy5ncmFwaGljICE9IG51bGwpIHsKICAgICAgICAgIHRoaXMuYml0bWFwID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvQ2hhcmFjdGVycy8iICsgdGhpcy5ncmFwaGljLm5hbWUpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmJpdG1hcCA9IG51bGw7CiAgICAgICAgfQogICAgICB9CiAgICAgIHRoaXMuc3ViT3BhY2l0eSA9IHRoaXMubG9naWMuYnVzaEZsYWcgPyAxMjggOiAwOwogICAgICByZXR1cm4gdGhpcy5zdWJPcGFjaXR5SGVpZ2h0ID0gdGhpcy5sb2dpYy5idXNoRmxhZyA/IDEyICogV2luZG93X0Jhc2Uuc2NhbGUgOiAwOwogICAgfTsKCiAgICByZXR1cm4gU3ByaXRlX0NoYXJhY3RlcjsKCiAgfSkoU3ByaXRlKTsKCiAgd2luZG93LlNwcml0ZV9DaGFyYWN0ZXIgPSBTcHJpdGVfQ2hhcmFjdGVyOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Sprite_Shadow","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX1NoYWRvdwojICAgQ3JlYXRlZCBvbjogMjAxMy0xMS0wMwojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBTcHJpdGVfU2hhZG93CiMKIyAgIEEgc3ByaXRlIHRvIGRpc3BsYXkgdGV4dAojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgU3ByaXRlX1NoYWRvdyBleHRlbmRzIFNwcml0ZQogICAgY29uc3RydWN0b3I6IChsb2dpYywgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIodmlld3BvcnQpCiAgICAgICAgCiAgICAgICAgQGxvZ2ljID0gbG9naWMKICAgICAgICBAYml0bWFwID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvU2hhZG93IikKICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0KQogICAgdXBkYXRlOiAtPgogICAgICAgIEB4ID0gQGxvZ2ljLngKICAgICAgICBAeSA9IEBsb2dpYy55ICsgQGxvZ2ljLmFsdGl0dWRlICogMzIKICAgICAgICBAeiA9IDQ4CiAgCiAgICAgICAgc3VwZXIKICAgICAgICAgICAgCiAgIAogICAgICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlX1NoYWRvdyA9IFNwcml0ZV9TaGFkb3c=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfU2hhZG93LAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU3ByaXRlX1NoYWRvdyA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTcHJpdGVfU2hhZG93LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9TaGFkb3cobG9naWMsIHZpZXdwb3J0KSB7CiAgICAgIFNwcml0ZV9TaGFkb3cuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdmlld3BvcnQpOwogICAgICB0aGlzLmxvZ2ljID0gbG9naWM7CiAgICAgIHRoaXMuYml0bWFwID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvU2hhZG93Iik7CiAgICAgIHRoaXMuc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQpOwogICAgfQoKICAgIFNwcml0ZV9TaGFkb3cucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnggPSB0aGlzLmxvZ2ljLng7CiAgICAgIHRoaXMueSA9IHRoaXMubG9naWMueSArIHRoaXMubG9naWMuYWx0aXR1ZGUgKiAzMjsKICAgICAgdGhpcy56ID0gNDg7CiAgICAgIHJldHVybiBTcHJpdGVfU2hhZG93Ll9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgcmV0dXJuIFNwcml0ZV9TaGFkb3c7CgogIH0pKFNwcml0ZSk7CgogIHdpbmRvdy5TcHJpdGVfU2hhZG93ID0gU3ByaXRlX1NoYWRvdzsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Sprite_Text","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX1RleHQKIyAgIENyZWF0ZWQgb246IDIwMTMtMTAtMjYKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogU3ByaXRlX1RleHQKIwojICAgQSBzcHJpdGUgdG8gZGlzcGxheSB0ZXh0CiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTcHJpdGVfVGV4dCBleHRlbmRzIFNwcml0ZQogICAgY29uc3RydWN0b3I6ICh3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydCkgLT4KICAgICAgICBzdXBlcih2aWV3cG9ydCkKICAgICAgICAKICAgICAgICBAYml0bWFwID0gbmV3IEJpdG1hcCh3aWR0aCwgaGVpZ2h0KQogICAgICAgIEBiaXRtYXAuZm9udCA9IEZvbnRzLlRFWFQKICAgICAgICBAc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0KQogICAgICAgIEB0ZXh0ID0gIiIKICAgICAgICBAZm9yZWdyb3VuZENvbG9yID0gQ29sb3JzLldISVRFCiAgICAgICAgQGJhY2tncm91bmRDb2xvciA9IG5ldyBDb2xvcigwLCAwLCAwLCAwLjIpCiAgICAgICAgQGFsaWdubWVudCA9IDAKICAgICAgICBAdmlzaWJsZSA9IG5vCiAgICByZWRyYXc6IC0+CiAgICAgICAgaWYgQHRleHQ/CiAgICAgICAgICAgIEBiaXRtYXAuY2xlYXIoKQogICAgICAgICAgICBAYml0bWFwLmZvbnQuY29sb3IgPSBAZm9yZWdyb3VuZENvbG9yCiAgICAgICAgICAgIAogICAgICAgICAgICBAYml0bWFwLmZpbGxSZWN0KDAsIDAsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0LCBAYmFja2dyb3VuZENvbG9yKQogICAgICAgICAgICBAYml0bWFwLmRyYXdUZXh0KDAsIDAsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0LCBAdGV4dCwgQGFsaWdubWVudCkKICAgICAKICAgIHJlZnJlc2g6IC0+IEByZWRyYXcoKQogICAgCiAgICB1cGRhdGU6IC0+CiAgICAgICAgc3VwZXIKICAgICAgICAgICAgCiAgIAogICAgICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlX1RleHQgPSBTcHJpdGVfVGV4dA==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfVGV4dCwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNwcml0ZV9UZXh0ID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNwcml0ZV9UZXh0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9UZXh0KHdpZHRoLCBoZWlnaHQsIHZpZXdwb3J0KSB7CiAgICAgIFNwcml0ZV9UZXh0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHZpZXdwb3J0KTsKICAgICAgdGhpcy5iaXRtYXAgPSBuZXcgQml0bWFwKHdpZHRoLCBoZWlnaHQpOwogICAgICB0aGlzLmJpdG1hcC5mb250ID0gRm9udHMuVEVYVDsKICAgICAgdGhpcy5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCk7CiAgICAgIHRoaXMudGV4dCA9ICIiOwogICAgICB0aGlzLmZvcmVncm91bmRDb2xvciA9IENvbG9ycy5XSElURTsKICAgICAgdGhpcy5iYWNrZ3JvdW5kQ29sb3IgPSBuZXcgQ29sb3IoMCwgMCwgMCwgMC4yKTsKICAgICAgdGhpcy5hbGlnbm1lbnQgPSAwOwogICAgICB0aGlzLnZpc2libGUgPSBmYWxzZTsKICAgIH0KCiAgICBTcHJpdGVfVGV4dC5wcm90b3R5cGUucmVkcmF3ID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICh0aGlzLnRleHQgIT0gbnVsbCkgewogICAgICAgIHRoaXMuYml0bWFwLmNsZWFyKCk7CiAgICAgICAgdGhpcy5iaXRtYXAuZm9udC5jb2xvciA9IHRoaXMuZm9yZWdyb3VuZENvbG9yOwogICAgICAgIHRoaXMuYml0bWFwLmZpbGxSZWN0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQsIHRoaXMuYmFja2dyb3VuZENvbG9yKTsKICAgICAgICByZXR1cm4gdGhpcy5iaXRtYXAuZHJhd1RleHQoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCwgdGhpcy50ZXh0LCB0aGlzLmFsaWdubWVudCk7CiAgICAgIH0KICAgIH07CgogICAgU3ByaXRlX1RleHQucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMucmVkcmF3KCk7CiAgICB9OwoKICAgIFNwcml0ZV9UZXh0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIFNwcml0ZV9UZXh0Ll9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgcmV0dXJuIFNwcml0ZV9UZXh0OwoKICB9KShTcHJpdGUpOwoKICB3aW5kb3cuU3ByaXRlX1RleHQgPSBTcHJpdGVfVGV4dDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Sprite_Damage","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX0RhbWFnZQojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0wNgojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBTcHJpdGVfRGFtYWdlCiMKIyAgIEEgYmFzZSBjbGFzcyBmb3IgYWxsIG90aGVyIHdpbmRvdyBjbGFzc2VzLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgU3ByaXRlX0RhbWFnZSBleHRlbmRzIFNwcml0ZQogICAgY29uc3RydWN0b3I6IChsb2dpYywgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIodmlld3BvcnQpCiAgICAgICAgCiAgICAgICAgQGxvZ2ljID0gbG9naWMKICAgICAgICAKICAgICAgICBAYml0bWFwID0gbmV3IEJpdG1hcCgzMDAsIDIwKQogICAgICAgIEBiaXRtYXAuZm9udCA9IEZvbnRzLkRBTUFHRQogICAgICAgIEBzcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgQGJpdG1hcC53aWR0aCwgQGJpdG1hcC5oZWlnaHQpCiAgICAgICAgQGlzUnVubmluZyA9IG5vCiAgICAgICAgQHRhcmdldCA9IG51bGwKICAgICAgICBAb3BhY2l0eSA9IDAKICAgICAgICBAdmlzaWJsZSA9IG5vCiAgICAgICAgCiAgICByZWRyYXc6IC0+CiAgICAgICAgaWYgQGxvZ2ljPwogICAgICAgICAgICBAYml0bWFwLmNsZWFyKCkKICAgICAgICAgICAgQGJpdG1hcC5mb250LmNvbG9yID0gQGxvZ2ljLmNvbG9yCiAgICAgICAgICAgIEBiaXRtYXAuZHJhd1RleHQoMCwgMCwgQGJpdG1hcC53aWR0aCwgQGJpdG1hcC5oZWlnaHQsIEBsb2dpYy50ZXh0KQogICAgICAgICAgICAKICAgICAgICAgICAgQG9wYWNpdHkgPSAyNTUKICAgICAgICAgICAgaWYgQHRhcmdldD8KICAgICAgICAgICAgICAgIEB4ID0gQHRhcmdldC54ICsgQHRhcmdldC5zcmNSZWN0LndpZHRoIC8gMiAtIEB0YXJnZXQub3gKICAgICAgICAgICAgICAgIEB5ID0gQHRhcmdldC55ICsgQHRhcmdldC5zcmNSZWN0LmhlaWdodCAvIDIgLSBAdGFyZ2V0Lm95CiAgICAgICAgICAgIAogICAgcmVmcmVzaDogLT4gQHJlZHJhdygpCiAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBzdXBlcgogICAgICAgIEB6ID0gMTUwMAogICAgICAgIGlmIEBsb2dpYz8KICAgICAgICAgICAgQHZpc2libGUgPSBAbG9naWMuaXNSdW5uaW5nCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBAbG9naWMuaXNSdW5uaW5nCiAgICAgICAgICAgICAgICBAb3BhY2l0eSA9IEBsb2dpYy5vcGFjaXR5CiAgICAgICAgICAgICAgICBAeSAtPSAyCiAgICAgICAgICAgIAogICAKICAgICAgICAKICAgICAgICAKd2luZG93LlNwcml0ZV9EYW1hZ2UgPSBTcHJpdGVfRGFtYWdl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfRGFtYWdlLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU3ByaXRlX0RhbWFnZSA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTcHJpdGVfRGFtYWdlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9EYW1hZ2UobG9naWMsIHZpZXdwb3J0KSB7CiAgICAgIFNwcml0ZV9EYW1hZ2UuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdmlld3BvcnQpOwogICAgICB0aGlzLmxvZ2ljID0gbG9naWM7CiAgICAgIHRoaXMuYml0bWFwID0gbmV3IEJpdG1hcCgzMDAsIDIwKTsKICAgICAgdGhpcy5iaXRtYXAuZm9udCA9IEZvbnRzLkRBTUFHRTsKICAgICAgdGhpcy5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCk7CiAgICAgIHRoaXMuaXNSdW5uaW5nID0gZmFsc2U7CiAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDsKICAgICAgdGhpcy5vcGFjaXR5ID0gMDsKICAgICAgdGhpcy52aXNpYmxlID0gZmFsc2U7CiAgICB9CgogICAgU3ByaXRlX0RhbWFnZS5wcm90b3R5cGUucmVkcmF3ID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICh0aGlzLmxvZ2ljICE9IG51bGwpIHsKICAgICAgICB0aGlzLmJpdG1hcC5jbGVhcigpOwogICAgICAgIHRoaXMuYml0bWFwLmZvbnQuY29sb3IgPSB0aGlzLmxvZ2ljLmNvbG9yOwogICAgICAgIHRoaXMuYml0bWFwLmRyYXdUZXh0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQsIHRoaXMubG9naWMudGV4dCk7CiAgICAgICAgdGhpcy5vcGFjaXR5ID0gMjU1OwogICAgICAgIGlmICh0aGlzLnRhcmdldCAhPSBudWxsKSB7CiAgICAgICAgICB0aGlzLnggPSB0aGlzLnRhcmdldC54ICsgdGhpcy50YXJnZXQuc3JjUmVjdC53aWR0aCAvIDIgLSB0aGlzLnRhcmdldC5veDsKICAgICAgICAgIHJldHVybiB0aGlzLnkgPSB0aGlzLnRhcmdldC55ICsgdGhpcy50YXJnZXQuc3JjUmVjdC5oZWlnaHQgLyAyIC0gdGhpcy50YXJnZXQub3k7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIFNwcml0ZV9EYW1hZ2UucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMucmVkcmF3KCk7CiAgICB9OwoKICAgIFNwcml0ZV9EYW1hZ2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBTcHJpdGVfRGFtYWdlLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgdGhpcy56ID0gMTUwMDsKICAgICAgaWYgKHRoaXMubG9naWMgIT0gbnVsbCkgewogICAgICAgIHRoaXMudmlzaWJsZSA9IHRoaXMubG9naWMuaXNSdW5uaW5nOwogICAgICAgIGlmICh0aGlzLmxvZ2ljLmlzUnVubmluZykgewogICAgICAgICAgdGhpcy5vcGFjaXR5ID0gdGhpcy5sb2dpYy5vcGFjaXR5OwogICAgICAgICAgcmV0dXJuIHRoaXMueSAtPSAyOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gU3ByaXRlX0RhbWFnZTsKCiAgfSkoU3ByaXRlKTsKCiAgd2luZG93LlNwcml0ZV9EYW1hZ2UgPSBTcHJpdGVfRGFtYWdlOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Sprite_SimpleAnimation","content":"# ===================================================================\n#\n#   Script: Sprite_SimpleAnimation\n#   Created on: 2013-10-13\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n#   Class: Sprite_SimpleAnimation\n#\n#   A base class for all other window classes.\n#\n# ===================================================================\n\nclass Sprite_SimpleAnimation extends Sprite\n    constructor: (logic, viewport) ->\n        super(viewport)\n        @x = 0\n        @y = 0\n        @logic = logic\n        @graphic = if @logic? then @logic.graphic else null\n        @z = 1500\n        \n        @refresh()\n    refresh: ->\n        if @logic?\n            @graphic = @logic.graphic\n            @value = 0\n            if @logic.graphic and @logic.graphic.name.length > 0\n                if @logic.name == \"DEFAULT_GENERATED\"\n                    @bitmap = ResourceManager.getBitmap(\"Graphics/Battlers/#{@logic.graphic.name}\")\n                else\n                    @bitmap = ResourceManager.getBitmap(\"Graphics/SimpleAnimations/#{@logic.graphic.name}\")\n            else\n                @bitmap = new Bitmap(1, 1)\n                \n            @srcRect = new Rect(0, 0, @bitmap.width, @bitmap.height)\n            @isRunning = no\n            @target = {}\n            \n    update: ->\n        if @logic.graphic != @graphic\n            @refresh()\n            \n        \n            \n        @frameWidth = @bitmap.width / @logic.framesX\n        @frameHeight = @bitmap.height / @logic.framesY\n        column = @logic.pattern % @logic.framesX\n        row = Math.floor(@logic.pattern / @logic.framesX)\n        @srcRect.set(column * @frameWidth, row * @frameHeight, @frameWidth, @frameHeight)\n        @x = @logic.x || @x\n        @y = @logic.y || @y\n        @ox = Math.floor(@srcRect.width / 2)\n        \n        if @target? and @target.sprite?\n            @ox = 0\n            @x = @target.sprite.x + (@target.sprite.srcRect.width - @frameWidth) / 2\n            switch @logic.position\n                when 0 # Above\n                    @y = @target.sprite.y - @frameHeight\n                when 1 # Top\n                    @y = @target.sprite.y \n                when 2 # Center\n                    @y = @target.sprite.y + (@target.sprite.srcRect.height - @frameHeight) / 2\n                when 3 # Bottom\n                    @y = @target.sprite.y + @target.sprite.srcRect.height - @frameHeight\n                when 4 # Below\n                    @y = @target.sprite.y + @target.sprite.srcRect.height\n        super\n        \n        \n        \nwindow.Sprite_SimpleAnimation = Sprite_SimpleAnimation","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfU2ltcGxlQW5pbWF0aW9uLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU3ByaXRlX1NpbXBsZUFuaW1hdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTcHJpdGVfU2ltcGxlQW5pbWF0aW9uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9TaW1wbGVBbmltYXRpb24obG9naWMsIHZpZXdwb3J0KSB7CiAgICAgIFNwcml0ZV9TaW1wbGVBbmltYXRpb24uX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgdmlld3BvcnQpOwogICAgICB0aGlzLnggPSAwOwogICAgICB0aGlzLnkgPSAwOwogICAgICB0aGlzLmxvZ2ljID0gbG9naWM7CiAgICAgIHRoaXMuZ3JhcGhpYyA9IHRoaXMubG9naWMgIT0gbnVsbCA/IHRoaXMubG9naWMuZ3JhcGhpYyA6IG51bGw7CiAgICAgIHRoaXMueiA9IDE1MDA7CiAgICAgIHRoaXMucmVmcmVzaCgpOwogICAgfQoKICAgIFNwcml0ZV9TaW1wbGVBbmltYXRpb24ucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMubG9naWMgIT0gbnVsbCkgewogICAgICAgIHRoaXMuZ3JhcGhpYyA9IHRoaXMubG9naWMuZ3JhcGhpYzsKICAgICAgICB0aGlzLnZhbHVlID0gMDsKICAgICAgICBpZiAodGhpcy5sb2dpYy5ncmFwaGljICYmIHRoaXMubG9naWMuZ3JhcGhpYy5uYW1lLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGlmICh0aGlzLmxvZ2ljLm5hbWUgPT09ICJERUZBVUxUX0dFTkVSQVRFRCIpIHsKICAgICAgICAgICAgdGhpcy5iaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9CYXR0bGVycy8iICsgdGhpcy5sb2dpYy5ncmFwaGljLm5hbWUpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgdGhpcy5iaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9TaW1wbGVBbmltYXRpb25zLyIgKyB0aGlzLmxvZ2ljLmdyYXBoaWMubmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHRoaXMuYml0bWFwID0gbmV3IEJpdG1hcCgxLCAxKTsKICAgICAgICB9CiAgICAgICAgdGhpcy5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCk7CiAgICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgICAgICByZXR1cm4gdGhpcy50YXJnZXQgPSB7fTsKICAgICAgfQogICAgfTsKCiAgICBTcHJpdGVfU2ltcGxlQW5pbWF0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbHVtbiwgcm93OwogICAgICBpZiAodGhpcy5sb2dpYy5ncmFwaGljICE9PSB0aGlzLmdyYXBoaWMpIHsKICAgICAgICB0aGlzLnJlZnJlc2goKTsKICAgICAgfQogICAgICB0aGlzLmZyYW1lV2lkdGggPSB0aGlzLmJpdG1hcC53aWR0aCAvIHRoaXMubG9naWMuZnJhbWVzWDsKICAgICAgdGhpcy5mcmFtZUhlaWdodCA9IHRoaXMuYml0bWFwLmhlaWdodCAvIHRoaXMubG9naWMuZnJhbWVzWTsKICAgICAgY29sdW1uID0gdGhpcy5sb2dpYy5wYXR0ZXJuICUgdGhpcy5sb2dpYy5mcmFtZXNYOwogICAgICByb3cgPSBNYXRoLmZsb29yKHRoaXMubG9naWMucGF0dGVybiAvIHRoaXMubG9naWMuZnJhbWVzWCk7CiAgICAgIHRoaXMuc3JjUmVjdC5zZXQoY29sdW1uICogdGhpcy5mcmFtZVdpZHRoLCByb3cgKiB0aGlzLmZyYW1lSGVpZ2h0LCB0aGlzLmZyYW1lV2lkdGgsIHRoaXMuZnJhbWVIZWlnaHQpOwogICAgICB0aGlzLnggPSB0aGlzLmxvZ2ljLnggfHwgdGhpcy54OwogICAgICB0aGlzLnkgPSB0aGlzLmxvZ2ljLnkgfHwgdGhpcy55OwogICAgICB0aGlzLm94ID0gTWF0aC5mbG9vcih0aGlzLnNyY1JlY3Qud2lkdGggLyAyKTsKICAgICAgaWYgKCh0aGlzLnRhcmdldCAhPSBudWxsKSAmJiAodGhpcy50YXJnZXQuc3ByaXRlICE9IG51bGwpKSB7CiAgICAgICAgdGhpcy5veCA9IDA7CiAgICAgICAgdGhpcy54ID0gdGhpcy50YXJnZXQuc3ByaXRlLnggKyAodGhpcy50YXJnZXQuc3ByaXRlLnNyY1JlY3Qud2lkdGggLSB0aGlzLmZyYW1lV2lkdGgpIC8gMjsKICAgICAgICBzd2l0Y2ggKHRoaXMubG9naWMucG9zaXRpb24pIHsKICAgICAgICAgIGNhc2UgMDoKICAgICAgICAgICAgdGhpcy55ID0gdGhpcy50YXJnZXQuc3ByaXRlLnkgLSB0aGlzLmZyYW1lSGVpZ2h0OwogICAgICAgICAgICBicmVhazsKICAgICAgICAgIGNhc2UgMToKICAgICAgICAgICAgdGhpcy55ID0gdGhpcy50YXJnZXQuc3ByaXRlLnk7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnRhcmdldC5zcHJpdGUueSArICh0aGlzLnRhcmdldC5zcHJpdGUuc3JjUmVjdC5oZWlnaHQgLSB0aGlzLmZyYW1lSGVpZ2h0KSAvIDI7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAzOgogICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnRhcmdldC5zcHJpdGUueSArIHRoaXMudGFyZ2V0LnNwcml0ZS5zcmNSZWN0LmhlaWdodCAtIHRoaXMuZnJhbWVIZWlnaHQ7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSA0OgogICAgICAgICAgICB0aGlzLnkgPSB0aGlzLnRhcmdldC5zcHJpdGUueSArIHRoaXMudGFyZ2V0LnNwcml0ZS5zcmNSZWN0LmhlaWdodDsKICAgICAgICB9CiAgICAgIH0KICAgICAgcmV0dXJuIFNwcml0ZV9TaW1wbGVBbmltYXRpb24uX19zdXBlcl9fLnVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKCiAgICByZXR1cm4gU3ByaXRlX1NpbXBsZUFuaW1hdGlvbjsKCiAgfSkoU3ByaXRlKTsKCiAgd2luZG93LlNwcml0ZV9TaW1wbGVBbmltYXRpb24gPSBTcHJpdGVfU2ltcGxlQW5pbWF0aW9uOwoKfSkuY2FsbCh0aGlzKTsK","decoded":true},{"name":"Sprite_MovableAnimation","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX01vdmFibGVBbmltYXRpb24KIyAgIENyZWF0ZWQgb246IDIwMTMtMTAtMTMKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogU3ByaXRlX1NpbXBsZUFuaW1hdGlvbgojCiMgICBBIGJhc2UgY2xhc3MgZm9yIGFsbCBvdGhlciB3aW5kb3cgY2xhc3Nlcy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNwcml0ZV9Nb3ZhYmxlQW5pbWF0aW9uIGV4dGVuZHMgU3ByaXRlX1NpbXBsZUFuaW1hdGlvbgogICAgY29uc3RydWN0b3I6IChsb2dpYywgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIobG9naWMsIHZpZXdwb3J0KQogICAgICAgIEBzb3VyY2UgPSBudWxsCiAgICAgICAgQHRhcmdldCA9IG51bGwKICAgICAgICBAaXNSdW5uaW5nID0gbm8KICAgIHN0YXJ0OiAtPgogICAgICAgIEB4ID0gQHNvdXJjZS54CiAgICAgICAgQHkgPSBAc291cmNlLnkKICAgICAgICBAZHVyYXRpb24gPSBAbG9naWMubW92ZUR1cmF0aW9uIHx8IDYwCiAgICAgICAgQHZ4ID0gTWF0aC5yb3VuZChAdGFyZ2V0LnggLyBAZHVyYXRpb24pCiAgICAgICAgQHZ5ID0gTWF0aC5yb3VuZChAdGFyZ2V0LnkgLyBAZHVyYXRpb24pCiAgICAgICAgQGlzUnVubmluZyA9IHllcwogICAgdXBkYXRlOiAtPgogICAgICAgIHN1cGVyCiAgICAgICAgaWYgbm90IEBpc1J1bm5pbmcgdGhlbiByZXR1cm4KICAgICAgICAKICAgICAgICBAeCArPSBAdngKICAgICAgICBAeSArPSBAdnkKICAgICAgICAKICAgICAgICBAZHVyYXRpb24tLQogICAgICAgIAogICAgICAgIGlmIEBkdXJhdGlvbiA8PSAwCiAgICAgICAgICAgIEBpc1J1bm5pbmcgPSBubwogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlX01vdmFibGVBbmltYXRpb24gPSBTcHJpdGVfTW92YWJsZUFuaW1hdGlvbg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfTW92YWJsZUFuaW1hdGlvbiwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNwcml0ZV9Nb3ZhYmxlQW5pbWF0aW9uID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNwcml0ZV9Nb3ZhYmxlQW5pbWF0aW9uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9Nb3ZhYmxlQW5pbWF0aW9uKGxvZ2ljLCB2aWV3cG9ydCkgewogICAgICBTcHJpdGVfTW92YWJsZUFuaW1hdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCBsb2dpYywgdmlld3BvcnQpOwogICAgICB0aGlzLnNvdXJjZSA9IG51bGw7CiAgICAgIHRoaXMudGFyZ2V0ID0gbnVsbDsKICAgICAgdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgIH0KCiAgICBTcHJpdGVfTW92YWJsZUFuaW1hdGlvbi5wcm90b3R5cGUuc3RhcnQgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy54ID0gdGhpcy5zb3VyY2UueDsKICAgICAgdGhpcy55ID0gdGhpcy5zb3VyY2UueTsKICAgICAgdGhpcy5kdXJhdGlvbiA9IHRoaXMubG9naWMubW92ZUR1cmF0aW9uIHx8IDYwOwogICAgICB0aGlzLnZ4ID0gTWF0aC5yb3VuZCh0aGlzLnRhcmdldC54IC8gdGhpcy5kdXJhdGlvbik7CiAgICAgIHRoaXMudnkgPSBNYXRoLnJvdW5kKHRoaXMudGFyZ2V0LnkgLyB0aGlzLmR1cmF0aW9uKTsKICAgICAgcmV0dXJuIHRoaXMuaXNSdW5uaW5nID0gdHJ1ZTsKICAgIH07CgogICAgU3ByaXRlX01vdmFibGVBbmltYXRpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBTcHJpdGVfTW92YWJsZUFuaW1hdGlvbi5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICghdGhpcy5pc1J1bm5pbmcpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy54ICs9IHRoaXMudng7CiAgICAgIHRoaXMueSArPSB0aGlzLnZ5OwogICAgICB0aGlzLmR1cmF0aW9uLS07CiAgICAgIGlmICh0aGlzLmR1cmF0aW9uIDw9IDApIHsKICAgICAgICByZXR1cm4gdGhpcy5pc1J1bm5pbmcgPSBmYWxzZTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gU3ByaXRlX01vdmFibGVBbmltYXRpb247CgogIH0pKFNwcml0ZV9TaW1wbGVBbmltYXRpb24pOwoKICB3aW5kb3cuU3ByaXRlX01vdmFibGVBbmltYXRpb24gPSBTcHJpdGVfTW92YWJsZUFuaW1hdGlvbjsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Sprite_Battler","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlc2V0X0JhdHRsZXIKIyAgIENyZWF0ZWQgb246IDIwMTMtMTAtMTkKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogU3ByaXRlX0JhdHRsZXIKIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTcHJpdGVfQmF0dGxlciBleHRlbmRzIFNwcml0ZV9TaW1wbGVBbmltYXRpb24KICAgIGNvbnN0cnVjdG9yOiAobG9naWMsIHZpZXdwb3J0KSAtPiAgICAgICAgCiAgICAgICAgQGxvZ2ljMiA9IGxvZ2ljCiAgICAgICAgc3VwZXIoQGxvZ2ljMi5zdGFuZEFuaW1hdGlvbiwgdmlld3BvcnQpCgogICAgICAgIEB4ID0gQGxvZ2ljMi54IHx8IDAKICAgICAgICBAeSA9IEBsb2dpYzIueSB8fCAwCiAgICAgICAgCiAgICAgICAgQGlzQW5pbWF0aW9uUnVubmluZyA9IG5vCiAgICAgICAgQGFuaW1hdGlvbkxpc3QgPSBbXQogICAgICAgIEBhbmltYXRpb25Qb2ludGVyID0gMAogICAgICAgIEBjb2xvciA9IENvbG9yLlRSQU5TUEFSRU5UCiAgICAgICAgQHRhcmdldCA9IG51bGwKICAgICAgICBAaXNEaXNhcHBlYXJpbmcgPSBubwogICAgICAgIEBpc0FwcGVhcmluZyA9IG5vICAgICAgIAogICAgZGlzcG9zZTogLT4KICAgICAgICBzdXBlcgogICAgICAgICAgICAKICAgIHByZXBhcmU6IC0+CiAgICB1cGRhdGU6IC0+CiAgICAgICAgc3VwZXIKICAgICAgICAKICAgICAgICBAdmlzaWJsZSA9ICFAbG9naWMyLmlzSGlkZGVuCgogICAgICAgIGlmIEBsb2dpYzIuaXNIaWRkZW4gYW5kIG5vdCBAbG9naWMyLmFjdG9yLmlzQWxpdmUKICAgICAgICAgICAgcmV0dXJuCiAgICAgICAgZWxzZSBpZiBAb3BhY2l0eSA8IDI1NSBhbmQgbm90IEBpc0FwcGVhcmluZyBhbmQgbm90IEBpc0Rpc2FwcGVhcmluZwogICAgICAgICAgICBAYXBwZWFyKCkKICAgICAgICAgICAgICAgIAogICAgICAgIEB6ID0gNQogICAgICAgIEBjb2xvciA9IEBjb2xvcgogICAgICAgIAogICAgICAgIGlmIEBvcGFjaXR5ID4gMCBhbmQgQGxvZ2ljMi5kZWFkIGFuZCBub3QgQGxvZ2ljMi5hY3Rvci5kZWF0aEFuaW1hdGlvbj8KICAgICAgICAgICAgQGtpbGwoKQogICAgICAgICAgICAKICAgICAgICBpZiBAb3BhY2l0eSA8PSAwIGFuZCBub3QgQGxvZ2ljMi5kZWFkCiAgICAgICAgICAgIEBhcHBlYXIoKQogICAgICAgICAgICAgICAgICAgIAogICAgICAgIGlmIEBpc0Rpc2FwcGVhcmluZwogICAgICAgICAgICBAb3BhY2l0eSA9IE1hdGgubWF4KEBvcGFjaXR5IC0gOCwgMCkKICAgICAgICAgICAgaWYgQG9wYWNpdHkgPT0gMAogICAgICAgICAgICAgICAgQGlzRGlzYXBwZWFyaW5nID0gbm8KICAgICAgICBlbHNlCiAgICAgICAgICAgIEBpc0Rpc2FwcGVhcmluZyA9IG5vCiAgICAgICAgICAgIAogICAgICAgIGlmIEBpc0FwcGVhcmluZwogICAgICAgICAgICBAb3BhY2l0eSA9IE1hdGgubWluKEBvcGFjaXR5ICsgOCwgMjU1KQogICAgICAgICAgICBpZiBAb3BhY2l0eSA9PSAyNTUKICAgICAgICAgICAgICAgIEBpc0FwcGVhcmluZyA9IG5vCiAgICAgICAgZWxzZQogICAgICAgICAgICBAaXNBcHBlYXJpbmcgPSBubyAgICAKICAgICAgICAgICAgCiAgICBraWxsOiAtPgogICAgICAgIEBjb2xvciA9IG5ldyBDb2xvcigyNTUsIDAsIDAsIDI0NykKICAgICAgICBAaXNEaXNhcHBlYXJpbmcgPSB5ZXMKICAgICAgICAKICAgIGFwcGVhcjogLT4KICAgICAgICBAY29sb3IgPSBDb2xvci5UUkFOU1BBUkVOVAogICAgICAgIEBpc0FwcGVhcmluZyA9IHllcwogICAgICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlX0JhdHRsZXIgPSBTcHJpdGVfQmF0dGxlcg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfQmF0dGxlciwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNwcml0ZV9CYXR0bGVyID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNwcml0ZV9CYXR0bGVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9CYXR0bGVyKGxvZ2ljLCB2aWV3cG9ydCkgewogICAgICB0aGlzLmxvZ2ljMiA9IGxvZ2ljOwogICAgICBTcHJpdGVfQmF0dGxlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB0aGlzLmxvZ2ljMi5zdGFuZEFuaW1hdGlvbiwgdmlld3BvcnQpOwogICAgICB0aGlzLnggPSB0aGlzLmxvZ2ljMi54IHx8IDA7CiAgICAgIHRoaXMueSA9IHRoaXMubG9naWMyLnkgfHwgMDsKICAgICAgdGhpcy5pc0FuaW1hdGlvblJ1bm5pbmcgPSBmYWxzZTsKICAgICAgdGhpcy5hbmltYXRpb25MaXN0ID0gW107CiAgICAgIHRoaXMuYW5pbWF0aW9uUG9pbnRlciA9IDA7CiAgICAgIHRoaXMuY29sb3IgPSBDb2xvci5UUkFOU1BBUkVOVDsKICAgICAgdGhpcy50YXJnZXQgPSBudWxsOwogICAgICB0aGlzLmlzRGlzYXBwZWFyaW5nID0gZmFsc2U7CiAgICAgIHRoaXMuaXNBcHBlYXJpbmcgPSBmYWxzZTsKICAgIH0KCiAgICBTcHJpdGVfQmF0dGxlci5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gU3ByaXRlX0JhdHRsZXIuX19zdXBlcl9fLmRpc3Bvc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgU3ByaXRlX0JhdHRsZXIucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNwcml0ZV9CYXR0bGVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgU3ByaXRlX0JhdHRsZXIuX19zdXBlcl9fLnVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB0aGlzLnZpc2libGUgPSAhdGhpcy5sb2dpYzIuaXNIaWRkZW47CiAgICAgIGlmICh0aGlzLmxvZ2ljMi5pc0hpZGRlbiAmJiAhdGhpcy5sb2dpYzIuYWN0b3IuaXNBbGl2ZSkgewogICAgICAgIHJldHVybjsKICAgICAgfSBlbHNlIGlmICh0aGlzLm9wYWNpdHkgPCAyNTUgJiYgIXRoaXMuaXNBcHBlYXJpbmcgJiYgIXRoaXMuaXNEaXNhcHBlYXJpbmcpIHsKICAgICAgICB0aGlzLmFwcGVhcigpOwogICAgICB9CiAgICAgIHRoaXMueiA9IDU7CiAgICAgIHRoaXMuY29sb3IgPSB0aGlzLmNvbG9yOwogICAgICBpZiAodGhpcy5vcGFjaXR5ID4gMCAmJiB0aGlzLmxvZ2ljMi5kZWFkICYmICh0aGlzLmxvZ2ljMi5hY3Rvci5kZWF0aEFuaW1hdGlvbiA9PSBudWxsKSkgewogICAgICAgIHRoaXMua2lsbCgpOwogICAgICB9CiAgICAgIGlmICh0aGlzLm9wYWNpdHkgPD0gMCAmJiAhdGhpcy5sb2dpYzIuZGVhZCkgewogICAgICAgIHRoaXMuYXBwZWFyKCk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuaXNEaXNhcHBlYXJpbmcpIHsKICAgICAgICB0aGlzLm9wYWNpdHkgPSBNYXRoLm1heCh0aGlzLm9wYWNpdHkgLSA4LCAwKTsKICAgICAgICBpZiAodGhpcy5vcGFjaXR5ID09PSAwKSB7CiAgICAgICAgICB0aGlzLmlzRGlzYXBwZWFyaW5nID0gZmFsc2U7CiAgICAgICAgfQogICAgICB9IGVsc2UgewogICAgICAgIHRoaXMuaXNEaXNhcHBlYXJpbmcgPSBmYWxzZTsKICAgICAgfQogICAgICBpZiAodGhpcy5pc0FwcGVhcmluZykgewogICAgICAgIHRoaXMub3BhY2l0eSA9IE1hdGgubWluKHRoaXMub3BhY2l0eSArIDgsIDI1NSk7CiAgICAgICAgaWYgKHRoaXMub3BhY2l0eSA9PT0gMjU1KSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5pc0FwcGVhcmluZyA9IGZhbHNlOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5pc0FwcGVhcmluZyA9IGZhbHNlOwogICAgICB9CiAgICB9OwoKICAgIFNwcml0ZV9CYXR0bGVyLnByb3RvdHlwZS5raWxsID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuY29sb3IgPSBuZXcgQ29sb3IoMjU1LCAwLCAwLCAyNDcpOwogICAgICByZXR1cm4gdGhpcy5pc0Rpc2FwcGVhcmluZyA9IHRydWU7CiAgICB9OwoKICAgIFNwcml0ZV9CYXR0bGVyLnByb3RvdHlwZS5hcHBlYXIgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5jb2xvciA9IENvbG9yLlRSQU5TUEFSRU5UOwogICAgICByZXR1cm4gdGhpcy5pc0FwcGVhcmluZyA9IHRydWU7CiAgICB9OwoKICAgIHJldHVybiBTcHJpdGVfQmF0dGxlcjsKCiAgfSkoU3ByaXRlX1NpbXBsZUFuaW1hdGlvbik7CgogIHdpbmRvdy5TcHJpdGVfQmF0dGxlciA9IFNwcml0ZV9CYXR0bGVyOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Sprite_Picture","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX1BpY3R1cmUKIyAgIENyZWF0ZWQgb246IDIwMTMtMTItMDEKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogU3ByaXRlX1BpY3R1cmUKIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTcHJpdGVfUGljdHVyZSBleHRlbmRzIFNwcml0ZQogICAgY29uc3RydWN0b3I6IChsb2dpYywgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIodmlld3BvcnQpCiAgICAgICAgQGxvZ2ljID0gbG9naWMKCiAgICB1cGRhdGU6IC0+CiAgICAgICAgc3VwZXIKICAgICAgICBAeCA9IEBsb2dpYy54CiAgICAgICAgQHkgPSBAbG9naWMueQogICAgICAgIEB6b29tWCA9IEBsb2dpYy56b29tWAogICAgICAgIEB6b29tWSA9IEBsb2dpYy56b29tWQogICAgICAgIEBhbmdsZSA9IEBsb2dpYy5hbmdsZQogICAgICAgIEBvcGFjaXR5ID0gQGxvZ2ljLm9wYWNpdHkKICAgICAgICBAdG9uZSA9IEBsb2dpYy50b25lCiAgICAgICAgQGNvbG9yID0gQGxvZ2ljLmNvbG9yCiAKICAgICAgICAgICAgCiAgIAogICAgICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlX1BpY3R1cmUgPSBTcHJpdGVfUGljdHVyZQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfUGljdHVyZSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNwcml0ZV9QaWN0dXJlID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNwcml0ZV9QaWN0dXJlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9QaWN0dXJlKGxvZ2ljLCB2aWV3cG9ydCkgewogICAgICBTcHJpdGVfUGljdHVyZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMubG9naWMgPSBsb2dpYzsKICAgIH0KCiAgICBTcHJpdGVfUGljdHVyZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIFNwcml0ZV9QaWN0dXJlLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgdGhpcy54ID0gdGhpcy5sb2dpYy54OwogICAgICB0aGlzLnkgPSB0aGlzLmxvZ2ljLnk7CiAgICAgIHRoaXMuem9vbVggPSB0aGlzLmxvZ2ljLnpvb21YOwogICAgICB0aGlzLnpvb21ZID0gdGhpcy5sb2dpYy56b29tWTsKICAgICAgdGhpcy5hbmdsZSA9IHRoaXMubG9naWMuYW5nbGU7CiAgICAgIHRoaXMub3BhY2l0eSA9IHRoaXMubG9naWMub3BhY2l0eTsKICAgICAgdGhpcy50b25lID0gdGhpcy5sb2dpYy50b25lOwogICAgICByZXR1cm4gdGhpcy5jb2xvciA9IHRoaXMubG9naWMuY29sb3I7CiAgICB9OwoKICAgIHJldHVybiBTcHJpdGVfUGljdHVyZTsKCiAgfSkoU3ByaXRlKTsKCiAgd2luZG93LlNwcml0ZV9QaWN0dXJlID0gU3ByaXRlX1BpY3R1cmU7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Sprite_TextPicture","content":"# ===================================================================\n#\n#   Script: Sprite_TextPicture\n#   Created on: 2013-12-01\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n#   Class: Sprite_TextPicture\n#\n#   A base class for all other window classes.\n#\n# ===================================================================\n\nclass Sprite_TextPicture extends Sprite_Picture\n    constructor: (logic, viewport) ->\n        super(viewport)\n        @logic = logic\n        @text = \"\"\n        @font = new Font(\"Verdana\", 22)\n        \n    refresh: ->\n        size = @font.measureText(@text)\n        lines = @text.split('\\n')\n        width = 0\n        for line in lines\n            size = @font.measureText(line)\n            width = Math.max(width, size.width)\n            \n        @bitmap = new Bitmap(width, (size.height+8) * lines.length)\n        @bitmap.font = @font\n        \n        \n        for i in [0...lines.length]\n            @bitmap.drawTextF(0, i * (size.height+4), width, size.height, lines[i], 0)\n            \n        @srcRect = new Rect(0, 0, @bitmap.width, @bitmap.height)\n        \n    update: ->\n        super\n  \n \n            \n   \n        \n        \nwindow.Sprite_TextPicture = Sprite_TextPicture","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfVGV4dFBpY3R1cmUsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBTcHJpdGVfVGV4dFBpY3R1cmUgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoU3ByaXRlX1RleHRQaWN0dXJlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9UZXh0UGljdHVyZShsb2dpYywgdmlld3BvcnQpIHsKICAgICAgU3ByaXRlX1RleHRQaWN0dXJlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHZpZXdwb3J0KTsKICAgICAgdGhpcy5sb2dpYyA9IGxvZ2ljOwogICAgICB0aGlzLnRleHQgPSAiIjsKICAgICAgdGhpcy5mb250ID0gbmV3IEZvbnQoIlZlcmRhbmEiLCAyMik7CiAgICB9CgogICAgU3ByaXRlX1RleHRQaWN0dXJlLnByb3RvdHlwZS5yZWZyZXNoID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpLCBsaW5lLCBsaW5lcywgc2l6ZSwgd2lkdGgsIF9pLCBfaiwgX2xlbiwgX3JlZjsKICAgICAgc2l6ZSA9IHRoaXMuZm9udC5tZWFzdXJlVGV4dCh0aGlzLnRleHQpOwogICAgICBsaW5lcyA9IHRoaXMudGV4dC5zcGxpdCgnXG4nKTsKICAgICAgd2lkdGggPSAwOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGxpbmVzLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgbGluZSA9IGxpbmVzW19pXTsKICAgICAgICBzaXplID0gdGhpcy5mb250Lm1lYXN1cmVUZXh0KGxpbmUpOwogICAgICAgIHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIHNpemUud2lkdGgpOwogICAgICB9CiAgICAgIHRoaXMuYml0bWFwID0gbmV3IEJpdG1hcCh3aWR0aCwgKHNpemUuaGVpZ2h0ICsgOCkgKiBsaW5lcy5sZW5ndGgpOwogICAgICB0aGlzLmJpdG1hcC5mb250ID0gdGhpcy5mb250OwogICAgICBmb3IgKGkgPSBfaiA9IDAsIF9yZWYgPSBsaW5lcy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9qIDwgX3JlZiA6IF9qID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2ogOiAtLV9qKSB7CiAgICAgICAgdGhpcy5iaXRtYXAuZHJhd1RleHRGKDAsIGkgKiAoc2l6ZS5oZWlnaHQgKyA0KSwgd2lkdGgsIHNpemUuaGVpZ2h0LCBsaW5lc1tpXSwgMCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIHRoaXMuYml0bWFwLndpZHRoLCB0aGlzLmJpdG1hcC5oZWlnaHQpOwogICAgfTsKCiAgICBTcHJpdGVfVGV4dFBpY3R1cmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gU3ByaXRlX1RleHRQaWN0dXJlLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgcmV0dXJuIFNwcml0ZV9UZXh0UGljdHVyZTsKCiAgfSkoU3ByaXRlX1BpY3R1cmUpOwoKICB3aW5kb3cuU3ByaXRlX1RleHRQaWN0dXJlID0gU3ByaXRlX1RleHRQaWN0dXJlOwoKfSkuY2FsbCh0aGlzKTsK","decoded":true},{"name":"Sprite_Timer","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlX1RpbWVyCiMgICBDcmVhdGVkIG9uOiAyMDEzLTEyLTA5CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFNwcml0ZV9UaW1lcgojCiMgICBBIHNwcml0ZSB0byBkaXNwbGF5IGEgdGltZXIKIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNwcml0ZV9UaW1lciBleHRlbmRzIFNwcml0ZV9UZXh0CiAgICBjb25zdHJ1Y3RvcjogKGxvZ2ljLCB2aWV3cG9ydCkgLT4KICAgICAgICBzdXBlcigxMDAsIDI0ICogV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KQogICAgICAgIAogICAgICAgIEBsb2dpYyA9IGxvZ2ljCiAgICAgICAgQG1pbnV0ZXMgPSBAbG9naWMubWludXRlcwogICAgICAgIEBzZWNvbmRzID0gQGxvZ2ljLnNlY29uZHMKICAgICAgICBAeiA9IDIwMAogICAgICAgIEB4ID0gMwogICAgICAgIEBiYWNrZ3JvdW5kQ29sb3IgPSBDb2xvci5UUkFOU1BBUkVOVAogICAgICAgIEB0ZXh0ID0gc3ByaW50ZigiJTAyZDolMDJkIiwgQG1pbnV0ZXMsIEBzZWNvbmRzKQogICAgdXBkYXRlOiAtPgogICAgICAgIHN1cGVyCiAgICAgICAgaWYgbm90IEBsb2dpYz8gdGhlbiByZXR1cm4KICAgICAgICBAdmlzaWJsZSA9IEBsb2dpYy5pc1J1bm5pbmcKICAgICAgICAKICAgICAgICBpZiBAbWludXRlcyAhPSBAbG9naWMubWludXRlcyBvciBAc2Vjb25kcyAhPSBAbG9naWMuc2Vjb25kcwogICAgICAgICAgICBAbWludXRlcyA9IEBsb2dpYy5taW51dGVzCiAgICAgICAgICAgIEBzZWNvbmRzID0gQGxvZ2ljLnNlY29uZHMKICAgICAgICAgICAgQHRleHQgPSBzcHJpbnRmKCIlMDJkOiUwMmQiLCBAbWludXRlcywgQHNlY29uZHMpCiAgICAgICAgICAgIEByZWZyZXNoKCkKICAgICAgICAgICAgCiAgIAogICAgICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlX1RpbWVyID0gU3ByaXRlX1RpbWVy","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVfVGltZXIsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBTcHJpdGVfVGltZXIgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoU3ByaXRlX1RpbWVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZV9UaW1lcihsb2dpYywgdmlld3BvcnQpIHsKICAgICAgU3ByaXRlX1RpbWVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIDEwMCwgMjQgKiBXaW5kb3dfQmFzZS5zY2FsZSwgdmlld3BvcnQpOwogICAgICB0aGlzLmxvZ2ljID0gbG9naWM7CiAgICAgIHRoaXMubWludXRlcyA9IHRoaXMubG9naWMubWludXRlczsKICAgICAgdGhpcy5zZWNvbmRzID0gdGhpcy5sb2dpYy5zZWNvbmRzOwogICAgICB0aGlzLnogPSAyMDA7CiAgICAgIHRoaXMueCA9IDM7CiAgICAgIHRoaXMuYmFja2dyb3VuZENvbG9yID0gQ29sb3IuVFJBTlNQQVJFTlQ7CiAgICAgIHRoaXMudGV4dCA9IHNwcmludGYoIiUwMmQ6JTAyZCIsIHRoaXMubWludXRlcywgdGhpcy5zZWNvbmRzKTsKICAgIH0KCiAgICBTcHJpdGVfVGltZXIucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBTcHJpdGVfVGltZXIuX19zdXBlcl9fLnVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICBpZiAodGhpcy5sb2dpYyA9PSBudWxsKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIHRoaXMudmlzaWJsZSA9IHRoaXMubG9naWMuaXNSdW5uaW5nOwogICAgICBpZiAodGhpcy5taW51dGVzICE9PSB0aGlzLmxvZ2ljLm1pbnV0ZXMgfHwgdGhpcy5zZWNvbmRzICE9PSB0aGlzLmxvZ2ljLnNlY29uZHMpIHsKICAgICAgICB0aGlzLm1pbnV0ZXMgPSB0aGlzLmxvZ2ljLm1pbnV0ZXM7CiAgICAgICAgdGhpcy5zZWNvbmRzID0gdGhpcy5sb2dpYy5zZWNvbmRzOwogICAgICAgIHRoaXMudGV4dCA9IHNwcmludGYoIiUwMmQ6JTAyZCIsIHRoaXMubWludXRlcywgdGhpcy5zZWNvbmRzKTsKICAgICAgICByZXR1cm4gdGhpcy5yZWZyZXNoKCk7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIFNwcml0ZV9UaW1lcjsKCiAgfSkoU3ByaXRlX1RleHQpOwoKICB3aW5kb3cuU3ByaXRlX1RpbWVyID0gU3ByaXRlX1RpbWVyOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Spriteset_Base","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlc2V0X0Jhc2UKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjkKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogU3ByaXRlc2V0X0FuaW1hdGlvbgojCiMgICBBIGJhc2UgY2xhc3MgZm9yIGFsbCBvdGhlciB3aW5kb3cgY2xhc3Nlcy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNwcml0ZXNldF9CYXNlCiAgICBjb25zdHJ1Y3RvcjogKHZpZXdwb3J0KSAtPgogICAgICAgIEB2aWV3cG9ydCA9IHZpZXdwb3J0CgogICAgcHJlcGFyZTogLT4KCiAgICAKICAgIHVwZGF0ZTogLT4KCiAgCiAgICAgICAgCiAgICAgICAgCndpbmRvdy5TcHJpdGVzZXRfQmFzZSA9IFNwcml0ZXNldF9CYXNl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVzZXRfQmFzZTsKCiAgU3ByaXRlc2V0X0Jhc2UgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBTcHJpdGVzZXRfQmFzZSh2aWV3cG9ydCkgewogICAgICB0aGlzLnZpZXdwb3J0ID0gdmlld3BvcnQ7CiAgICB9CgogICAgU3ByaXRlc2V0X0Jhc2UucHJvdG90eXBlLnByZXBhcmUgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNwcml0ZXNldF9CYXNlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHt9OwoKICAgIHJldHVybiBTcHJpdGVzZXRfQmFzZTsKCiAgfSkoKTsKCiAgd2luZG93LlNwcml0ZXNldF9CYXNlID0gU3ByaXRlc2V0X0Jhc2U7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Spriteset_Animation","content":"","compiledContent":""},{"name":"Spriteset_Weather","content":"# ===================================================================\n#\n#   Script: Spriteset_Weather\n#   Created on: 2013-11-02\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n#   Class: Spriteset_Weather\n#\n#   A spriteset to make weather effects like rain, storm or snow.\n#\n# ===================================================================\n\nclass Spriteset_Weather extends Spriteset_Base\n    @TYPE_RAIN = 0\n    @TYPE_STORM = 1\n    @TYPE_SNOW = 2\n    \n    constructor: (viewport) ->\n        super(viewport)\n        @shadow = new Sprite(viewport)\n        @shadow.bitmap = new Bitmap(Graphics.width, Graphics.height)\n        @shadow.bitmap.fillRect(0, 0, Graphics.width, Graphics.height, new Color(0, 0, 0, 0.4))\n        @shadow.srcRect = new Rect(0, 0, Graphics.width, Graphics.height)\n        @shadow.z = 2500\n        @shadow.visible = no\n        \n        @sprites = new Array(90)\n        @refresh()\n        @type = 0\n        @power = 4\n        @currentPower = 0\n        @oldPower = 0\n        @powerIncrement = 0\n        @duration = 0\n        @bitmap = null\n    dispose: ->\n        for sprite in @sprites\n            if sprite? then sprite.dispose()\n        @shadow.dispose()\n        \n    visible: (visible) ->\n        for sprite in @sprites\n            if sprite? then sprite.visible = visible\n        #@shadow.visible = visible    \n    refresh: ->\n        for sprite in @sprites\n            if sprite? then sprite.visible = no\n        \n        #@shadow.visible = yes\n        if not bitmap? then bitmap = @createBitmap()\n        sprite = null\n        count = Math.floor(@currentPower) * 10\n        for i in [0...count]\n            if not @sprites[i]?\n                @sprites[i] = new Sprite(@viewport)\n                @sprites[i].srcRect = new Rect(0, 0, 1, 1)\n                @sprites[i].z = 3000\n                @sprites[i].opacity = Math.random() * 255\n            @sprites[i].bitmap = bitmap\n            @sprites[i].srcRect.set(0, 0, bitmap.width, bitmap.height)\n            @sprites[i].visible = yes\n            \n     \n    createBitmap: ->\n        bitmap = null\n        \n        switch @type\n            when 0 then bitmap = @createRainBitmap()\n            when 1 then bitmap = @createStormBitmap()\n            when 2 then bitmap = @createSnowBitmap()\n            \n        return bitmap\n        \n    createRainBitmap: ->\n        s = Window_Base.scale\n        bitmap = new Bitmap(7*s, 42*s)\n        for i in [0...7]\n            bitmap.fillRect(6*s-i, i*(6*s), 1, 6*s, Colors.RAIN_PARTICLE)\n            \n        return bitmap\n        \n    createStormBitmap: ->\n        s = Window_Base.scale\n        bitmap = new Bitmap(32*s, 64*s)\n        for i in [0...32*s]\n            bitmap.fillRect(15*s-i, i*2, 1, 2, Colors.STORM_PARTICLE)\n            \n        return bitmap\n        \n    createSnowBitmap: ->\n        s = Window_Base.scale\n        bitmap = new Bitmap(6, 6)\n        \n        # Face\n        bitmap.fillRect(1, 1, 4, 4, Colors.SNOW_PARTICLE_FACE)\n        # Left Edge\n        bitmap.fillRect(0, 1, 1, 5, Colors.SNOW_PARTICLE_EDGE)\n        # Top Edge\n        bitmap.fillRect(1, 0, 5, 1, Colors.SNOW_PARTICLE_EDGE)\n        # Right Edge\n        bitmap.fillRect(5, 1, 1, 5, Colors.SNOW_PARTICLE_EDGE)\n        # Bottom Edge\n        bitmap.fillRect(1, 5, 5, 1, Colors.SNOW_PARTICLE_EDGE)\n        \n        return bitmap\n    clearSprites: ->\n        @bitmap = null\n        @shadow.visible = no\n        if @sprites[0]? and @sprites[0].visible\n            for sprite in @sprites\n                if sprite? then sprite.visible = no\n    \t\t\t    \n    update: ->\n        super\n        if @currentPower == 0 then return @clearSprites()\n        \n        if @currentPower < @power\n            @currentPower += @powerIncrement\n            @refresh()\n            if @currentPower > @power\n                @currentPower = @power\n                \n        if @currentPower > @power\n            @currentPower -= @powerIncrement\n            if @currentPower < @power\n                @currentPower = @power\n            @refresh()\n            \n        for sprite in @sprites\n            if sprite?\n                sprite.update()\n                \n                if sprite.opacity > 0\n                    sprite.opacity = Math.max(sprite.opacity - 6, 0)\n                    sprite.x -= 1\n                    sprite.y += 6\n                else\n                    sprite.opacity = 255\n                    sprite.x = Math.random() * (Graphics.width - sprite.bitmap.width)\n                    sprite.y = -35 + Math.random() * (Graphics.height - sprite.bitmap.height - 50)\n            \n        \n        \n        \nwindow.Spriteset_Weather = Spriteset_Weather","compiledContent":"","decoded":true},{"name":"Spriteset_Map","content":"","compiledContent":""},{"name":"Spriteset_BattleMessage","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlc2V0X0JhdHRsZU1lc3NhZ2UKIyAgIENyZWF0ZWQgb246IDIwMTMtMTAtMTkKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogU3ByaXRlc2V0X0JhdHRsZU1lc3NhZ2UKIwojICAgQSBiYXNlIGNsYXNzIGZvciBhbGwgb3RoZXIgd2luZG93IGNsYXNzZXMuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZSBleHRlbmRzIFNwcml0ZXNldF9CYXNlCiAgICBjb25zdHJ1Y3RvcjogKGxvZ2ljLCB2aWV3cG9ydCkgLT4KICAgICAgICBzdXBlcih2aWV3cG9ydCkKICAgICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBAbG9naWMgPSBsb2dpYwogICAgICAgIEBzcHJpdGVzID0gW25ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpLAogICAgICAgICAgICAgICAgICAgIG5ldyBTcHJpdGVfVGV4dChHcmFwaGljcy53aWR0aCwgMzIqcywgdmlld3BvcnQpXQogICAgICAgIGZvciBpIGluIFswLi4uQHNwcml0ZXMubGVuZ3RoXQogICAgICAgICAgICBAc3ByaXRlc1tpXS54ID0gMAogICAgICAgICAgICBAc3ByaXRlc1tpXS55ID0gaSAqICgzMipzKQogICAgICAgICAgICBAc3ByaXRlc1tpXS56ID0gMTAwMAogICAgZGlzcG9zZTogLT4KICAgICAgICBzcHJpdGUuZGlzcG9zZSgpIGZvciBzcHJpdGUgaW4gQHNwcml0ZXMKICAgICAgICAKICAgIHJlZnJlc2g6IC0+CiAgICAgICAgaWYgQGxvZ2ljLm1lc3NhZ2VzW0Bsb2dpYy5jdXJyZW50UGFnZV0/CiAgICAgICAgICAgIGZvciBpIGluIFswLi4uQGxvZ2ljLm1lc3NhZ2VzW0Bsb2dpYy5jdXJyZW50UGFnZV0ubGVuZ3RoXQogICAgICAgICAgICAgICAgQHNwcml0ZXNbaV0udmlzaWJsZSA9IHllcwogICAgICAgICAgICAgICAgQHNwcml0ZXNbaV0udGV4dCA9IEBsb2dpYy5tZXNzYWdlc1tAbG9naWMuY3VycmVudFBhZ2VdW2ldLnRleHQKICAgICAgICAgICAgICAgIEBzcHJpdGVzW2ldLnJlZnJlc2goKQogICAgICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBtZXNzYWdlcyA9IEBsb2dpYy5tZXNzYWdlcwogICAgICAgIGN1cnJlbnRQYWdlID0gQGxvZ2ljLmN1cnJlbnRQYWdlCiAgICAgICAgCiAgICAgICAgZm9yIHNwcml0ZSBpbiBAc3ByaXRlcwogICAgICAgICAgICBzcHJpdGUudmlzaWJsZSA9IG5vIAogICAgICAgICAgICAKICAgICAgICBpZiBtZXNzYWdlcy5sZW5ndGggPiAwIGFuZCBtZXNzYWdlc1tjdXJyZW50UGFnZV0/IGFuZCBtZXNzYWdlc1tjdXJyZW50UGFnZV0ubGVuZ3RoID4gMAogICAgICAgICAgICBmb3IgaSBpbiBbMC4uLm1lc3NhZ2VzW2N1cnJlbnRQYWdlXS5sZW5ndGhdCiAgICAgICAgICAgICAgICBAc3ByaXRlc1tpXS52aXNpYmxlID0geWVzCiAgICAgICAgICAgICAgICAKICAgICAgICBpZiBAbG9naWMucmVmcmVzaE5lZWRlZAogICAgICAgICAgICBAcmVmcmVzaCgpCiAgICAgICAgICAgIEBsb2dpYy5yZWZyZXNoTmVlZGVkID0gbm8KICAgICAgICAgICAgICAgIAogICAgICAgIHN1cGVyCiAgICAgICAgICAgIAp3aW5kb3cuU3ByaXRlc2V0X0JhdHRsZU1lc3NhZ2UgPSBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNwcml0ZXNldF9CYXR0bGVNZXNzYWdlID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNwcml0ZXNldF9CYXR0bGVNZXNzYWdlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZXNldF9CYXR0bGVNZXNzYWdlKGxvZ2ljLCB2aWV3cG9ydCkgewogICAgICB2YXIgaSwgcywgX2ksIF9yZWY7CiAgICAgIFNwcml0ZXNldF9CYXR0bGVNZXNzYWdlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHZpZXdwb3J0KTsKICAgICAgcyA9IFdpbmRvd19CYXNlLnNjYWxlOwogICAgICB0aGlzLmxvZ2ljID0gbG9naWM7CiAgICAgIHRoaXMuc3ByaXRlcyA9IFtuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpLCBuZXcgU3ByaXRlX1RleHQoR3JhcGhpY3Mud2lkdGgsIDMyICogcywgdmlld3BvcnQpXTsKICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5zcHJpdGVzLmxlbmd0aDsgMCA8PSBfcmVmID8gX2kgPCBfcmVmIDogX2kgPiBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICB0aGlzLnNwcml0ZXNbaV0ueCA9IDA7CiAgICAgICAgdGhpcy5zcHJpdGVzW2ldLnkgPSBpICogKDMyICogcyk7CiAgICAgICAgdGhpcy5zcHJpdGVzW2ldLnogPSAxMDAwOwogICAgICB9CiAgICB9CgogICAgU3ByaXRlc2V0X0JhdHRsZU1lc3NhZ2UucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNwcml0ZSwgX2ksIF9sZW4sIF9yZWYsIF9yZXN1bHRzOwogICAgICBfcmVmID0gdGhpcy5zcHJpdGVzOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICBzcHJpdGUgPSBfcmVmW19pXTsKICAgICAgICBfcmVzdWx0cy5wdXNoKHNwcml0ZS5kaXNwb3NlKCkpOwogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgU3ByaXRlc2V0X0JhdHRsZU1lc3NhZ2UucHJvdG90eXBlLnJlZnJlc2ggPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGksIF9pLCBfcmVmLCBfcmVzdWx0czsKICAgICAgaWYgKHRoaXMubG9naWMubWVzc2FnZXNbdGhpcy5sb2dpYy5jdXJyZW50UGFnZV0gIT0gbnVsbCkgewogICAgICAgIF9yZXN1bHRzID0gW107CiAgICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5sb2dpYy5tZXNzYWdlc1t0aGlzLmxvZ2ljLmN1cnJlbnRQYWdlXS5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICB0aGlzLnNwcml0ZXNbaV0udmlzaWJsZSA9IHRydWU7CiAgICAgICAgICB0aGlzLnNwcml0ZXNbaV0udGV4dCA9IHRoaXMubG9naWMubWVzc2FnZXNbdGhpcy5sb2dpYy5jdXJyZW50UGFnZV1baV0udGV4dDsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godGhpcy5zcHJpdGVzW2ldLnJlZnJlc2goKSk7CiAgICAgICAgfQogICAgICAgIHJldHVybiBfcmVzdWx0czsKICAgICAgfQogICAgfTsKCiAgICBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjdXJyZW50UGFnZSwgaSwgbWVzc2FnZXMsIHNwcml0ZSwgX2ksIF9qLCBfbGVuLCBfcmVmLCBfcmVmMTsKICAgICAgbWVzc2FnZXMgPSB0aGlzLmxvZ2ljLm1lc3NhZ2VzOwogICAgICBjdXJyZW50UGFnZSA9IHRoaXMubG9naWMuY3VycmVudFBhZ2U7CiAgICAgIF9yZWYgPSB0aGlzLnNwcml0ZXM7CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIHNwcml0ZSA9IF9yZWZbX2ldOwogICAgICAgIHNwcml0ZS52aXNpYmxlID0gZmFsc2U7CiAgICAgIH0KICAgICAgaWYgKG1lc3NhZ2VzLmxlbmd0aCA+IDAgJiYgKG1lc3NhZ2VzW2N1cnJlbnRQYWdlXSAhPSBudWxsKSAmJiBtZXNzYWdlc1tjdXJyZW50UGFnZV0ubGVuZ3RoID4gMCkgewogICAgICAgIGZvciAoaSA9IF9qID0gMCwgX3JlZjEgPSBtZXNzYWdlc1tjdXJyZW50UGFnZV0ubGVuZ3RoOyAwIDw9IF9yZWYxID8gX2ogPCBfcmVmMSA6IF9qID4gX3JlZjE7IGkgPSAwIDw9IF9yZWYxID8gKytfaiA6IC0tX2opIHsKICAgICAgICAgIHRoaXMuc3ByaXRlc1tpXS52aXNpYmxlID0gdHJ1ZTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHRoaXMubG9naWMucmVmcmVzaE5lZWRlZCkgewogICAgICAgIHRoaXMucmVmcmVzaCgpOwogICAgICAgIHRoaXMubG9naWMucmVmcmVzaE5lZWRlZCA9IGZhbHNlOwogICAgICB9CiAgICAgIHJldHVybiBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZS5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIHJldHVybiBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZTsKCiAgfSkoU3ByaXRlc2V0X0Jhc2UpOwoKICB3aW5kb3cuU3ByaXRlc2V0X0JhdHRsZU1lc3NhZ2UgPSBTcHJpdGVzZXRfQmF0dGxlTWVzc2FnZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Spriteset_Battle","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU3ByaXRlc2V0X0JhdHRsZQojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0xOQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBTcHJpdGVzZXRfQmF0dGxlCiMKIyAgIEEgYmFzZSBjbGFzcyBmb3IgYWxsIG90aGVyIHdpbmRvdyBjbGFzc2VzLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgU3ByaXRlc2V0X0JhdHRsZSBleHRlbmRzIFNwcml0ZXNldF9CYXNlCiAgICBjb25zdHJ1Y3RvcjogKHZpZXdwb3J0KSAtPgoKICAgIHVwZGF0ZTogLT4KICAgICAgICBzdXBlcgogICAgIAogICAgICAgIAp3aW5kb3cuU3ByaXRlc2V0X0JhdHRsZSA9IFNwcml0ZXNldF9CYXR0bGU=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTcHJpdGVzZXRfQmF0dGxlLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU3ByaXRlc2V0X0JhdHRsZSA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTcHJpdGVzZXRfQmF0dGxlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNwcml0ZXNldF9CYXR0bGUodmlld3BvcnQpIHt9CgogICAgU3ByaXRlc2V0X0JhdHRsZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBTcHJpdGVzZXRfQmF0dGxlLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgcmV0dXJuIFNwcml0ZXNldF9CYXR0bGU7CgogIH0pKFNwcml0ZXNldF9CYXNlKTsKCiAgd2luZG93LlNwcml0ZXNldF9CYXR0bGUgPSBTcHJpdGVzZXRfQmF0dGxlOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Window_Base","content":"","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfQmFzZSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFdpbmRvd19CYXNlID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFdpbmRvd19CYXNlLCBfc3VwZXIpOwoKICAgIGlmICgkUEFSQU1TLnJlc29sdXRpb24ud2lkdGggPT09IDMyMCkgewogICAgICBXaW5kb3dfQmFzZS5iYWNrUmVjdCA9IG5ldyBSZWN0KDAsIDAsIDMyLCAzMik7CiAgICAgIFdpbmRvd19CYXNlLmJhY2tSZWN0MiA9IG5ldyBSZWN0KDAsIDMyLCAzMiwgMzIpOwogICAgICBXaW5kb3dfQmFzZS5mcmFtZVJlY3QgPSBuZXcgUmVjdCgzMiwgMCwgMzIsIDMyKTsKICAgICAgV2luZG93X0Jhc2UuZnJhbWVUaGlja25lc3MgPSA4OwogICAgICBXaW5kb3dfQmFzZS5mcmFtZVBhZGRpbmcgPSAyOwogICAgICBXaW5kb3dfQmFzZS5sZWZ0QXJyb3dSZWN0ID0gbmV3IFJlY3QoV2luZG93X0Jhc2UuZnJhbWVSZWN0LnggKyBXaW5kb3dfQmFzZS5mcmFtZVRoaWNrbmVzcywgV2luZG93X0Jhc2UuZnJhbWVSZWN0LnkgKyAxMiwgOCwgOCk7CiAgICAgIFdpbmRvd19CYXNlLnRvcEFycm93UmVjdCA9IG5ldyBSZWN0KFdpbmRvd19CYXNlLmZyYW1lUmVjdC54ICsgMTIsIFdpbmRvd19CYXNlLmZyYW1lUmVjdC55ICsgV2luZG93X0Jhc2UuZnJhbWVUaGlja25lc3MsIDgsIDgpOwogICAgICBXaW5kb3dfQmFzZS5yaWdodEFycm93UmVjdCA9IG5ldyBSZWN0KDQwICsgV2luZG93X0Jhc2UuZnJhbWVSZWN0LngsIFdpbmRvd19CYXNlLmZyYW1lUmVjdC55ICsgMTIsIDgsIDgpOwogICAgICBXaW5kb3dfQmFzZS5ib3R0b21BcnJvd1JlY3QgPSBuZXcgUmVjdChXaW5kb3dfQmFzZS5mcmFtZVJlY3QueCArIDEyLCAyMCArIFdpbmRvd19CYXNlLmZyYW1lUmVjdC55LCA4LCA4KTsKICAgICAgV2luZG93X0Jhc2UuY29ybmVyU2l6ZSA9IDg7CiAgICAgIFdpbmRvd19CYXNlLmN1cnNvclJlY3QgPSBuZXcgUmVjdCgzMiwgMzIsIDE2LCAxNik7CiAgICAgIFdpbmRvd19CYXNlLmN1cnNvckJvcmRlciA9IDI7CiAgICAgIFdpbmRvd19CYXNlLnBhdXNlUmVjdCA9IG5ldyBSZWN0KDQ4LCAzMiwgMTYsIDE2KTsKICAgICAgV2luZG93X0Jhc2UucGF1c2VJY29uU2l6ZSA9IG5ldyBSZWN0KDAsIDAsIDgsIDgpOwogICAgICBXaW5kb3dfQmFzZS5zY2FsZSA9IDAuNTsKICAgIH0KCiAgICBmdW5jdGlvbiBXaW5kb3dfQmFzZSh4LCB5LCB3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydCkgewogICAgICBXaW5kb3dfQmFzZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMud2luZG93U2tpbiA9IEdhbWVNYW5hZ2VyLndpbmRvd1NraW47CiAgICAgIHRoaXMueCA9IHg7CiAgICAgIHRoaXMueSA9IHk7CiAgICAgIHRoaXMud2lkdGggPSB3aWR0aDsKICAgICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7CiAgICAgIHRoaXMucGF1c2UgPSBmYWxzZTsKICAgICAgdGhpcy5veCA9IDA7CiAgICAgIHRoaXMub3kgPSAwOwogICAgICB0aGlzLmJhY2tPcGFjaXR5ID0gMTYwOwogICAgICB0aGlzLm9wYWNpdHkgPSAyNTU7CiAgICAgIHRoaXMuY29udGVudHNPcGFjaXR5ID0gMjU1OwogICAgICB0aGlzLm9wZW5uZXNzID0gMjU1OwogICAgICB0aGlzLnRvbmUgPSBHYW1lTWFuYWdlci53aW5kb3dTa2luVG9uZTsKICAgICAgdGhpcy5jdXJzb3JSZWN0ID0gbmV3IFJlY3QoMCwgMCwgMCwgMCk7CiAgICAgIHRoaXMuaXNPcGVuaW5nID0gZmFsc2U7CiAgICAgIHRoaXMuaXNDbG9zaW5nID0gZmFsc2U7CiAgICAgIHRoaXMubmFtZUZvbnQgPSBGb250cy5OQU1FOwogICAgICB0aGlzLmFjdGlvbkZvbnQgPSBGb250cy5BQ1RJT047CiAgICAgIHRoaXMuZ2F1Z2VGb250ID0gdGhpcy5hY3Rpb25Gb250OwogICAgICB0aGlzLm1lbWJlck5hbWVGb250ID0gdGhpcy5uYW1lRm9udDsKICAgIH0KCiAgICBXaW5kb3dfQmFzZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmlzT3BlbmluZyA9IHRydWU7CiAgICAgIHJldHVybiB0aGlzLnZpc2libGUgPSB0cnVlOwogICAgfTsKCiAgICBXaW5kb3dfQmFzZS5wcm90b3R5cGUub3Blbk1vZGFsID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMueiA9IDMwMDA7CiAgICAgIEdhbWVNYW5hZ2VyLm1vZGFsU3ByaXRlLnZpc2libGUgPSB0cnVlOwogICAgICByZXR1cm4gdGhpcy5vcGVuKCk7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmlzQ2xvc2luZyA9IHRydWU7CiAgICAgIHJldHVybiBHYW1lTWFuYWdlci5tb2RhbFNwcml0ZS52aXNpYmxlID0gZmFsc2U7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS51cGRhdGVPcGVuaW5nID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICh0aGlzLm9wZW5uZXNzIDwgMjU1KSB7CiAgICAgICAgdGhpcy5vcGVubmVzcyA9IE1hdGgubWluKHRoaXMub3Blbm5lc3MgKyAzMiwgMjU1KTsKICAgICAgfQogICAgICB0aGlzLmlzT3BlbmluZyA9IHRoaXMub3Blbm5lc3MgPCAyNTU7CiAgICAgIHJldHVybiB0aGlzLmFjdGl2ZSA9IHRoaXMub3Blbm5lc3MgPiAwOwogICAgfTsKCiAgICBXaW5kb3dfQmFzZS5wcm90b3R5cGUudXBkYXRlQ2xvc2luZyA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodGhpcy5vcGVubmVzcyA+IDApIHsKICAgICAgICB0aGlzLm9wZW5uZXNzID0gTWF0aC5tYXgodGhpcy5vcGVubmVzcyAtIDMyLCAwKTsKICAgICAgfQogICAgICB0aGlzLmlzQ2xvc2luZyA9IHRoaXMub3Blbm5lc3MgPiAwOwogICAgICB0aGlzLmFjdGl2ZSA9IHRoaXMub3Blbm5lc3MgPiAwOwogICAgICByZXR1cm4gdGhpcy52aXNpYmxlID0gdGhpcy5vcGVuZXNzID4gMDsKICAgIH07CgogICAgV2luZG93X0Jhc2UucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBXaW5kb3dfQmFzZS5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICh0aGlzLmlzT3BlbmluZykgewogICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZU9wZW5pbmcoKTsKICAgICAgfSBlbHNlIGlmICh0aGlzLmlzQ2xvc2luZykgewogICAgICAgIHJldHVybiB0aGlzLnVwZGF0ZUNsb3NpbmcoKTsKICAgICAgfQogICAgfTsKCiAgICBXaW5kb3dfQmFzZS5wcm90b3R5cGUuY3JlYXRlQWN0b3JGYWNlQml0bWFwID0gZnVuY3Rpb24oYWN0b3IpIHsKICAgICAgdmFyIGJpdG1hcCwgcmVzdWx0OwogICAgICByZXN1bHQgPSBudWxsOwogICAgICBiaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9GYWNlcy8iICsgYWN0b3IuZmFjZUdyYXBoaWMubmFtZSk7CiAgICAgIGlmIChiaXRtYXAgIT0gbnVsbCkgewogICAgICAgIHJlc3VsdCA9IG5ldyBCaXRtYXAoOTYgKiBXaW5kb3dfQmFzZS5zY2FsZSwgOTYgKiBXaW5kb3dfQmFzZS5zY2FsZSk7CiAgICAgICAgdGhpcy5kcmF3RmFjZSgwLCAwLCBiaXRtYXAsIGFjdG9yLmZhY2VQYXR0ZXJuLCByZXN1bHQpOwogICAgICB9CiAgICAgIHJldHVybiByZXN1bHQ7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5kcmF3TWVtYmVyID0gZnVuY3Rpb24oeCwgeSwgbWVtYmVyKSB7CiAgICAgIHZhciBmYWNlLCBveCwgb3ksIHNjYWxlOwogICAgICBzY2FsZSA9IFdpbmRvd19CYXNlLnNjYWxlOwogICAgICBmYWNlID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvRmFjZXMvIiArIG1lbWJlci5mYWNlR3JhcGhpYy5uYW1lKTsKICAgICAgb3ggPSB4ICsgNTsKICAgICAgb3kgPSB5ICsgMjsKICAgICAgdGhpcy5kcmF3TWVtYmVyQ2hhcmFjdGVyKHgsIHksIG1lbWJlciwgMS4wKTsKICAgICAgdGhpcy5jb250ZW50cy5mb250ID0gdGhpcy5tZW1iZXJOYW1lRm9udDsKICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4LCB5ICsgNjIgKiBzY2FsZSwgMTUwICogc2NhbGUsIDEwICogc2NhbGUsIG1lbWJlci5uYW1lLCAxKTsKICAgICAgdGhpcy5jb250ZW50cy5mb250ID0gdGhpcy5nYXVnZUZvbnQ7CiAgICAgIG94ICs9IDUwICogc2NhbGU7CiAgICAgIHRoaXMuZHJhd0dhdWdlKG94LCBveSwgNzQgKiBzY2FsZSwgNiAqIHNjYWxlLCBDb2xvcnMuTFBfR0FVR0UxLCBDb2xvcnMuTFBfR0FVR0UyLCBtZW1iZXIubHAsIG1lbWJlci5tbHApOwogICAgICBveSArPSAyNiAqIHNjYWxlOwogICAgICB0aGlzLmRyYXdHYXVnZShveCwgb3ksIDc0ICogc2NhbGUsIDYgKiBzY2FsZSwgQ29sb3JzLk1QX0dBVUdFMSwgQ29sb3JzLk1QX0dBVUdFMiwgbWVtYmVyLm1wLCBtZW1iZXIubW1wKTsKICAgICAgcmV0dXJuIG95ICs9IDMxICogc2NhbGU7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5kcmF3RmFjZSA9IGZ1bmN0aW9uKHgsIHksIGZhY2VzZXQsIHBhdHRlcm4sIHRhcmdldCkgewogICAgICB2YXIgc2l6ZTsKICAgICAgc2l6ZSA9IDk2ICogV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIHJldHVybiAodGFyZ2V0IHx8IHRoaXMuY29udGVudHMpLnN0cmV0Y2hCbHQobmV3IFJlY3QoeCwgeSwgOTYgKiBXaW5kb3dfQmFzZS5zY2FsZSwgOTYgKiBXaW5kb3dfQmFzZS5zY2FsZSksIGZhY2VzZXQsIG5ldyBSZWN0KHBhdHRlcm4gJSA0ICogc2l6ZSwgTWF0aC5mbG9vcihwYXR0ZXJuIC8gNCkgKiBzaXplLCBzaXplLCBzaXplKSk7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5kcmF3Q2hhcmFjdGVyID0gZnVuY3Rpb24oeCwgeSwgY2hhcnNldCwgcGF0dGVybiwgc3ViUGF0dGVybiwgc2NhbGUpIHsKICAgICAgdmFyIGNvbHVtbiwgZHN0UmVjdCwgaGVpZ2h0LCByb3csIHNyY1JlY3QsIHdpZHRoOwogICAgICBzY2FsZSA9IHNjYWxlIHx8IDE7CiAgICAgIHdpZHRoID0gY2hhcnNldC53aWR0aCAvIDQ7CiAgICAgIGhlaWdodCA9IGNoYXJzZXQuaGVpZ2h0IC8gNDsKICAgICAgY29sdW1uID0gc3ViUGF0dGVybiAlIDQ7CiAgICAgIHJvdyA9IE1hdGguZmxvb3Ioc3ViUGF0dGVybiAvIDQpOwogICAgICBzcmNSZWN0ID0gbmV3IFJlY3QoY29sdW1uICogd2lkdGgsIHJvdyAqIGhlaWdodCwgd2lkdGgsIGhlaWdodCk7CiAgICAgIGRzdFJlY3QgPSBuZXcgUmVjdCh4LCB5LCB3aWR0aCAqIHNjYWxlLCBoZWlnaHQgKiBzY2FsZSk7CiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLnN0cmV0Y2hCbHQoZHN0UmVjdCwgY2hhcnNldCwgc3JjUmVjdCk7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5kcmF3TWVtYmVyRmFjZSA9IGZ1bmN0aW9uKHgsIHksIG1lbWJlcikgewogICAgICB2YXIgZmFjZTsKICAgICAgaWYgKG1lbWJlci5mYWNlR3JhcGhpYy5uYW1lID09PSAiIikgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBmYWNlID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvRmFjZXMvIiArIG1lbWJlci5mYWNlR3JhcGhpYy5uYW1lKTsKICAgICAgcmV0dXJuIHRoaXMuZHJhd0ZhY2UoeCwgeSwgZmFjZSwgbWVtYmVyLmZhY2VQYXR0ZXJuKTsKICAgIH07CgogICAgV2luZG93X0Jhc2UucHJvdG90eXBlLmRyYXdNZW1iZXJDaGFyYWN0ZXIgPSBmdW5jdGlvbih4LCB5LCBtZW1iZXIsIHNjYWxlKSB7CiAgICAgIHZhciBjaGFyYWN0ZXI7CiAgICAgIGlmIChtZW1iZXIuY2hhcmFjdGVyR3JhcGhpYy5uYW1lID09PSAiIikgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBjaGFyYWN0ZXIgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9DaGFyYWN0ZXJzLyIgKyBtZW1iZXIuY2hhcmFjdGVyR3JhcGhpYy5uYW1lKTsKICAgICAgcmV0dXJuIHRoaXMuZHJhd0NoYXJhY3Rlcih4LCB5LCBjaGFyYWN0ZXIsIG1lbWJlci5jaGFyYWN0ZXJQYXR0ZXJuLCAwLCBzY2FsZSk7CiAgICB9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5tZW1iZXJDaGFyYWN0ZXJTaXplID0gZnVuY3Rpb24obWVtYmVyKSB7CiAgICAgIHZhciBjaGFyc2V0OwogICAgICBpZiAobWVtYmVyLmNoYXJhY3RlckdyYXBoaWMubmFtZSA9PT0gIiIpIHsKICAgICAgICByZXR1cm4gewogICAgICAgICAgdzogMzIsCiAgICAgICAgICBoOiAzMgogICAgICAgIH07CiAgICAgIH0KICAgICAgY2hhcnNldCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0NoYXJhY3RlcnMvIiArIG1lbWJlci5jaGFyYWN0ZXJHcmFwaGljLm5hbWUpOwogICAgICByZXR1cm4gewogICAgICAgIHc6IGNoYXJzZXQud2lkdGggLyAxMiwKICAgICAgICBoOiBjaGFyc2V0LmhlaWdodCAvIDgKICAgICAgfTsKICAgIH07CgogICAgV2luZG93X0Jhc2UucHJvdG90eXBlLmRyYXdHYXVnZSA9IGZ1bmN0aW9uKHgsIHksIHcsIGgsIGNvbG9yMSwgY29sb3IyLCB2YWx1ZSwgbWF4VmFsdWUpIHsKICAgICAgdmFyIGd3OwogICAgICBndyA9IHcgKiAodmFsdWUgLyBtYXhWYWx1ZSk7CiAgICAgIHRoaXMuY29udGVudHMuZ3JhZGllbnRGaWxsUmVjdCh4LCB5ICsgNCwgdywgaCwgY29sb3IxLCBjb2xvcjIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZpbGxSZWN0KHggKyBndywgeSArIDQsIHcgLSBndywgaCwgQ29sb3JzLkRBUktfR1JFWSk7CiAgICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCwgeSwgdywgaCwgIiIgKyB2YWx1ZSArICIvIiArIG1heFZhbHVlLCAxKTsKICAgICAgfQogICAgfTsKCiAgICBXaW5kb3dfQmFzZS5wcm90b3R5cGUuZHJhd0ljb24gPSBmdW5jdGlvbihpY29uc2V0LCBwYXR0ZXJuLCB4LCB5KSB7CiAgICAgIHZhciBjb2x1bW4sIGljb25zWCwgcm93LCBzLCBzaXplLCBzcmNSZWN0OwogICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIHNpemUgPSAyNCAqIHM7CiAgICAgIGljb25zWCA9IGljb25zZXQud2lkdGggLyBzaXplOwogICAgICBjb2x1bW4gPSBwYXR0ZXJuICUgaWNvbnNYOwogICAgICByb3cgPSBNYXRoLmZsb29yKHBhdHRlcm4gLyBpY29uc1gpOwogICAgICBzcmNSZWN0ID0gbmV3IFJlY3QoY29sdW1uICogc2l6ZSwgcm93ICogc2l6ZSwgc2l6ZSwgc2l6ZSk7CiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmJsdCh4LCB5LCBpY29uc2V0LCBzcmNSZWN0KTsKICAgIH07CgogICAgV2luZG93X0Jhc2UucHJvdG90eXBlLmRyYXdTdGF0dXMgPSBmdW5jdGlvbih4LCB5LCB3LCBzdGF0dXMpIHt9OwoKICAgIFdpbmRvd19CYXNlLnByb3RvdHlwZS5kcmF3U3RhdGVzID0gZnVuY3Rpb24oeCwgeSwgc3RhdGVzKSB7CiAgICAgIHZhciBiaXRtYXAsIGNvbHVtbnMsIGksIG94LCBzLCBzdGF0ZSwgX2ksIF9yZWY7CiAgICAgIHN0YXRlID0gbnVsbDsKICAgICAgb3ggPSB4OwogICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIGZvciAoaSA9IF9pID0gMCwgX3JlZiA9IHN0YXRlcy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgc3RhdGUgPSBzdGF0ZXNbaV07CiAgICAgICAgaWYgKChzdGF0ZS5pY29uR3JhcGhpYyAhPSBudWxsKSAmJiBzdGF0ZS5pY29uR3JhcGhpYy5uYW1lLmxlbmd0aCA+IDApIHsKICAgICAgICAgIGJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0ljb25zLyIgKyBzdGF0ZS5pY29uR3JhcGhpYy5uYW1lKTsKICAgICAgICAgIGNvbHVtbnMgPSBNYXRoLmNlaWwoYml0bWFwLndpZHRoIC8gKDI0ICogcykpOwogICAgICAgICAgdGhpcy5jb250ZW50cy5ibHQob3gsIHksIGJpdG1hcCwgbmV3IFJlY3Qoc3RhdGUuaWNvblBhdHRlcm4gJSBjb2x1bW5zICogKDI0ICogcyksIE1hdGguZmxvb3Ioc3RhdGUuaWNvblBhdHRlcm4gLyBjb2x1bW5zKSAqICgyNCAqIHMpLCAyNCAqIHMsIDI0ICogcykpOwogICAgICAgICAgb3ggKz0gMjQgKiBzOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gbnVsbDsKICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19CYXNlOwoKICB9KShXaW5kb3cpOwoKICB3aW5kb3cuV2luZG93X0Jhc2UgPSBXaW5kb3dfQmFzZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_ModalBase","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X01vZGFsQmFzZQojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0yOQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfTW9kYWxCYXNlCiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIGEgdGV4dC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19Nb2RhbEJhc2UgZXh0ZW5kcyBXaW5kb3dfQmFzZQogICAgY29uc3RydWN0b3I6ICh4LCB5LCB3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydCkgLT4KICAgICAgICBzdXBlcih4LCB5LCB3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydCkKICAgICAgICBAeiA9IDMwMDAKICAgIG9wZW46IC0+CiAgICAgICAgc3VwZXIKICAgICAgICBHYW1lTWFuYWdlci5tb2RhbFNwcml0ZS52aXNpYmxlID0geWVzCiAgICAgICAgCiAgICBjbG9zZTogLT4KICAgICAgICBzdXBlcgogICAgICAgIEdhbWVNYW5hZ2VyLm1vZGFsU3ByaXRlLnZpc2libGUgPSBubwogICAgICAgIAogICAgYWNjZXB0OiAtPiAKICAgICAgICBAY2xvc2UoKQogICAgICAgIGlmIEBvbkFjY2VwdD8gdGhlbiBAb25BY2NlcHQodGhpcykKICAgICAgICAKICAgIGNhbmNlbDogLT4gCiAgICAgICAgQGNsb3NlKCkKICAgICAgICBpZiBAb25DYW5jZWw/IHRoZW4gQG9uQ2FuY2VsKHRoaXMpCiAgICAgICAgICAgICAgICAKd2luZG93LldpbmRvd19Nb2RhbEJhc2UgPSBXaW5kb3dfTW9kYWxCYXNl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfTW9kYWxCYXNlLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X01vZGFsQmFzZSA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfTW9kYWxCYXNlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19Nb2RhbEJhc2UoeCwgeSwgd2lkdGgsIGhlaWdodCwgdmlld3BvcnQpIHsKICAgICAgV2luZG93X01vZGFsQmFzZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4LCB5LCB3aWR0aCwgaGVpZ2h0LCB2aWV3cG9ydCk7CiAgICAgIHRoaXMueiA9IDMwMDA7CiAgICB9CgogICAgV2luZG93X01vZGFsQmFzZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkgewogICAgICBXaW5kb3dfTW9kYWxCYXNlLl9fc3VwZXJfXy5vcGVuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIHJldHVybiBHYW1lTWFuYWdlci5tb2RhbFNwcml0ZS52aXNpYmxlID0gdHJ1ZTsKICAgIH07CgogICAgV2luZG93X01vZGFsQmFzZS5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgV2luZG93X01vZGFsQmFzZS5fX3N1cGVyX18uY2xvc2UuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgcmV0dXJuIEdhbWVNYW5hZ2VyLm1vZGFsU3ByaXRlLnZpc2libGUgPSBmYWxzZTsKICAgIH07CgogICAgV2luZG93X01vZGFsQmFzZS5wcm90b3R5cGUuYWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuY2xvc2UoKTsKICAgICAgaWYgKHRoaXMub25BY2NlcHQgIT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLm9uQWNjZXB0KHRoaXMpOwogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd19Nb2RhbEJhc2UucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmNsb3NlKCk7CiAgICAgIGlmICh0aGlzLm9uQ2FuY2VsICE9IG51bGwpIHsKICAgICAgICByZXR1cm4gdGhpcy5vbkNhbmNlbCh0aGlzKTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gV2luZG93X01vZGFsQmFzZTsKCiAgfSkoV2luZG93X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93X01vZGFsQmFzZSA9IFdpbmRvd19Nb2RhbEJhc2U7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_Text","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1RleHQKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjIKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogV2luZG93X1BhcnR5CiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIGEgdGV4dC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19UZXh0IGV4dGVuZHMgV2luZG93X0Jhc2UKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgd2lkdGgsIGhlaWdodCwgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIoeCwgeSwgd2lkdGgsIGhlaWdodCwgdmlld3BvcnQpCiAgICAgICAgQHRleHQgPSAiIgogICAgICAgIEBjb250ZW50cyA9IG5ldyBCaXRtYXAoQHdpZHRoIC0gQHBhZGRpbmcqMiwgQGhlaWdodCAtIEBwYWRkaW5nKjIpCiAgICAgICAgQGNvbnRlbnRzLmZvbnQgPSBAbmFtZUZvbnQKICAgIHJlZHJhdzogLT4KICAgICAgICBAY29udGVudHMuY2xlYXIoKQogICAgICAgIEBjb250ZW50cy5mb250LmNvbG9yID0gQ29sb3JzLlRFWFRfTk9STUFMCiAgICAgICAgaWYgQHRleHQ/CiAgICAgICAgICAgIGxpbmVzID0gQHRleHQuc3BsaXQoIlxuIikKICAgICAgICAgICAgbGluZVNpemUgPSBAY29udGVudHMudGV4dFNpemUobGluZXNbMF0pCiAgICAgICAgICAgIAogICAgICAgICAgICBmb3IgaSBpbiBbMC4uLmxpbmVzLmxlbmd0aF0KICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCgwLCAwLCBAd2lkdGgsIGxpbmVTaXplLmhlaWdodCsoMCpXaW5kb3dfQmFzZS5zY2FsZSksIGxpbmVzW2ldKQogICAgICAgICAgICAgICAgCndpbmRvdy5XaW5kb3dfVGV4dCA9IFdpbmRvd19UZXh0","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfVGV4dCwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFdpbmRvd19UZXh0ID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFdpbmRvd19UZXh0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19UZXh0KHgsIHksIHdpZHRoLCBoZWlnaHQsIHZpZXdwb3J0KSB7CiAgICAgIFdpbmRvd19UZXh0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHZpZXdwb3J0KTsKICAgICAgdGhpcy50ZXh0ID0gIiI7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgfQoKICAgIFdpbmRvd19UZXh0LnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGksIGxpbmVTaXplLCBsaW5lcywgX2ksIF9yZWYsIF9yZXN1bHRzOwogICAgICB0aGlzLmNvbnRlbnRzLmNsZWFyKCk7CiAgICAgIHRoaXMuY29udGVudHMuZm9udC5jb2xvciA9IENvbG9ycy5URVhUX05PUk1BTDsKICAgICAgaWYgKHRoaXMudGV4dCAhPSBudWxsKSB7CiAgICAgICAgbGluZXMgPSB0aGlzLnRleHQuc3BsaXQoIlxuIik7CiAgICAgICAgbGluZVNpemUgPSB0aGlzLmNvbnRlbnRzLnRleHRTaXplKGxpbmVzWzBdKTsKICAgICAgICBfcmVzdWx0cyA9IFtdOwogICAgICAgIGZvciAoaSA9IF9pID0gMCwgX3JlZiA9IGxpbmVzLmxlbmd0aDsgMCA8PSBfcmVmID8gX2kgPCBfcmVmIDogX2kgPiBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICAgIF9yZXN1bHRzLnB1c2godGhpcy5jb250ZW50cy5kcmF3VGV4dCgwLCAwLCB0aGlzLndpZHRoLCBsaW5lU2l6ZS5oZWlnaHQgKyAoMCAqIFdpbmRvd19CYXNlLnNjYWxlKSwgbGluZXNbaV0pKTsKICAgICAgICB9CiAgICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dfVGV4dDsKCiAgfSkoV2luZG93X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93X1RleHQgPSBXaW5kb3dfVGV4dDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_Selection","content":"","compiledContent":""},{"name":"Window_Choice","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0Nob2ljZQojICAgQ3JlYXRlZCBvbjogMjAxMy0xMi0wMgojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfQ2hvaWNlCiMKIyAgIEEgd2luZG93IHdoZXJlIHRoZSB1c2VyIGNhbiBpbnB1dCBhIG51bWJlci4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19DaG9pY2UgZXh0ZW5kcyBXaW5kb3dfU2VsZWN0aW9uICAgIAogICAgY29uc3RydWN0b3I6IChjaG9pY2VzLCB4LCB5KSAtPgogICAgICAgIHJvd3MgPSBbXQogICAgICAgIGZvciBjaG9pY2UgaW4gY2hvaWNlcwogICAgICAgICAgICBpZiBjaG9pY2UudGV4dC5sZW5ndGggPiAwIHRoZW4gcm93cy5wdXNoKFtjaG9pY2VdKQogICAgICAgICAgICAKICAgICAgICB4ID0gaWYgeD8gdGhlbiB4IGVsc2UgKEdyYXBoaWNzLndpZHRoIC0gMjI0KSAvIDIKICAgICAgICB5ID0gaWYgeT8gdGhlbiB5IGVsc2UgKEdyYXBoaWNzLmhlaWdodCAtIHJvd3MubGVuZ3RoICogMzIpIC8gMgogICAgICAgIAogICAgICAgIHN1cGVyKHgsIHksIDEsIHJvd3MpCiAKICAgICAgICBAeiA9IDUwMAogICAgICAgIAogICAgZHJhd0NlbGw6ICh4LCB5LCBjZWxsKSAtPgogICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LCB5LCBAY29sdW1uV2lkdGgsIEBjb2x1bW5IZWlnaHQsIGNlbGwudGV4dCwgQHRleHRBbGlnbm1lbnQpICAgIAogICAgICAgIAogICAgb3BlbjogLT4KICAgICAgICBzdXBlcigpCiAgICAgICAgQHJlZHJhdygpCgogICAgICAgIAp3aW5kb3cuV2luZG93X0Nob2ljZSA9IFdpbmRvd19DaG9pY2U=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfQ2hvaWNlLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X0Nob2ljZSA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfQ2hvaWNlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19DaG9pY2UoY2hvaWNlcywgeCwgeSkgewogICAgICB2YXIgY2hvaWNlLCByb3dzLCBfaSwgX2xlbjsKICAgICAgcm93cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGNob2ljZXMubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICBjaG9pY2UgPSBjaG9pY2VzW19pXTsKICAgICAgICBpZiAoY2hvaWNlLnRleHQubGVuZ3RoID4gMCkgewogICAgICAgICAgcm93cy5wdXNoKFtjaG9pY2VdKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgeCA9IHggIT0gbnVsbCA/IHggOiAoR3JhcGhpY3Mud2lkdGggLSAyMjQpIC8gMjsKICAgICAgeSA9IHkgIT0gbnVsbCA/IHkgOiAoR3JhcGhpY3MuaGVpZ2h0IC0gcm93cy5sZW5ndGggKiAzMikgLyAyOwogICAgICBXaW5kb3dfQ2hvaWNlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIDEsIHJvd3MpOwogICAgICB0aGlzLnogPSA1MDA7CiAgICB9CgogICAgV2luZG93X0Nob2ljZS5wcm90b3R5cGUuZHJhd0NlbGwgPSBmdW5jdGlvbih4LCB5LCBjZWxsKSB7CiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KHgsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCBjZWxsLnRleHQsIHRoaXMudGV4dEFsaWdubWVudCk7CiAgICB9OwoKICAgIFdpbmRvd19DaG9pY2UucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbigpIHsKICAgICAgV2luZG93X0Nob2ljZS5fX3N1cGVyX18ub3Blbi5jYWxsKHRoaXMpOwogICAgICByZXR1cm4gdGhpcy5yZWRyYXcoKTsKICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19DaG9pY2U7CgogIH0pKFdpbmRvd19TZWxlY3Rpb24pOwoKICB3aW5kb3cuV2luZG93X0Nob2ljZSA9IFdpbmRvd19DaG9pY2U7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_Message","content":"","compiledContent":""},{"name":"Window_Party","content":"# ===================================================================\n#\n#   Script: Window_Party\n#   Created on: 2013-09-15\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n#    Class: Window_Party\n#\n#   A window which displays a short information about each party member.\n#\n# ===================================================================\n\nclass Window_Party extends Window_Selection    \n    constructor: (viewport) ->\n        super(0, 0, 4, [GameManager.party.members], 154 * Window_Base.scale, 90 * Window_Base.scale, viewport)\n        @party = GameManager.party\n        @contents = new Bitmap(@width - @padding*2, @height - @padding*2)\n        @columnSpacing = 0\n        for member in @party.members\n            ResourceManager.getBitmap(\"Graphics/Faces/#{member.faceGraphic.name}\")  \n    prepare: ->\n        \n    drawCell: (x, y, cell) ->\n        @drawMember(x+2, y+4, cell)\n        \n        \n    \n        \nwindow.Window_Party = Window_Party","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfUGFydHksCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfUGFydHkgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X1BhcnR5LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19QYXJ0eSh2aWV3cG9ydCkgewogICAgICB2YXIgbWVtYmVyLCBfaSwgX2xlbiwgX3JlZjsKICAgICAgV2luZG93X1BhcnR5Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIDAsIDAsIDQsIFtHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzXSwgMTU0ICogV2luZG93X0Jhc2Uuc2NhbGUsIDkwICogV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KTsKICAgICAgdGhpcy5wYXJ0eSA9IEdhbWVNYW5hZ2VyLnBhcnR5OwogICAgICB0aGlzLmNvbnRlbnRzID0gbmV3IEJpdG1hcCh0aGlzLndpZHRoIC0gdGhpcy5wYWRkaW5nICogMiwgdGhpcy5oZWlnaHQgLSB0aGlzLnBhZGRpbmcgKiAyKTsKICAgICAgdGhpcy5jb2x1bW5TcGFjaW5nID0gMDsKICAgICAgX3JlZiA9IHRoaXMucGFydHkubWVtYmVyczsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgbWVtYmVyID0gX3JlZltfaV07CiAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvRmFjZXMvIiArIG1lbWJlci5mYWNlR3JhcGhpYy5uYW1lKTsKICAgICAgfQogICAgfQoKICAgIFdpbmRvd19QYXJ0eS5wcm90b3R5cGUucHJlcGFyZSA9IGZ1bmN0aW9uKCkge307CgogICAgV2luZG93X1BhcnR5LnByb3RvdHlwZS5kcmF3Q2VsbCA9IGZ1bmN0aW9uKHgsIHksIGNlbGwpIHsKICAgICAgcmV0dXJuIHRoaXMuZHJhd01lbWJlcih4ICsgMiwgeSArIDQsIGNlbGwpOwogICAgfTsKCiAgICByZXR1cm4gV2luZG93X1BhcnR5OwoKICB9KShXaW5kb3dfU2VsZWN0aW9uKTsKCiAgd2luZG93LldpbmRvd19QYXJ0eSA9IFdpbmRvd19QYXJ0eTsKCn0pLmNhbGwodGhpcyk7Cg==","decoded":true},{"name":"Window_BattleParty","content":"# ===================================================================\n#\n#   Script: Window_BattleParty\n#   Created on: 2013-09-29\n#\n#   Copyright (C) 2013 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n#    Class: Window_BattleParty\n#\n#    A window which displays a short information about each party member.\n#\n# ===================================================================\n\nclass Window_BattleParty extends Window_Base    \n    constructor: (x, y, w, h, viewport) ->\n        super(x, y, w, h, viewport)\n        @members = []\n        @contents = new Bitmap(@width - @padding*2, @height - @padding*2)\n        @contents.font = @nameFont\n        @columnSpacing = 0\n        @activeMember = 0\n        @cursorRect = new Rect(0, 0, 0, 0)\n        @cursorVisible = yes\n    prepare: ->\n        \n        \n    redraw: ->\n        @contents.clear()\n        @contents.font.color = Colors.ENABLED_ITEM\n        textSize = @contents.textSize(\"hg\")\n        member = null\n        s = Window_Base.scale\n        ox = 2*s\n        oy = 0\n        \n        \n        for i in [0...@members.length]\n            member = @members[i].actor\n            \n            ox = 4*s\n            oy = i * (textSize.height+6*s)\n            @contents.drawText(ox, oy, textSize.width, textSize.height, member.name)\n            ox += (100 + 6) * s\n            @drawGauge(ox, oy+4*s, 100*s, 8*s, Colors.LP_GAUGE1, Colors.LP_GAUGE2, member.lp, member.mlp)\n            ox += (100 + 6) * s \n            @drawGauge(ox, oy+4*s, 100*s, 8*s, Colors.MP_GAUGE1, Colors.MP_GAUGE2, member.mp, member.mmp)\n            ox += (100 + 6) * s \n            @drawStates(ox, oy, member.states)\n            \n    update: ->\n        super()\n        s = Window_Base.scale\n        if @activeMember != -1\n            @cursorRect.set(0, @activeMember * (23*s), @contents.width, 22*s)\n        if @activeMember == -1 or not @cursorVisible\n            @cursorRect.set(0, 0, 0, 0)\n            \n        \n        \n    \n        \nwindow.Window_BattleParty = Window_BattleParty","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfQmF0dGxlUGFydHksCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfQmF0dGxlUGFydHkgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X0JhdHRsZVBhcnR5LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19CYXR0bGVQYXJ0eSh4LCB5LCB3LCBoLCB2aWV3cG9ydCkgewogICAgICBXaW5kb3dfQmF0dGxlUGFydHkuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgeCwgeSwgdywgaCwgdmlld3BvcnQpOwogICAgICB0aGlzLm1lbWJlcnMgPSBbXTsKICAgICAgdGhpcy5jb250ZW50cyA9IG5ldyBCaXRtYXAodGhpcy53aWR0aCAtIHRoaXMucGFkZGluZyAqIDIsIHRoaXMuaGVpZ2h0IC0gdGhpcy5wYWRkaW5nICogMik7CiAgICAgIHRoaXMuY29udGVudHMuZm9udCA9IHRoaXMubmFtZUZvbnQ7CiAgICAgIHRoaXMuY29sdW1uU3BhY2luZyA9IDA7CiAgICAgIHRoaXMuYWN0aXZlTWVtYmVyID0gMDsKICAgICAgdGhpcy5jdXJzb3JSZWN0ID0gbmV3IFJlY3QoMCwgMCwgMCwgMCk7CiAgICAgIHRoaXMuY3Vyc29yVmlzaWJsZSA9IHRydWU7CiAgICB9CgogICAgV2luZG93X0JhdHRsZVBhcnR5LnByb3RvdHlwZS5wcmVwYXJlID0gZnVuY3Rpb24oKSB7fTsKCiAgICBXaW5kb3dfQmF0dGxlUGFydHkucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaSwgbWVtYmVyLCBveCwgb3ksIHMsIHRleHRTaXplLCBfaSwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIHRoaXMuY29udGVudHMuY2xlYXIoKTsKICAgICAgdGhpcy5jb250ZW50cy5mb250LmNvbG9yID0gQ29sb3JzLkVOQUJMRURfSVRFTTsKICAgICAgdGV4dFNpemUgPSB0aGlzLmNvbnRlbnRzLnRleHRTaXplKCJoZyIpOwogICAgICBtZW1iZXIgPSBudWxsOwogICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIG94ID0gMiAqIHM7CiAgICAgIG95ID0gMDsKICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5tZW1iZXJzLmxlbmd0aDsgMCA8PSBfcmVmID8gX2kgPCBfcmVmIDogX2kgPiBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICBtZW1iZXIgPSB0aGlzLm1lbWJlcnNbaV0uYWN0b3I7CiAgICAgICAgb3ggPSA0ICogczsKICAgICAgICBveSA9IGkgKiAodGV4dFNpemUuaGVpZ2h0ICsgNiAqIHMpOwogICAgICAgIHRoaXMuY29udGVudHMuZHJhd1RleHQob3gsIG95LCB0ZXh0U2l6ZS53aWR0aCwgdGV4dFNpemUuaGVpZ2h0LCBtZW1iZXIubmFtZSk7CiAgICAgICAgb3ggKz0gKDEwMCArIDYpICogczsKICAgICAgICB0aGlzLmRyYXdHYXVnZShveCwgb3kgKyA0ICogcywgMTAwICogcywgOCAqIHMsIENvbG9ycy5MUF9HQVVHRTEsIENvbG9ycy5MUF9HQVVHRTIsIG1lbWJlci5scCwgbWVtYmVyLm1scCk7CiAgICAgICAgb3ggKz0gKDEwMCArIDYpICogczsKICAgICAgICB0aGlzLmRyYXdHYXVnZShveCwgb3kgKyA0ICogcywgMTAwICogcywgOCAqIHMsIENvbG9ycy5NUF9HQVVHRTEsIENvbG9ycy5NUF9HQVVHRTIsIG1lbWJlci5tcCwgbWVtYmVyLm1tcCk7CiAgICAgICAgb3ggKz0gKDEwMCArIDYpICogczsKICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuZHJhd1N0YXRlcyhveCwgb3ksIG1lbWJlci5zdGF0ZXMpKTsKICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIFdpbmRvd19CYXR0bGVQYXJ0eS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzOwogICAgICBXaW5kb3dfQmF0dGxlUGFydHkuX19zdXBlcl9fLnVwZGF0ZS5jYWxsKHRoaXMpOwogICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIGlmICh0aGlzLmFjdGl2ZU1lbWJlciAhPT0gLTEpIHsKICAgICAgICB0aGlzLmN1cnNvclJlY3Quc2V0KDAsIHRoaXMuYWN0aXZlTWVtYmVyICogKDIzICogcyksIHRoaXMuY29udGVudHMud2lkdGgsIDIyICogcyk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMuYWN0aXZlTWVtYmVyID09PSAtMSB8fCAhdGhpcy5jdXJzb3JWaXNpYmxlKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMCwgMCk7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19CYXR0bGVQYXJ0eTsKCiAgfSkoV2luZG93X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93X0JhdHRsZVBhcnR5ID0gV2luZG93X0JhdHRsZVBhcnR5OwoKfSkuY2FsbCh0aGlzKTsK","decoded":true},{"name":"Window_Status","content":"","compiledContent":""},{"name":"Window_Parameter","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1BhcmFtZXRlcgojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0yNwojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgICBDbGFzczogV2luZG93X1BhcmFtZXRlcgojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyBzdGF0dXMgaW5mb3JtYXRpb24gYWJvdXQgYSBwYXJ0eSBtZW1iZXIuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfUGFyYW1ldGVyIGV4dGVuZHMgV2luZG93X0Jhc2UKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgd2lkdGgsIGhlaWdodCkgLT4KICAgICAgICBzdXBlcih4IHx8IDAsIHkgfHwgMCwgd2lkdGggfHwgMTYwLCBoZWlnaHQgfHwgMTYwKQogICAgICAgIEBtZW1iZXIgPSBudWxsCiAgICAgICAgQGNvbnRlbnRzID0gbmV3IEJpdG1hcChAd2lkdGggLSBAcGFkZGluZyoyLCBAaGVpZ2h0IC0gQHBhZGRpbmcqMikKICAgICAgICBAY29udGVudHMuZm9udCA9IEBuYW1lRm9udAogICAgICAgIEBwcmV2aWV3ID0gbm8KICAgICAgICBAY3VycmVudEl0ZW0gPSBudWxsCiAgICAgICAgQGVxdWlwcGVkSXRlbSA9IG51bGwKICAgIHJlZHJhdzogLT4KICAgICAgICBpZiBub3QgQG1lbWJlcj8gdGhlbiByZXR1cm4KICAgICAgICBAY29udGVudHMuZm9udC5jb2xvciA9IENvbG9ycy5URVhUX05PUk1BTAogICAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5CiAgICAgICAgb3ggPSAwCiAgICAgICAgb3kgPSAwCiAgICAgICAgY29udGVudHMgPSBAY29udGVudHMKICAgICAgICBjb250ZW50cy5jbGVhcigpCiAgICAgICAgaWYgQG1lbWJlci5uYW1lLmxlbmd0aCA+IDAKICAgICAgICAgICAgdGV4dFNpemUgPSBjb250ZW50cy50ZXh0U2l6ZShAbWVtYmVyLm5hbWUpCiAgICAgICAgZWxzZQogICAgICAgICAgICB0ZXh0U2l6ZSA9IGNvbnRlbnRzLnRleHRTaXplKCJIIikKICAgICAgICAgICAgCiAgICAgICAgbGluZVNwYWNlID0gNCAqIFdpbmRvd19CYXNlLnNjYWxlCiAgICAgICAgY29sdW1uU2l6ZSA9IDUwICogV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBpdGVtUG93ZXIgPSAwCiAgICAgICAgcGFyYW0gPSAwCiAgICAgIAogICAgICAgICMgRHJhdyBwYXJhbWV0ZXJzCiAgICAgICAgCiAgICAgICAgY29udGVudHMuZHJhd1RleHQob3gsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGxjcyh2b2NhYi5wYXJhbWV0ZXJzLm1scCkpCiAgICAgICAgY29udGVudHMuZHJhd1RleHQob3ggKyBjb2x1bW5TaXplLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCAiI3tAbWVtYmVyLm1scH0iKQogICAgICAgIGlmIEBwcmV2aWV3CiAgICAgICAgICAgIEBkcmF3UGFyYW1ldGVyUHJldmlldyhveCArIGNvbHVtblNpemUqMiwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgY29udGVudHMsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lbWJlci5iYXNlTWxwKCksIEBtZW1iZXIubWxwLCAwKQogICAgICAgIG95ICs9IHRleHRTaXplLmhlaWdodCArIGxpbmVTcGFjZQogICAgICAgIAogICAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94LCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBsY3Modm9jYWIucGFyYW1ldGVycy5tbXApKQogICAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94ICsgY29sdW1uU2l6ZSwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgIiN7QG1lbWJlci5tbXB9IikKICAgICAgICBpZiBAcHJldmlldwogICAgICAgICAgICBAZHJhd1BhcmFtZXRlclByZXZpZXcob3ggKyBjb2x1bW5TaXplKjIsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGNvbnRlbnRzLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZW1iZXIuYmFzZU1tcCgpLCBAbWVtYmVyLm1tcCwgMSkKICAgICAgICBveSArPSB0ZXh0U2l6ZS5oZWlnaHQgKyBsaW5lU3BhY2UKICAgICAgICAKICAgICAgICBjb250ZW50cy5kcmF3VGV4dChveCwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgbGNzKHZvY2FiLnBhcmFtZXRlcnMuYXRrKSkKICAgICAgICBjb250ZW50cy5kcmF3VGV4dChveCArIGNvbHVtblNpemUsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsICIje0BtZW1iZXIuYXRrfSIpCiAgICAgICAgaWYgQHByZXZpZXcKICAgICAgICAgICAgQGRyYXdQYXJhbWV0ZXJQcmV2aWV3KG94ICsgY29sdW1uU2l6ZSoyLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBjb250ZW50cywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbWVtYmVyLmJhc2VBdGsoKSwgQG1lbWJlci5hdGssIDIpCiAgICAgICAgb3kgKz0gdGV4dFNpemUuaGVpZ2h0ICsgbGluZVNwYWNlCiAgICAgICAgCiAgICAgICAgY29udGVudHMuZHJhd1RleHQob3gsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGxjcyh2b2NhYi5wYXJhbWV0ZXJzLm1hdCkpCiAgICAgICAgY29udGVudHMuZHJhd1RleHQob3ggKyBjb2x1bW5TaXplLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCAiI3tAbWVtYmVyLm1hdH0iKQogICAgICAgIGlmIEBwcmV2aWV3CiAgICAgICAgICAgIEBkcmF3UGFyYW1ldGVyUHJldmlldyhveCArIGNvbHVtblNpemUqMiwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgY29udGVudHMsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lbWJlci5iYXNlTWF0KCksIEBtZW1iZXIubWF0LCA0KQogICAgICAgIG95ICs9IHRleHRTaXplLmhlaWdodCArIGxpbmVTcGFjZQogICAgICAgIAogICAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94LCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBsY3Modm9jYWIucGFyYW1ldGVycy5kZWYpKQogICAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94ICsgY29sdW1uU2l6ZSwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgIiN7QG1lbWJlci5kZWZ9IikKICAgICAgICBpZiBAcHJldmlldwogICAgICAgICAgICBAZHJhd1BhcmFtZXRlclByZXZpZXcob3ggKyBjb2x1bW5TaXplKjIsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGNvbnRlbnRzLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZW1iZXIuYmFzZURlZigpLCBAbWVtYmVyLmRlZiwgMykKICAgICAgICBveSArPSB0ZXh0U2l6ZS5oZWlnaHQgKyBsaW5lU3BhY2UKICAgICAgICAKICAgICAgICBjb250ZW50cy5kcmF3VGV4dChveCwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgbGNzKHZvY2FiLnBhcmFtZXRlcnMubWRmKSkKICAgICAgICBjb250ZW50cy5kcmF3VGV4dChveCArIGNvbHVtblNpemUsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsICIje0BtZW1iZXIubWRmfSIpCiAgICAgICAgaWYgQHByZXZpZXcKICAgICAgICAgICAgQGRyYXdQYXJhbWV0ZXJQcmV2aWV3KG94ICsgY29sdW1uU2l6ZSoyLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBjb250ZW50cywgCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBAbWVtYmVyLmJhc2VNZGYoKSwgQG1lbWJlci5tZGYsIDUpCiAgICAgICAgb3kgKz0gdGV4dFNpemUuaGVpZ2h0ICsgbGluZVNwYWNlCiAgICAgICAgCiAgICAgICAgY29udGVudHMuZHJhd1RleHQob3gsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGxjcyh2b2NhYi5wYXJhbWV0ZXJzLmFnaSkpCiAgICAgICAgY29udGVudHMuZHJhd1RleHQob3ggKyBjb2x1bW5TaXplLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCAiI3tAbWVtYmVyLmFnaX0iKQogICAgICAgIGlmIEBwcmV2aWV3CiAgICAgICAgICAgIEBkcmF3UGFyYW1ldGVyUHJldmlldyhveCArIGNvbHVtblNpemUqMiwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgY29udGVudHMsIAogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQG1lbWJlci5iYXNlQWdpKCksIEBtZW1iZXIuYWdpLCA2KQogICAgICAgIG95ICs9IHRleHRTaXplLmhlaWdodCArIGxpbmVTcGFjZQogICAgICAgIAogICAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94LCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBsY3Modm9jYWIucGFyYW1ldGVycy5sdWspKQogICAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94ICsgY29sdW1uU2l6ZSwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgIiN7QG1lbWJlci5sdWt9IikKICAgICAgICBpZiBAcHJldmlldwogICAgICAgICAgICBAZHJhd1BhcmFtZXRlclByZXZpZXcob3ggKyBjb2x1bW5TaXplKjIsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGNvbnRlbnRzLCAKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEBtZW1iZXIuYmFzZUx1aygpLCBAbWVtYmVyLmx1aywgNykKICAgICAgICBveSArPSB0ZXh0U2l6ZS5oZWlnaHQgKyBsaW5lU3BhY2UKICAgICAgICAKICAgIGRyYXdQYXJhbWV0ZXJQcmV2aWV3OiAoeCwgeSwgdywgaCwgY29udGVudHMsIGJhc2VQYXJhbSwgY3VycmVudFBhcmFtLCBwYXJhbUluZGV4KSAtPgogICAgICAgIGN1cnJlbnRQYXJhbSA9IGJhc2VQYXJhbQogICAgICAgIGZvciBpIGluIFswLi41XQogICAgICAgICAgICBpdGVtID0gQG1lbWJlci5lcXVpcHBlZEl0ZW0oaSkKICAgICAgICAgICAgaWYgaXRlbT8gdGhlbiBjdXJyZW50UGFyYW0gKz0gaXRlbS5wYXJhbXNbcGFyYW1JbmRleF0KICAgICAgICAgICAgCiAgICAgICAgaWYgQGN1cnJlbnRJdGVtPwogICAgICAgICAgICBpZiBAZXF1aXBwZWRJdGVtPwogICAgICAgICAgICAgICAgcGFyYW0gPSBjdXJyZW50UGFyYW0gLSBAZXF1aXBwZWRJdGVtLnBhcmFtc1twYXJhbUluZGV4XSArIEBjdXJyZW50SXRlbS5wYXJhbXNbcGFyYW1JbmRleF0KICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgcGFyYW0gPSBjdXJyZW50UGFyYW0gKyBAY3VycmVudEl0ZW0ucGFyYW1zW3BhcmFtSW5kZXhdCiAgICAgICAgZWxzZQogICAgICAgICAgICBpZiBAZXF1aXBwZWRJdGVtPwogICAgICAgICAgICAgICAgcGFyYW0gPSBjdXJyZW50UGFyYW0gLSBAZXF1aXBwZWRJdGVtLnBhcmFtc1twYXJhbUluZGV4XQogICAgICAgICAgICBlbHNlIAogICAgICAgICAgICAgICAgcGFyYW0gPSBjdXJyZW50UGFyYW0KICAgICAgICAgICAgCiAgICAgICAgcGFyYW0gPSBNYXRoLm1heChwYXJhbSwgMSkKICAgICAgICBjdXJyZW50UGFyYW0gPSBNYXRoLm1heChjdXJyZW50UGFyYW0sIDEpCiAgICAgICAgCiAgICAgICAgaWYgcGFyYW0gPiBjdXJyZW50UGFyYW0KICAgICAgICAgICAgY29udGVudHMuZm9udC5jb2xvciA9IENvbG9ycy5HUkVFTgogICAgICAgIGVsc2UgaWYgcGFyYW0gPCBjdXJyZW50UGFyYW0KICAgICAgICAgICAgY29udGVudHMuZm9udC5jb2xvciA9IENvbG9ycy5SRUQKICAgICAgICBlbHNlCiAgICAgICAgICAgIGNvbnRlbnRzLmZvbnQuY29sb3IgPSBDb2xvcnMuVEVYVF9OT1JNQUwKICAgICAgICAgICAgCiAgICAgICAgY29udGVudHMuZHJhd1RleHQoeCwgeSwgdywgaCwgIiN7cGFyYW19IikKICAgICAgICBjb250ZW50cy5mb250LmNvbG9yID0gQ29sb3JzLlRFWFRfTk9STUFMICAgCiAgICAgICAgICAgIAogICAgICAgICAgICAKd2luZG93LldpbmRvd19QYXJhbWV0ZXIgPSBXaW5kb3dfUGFyYW1ldGVy","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfUGFyYW1ldGVyLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X1BhcmFtZXRlciA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfUGFyYW1ldGVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19QYXJhbWV0ZXIoeCwgeSwgd2lkdGgsIGhlaWdodCkgewogICAgICBXaW5kb3dfUGFyYW1ldGVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHggfHwgMCwgeSB8fCAwLCB3aWR0aCB8fCAxNjAsIGhlaWdodCB8fCAxNjApOwogICAgICB0aGlzLm1lbWJlciA9IG51bGw7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLnByZXZpZXcgPSBmYWxzZTsKICAgICAgdGhpcy5jdXJyZW50SXRlbSA9IG51bGw7CiAgICAgIHRoaXMuZXF1aXBwZWRJdGVtID0gbnVsbDsKICAgIH0KCiAgICBXaW5kb3dfUGFyYW1ldGVyLnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbHVtblNpemUsIGNvbnRlbnRzLCBpdGVtUG93ZXIsIGxpbmVTcGFjZSwgb3gsIG95LCBwYXJhbSwgdGV4dFNpemUsIHZvY2FiOwogICAgICBpZiAodGhpcy5tZW1iZXIgPT0gbnVsbCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQuY29sb3IgPSBDb2xvcnMuVEVYVF9OT1JNQUw7CiAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5OwogICAgICBveCA9IDA7CiAgICAgIG95ID0gMDsKICAgICAgY29udGVudHMgPSB0aGlzLmNvbnRlbnRzOwogICAgICBjb250ZW50cy5jbGVhcigpOwogICAgICBpZiAodGhpcy5tZW1iZXIubmFtZS5sZW5ndGggPiAwKSB7CiAgICAgICAgdGV4dFNpemUgPSBjb250ZW50cy50ZXh0U2l6ZSh0aGlzLm1lbWJlci5uYW1lKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0ZXh0U2l6ZSA9IGNvbnRlbnRzLnRleHRTaXplKCJIIik7CiAgICAgIH0KICAgICAgbGluZVNwYWNlID0gNCAqIFdpbmRvd19CYXNlLnNjYWxlOwogICAgICBjb2x1bW5TaXplID0gNTAgKiBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgaXRlbVBvd2VyID0gMDsKICAgICAgcGFyYW0gPSAwOwogICAgICBjb250ZW50cy5kcmF3VGV4dChveCwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgbGNzKHZvY2FiLnBhcmFtZXRlcnMubWxwKSk7CiAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94ICsgY29sdW1uU2l6ZSwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgIiIgKyB0aGlzLm1lbWJlci5tbHApOwogICAgICBpZiAodGhpcy5wcmV2aWV3KSB7CiAgICAgICAgdGhpcy5kcmF3UGFyYW1ldGVyUHJldmlldyhveCArIGNvbHVtblNpemUgKiAyLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBjb250ZW50cywgdGhpcy5tZW1iZXIuYmFzZU1scCgpLCB0aGlzLm1lbWJlci5tbHAsIDApOwogICAgICB9CiAgICAgIG95ICs9IHRleHRTaXplLmhlaWdodCArIGxpbmVTcGFjZTsKICAgICAgY29udGVudHMuZHJhd1RleHQob3gsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGxjcyh2b2NhYi5wYXJhbWV0ZXJzLm1tcCkpOwogICAgICBjb250ZW50cy5kcmF3VGV4dChveCArIGNvbHVtblNpemUsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsICIiICsgdGhpcy5tZW1iZXIubW1wKTsKICAgICAgaWYgKHRoaXMucHJldmlldykgewogICAgICAgIHRoaXMuZHJhd1BhcmFtZXRlclByZXZpZXcob3ggKyBjb2x1bW5TaXplICogMiwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgY29udGVudHMsIHRoaXMubWVtYmVyLmJhc2VNbXAoKSwgdGhpcy5tZW1iZXIubW1wLCAxKTsKICAgICAgfQogICAgICBveSArPSB0ZXh0U2l6ZS5oZWlnaHQgKyBsaW5lU3BhY2U7CiAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94LCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBsY3Modm9jYWIucGFyYW1ldGVycy5hdGspKTsKICAgICAgY29udGVudHMuZHJhd1RleHQob3ggKyBjb2x1bW5TaXplLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCAiIiArIHRoaXMubWVtYmVyLmF0ayk7CiAgICAgIGlmICh0aGlzLnByZXZpZXcpIHsKICAgICAgICB0aGlzLmRyYXdQYXJhbWV0ZXJQcmV2aWV3KG94ICsgY29sdW1uU2l6ZSAqIDIsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGNvbnRlbnRzLCB0aGlzLm1lbWJlci5iYXNlQXRrKCksIHRoaXMubWVtYmVyLmF0aywgMik7CiAgICAgIH0KICAgICAgb3kgKz0gdGV4dFNpemUuaGVpZ2h0ICsgbGluZVNwYWNlOwogICAgICBjb250ZW50cy5kcmF3VGV4dChveCwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgbGNzKHZvY2FiLnBhcmFtZXRlcnMubWF0KSk7CiAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94ICsgY29sdW1uU2l6ZSwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgIiIgKyB0aGlzLm1lbWJlci5tYXQpOwogICAgICBpZiAodGhpcy5wcmV2aWV3KSB7CiAgICAgICAgdGhpcy5kcmF3UGFyYW1ldGVyUHJldmlldyhveCArIGNvbHVtblNpemUgKiAyLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBjb250ZW50cywgdGhpcy5tZW1iZXIuYmFzZU1hdCgpLCB0aGlzLm1lbWJlci5tYXQsIDQpOwogICAgICB9CiAgICAgIG95ICs9IHRleHRTaXplLmhlaWdodCArIGxpbmVTcGFjZTsKICAgICAgY29udGVudHMuZHJhd1RleHQob3gsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGxjcyh2b2NhYi5wYXJhbWV0ZXJzLmRlZikpOwogICAgICBjb250ZW50cy5kcmF3VGV4dChveCArIGNvbHVtblNpemUsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsICIiICsgdGhpcy5tZW1iZXIuZGVmKTsKICAgICAgaWYgKHRoaXMucHJldmlldykgewogICAgICAgIHRoaXMuZHJhd1BhcmFtZXRlclByZXZpZXcob3ggKyBjb2x1bW5TaXplICogMiwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgY29udGVudHMsIHRoaXMubWVtYmVyLmJhc2VEZWYoKSwgdGhpcy5tZW1iZXIuZGVmLCAzKTsKICAgICAgfQogICAgICBveSArPSB0ZXh0U2l6ZS5oZWlnaHQgKyBsaW5lU3BhY2U7CiAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94LCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBsY3Modm9jYWIucGFyYW1ldGVycy5tZGYpKTsKICAgICAgY29udGVudHMuZHJhd1RleHQob3ggKyBjb2x1bW5TaXplLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCAiIiArIHRoaXMubWVtYmVyLm1kZik7CiAgICAgIGlmICh0aGlzLnByZXZpZXcpIHsKICAgICAgICB0aGlzLmRyYXdQYXJhbWV0ZXJQcmV2aWV3KG94ICsgY29sdW1uU2l6ZSAqIDIsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGNvbnRlbnRzLCB0aGlzLm1lbWJlci5iYXNlTWRmKCksIHRoaXMubWVtYmVyLm1kZiwgNSk7CiAgICAgIH0KICAgICAgb3kgKz0gdGV4dFNpemUuaGVpZ2h0ICsgbGluZVNwYWNlOwogICAgICBjb250ZW50cy5kcmF3VGV4dChveCwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgbGNzKHZvY2FiLnBhcmFtZXRlcnMuYWdpKSk7CiAgICAgIGNvbnRlbnRzLmRyYXdUZXh0KG94ICsgY29sdW1uU2l6ZSwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgIiIgKyB0aGlzLm1lbWJlci5hZ2kpOwogICAgICBpZiAodGhpcy5wcmV2aWV3KSB7CiAgICAgICAgdGhpcy5kcmF3UGFyYW1ldGVyUHJldmlldyhveCArIGNvbHVtblNpemUgKiAyLCBveSwgY29sdW1uU2l6ZSwgdGV4dFNpemUuaGVpZ2h0LCBjb250ZW50cywgdGhpcy5tZW1iZXIuYmFzZUFnaSgpLCB0aGlzLm1lbWJlci5hZ2ksIDYpOwogICAgICB9CiAgICAgIG95ICs9IHRleHRTaXplLmhlaWdodCArIGxpbmVTcGFjZTsKICAgICAgY29udGVudHMuZHJhd1RleHQob3gsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsIGxjcyh2b2NhYi5wYXJhbWV0ZXJzLmx1aykpOwogICAgICBjb250ZW50cy5kcmF3VGV4dChveCArIGNvbHVtblNpemUsIG95LCBjb2x1bW5TaXplLCB0ZXh0U2l6ZS5oZWlnaHQsICIiICsgdGhpcy5tZW1iZXIubHVrKTsKICAgICAgaWYgKHRoaXMucHJldmlldykgewogICAgICAgIHRoaXMuZHJhd1BhcmFtZXRlclByZXZpZXcob3ggKyBjb2x1bW5TaXplICogMiwgb3ksIGNvbHVtblNpemUsIHRleHRTaXplLmhlaWdodCwgY29udGVudHMsIHRoaXMubWVtYmVyLmJhc2VMdWsoKSwgdGhpcy5tZW1iZXIubHVrLCA3KTsKICAgICAgfQogICAgICByZXR1cm4gb3kgKz0gdGV4dFNpemUuaGVpZ2h0ICsgbGluZVNwYWNlOwogICAgfTsKCiAgICBXaW5kb3dfUGFyYW1ldGVyLnByb3RvdHlwZS5kcmF3UGFyYW1ldGVyUHJldmlldyA9IGZ1bmN0aW9uKHgsIHksIHcsIGgsIGNvbnRlbnRzLCBiYXNlUGFyYW0sIGN1cnJlbnRQYXJhbSwgcGFyYW1JbmRleCkgewogICAgICB2YXIgaSwgaXRlbSwgcGFyYW0sIF9pOwogICAgICBjdXJyZW50UGFyYW0gPSBiYXNlUGFyYW07CiAgICAgIGZvciAoaSA9IF9pID0gMDsgX2kgPD0gNTsgaSA9ICsrX2kpIHsKICAgICAgICBpdGVtID0gdGhpcy5tZW1iZXIuZXF1aXBwZWRJdGVtKGkpOwogICAgICAgIGlmIChpdGVtICE9IG51bGwpIHsKICAgICAgICAgIGN1cnJlbnRQYXJhbSArPSBpdGVtLnBhcmFtc1twYXJhbUluZGV4XTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKHRoaXMuY3VycmVudEl0ZW0gIT0gbnVsbCkgewogICAgICAgIGlmICh0aGlzLmVxdWlwcGVkSXRlbSAhPSBudWxsKSB7CiAgICAgICAgICBwYXJhbSA9IGN1cnJlbnRQYXJhbSAtIHRoaXMuZXF1aXBwZWRJdGVtLnBhcmFtc1twYXJhbUluZGV4XSArIHRoaXMuY3VycmVudEl0ZW0ucGFyYW1zW3BhcmFtSW5kZXhdOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICBwYXJhbSA9IGN1cnJlbnRQYXJhbSArIHRoaXMuY3VycmVudEl0ZW0ucGFyYW1zW3BhcmFtSW5kZXhdOwogICAgICAgIH0KICAgICAgfSBlbHNlIHsKICAgICAgICBpZiAodGhpcy5lcXVpcHBlZEl0ZW0gIT0gbnVsbCkgewogICAgICAgICAgcGFyYW0gPSBjdXJyZW50UGFyYW0gLSB0aGlzLmVxdWlwcGVkSXRlbS5wYXJhbXNbcGFyYW1JbmRleF07CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHBhcmFtID0gY3VycmVudFBhcmFtOwogICAgICAgIH0KICAgICAgfQogICAgICBwYXJhbSA9IE1hdGgubWF4KHBhcmFtLCAxKTsKICAgICAgY3VycmVudFBhcmFtID0gTWF0aC5tYXgoY3VycmVudFBhcmFtLCAxKTsKICAgICAgaWYgKHBhcmFtID4gY3VycmVudFBhcmFtKSB7CiAgICAgICAgY29udGVudHMuZm9udC5jb2xvciA9IENvbG9ycy5HUkVFTjsKICAgICAgfSBlbHNlIGlmIChwYXJhbSA8IGN1cnJlbnRQYXJhbSkgewogICAgICAgIGNvbnRlbnRzLmZvbnQuY29sb3IgPSBDb2xvcnMuUkVEOwogICAgICB9IGVsc2UgewogICAgICAgIGNvbnRlbnRzLmZvbnQuY29sb3IgPSBDb2xvcnMuVEVYVF9OT1JNQUw7CiAgICAgIH0KICAgICAgY29udGVudHMuZHJhd1RleHQoeCwgeSwgdywgaCwgIiIgKyBwYXJhbSk7CiAgICAgIHJldHVybiBjb250ZW50cy5mb250LmNvbG9yID0gQ29sb3JzLlRFWFRfTk9STUFMOwogICAgfTsKCiAgICByZXR1cm4gV2luZG93X1BhcmFtZXRlcjsKCiAgfSkoV2luZG93X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93X1BhcmFtZXRlciA9IFdpbmRvd19QYXJhbWV0ZXI7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_Items","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0l0ZW1zCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTIyCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19JdGVtcwojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyBhIHRleHQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfSXRlbXMgZXh0ZW5kcyBXaW5kb3dfU2VsZWN0aW9uICAgICAgICAKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgY29sdW1uQ291bnQsIHJvd3MsIGNvbHVtbldpZHRoLCBjb2x1bW5IZWlnaHQsIHZpZXdwb3J0KSAtPgogICAgICAgIHN1cGVyKHgsIHksIGNvbHVtbkNvdW50LCByb3dzLCBjb2x1bW5XaWR0aCwgY29sdW1uSGVpZ2h0LCB2aWV3cG9ydCkKICAgICAgICBAdHlwZSA9IDAKICAgICAgICBAbWVtYmVyID0gbnVsbAogICAgICAgIEBlcXVpcFR5cGUgPSAtMQoKICAgIGRyYXdDZWxsOiAoeCwgeSwgY2VsbCwgZW5hYmxlZCkgLT4KICAgICAgICBpZiBub3QgY2VsbC5lbXB0eQogICAgICAgICAgICBAY29udGVudHMuZm9udCA9IEBuYW1lRm9udAogICAgICAgICAgICBAY29udGVudHMuZm9udC5jb2xvciA9IGlmIGVuYWJsZWQgdGhlbiBDb2xvcnMuRU5BQkxFRF9JVEVNIGVsc2UgQ29sb3JzLkRJU0FCTEVEX0lURU0KICAgICAgICAgICAgCiAgICAgICAgICAgIG9mZnNldCA9IDAKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIGNlbGwuaXRlbS5pY29uPyBhbmQgY2VsbC5pdGVtLmljb24ubmFtZS5sZW5ndGggPiAwCiAgICAgICAgICAgICAgICBpY29uU2V0ID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvSWNvbnMvI3tjZWxsLml0ZW0uaWNvbi5uYW1lfSIpCiAgICAgICAgICAgICAgICBAZHJhd0ljb24oaWNvblNldCwgY2VsbC5pdGVtLmljb25QYXR0ZXJuLCB4LTgsIHkpCiAgICAgICAgICAgICAgICBvZmZzZXQgPSAyOAogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4K29mZnNldCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tjZWxsLml0ZW0ubmFtZX0iLCAwKSAKICAgICAgICAgICAgCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBjZWxsLml0ZW0ubXBDb3N0PyBhbmQgY2VsbC5pdGVtLm1wQ29zdCA+IDAKICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LTQsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgIiN7Y2VsbC5jb3VudH14IDogI3tjZWxsLml0ZW0ubXBDb3N0fSIsIDIpCiAgICAgICAgICAgIGVsc2UKICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LTQsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgIiN7Y2VsbC5jb3VudH14IiwgMikKICAgIHZhbGlkYXRlQ2VsbDogKHgsIHksIGNlbGwpIC0+CiAgICAgICAgaWYgY2VsbC5lbXB0eSB0aGVuIHJldHVybiB5ZXMKICAgICAgICAKICAgICAgICByZXN1bHQgPSB5ZXMKICAgCiAgICAgICAgaWYgY2VsbC5pdGVtLml0ZW1UeXBlPyAjIEl0IGlzIGFuIGl0ZW0KICAgICAgICAgICAgc3dpdGNoIGNlbGwuaXRlbS5vY2Nhc2lvbgogICAgICAgICAgICAgICAgd2hlbiAwICMgQWx3YXlzCiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ID0geWVzCiAgICAgICAgICAgICAgICB3aGVuIDEgIyBPbmx5IGluIEJhdHRsZQogICAgICAgICAgICAgICAgICAgIHJlc3VsdCA9IFNjZW5lTWFuYWdlci5zY2VuZSBpbnN0YW5jZW9mIFNjZW5lX0JhdHRsZQogICAgICAgICAgICAgICAgd2hlbiAyICMgT25seSBmcm9tIE1lbnUKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBTY2VuZU1hbmFnZXIuc2NlbmUgaW5zdGFuY2VvZiBTY2VuZV9NYWluTWVudQogICAgICAgICAgICAgICAgd2hlbiAzICMgTmV2ZXIKICAgICAgICAgICAgICAgICAgICByZXN1bHQgPSBubwogICAgICAgICAgICAgICAgICAgIAogICAgICAgICAgICBpZiByZXN1bHQgCiAgICAgICAgICAgICAgICByZXN1bHQgPSBub3QgKGNlbGwuaXRlbS5zY29wZSA+PSAxIGFuZCBjZWxsLml0ZW0uc2NvcGUgPD0gNikKICAgICAgICAgICAgCiAgICAgICAgICAgIGlmIHJlc3VsdAogICAgICAgICAgICAgICAgcmVzdWx0ID0gY2VsbC5pdGVtLm1wQ29zdCA9PSAwIG9yIChAbWVtYmVyLmlzQWxpdmUgYW5kIEBtZW1iZXIubXAgPj0gY2VsbC5pdGVtLm1wQ29zdCkKICAgICAgICBlbHNlIGlmIGNlbGwuaXRlbS53ZWFwb25UeXBlPyAjIEl0IGlzIGEgd2VhcG9uCiAgICAgICAgICAgIHJlc3VsdCA9IEBtZW1iZXIud2VhcG9uVHlwZXNbY2VsbC5pdGVtLndlYXBvblR5cGVdPwogICAgICAgIGVsc2UgaWYgY2VsbC5pdGVtLmFybW9yVHlwZT8gIyBJdCBpcyBhbiBhcm1vcgogICAgICAgICAgICByZXN1bHQgPSBAbWVtYmVyLmFybW9yVHlwZXNbY2VsbC5pdGVtLmFybW9yVHlwZV0/CiAgICAgICAgICAgIGlmIHJlc3VsdCBhbmQgQGVxdWlwVHlwZSA+IC0xCiAgICAgICAgICAgICAgICByZXN1bHQgPSBAZXF1aXBUeXBlID09IGNlbGwuaXRlbS5lcXVpcFR5cGUKICAgICAgICAgICAgCiAgICAgICAgcmV0dXJuIHJlc3VsdAogICAgICAgIAogICAgCiAgICByZWJ1aWxkUm93czogLT4KICAgICAgICBpdGVtcyA9IG51bGwKICAgICAgICBjdXJyZW50SXRlbXMgPSBbXQogICAgICAgIHJvd3MgPSBbXQogICAgICAgIHJvdyA9IDAKICAgICAgICBjb2x1bW4gPSAwCiAgICAgICAgc3dpdGNoIEB0eXBlCiAgICAgICAgICAgIHdoZW4gMAogICAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkuaXRlbXMKICAgICAgICAgICAgd2hlbiAxCiAgICAgICAgICAgICAgICBpdGVtcyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS53ZWFwb25zCiAgICAgICAgICAgIHdoZW4gMgogICAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkuYXJtb3JzCiAgICAgICAgICAgIHdoZW4gMwogICAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkua2V5SXRlbXMKICAgICAgICAgICAgICAgIAogICAgICAgIGZvciBpIGluIFswLi4uaXRlbXMubGVuZ3RoXQogICAgICAgICAgICBpdGVtID0gR2FtZU1hbmFnZXIuaW52ZW50b3J5Lml0ZW0oQHR5cGUsIGkpCiAgICAgICAgICAgIGlmIGl0ZW0uY291bnQgPiAwCiAgICAgICAgICAgICAgICBjdXJyZW50SXRlbXMucHVzaChpdGVtKQogICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBpZiBAdHlwZSA9PSAxIG9yIEB0eXBlID09IDIgb3IgQHR5cGUgPT0gMwogICAgICAgICAgICBjdXJyZW50SXRlbXMucHVzaCh7ZW1wdHk6IHllc30pCiAgICAgICAgICAgICAgICAKICAgICAgICBmb3IgaSBpbiBbMC4uLmN1cnJlbnRJdGVtcy5sZW5ndGhdICAgICAgICAKICAgICAgICAgICAgcm93ID0gTWF0aC5mbG9vcihpIC8gMikKICAgICAgICAgICAgY29sdW1uID0gaSAlIDIKICAgICAgICAgICAgaWYgbm90IHJvd3Nbcm93XT8gdGhlbiByb3dzW3Jvd10gPSBbXQogICAgICAgICAgICByb3dzW3Jvd11bY29sdW1uXSA9IGN1cnJlbnRJdGVtc1tpXQogICAgICAgIAogICAgICAgIEByb3dzID0gcm93cwoKICAgICAgICAKd2luZG93LldpbmRvd19JdGVtcyA9IFdpbmRvd19JdGVtcw==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfSXRlbXMsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfSXRlbXMgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X0l0ZW1zLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19JdGVtcyh4LCB5LCBjb2x1bW5Db3VudCwgcm93cywgY29sdW1uV2lkdGgsIGNvbHVtbkhlaWdodCwgdmlld3BvcnQpIHsKICAgICAgV2luZG93X0l0ZW1zLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIGNvbHVtbkNvdW50LCByb3dzLCBjb2x1bW5XaWR0aCwgY29sdW1uSGVpZ2h0LCB2aWV3cG9ydCk7CiAgICAgIHRoaXMudHlwZSA9IDA7CiAgICAgIHRoaXMubWVtYmVyID0gbnVsbDsKICAgICAgdGhpcy5lcXVpcFR5cGUgPSAtMTsKICAgIH0KCiAgICBXaW5kb3dfSXRlbXMucHJvdG90eXBlLmRyYXdDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCwgZW5hYmxlZCkgewogICAgICB2YXIgaWNvblNldCwgb2Zmc2V0OwogICAgICBpZiAoIWNlbGwuZW1wdHkpIHsKICAgICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICAgIHRoaXMuY29udGVudHMuZm9udC5jb2xvciA9IGVuYWJsZWQgPyBDb2xvcnMuRU5BQkxFRF9JVEVNIDogQ29sb3JzLkRJU0FCTEVEX0lURU07CiAgICAgICAgb2Zmc2V0ID0gMDsKICAgICAgICBpZiAoKGNlbGwuaXRlbS5pY29uICE9IG51bGwpICYmIGNlbGwuaXRlbS5pY29uLm5hbWUubGVuZ3RoID4gMCkgewogICAgICAgICAgaWNvblNldCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0ljb25zLyIgKyBjZWxsLml0ZW0uaWNvbi5uYW1lKTsKICAgICAgICAgIHRoaXMuZHJhd0ljb24oaWNvblNldCwgY2VsbC5pdGVtLmljb25QYXR0ZXJuLCB4IC0gOCwgeSk7CiAgICAgICAgICBvZmZzZXQgPSAyODsKICAgICAgICB9CiAgICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4ICsgb2Zmc2V0LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgIiIgKyBjZWxsLml0ZW0ubmFtZSwgMCk7CiAgICAgICAgaWYgKChjZWxsLml0ZW0ubXBDb3N0ICE9IG51bGwpICYmIGNlbGwuaXRlbS5tcENvc3QgPiAwKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4IC0gNCwgeSwgdGhpcy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5IZWlnaHQsICIiICsgY2VsbC5jb3VudCArICJ4IDogIiArIGNlbGwuaXRlbS5tcENvc3QsIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4IC0gNCwgeSwgdGhpcy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5IZWlnaHQsICIiICsgY2VsbC5jb3VudCArICJ4IiwgMik7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd19JdGVtcy5wcm90b3R5cGUudmFsaWRhdGVDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCkgewogICAgICB2YXIgcmVzdWx0OwogICAgICBpZiAoY2VsbC5lbXB0eSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CiAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgIGlmIChjZWxsLml0ZW0uaXRlbVR5cGUgIT0gbnVsbCkgewogICAgICAgIHN3aXRjaCAoY2VsbC5pdGVtLm9jY2FzaW9uKSB7CiAgICAgICAgICBjYXNlIDA6CiAgICAgICAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAxOgogICAgICAgICAgICByZXN1bHQgPSBTY2VuZU1hbmFnZXIuc2NlbmUgaW5zdGFuY2VvZiBTY2VuZV9CYXR0bGU7CiAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgY2FzZSAyOgogICAgICAgICAgICByZXN1bHQgPSBTY2VuZU1hbmFnZXIuc2NlbmUgaW5zdGFuY2VvZiBTY2VuZV9NYWluTWVudTsKICAgICAgICAgICAgYnJlYWs7CiAgICAgICAgICBjYXNlIDM6CiAgICAgICAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICAgIH0KICAgICAgICBpZiAocmVzdWx0KSB7CiAgICAgICAgICByZXN1bHQgPSAhKGNlbGwuaXRlbS5zY29wZSA+PSAxICYmIGNlbGwuaXRlbS5zY29wZSA8PSA2KTsKICAgICAgICB9CiAgICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgICAgcmVzdWx0ID0gY2VsbC5pdGVtLm1wQ29zdCA9PT0gMCB8fCAodGhpcy5tZW1iZXIuaXNBbGl2ZSAmJiB0aGlzLm1lbWJlci5tcCA+PSBjZWxsLml0ZW0ubXBDb3N0KTsKICAgICAgICB9CiAgICAgIH0gZWxzZSBpZiAoY2VsbC5pdGVtLndlYXBvblR5cGUgIT0gbnVsbCkgewogICAgICAgIHJlc3VsdCA9IHRoaXMubWVtYmVyLndlYXBvblR5cGVzW2NlbGwuaXRlbS53ZWFwb25UeXBlXSAhPSBudWxsOwogICAgICB9IGVsc2UgaWYgKGNlbGwuaXRlbS5hcm1vclR5cGUgIT0gbnVsbCkgewogICAgICAgIHJlc3VsdCA9IHRoaXMubWVtYmVyLmFybW9yVHlwZXNbY2VsbC5pdGVtLmFybW9yVHlwZV0gIT0gbnVsbDsKICAgICAgICBpZiAocmVzdWx0ICYmIHRoaXMuZXF1aXBUeXBlID4gLTEpIHsKICAgICAgICAgIHJlc3VsdCA9IHRoaXMuZXF1aXBUeXBlID09PSBjZWxsLml0ZW0uZXF1aXBUeXBlOwogICAgICAgIH0KICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKCiAgICBXaW5kb3dfSXRlbXMucHJvdG90eXBlLnJlYnVpbGRSb3dzID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjb2x1bW4sIGN1cnJlbnRJdGVtcywgaSwgaXRlbSwgaXRlbXMsIHJvdywgcm93cywgX2ksIF9qLCBfcmVmLCBfcmVmMTsKICAgICAgaXRlbXMgPSBudWxsOwogICAgICBjdXJyZW50SXRlbXMgPSBbXTsKICAgICAgcm93cyA9IFtdOwogICAgICByb3cgPSAwOwogICAgICBjb2x1bW4gPSAwOwogICAgICBzd2l0Y2ggKHRoaXMudHlwZSkgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIGl0ZW1zID0gR2FtZU1hbmFnZXIuaW52ZW50b3J5Lml0ZW1zOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkud2VhcG9uczsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMjoKICAgICAgICAgIGl0ZW1zID0gR2FtZU1hbmFnZXIuaW52ZW50b3J5LmFybW9yczsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzoKICAgICAgICAgIGl0ZW1zID0gR2FtZU1hbmFnZXIuaW52ZW50b3J5LmtleUl0ZW1zOwogICAgICB9CiAgICAgIGZvciAoaSA9IF9pID0gMCwgX3JlZiA9IGl0ZW1zLmxlbmd0aDsgMCA8PSBfcmVmID8gX2kgPCBfcmVmIDogX2kgPiBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICBpdGVtID0gR2FtZU1hbmFnZXIuaW52ZW50b3J5Lml0ZW0odGhpcy50eXBlLCBpKTsKICAgICAgICBpZiAoaXRlbS5jb3VudCA+IDApIHsKICAgICAgICAgIGN1cnJlbnRJdGVtcy5wdXNoKGl0ZW0pOwogICAgICAgIH0KICAgICAgfQogICAgICBpZiAodGhpcy50eXBlID09PSAxIHx8IHRoaXMudHlwZSA9PT0gMiB8fCB0aGlzLnR5cGUgPT09IDMpIHsKICAgICAgICBjdXJyZW50SXRlbXMucHVzaCh7CiAgICAgICAgICBlbXB0eTogdHJ1ZQogICAgICAgIH0pOwogICAgICB9CiAgICAgIGZvciAoaSA9IF9qID0gMCwgX3JlZjEgPSBjdXJyZW50SXRlbXMubGVuZ3RoOyAwIDw9IF9yZWYxID8gX2ogPCBfcmVmMSA6IF9qID4gX3JlZjE7IGkgPSAwIDw9IF9yZWYxID8gKytfaiA6IC0tX2opIHsKICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyAyKTsKICAgICAgICBjb2x1bW4gPSBpICUgMjsKICAgICAgICBpZiAocm93c1tyb3ddID09IG51bGwpIHsKICAgICAgICAgIHJvd3Nbcm93XSA9IFtdOwogICAgICAgIH0KICAgICAgICByb3dzW3Jvd11bY29sdW1uXSA9IGN1cnJlbnRJdGVtc1tpXTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5yb3dzID0gcm93czsKICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19JdGVtczsKCiAgfSkoV2luZG93X1NlbGVjdGlvbik7CgogIHdpbmRvdy5XaW5kb3dfSXRlbXMgPSBXaW5kb3dfSXRlbXM7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_BuyItems","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0J1eUl0ZW1zCiMgICBDcmVhdGVkIG9uOiAyMDEzLTEwLTI5CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19CdXlJdGVtcwojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyBhIHRleHQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfQnV5SXRlbXMgZXh0ZW5kcyBXaW5kb3dfSXRlbXMgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIGNvbHVtbkNvdW50LCByb3dzLCBjb2x1bW5XaWR0aCwgY29sdW1uSGVpZ2h0LCB2aWV3cG9ydCkgLT4KICAgICAgICBzdXBlcih4LCB5LCBjb2x1bW5Db3VudCwgcm93cywgY29sdW1uV2lkdGgsIGNvbHVtbkhlaWdodCwgdmlld3BvcnQpCiAgICAgICAgQG1vZGUgPSAwCiAgICAKICAgIHZhbGlkYXRlQ2VsbDogKHgsIHksIGNlbGwpIC0+CiAgICAgICAgcmVzdWx0ID0gbm8KICAgICAgICAKICAKICAgICAgICBpZiBAbW9kZSA9PSAwCiAgICAgICAgICAgIHJlc3VsdCA9IEdhbWVNYW5hZ2VyLm1vbmV5ID49IGNlbGwucHJpY2UKICAgICAgICBlbHNlCiAgICAgICAgICAgIHJlc3VsdCA9IG5vdCBjZWxsLmVtcHR5PyBhbmQgY2VsbC5jb3VudCA+IDAKICAgICAgIAogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICBkcmF3Q2VsbDogKHgsIHksIGNlbGwsIGVuYWJsZWQpIC0+CiAgICAgICAgaWYgbm90IGNlbGwuZW1wdHkKICAgICAgICAgICAgQGNvbnRlbnRzLmZvbnQgPSBAbmFtZUZvbnQKICAgICAgICAgICAgQGNvbnRlbnRzLmZvbnQuY29sb3IgPSBpZiBlbmFibGVkIHRoZW4gQ29sb3JzLkVOQUJMRURfSVRFTSBlbHNlIENvbG9ycy5ESVNBQkxFRF9JVEVNCiAgICAgICAgICAgIAogICAgICAgICAgICBvZmZzZXQgPSAwCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBjZWxsLml0ZW0uaWNvbj8gYW5kIGNlbGwuaXRlbS5pY29uLm5hbWUubGVuZ3RoID4gMAogICAgICAgICAgICAgICAgaWNvblNldCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0ljb25zLyN7Y2VsbC5pdGVtLmljb24ubmFtZX0iKQogICAgICAgICAgICAgICAgQGRyYXdJY29uKGljb25TZXQsIGNlbGwuaXRlbS5pY29uUGF0dGVybiwgeC04LCB5KQogICAgICAgICAgICAgICAgb2Zmc2V0ID0gMjggKiBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4K29mZnNldCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tjZWxsLml0ZW0ubmFtZX0iLCAwKSAKICAgICAgICAgICAgaWYgQG1vZGUgPT0gMAogICAgICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgtNCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tjZWxsLnByaWNlfSBHIiwgMikKICAgICAgICAgICAgZWxzZQogICAgICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgtNCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tjZWxsLmNvdW50fXgiLCAyKQogICAgICAgICAgICAKd2luZG93LldpbmRvd19CdXlJdGVtcyA9IFdpbmRvd19CdXlJdGVtcw==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfQnV5SXRlbXMsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfQnV5SXRlbXMgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X0J1eUl0ZW1zLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19CdXlJdGVtcyh4LCB5LCBjb2x1bW5Db3VudCwgcm93cywgY29sdW1uV2lkdGgsIGNvbHVtbkhlaWdodCwgdmlld3BvcnQpIHsKICAgICAgV2luZG93X0J1eUl0ZW1zLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIGNvbHVtbkNvdW50LCByb3dzLCBjb2x1bW5XaWR0aCwgY29sdW1uSGVpZ2h0LCB2aWV3cG9ydCk7CiAgICAgIHRoaXMubW9kZSA9IDA7CiAgICB9CgogICAgV2luZG93X0J1eUl0ZW1zLnByb3RvdHlwZS52YWxpZGF0ZUNlbGwgPSBmdW5jdGlvbih4LCB5LCBjZWxsKSB7CiAgICAgIHZhciByZXN1bHQ7CiAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICBpZiAodGhpcy5tb2RlID09PSAwKSB7CiAgICAgICAgcmVzdWx0ID0gR2FtZU1hbmFnZXIubW9uZXkgPj0gY2VsbC5wcmljZTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXN1bHQgPSAoY2VsbC5lbXB0eSA9PSBudWxsKSAmJiBjZWxsLmNvdW50ID4gMDsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKCiAgICBXaW5kb3dfQnV5SXRlbXMucHJvdG90eXBlLmRyYXdDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCwgZW5hYmxlZCkgewogICAgICB2YXIgaWNvblNldCwgb2Zmc2V0OwogICAgICBpZiAoIWNlbGwuZW1wdHkpIHsKICAgICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICAgIHRoaXMuY29udGVudHMuZm9udC5jb2xvciA9IGVuYWJsZWQgPyBDb2xvcnMuRU5BQkxFRF9JVEVNIDogQ29sb3JzLkRJU0FCTEVEX0lURU07CiAgICAgICAgb2Zmc2V0ID0gMDsKICAgICAgICBpZiAoKGNlbGwuaXRlbS5pY29uICE9IG51bGwpICYmIGNlbGwuaXRlbS5pY29uLm5hbWUubGVuZ3RoID4gMCkgewogICAgICAgICAgaWNvblNldCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0ljb25zLyIgKyBjZWxsLml0ZW0uaWNvbi5uYW1lKTsKICAgICAgICAgIHRoaXMuZHJhd0ljb24oaWNvblNldCwgY2VsbC5pdGVtLmljb25QYXR0ZXJuLCB4IC0gOCwgeSk7CiAgICAgICAgICBvZmZzZXQgPSAyOCAqIFdpbmRvd19CYXNlLnNjYWxlOwogICAgICAgIH0KICAgICAgICB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KHggKyBvZmZzZXQsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCAiIiArIGNlbGwuaXRlbS5uYW1lLCAwKTsKICAgICAgICBpZiAodGhpcy5tb2RlID09PSAwKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4IC0gNCwgeSwgdGhpcy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5IZWlnaHQsICIiICsgY2VsbC5wcmljZSArICIgRyIsIDIpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4IC0gNCwgeSwgdGhpcy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5IZWlnaHQsICIiICsgY2VsbC5jb3VudCArICJ4IiwgMik7CiAgICAgICAgfQogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dfQnV5SXRlbXM7CgogIH0pKFdpbmRvd19JdGVtcyk7CgogIHdpbmRvdy5XaW5kb3dfQnV5SXRlbXMgPSBXaW5kb3dfQnV5SXRlbXM7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_AmountSelection","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0Ftb3VudFNlbGVjdGlvbgojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0yOQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfQW1vdW50U2VsZWN0aW9uCiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIHRoZSBjdXJyZW50IG1vbmV5CiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfQW1vdW50U2VsZWN0aW9uIGV4dGVuZHMgV2luZG93X01vZGFsQmFzZSAgICAKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSkgLT4KICAgICAgICBzdXBlcih4IHx8IE1hdGguZmxvb3IoKEdyYXBoaWNzLndpZHRoIC0gMjI0KSAvIDIpLCB5IHx8IE1hdGguZmxvb3IoKEdyYXBoaWNzLmhlaWdodCAtIDQ1KSAvIDIpLCAyMjQsIDQ0KldpbmRvd19CYXNlLnNjYWxlKQogICAgICAgIHMgPSBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgIEBjb250ZW50cyA9IG5ldyBCaXRtYXAoQHdpZHRoIC0gQHBhZGRpbmcqMiwgQGhlaWdodCAtIEBwYWRkaW5nKjIpCiAgICAgICAgQGNvbnRlbnRzLmZvbnQgPSBAbmFtZUZvbnQKICAgICAgICBAYW1vdW50ID0gMQogICAgICAgIEB2YWx1ZSA9IDAKICAgICAgICBAbWF4VmFsdWUgPSAwCiAgICAgICAgQGJhY2tPcGFjaXR5ID0gMjU1CiAgICAgICAgQGN1cnNvclJlY3QgPSBuZXcgUmVjdCgoQGNvbnRlbnRzLndpZHRoIC0gNDAqcykgLyAyLCAwLCA0MCpzLCAyMCpzKQogICAgICAgIEBub01vbmV5ID0gbm8KICAgICAgICBAYWN0aXZlID0gbm8KICAgIHJlZHJhdzogLT4KICAgICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBob3dNdWNoU3RyaW5nID0gbGNzKFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeS5zaG9wTWVudS5ob3dNdWNoKQogICAgICAgIGN1ciA9IGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2hvcE1lbnUuY3VycmVuY3kpCiAgICAgICAgdGV4dFNpemUgPSBAY29udGVudHMudGV4dFNpemUoaG93TXVjaFN0cmluZykKICAgICAgICBAY29udGVudHMuY2xlYXIoKQogICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCgwLCAwLCBAY29udGVudHMud2lkdGgsIEBjb250ZW50cy5oZWlnaHQsIGhvd011Y2hTdHJpbmcsIDApCiAgICAgICAgCiAgICAgICAgaWYgQG5vTW9uZXkKICAgICAgICAgICAgQGN1cnNvclJlY3Quc2V0KEBjb250ZW50cy53aWR0aCAtIDYwKnMsIDAsIDYwKnMsIDIwKnMpCiAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCgwLCAwLCBAY29udGVudHMud2lkdGgsIEBjb250ZW50cy5oZWlnaHQsICIje0BhbW91bnR9eCIsIDIpCiAgICAgICAgZWxzZQogICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoMCwgMCwgQGNvbnRlbnRzLndpZHRoLCBAY29udGVudHMuaGVpZ2h0LCAiI3tAYW1vdW50fXgiLCAxKQogICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoMCwgMCwgQGNvbnRlbnRzLndpZHRoLCBAY29udGVudHMuaGVpZ2h0LCAiI3tAdmFsdWUgKiBAYW1vdW50fSAje2N1cn0iLCAyKQogICAgICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIGlmIG5vdCBAYWN0aXZlIHRoZW4gcmV0dXJuCiAgICAgICAgCiAgICAgICAgaWYgQHZhbHVlID09IDAKICAgICAgICAgICAgbWF4ID0gOTkKICAgICAgICBlbHNlCiAgICAgICAgICAgIG1heCA9IE1hdGgubWluKE1hdGguZmxvb3IoQG1heFZhbHVlIC8gQHZhbHVlKSwgOTkpCiAgICAgICAgICAgIAogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuTEVGVCkKICAgICAgICAgICAgQGFtb3VudCA9IE1hdGgubWF4KEBhbW91bnQgLSAxLCAxKQogICAgICAgICAgICBAcmVkcmF3KCkKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LlJJR0hUKQogICAgICAgICAgICBAYW1vdW50ID0gTWF0aC5taW4oQGFtb3VudCArIDEsIG1heCkKICAgICAgICAgICAgQHJlZHJhdygpCiAgICAgICAgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5VUCkKICAgICAgICAgICAgQGFtb3VudCA9IE1hdGgubWluKEBhbW91bnQgKyAxMCwgbWF4KQogICAgICAgICAgICBAcmVkcmF3KCkKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LkRPV04pCiAgICAgICAgICAgIEBhbW91bnQgPSBNYXRoLm1heChAYW1vdW50IC0gMTAsIDEpICAgCiAgICAgICAgICAgIEByZWRyYXcoKQogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuQykKICAgICAgICAgICAgQGFjY2VwdCgpCiAgICAgICAgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5CKQogICAgICAgICAgICBAY2FuY2VsKCkKICAgICAgICAgICAgCiAgICAgICAgc3VwZXIKICAgICAgICAKd2luZG93LldpbmRvd19BbW91bnRTZWxlY3Rpb24gPSBXaW5kb3dfQW1vdW50U2VsZWN0aW9u","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfQW1vdW50U2VsZWN0aW9uLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X0Ftb3VudFNlbGVjdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfQW1vdW50U2VsZWN0aW9uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19BbW91bnRTZWxlY3Rpb24oeCwgeSkgewogICAgICB2YXIgczsKICAgICAgV2luZG93X0Ftb3VudFNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4IHx8IE1hdGguZmxvb3IoKEdyYXBoaWNzLndpZHRoIC0gMjI0KSAvIDIpLCB5IHx8IE1hdGguZmxvb3IoKEdyYXBoaWNzLmhlaWdodCAtIDQ1KSAvIDIpLCAyMjQsIDQ0ICogV2luZG93X0Jhc2Uuc2NhbGUpOwogICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLmFtb3VudCA9IDE7CiAgICAgIHRoaXMudmFsdWUgPSAwOwogICAgICB0aGlzLm1heFZhbHVlID0gMDsKICAgICAgdGhpcy5iYWNrT3BhY2l0eSA9IDI1NTsKICAgICAgdGhpcy5jdXJzb3JSZWN0ID0gbmV3IFJlY3QoKHRoaXMuY29udGVudHMud2lkdGggLSA0MCAqIHMpIC8gMiwgMCwgNDAgKiBzLCAyMCAqIHMpOwogICAgICB0aGlzLm5vTW9uZXkgPSBmYWxzZTsKICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgIH0KCiAgICBXaW5kb3dfQW1vdW50U2VsZWN0aW9uLnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGN1ciwgaG93TXVjaFN0cmluZywgcywgdGV4dFNpemU7CiAgICAgIHMgPSBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgaG93TXVjaFN0cmluZyA9IGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2hvcE1lbnUuaG93TXVjaCk7CiAgICAgIGN1ciA9IGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2hvcE1lbnUuY3VycmVuY3kpOwogICAgICB0ZXh0U2l6ZSA9IHRoaXMuY29udGVudHMudGV4dFNpemUoaG93TXVjaFN0cmluZyk7CiAgICAgIHRoaXMuY29udGVudHMuY2xlYXIoKTsKICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCgwLCAwLCB0aGlzLmNvbnRlbnRzLndpZHRoLCB0aGlzLmNvbnRlbnRzLmhlaWdodCwgaG93TXVjaFN0cmluZywgMCk7CiAgICAgIGlmICh0aGlzLm5vTW9uZXkpIHsKICAgICAgICB0aGlzLmN1cnNvclJlY3Quc2V0KHRoaXMuY29udGVudHMud2lkdGggLSA2MCAqIHMsIDAsIDYwICogcywgMjAgKiBzKTsKICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCgwLCAwLCB0aGlzLmNvbnRlbnRzLndpZHRoLCB0aGlzLmNvbnRlbnRzLmhlaWdodCwgIiIgKyB0aGlzLmFtb3VudCArICJ4IiwgMik7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCgwLCAwLCB0aGlzLmNvbnRlbnRzLndpZHRoLCB0aGlzLmNvbnRlbnRzLmhlaWdodCwgIiIgKyB0aGlzLmFtb3VudCArICJ4IiwgMSk7CiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoMCwgMCwgdGhpcy5jb250ZW50cy53aWR0aCwgdGhpcy5jb250ZW50cy5oZWlnaHQsICIiICsgKHRoaXMudmFsdWUgKiB0aGlzLmFtb3VudCkgKyAiICIgKyBjdXIsIDIpOwogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd19BbW91bnRTZWxlY3Rpb24ucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWF4OwogICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7CiAgICAgICAgcmV0dXJuOwogICAgICB9CiAgICAgIGlmICh0aGlzLnZhbHVlID09PSAwKSB7CiAgICAgICAgbWF4ID0gOTk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgbWF4ID0gTWF0aC5taW4oTWF0aC5mbG9vcih0aGlzLm1heFZhbHVlIC8gdGhpcy52YWx1ZSksIDk5KTsKICAgICAgfQogICAgICBpZiAoSW5wdXQudHJpZ2dlcihJbnB1dC5MRUZUKSkgewogICAgICAgIHRoaXMuYW1vdW50ID0gTWF0aC5tYXgodGhpcy5hbW91bnQgLSAxLCAxKTsKICAgICAgICB0aGlzLnJlZHJhdygpOwogICAgICB9CiAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LlJJR0hUKSkgewogICAgICAgIHRoaXMuYW1vdW50ID0gTWF0aC5taW4odGhpcy5hbW91bnQgKyAxLCBtYXgpOwogICAgICAgIHRoaXMucmVkcmF3KCk7CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuVVApKSB7CiAgICAgICAgdGhpcy5hbW91bnQgPSBNYXRoLm1pbih0aGlzLmFtb3VudCArIDEwLCBtYXgpOwogICAgICAgIHRoaXMucmVkcmF3KCk7CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuRE9XTikpIHsKICAgICAgICB0aGlzLmFtb3VudCA9IE1hdGgubWF4KHRoaXMuYW1vdW50IC0gMTAsIDEpOwogICAgICAgIHRoaXMucmVkcmF3KCk7CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuQykpIHsKICAgICAgICB0aGlzLmFjY2VwdCgpOwogICAgICB9CiAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LkIpKSB7CiAgICAgICAgdGhpcy5jYW5jZWwoKTsKICAgICAgfQogICAgICByZXR1cm4gV2luZG93X0Ftb3VudFNlbGVjdGlvbi5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dfQW1vdW50U2VsZWN0aW9uOwoKICB9KShXaW5kb3dfTW9kYWxCYXNlKTsKCiAgd2luZG93LldpbmRvd19BbW91bnRTZWxlY3Rpb24gPSBXaW5kb3dfQW1vdW50U2VsZWN0aW9uOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Window_Skills","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1NraWxscwojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0yNAojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfU2tpbGxzCiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIGEgdGV4dC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19Ta2lsbHMgZXh0ZW5kcyBXaW5kb3dfU2VsZWN0aW9uICAgICAgICAKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgY29sdW1uQ291bnQsIHJvd3MsIGNvbHVtbldpZHRoLCBjb2x1bW5IZWlnaHQsIHZpZXdwb3J0KSAtPgogICAgICAgIHN1cGVyKHgsIHksIGNvbHVtbkNvdW50LCByb3dzLCBjb2x1bW5XaWR0aCwgY29sdW1uSGVpZ2h0LCB2aWV3cG9ydCkKICAgICAgICBAdHlwZSA9IDAKICAgICAgICBAbWVtYmVyID0gbnVsbAogICAgZHJhd0NlbGw6ICh4LCB5LCBjZWxsKSAtPgogICAgICAgIEBjb250ZW50cy5mb250ID0gQG5hbWVGb250CiAgICAgICAgCiAgICAgICAgb2Zmc2V0ID0gMAogICAgICAgICAgICAKICAgICAgICBpZiBjZWxsLmljb24/IGFuZCBjZWxsLmljb24ubmFtZS5sZW5ndGggPiAwCiAgICAgICAgICAgIGljb25TZXQgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9JY29ucy8je2NlbGwuaWNvbi5uYW1lfSIpCiAgICAgICAgICAgIEBkcmF3SWNvbihpY29uU2V0LCBjZWxsLmljb25QYXR0ZXJuLCB4LTgsIHkpCiAgICAgICAgICAgIG9mZnNldCA9IDI4CiAgICAgICAgICAgICAgICAKICAgICAgICBAY29udGVudHMuZHJhd1RleHQoeCtvZmZzZXQsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgIiN7Y2VsbC5uYW1lfSIsIDApIAogICAgICAgIAogICAgICAgIGlmIGNlbGwubXBDb3N0ID4gMAogICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoeC0yLCB5LCBAY29sdW1uV2lkdGgsIEBjb2x1bW5IZWlnaHQsICIje2NlbGwubXBDb3N0fSIsIDIpIAogICAgICAgICAgICAKICAgIHZhbGlkYXRlQ2VsbDogKHgsIHksIGNlbGwpIC0+CiAgICAgICAgaWYgY2VsbC5lbXB0eSB0aGVuIHJldHVybiBubwogICAgICAgIAogICAgICAgIHJlc3VsdCA9IHllcwogICAgICAgIHNraWxsID0gY2VsbAogICAgICAgIGNvbnNvbGUubG9nKHNraWxsKQogICAgICAgIHN3aXRjaCBza2lsbC5vY2Nhc2lvbgogICAgICAgICAgICB3aGVuIDAgIyBBbHdheXMKICAgICAgICAgICAgICAgIHJlc3VsdCA9IHllcwogICAgICAgICAgICB3aGVuIDEgIyBPbmx5IGluIEJhdHRsZQogICAgICAgICAgICAgICAgcmVzdWx0ID0gU2NlbmVNYW5hZ2VyLnNjZW5lIGluc3RhbmNlb2YgU2NlbmVfQmF0dGxlCiAgICAgICAgICAgIHdoZW4gMiAjIE9ubHkgZnJvbSBNZW51CiAgICAgICAgICAgICAgICByZXN1bHQgPSBTY2VuZU1hbmFnZXIuc2NlbmUgaW5zdGFuY2VvZiBTY2VuZV9NYWluTWVudQogICAgICAgICAgICB3aGVuIDMgIyBOZXZlcgogICAgICAgICAgICAgICAgcmVzdWx0ID0gbm8KICAgICAgICAgICAgICAgIAogICAgICAgIGlmIHJlc3VsdCAKICAgICAgICAgICAgcmVzdWx0ID0gKHNraWxsLnNjb3BlID49IDEgYW5kIHNraWxsLnNjb3BlIDw9IDYpCiAgICAgICAgCiAgICAgICAgaWYgcmVzdWx0CiAgICAgICAgICAgIHJlc3VsdCA9IHNraWxsLm1wQ29zdCA9PSAwIG9yIChAbWVtYmVyLmlzQWxpdmUgYW5kIEBtZW1iZXIubXAgPj0gc2tpbGwubXBDb3N0KQogICAgICAgICAgICAKICAgICAgICBpZiByZXN1bHQgYW5kIHNraWxsLndlYXBvblR5cGVJZDEgPiAwCiAgICAgICAgICAgIHJlc3VsdCA9IEBtZW1iZXIud2VhcG9uVHlwZXNbc2tpbGwud2VhcG9uVHlwZUlkMS0xXT8KICAgICAgICAKICAgICAgICBpZiByZXN1bHQgYW5kIHNraWxsLndlYXBvblR5cGVJZDIgPiAwCiAgICAgICAgICAgIHJlc3VsdCA9IEBtZW1iZXIud2VhcG9uVHlwZXNbc2tpbGwud2VhcG9uVHlwZUlkMi0xXT8KICAgICAgICAgICAgCiAgICAgCiAgICAgICAgICAgIAogICAgICAgIHJldHVybiByZXN1bHQKICAgICAgICAKICAgIHJlYnVpbGRSb3dzOiAtPgogICAgICAgIGl0ZW1zID0gbnVsbAogICAgICAgIGN1cnJlbnRJdGVtcyA9IFtdCiAgICAgICAgcm93cyA9IFtdCiAgICAgICAgcm93ID0gMAogICAgICAgIGNvbHVtbiA9IDAKICAgICAgICAKICAgICAgICBpdGVtcyA9IEBtZW1iZXIuc2tpbGxzW0B0eXBlXQogICAgICAgIGNvbnNvbGUubG9nKGl0ZW1zKQogICAgICAgIGlmIGl0ZW1zPwogICAgICAgICAgICBmb3IgaSBpbiBbMC4uLml0ZW1zLmxlbmd0aF0KICAgICAgICAgICAgICAgIGlmIGl0ZW1zW2ldPwogICAgICAgICAgICAgICAgICAgIGN1cnJlbnRJdGVtcy5wdXNoKGl0ZW1zW2ldKQogICAgICAgICAgICAgICAgCiAgICAgICAgZm9yIGkgaW4gWzAuLi5jdXJyZW50SXRlbXMubGVuZ3RoXSAgICAgICAgCiAgICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIDIpCiAgICAgICAgICAgIGNvbHVtbiA9IGkgJSAyCiAgICAgICAgICAgIGlmIG5vdCByb3dzW3Jvd10/IHRoZW4gcm93c1tyb3ddID0gW10KICAgICAgICAgICAgcm93c1tyb3ddW2NvbHVtbl0gPSBjdXJyZW50SXRlbXNbaV0KICAgICAgICAgICAgCiAKICAgICAgICAgICAgCiAgICAgICAgQHJvd3MgPSByb3dzCiAgICAgICAgCiAgICAgICAgY29uc29sZS5sb2coQHJvd3MpCgogICAgICAgIAp3aW5kb3cuV2luZG93X1NraWxscyA9IFdpbmRvd19Ta2lsbHM=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfU2tpbGxzLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X1NraWxscyA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfU2tpbGxzLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19Ta2lsbHMoeCwgeSwgY29sdW1uQ291bnQsIHJvd3MsIGNvbHVtbldpZHRoLCBjb2x1bW5IZWlnaHQsIHZpZXdwb3J0KSB7CiAgICAgIFdpbmRvd19Ta2lsbHMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgeCwgeSwgY29sdW1uQ291bnQsIHJvd3MsIGNvbHVtbldpZHRoLCBjb2x1bW5IZWlnaHQsIHZpZXdwb3J0KTsKICAgICAgdGhpcy50eXBlID0gMDsKICAgICAgdGhpcy5tZW1iZXIgPSBudWxsOwogICAgfQoKICAgIFdpbmRvd19Ta2lsbHMucHJvdG90eXBlLmRyYXdDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCkgewogICAgICB2YXIgaWNvblNldCwgb2Zmc2V0OwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICBvZmZzZXQgPSAwOwogICAgICBpZiAoKGNlbGwuaWNvbiAhPSBudWxsKSAmJiBjZWxsLmljb24ubmFtZS5sZW5ndGggPiAwKSB7CiAgICAgICAgaWNvblNldCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0ljb25zLyIgKyBjZWxsLmljb24ubmFtZSk7CiAgICAgICAgdGhpcy5kcmF3SWNvbihpY29uU2V0LCBjZWxsLmljb25QYXR0ZXJuLCB4IC0gOCwgeSk7CiAgICAgICAgb2Zmc2V0ID0gMjg7CiAgICAgIH0KICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4ICsgb2Zmc2V0LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgIiIgKyBjZWxsLm5hbWUsIDApOwogICAgICBpZiAoY2VsbC5tcENvc3QgPiAwKSB7CiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCAtIDIsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCAiIiArIGNlbGwubXBDb3N0LCAyKTsKICAgICAgfQogICAgfTsKCiAgICBXaW5kb3dfU2tpbGxzLnByb3RvdHlwZS52YWxpZGF0ZUNlbGwgPSBmdW5jdGlvbih4LCB5LCBjZWxsKSB7CiAgICAgIHZhciByZXN1bHQsIHNraWxsOwogICAgICBpZiAoY2VsbC5lbXB0eSkgewogICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgfQogICAgICByZXN1bHQgPSB0cnVlOwogICAgICBza2lsbCA9IGNlbGw7CiAgICAgIGNvbnNvbGUubG9nKHNraWxsKTsKICAgICAgc3dpdGNoIChza2lsbC5vY2Nhc2lvbikgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHJlc3VsdCA9IHRydWU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICByZXN1bHQgPSBTY2VuZU1hbmFnZXIuc2NlbmUgaW5zdGFuY2VvZiBTY2VuZV9CYXR0bGU7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICByZXN1bHQgPSBTY2VuZU1hbmFnZXIuc2NlbmUgaW5zdGFuY2VvZiBTY2VuZV9NYWluTWVudTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHJlc3VsdCA9IGZhbHNlOwogICAgICB9CiAgICAgIGlmIChyZXN1bHQpIHsKICAgICAgICByZXN1bHQgPSBza2lsbC5zY29wZSA+PSAxICYmIHNraWxsLnNjb3BlIDw9IDY7CiAgICAgIH0KICAgICAgaWYgKHJlc3VsdCkgewogICAgICAgIHJlc3VsdCA9IHNraWxsLm1wQ29zdCA9PT0gMCB8fCAodGhpcy5tZW1iZXIuaXNBbGl2ZSAmJiB0aGlzLm1lbWJlci5tcCA+PSBza2lsbC5tcENvc3QpOwogICAgICB9CiAgICAgIGlmIChyZXN1bHQgJiYgc2tpbGwud2VhcG9uVHlwZUlkMSA+IDApIHsKICAgICAgICByZXN1bHQgPSB0aGlzLm1lbWJlci53ZWFwb25UeXBlc1tza2lsbC53ZWFwb25UeXBlSWQxIC0gMV0gIT0gbnVsbDsKICAgICAgfQogICAgICBpZiAocmVzdWx0ICYmIHNraWxsLndlYXBvblR5cGVJZDIgPiAwKSB7CiAgICAgICAgcmVzdWx0ID0gdGhpcy5tZW1iZXIud2VhcG9uVHlwZXNbc2tpbGwud2VhcG9uVHlwZUlkMiAtIDFdICE9IG51bGw7CiAgICAgIH0KICAgICAgcmV0dXJuIHJlc3VsdDsKICAgIH07CgogICAgV2luZG93X1NraWxscy5wcm90b3R5cGUucmVidWlsZFJvd3MgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbHVtbiwgY3VycmVudEl0ZW1zLCBpLCBpdGVtcywgcm93LCByb3dzLCBfaSwgX2osIF9yZWYsIF9yZWYxOwogICAgICBpdGVtcyA9IG51bGw7CiAgICAgIGN1cnJlbnRJdGVtcyA9IFtdOwogICAgICByb3dzID0gW107CiAgICAgIHJvdyA9IDA7CiAgICAgIGNvbHVtbiA9IDA7CiAgICAgIGl0ZW1zID0gdGhpcy5tZW1iZXIuc2tpbGxzW3RoaXMudHlwZV07CiAgICAgIGNvbnNvbGUubG9nKGl0ZW1zKTsKICAgICAgaWYgKGl0ZW1zICE9IG51bGwpIHsKICAgICAgICBmb3IgKGkgPSBfaSA9IDAsIF9yZWYgPSBpdGVtcy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgICBpZiAoaXRlbXNbaV0gIT0gbnVsbCkgewogICAgICAgICAgICBjdXJyZW50SXRlbXMucHVzaChpdGVtc1tpXSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIGZvciAoaSA9IF9qID0gMCwgX3JlZjEgPSBjdXJyZW50SXRlbXMubGVuZ3RoOyAwIDw9IF9yZWYxID8gX2ogPCBfcmVmMSA6IF9qID4gX3JlZjE7IGkgPSAwIDw9IF9yZWYxID8gKytfaiA6IC0tX2opIHsKICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyAyKTsKICAgICAgICBjb2x1bW4gPSBpICUgMjsKICAgICAgICBpZiAocm93c1tyb3ddID09IG51bGwpIHsKICAgICAgICAgIHJvd3Nbcm93XSA9IFtdOwogICAgICAgIH0KICAgICAgICByb3dzW3Jvd11bY29sdW1uXSA9IGN1cnJlbnRJdGVtc1tpXTsKICAgICAgfQogICAgICB0aGlzLnJvd3MgPSByb3dzOwogICAgICByZXR1cm4gY29uc29sZS5sb2codGhpcy5yb3dzKTsKICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19Ta2lsbHM7CgogIH0pKFdpbmRvd19TZWxlY3Rpb24pOwoKICB3aW5kb3cuV2luZG93X1NraWxscyA9IFdpbmRvd19Ta2lsbHM7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_SkillType","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1NraWxsVHlwZQojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0yNAojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfU2tpbGxUeXBlCiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIGEgdGV4dC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19Ta2lsbFR5cGUgZXh0ZW5kcyBXaW5kb3dfU2VsZWN0aW9uICAgICAgICAKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgdmlld3BvcnQsIHdpZHRoKSAtPgogICAgICAgIHdpZHRoID0gd2lkdGggfHwgKDQxNipXaW5kb3dfQmFzZS5zY2FsZSkKICAgICAgICBzdXBlcih4LCB5LCA0LCBbXSwgTWF0aC5mbG9vcih3aWR0aCAvIDQpIC0gNiAqIFdpbmRvd19CYXNlLnNjYWxlLCAyMCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCkKICAgICAgICBAdHlwZSA9IDAKICAgICAgICBAbWVtYmVyID0gbnVsbAogICAgICAgIEBjb250ZW50cy5mb250ID0gQG5hbWVGb250CiAgICBkcmF3Q2VsbDogKHgsIHksIGNlbGwpIC0+CiAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgIiN7Y2VsbC5uYW1lfSIsIDApIAogICAgICAgIAp3aW5kb3cuV2luZG93X1NraWxsVHlwZSA9IFdpbmRvd19Ta2lsbFR5cGU=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfU2tpbGxUeXBlLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X1NraWxsVHlwZSA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfU2tpbGxUeXBlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19Ta2lsbFR5cGUoeCwgeSwgdmlld3BvcnQsIHdpZHRoKSB7CiAgICAgIHdpZHRoID0gd2lkdGggfHwgKDQxNiAqIFdpbmRvd19CYXNlLnNjYWxlKTsKICAgICAgV2luZG93X1NraWxsVHlwZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4LCB5LCA0LCBbXSwgTWF0aC5mbG9vcih3aWR0aCAvIDQpIC0gNiAqIFdpbmRvd19CYXNlLnNjYWxlLCAyMCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMudHlwZSA9IDA7CiAgICAgIHRoaXMubWVtYmVyID0gbnVsbDsKICAgICAgdGhpcy5jb250ZW50cy5mb250ID0gdGhpcy5uYW1lRm9udDsKICAgIH0KCiAgICBXaW5kb3dfU2tpbGxUeXBlLnByb3RvdHlwZS5kcmF3Q2VsbCA9IGZ1bmN0aW9uKHgsIHksIGNlbGwpIHsKICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCwgeSwgdGhpcy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5IZWlnaHQsICIiICsgY2VsbC5uYW1lLCAwKTsKICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19Ta2lsbFR5cGU7CgogIH0pKFdpbmRvd19TZWxlY3Rpb24pOwoKICB3aW5kb3cuV2luZG93X1NraWxsVHlwZSA9IFdpbmRvd19Ta2lsbFR5cGU7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_Equipment","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0VxdWlwbWVudAojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0yMgojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfRXF1aXBtZW50CiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIHRoZSBlcXVpcG1lbnQgb2YgYSBwYXJ0eSBtZW1iZXIKIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19FcXVpcG1lbnQgZXh0ZW5kcyBXaW5kb3dfU2VsZWN0aW9uICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHkpIC0+CiAgICAgICAgc3VwZXIoeCwgeSwgMSwgW1swXSwgWzFdLCBbMl0sIFszXSwgWzRdXSwgMjgyICogV2luZG93X0Jhc2Uuc2NhbGUsIDI4ICogV2luZG93X0Jhc2Uuc2NhbGUpCiAgICAgICAgQGhlaWdodCA9IDE4MCAqIFdpbmRvd19CYXNlLnNjYWxlCiAgICAgICAgQG1lbWJlciA9IG51bGwKICAgICAgICBAY29udGVudHMuZm9udCA9IEBuYW1lRm9udAogICAgICAgIEB2b2NhYiA9IFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeQogICAgICAgIEB3ZWFwb25TdHJpbmcgPSBsY3MoQHZvY2FiLmVxdWlwU2xvdHMud2VhcG9uKQogICAgICAgIEBzaGllbGRTdHJpbmcgPSBsY3MoQHZvY2FiLmVxdWlwU2xvdHMuc2hpZWxkKQogICAgICAgIEBoZWFkU3RyaW5nID0gbGNzKEB2b2NhYi5lcXVpcFNsb3RzLmhlYWRBcm1vcikKICAgICAgICBAYm9keVN0cmluZyA9IGxjcyhAdm9jYWIuZXF1aXBTbG90cy5ib2R5QXJtb3IpCiAgICAgICAgQGFjY2Vzc29yeVN0cmluZyA9IGxjcyhAdm9jYWIuZXF1aXBTbG90cy5hY2Nlc3NvcnkpCiAgICBkcmF3Q2VsbDogKHgsIHksIGNlbGwpIC0+CiAgICAgICAgc3dpdGNoIGNlbGwKICAgICAgICAgICAgd2hlbiAwCiAgICAgICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoeCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCBAd2VhcG9uU3RyaW5nLCAwKSAKICAgICAgICAgICAgICAgIGlmIEBtZW1iZXIud2VhcG9uPwogICAgICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LTQsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgIiN7QG1lbWJlci53ZWFwb24ubmFtZX0iLCAyKQogICAgICAgICAgICB3aGVuIDEKICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LCB5LCBAY29sdW1uV2lkdGgsIEBjb2x1bW5IZWlnaHQsIEBzaGllbGRTdHJpbmcsIDApIAogICAgICAgICAgICAgICAgaWYgQG1lbWJlci5zaGllbGQ/CiAgICAgICAgICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgtNCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tAbWVtYmVyLnNoaWVsZC5uYW1lfSIsIDIpCiAgICAgICAgICAgIHdoZW4gMgogICAgICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgQGhlYWRTdHJpbmcsIDApIAogICAgICAgICAgICAgICAgaWYgQG1lbWJlci5oZWFkPwogICAgICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LTQsIHksIEBjb2x1bW5XaWR0aCwgQGNvbHVtbkhlaWdodCwgIiN7QG1lbWJlci5oZWFkLm5hbWV9IiwgMikKICAgICAgICAgICAgd2hlbiAzCiAgICAgICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoeCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCBAYm9keVN0cmluZywgMCkgCiAgICAgICAgICAgICAgICBpZiBAbWVtYmVyLmJvZHk/CiAgICAgICAgICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgtNCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tAbWVtYmVyLmJvZHkubmFtZX0iLCAyKQogICAgICAgICAgICB3aGVuIDQKICAgICAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCh4LCB5LCBAY29sdW1uV2lkdGgsIEBjb2x1bW5IZWlnaHQsIEBhY2Nlc3NvcnlTdHJpbmcsIDApIAogICAgICAgICAgICAgICAgaWYgQG1lbWJlci5hY2Nlc3Nvcnk/CiAgICAgICAgICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KHgtNCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tAbWVtYmVyLmFjY2Vzc29yeS5uYW1lfSIsIDIpICAgICAgICAgICAgICAgICAgICAKICAgICAgICAKd2luZG93LldpbmRvd19FcXVpcG1lbnQgPSBXaW5kb3dfRXF1aXBtZW50","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfRXF1aXBtZW50LAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X0VxdWlwbWVudCA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfRXF1aXBtZW50LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19FcXVpcG1lbnQoeCwgeSkgewogICAgICBXaW5kb3dfRXF1aXBtZW50Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIDEsIFtbMF0sIFsxXSwgWzJdLCBbM10sIFs0XV0sIDI4MiAqIFdpbmRvd19CYXNlLnNjYWxlLCAyOCAqIFdpbmRvd19CYXNlLnNjYWxlKTsKICAgICAgdGhpcy5oZWlnaHQgPSAxODAgKiBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgdGhpcy5tZW1iZXIgPSBudWxsOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLnZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5OwogICAgICB0aGlzLndlYXBvblN0cmluZyA9IGxjcyh0aGlzLnZvY2FiLmVxdWlwU2xvdHMud2VhcG9uKTsKICAgICAgdGhpcy5zaGllbGRTdHJpbmcgPSBsY3ModGhpcy52b2NhYi5lcXVpcFNsb3RzLnNoaWVsZCk7CiAgICAgIHRoaXMuaGVhZFN0cmluZyA9IGxjcyh0aGlzLnZvY2FiLmVxdWlwU2xvdHMuaGVhZEFybW9yKTsKICAgICAgdGhpcy5ib2R5U3RyaW5nID0gbGNzKHRoaXMudm9jYWIuZXF1aXBTbG90cy5ib2R5QXJtb3IpOwogICAgICB0aGlzLmFjY2Vzc29yeVN0cmluZyA9IGxjcyh0aGlzLnZvY2FiLmVxdWlwU2xvdHMuYWNjZXNzb3J5KTsKICAgIH0KCiAgICBXaW5kb3dfRXF1aXBtZW50LnByb3RvdHlwZS5kcmF3Q2VsbCA9IGZ1bmN0aW9uKHgsIHksIGNlbGwpIHsKICAgICAgc3dpdGNoIChjZWxsKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgdGhpcy53ZWFwb25TdHJpbmcsIDApOwogICAgICAgICAgaWYgKHRoaXMubWVtYmVyLndlYXBvbiAhPSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KHggLSA0LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgIiIgKyB0aGlzLm1lbWJlci53ZWFwb24ubmFtZSwgMik7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KHgsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCB0aGlzLnNoaWVsZFN0cmluZywgMCk7CiAgICAgICAgICBpZiAodGhpcy5tZW1iZXIuc2hpZWxkICE9IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCAtIDQsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCAiIiArIHRoaXMubWVtYmVyLnNoaWVsZC5uYW1lLCAyKTsKICAgICAgICAgIH0KICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCwgeSwgdGhpcy5jb2x1bW5XaWR0aCwgdGhpcy5jb2x1bW5IZWlnaHQsIHRoaXMuaGVhZFN0cmluZywgMCk7CiAgICAgICAgICBpZiAodGhpcy5tZW1iZXIuaGVhZCAhPSBudWxsKSB7CiAgICAgICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KHggLSA0LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgIiIgKyB0aGlzLm1lbWJlci5oZWFkLm5hbWUsIDIpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAzOgogICAgICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgdGhpcy5ib2R5U3RyaW5nLCAwKTsKICAgICAgICAgIGlmICh0aGlzLm1lbWJlci5ib2R5ICE9IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCAtIDQsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCAiIiArIHRoaXMubWVtYmVyLmJvZHkubmFtZSwgMik7CiAgICAgICAgICB9CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KHgsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCB0aGlzLmFjY2Vzc29yeVN0cmluZywgMCk7CiAgICAgICAgICBpZiAodGhpcy5tZW1iZXIuYWNjZXNzb3J5ICE9IG51bGwpIHsKICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCAtIDQsIHksIHRoaXMuY29sdW1uV2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCAiIiArIHRoaXMubWVtYmVyLmFjY2Vzc29yeS5uYW1lLCAyKTsKICAgICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gV2luZG93X0VxdWlwbWVudDsKCiAgfSkoV2luZG93X1NlbGVjdGlvbik7CgogIHdpbmRvdy5XaW5kb3dfRXF1aXBtZW50ID0gV2luZG93X0VxdWlwbWVudDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_SaveGame","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1NraWxsVHlwZQojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0yNgojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfU2F2ZUdhbWUKIwojICAgQSB3aW5kb3cgd2hpY2ggZGlzcGxheXMgYSB0ZXh0LgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93X1NhdmVHYW1lIGV4dGVuZHMgV2luZG93X0Jhc2UgICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHkpIC0+CiAgICAgICAgc3VwZXIoeCwgeSwgNDY2ICogV2luZG93X0Jhc2Uuc2NhbGUsIDEwOCAqIFdpbmRvd19CYXNlLnNjYWxlKQogICAgICAgIEB0eXBlID0gMAogICAgICAgIEBtZW1iZXIgPSBudWxsCiAgICAgICAgQGNvbnRlbnRzID0gbmV3IEJpdG1hcChAd2lkdGggLSBAcGFkZGluZyoyLCBAaGVpZ2h0IC0gQHBhZGRpbmcqMikKICAgICAgICBAY29udGVudHMuZm9udCA9IEBuYW1lRm9udAogICAgICAgIEBzYXZlR2FtZSA9IG51bGwKICAgICAgICBAYWN0aXZlID0geWVzCiAgICAgICAgQHNsb3QgPSAwCiAgICByZWRyYXc6IC0+CiAgICAgICAgQGNvbnRlbnRzLmNsZWFyKCkKICAgICAgICBAc2F2ZUdhbWUgPSBHYW1lTWFuYWdlci5nZXRTYXZlR2FtZShAc2xvdCkKICAgICAgICB2b2NhYiA9IGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2F2ZUdhbWVNZW51KQogICAgICAgIGZpbGUgPSBsY3Modm9jYWIuZmlsZSkKICAgICAgICB0ZXh0U2l6ZSA9IEBjb250ZW50cy50ZXh0U2l6ZShmaWxlLnJlcGxhY2UoIntzbG90fSIsICIxIikpCiAgICAgICAgc2NhbGUgPSBXaW5kb3dfQmFzZS5zY2FsZQoKICAgICAgICBjaGFyYWN0ZXJTaXplID0gbnVsbAogICAgICAgIG1lbWJlciA9IG51bGwKICAgICAgICBAY29udGVudHMuZHJhd1RleHQoNCpzY2FsZSwgMCpzY2FsZSwgQGNvbnRlbnRzLndpZHRoLCB0ZXh0U2l6ZS5oZWlnaHQsIGZpbGUucmVwbGFjZSgie3Nsb3R9IiwgQHNsb3QrMSkpCiAgICAgICAgCiAgICAgICAgaWYgQHNhdmVHYW1lIGFuZCBAc2F2ZUdhbWUucGFydHk/CiAgICAgICAgICAgIG1pbnV0ZXMgPSBNYXRoLmZsb29yKEBzYXZlR2FtZS5mcmFtZUNvdW50IC8gNjAgLyA2MCkKICAgICAgICAgICAgaG91cnMgPSBNYXRoLmZsb29yKG1pbnV0ZXMgLyA2MCkKICAgICAgICAgICAgdGltZVN0cmluZyA9IGxjcyh2b2NhYi50aW1lKS5yZXBsYWNlKCJ7aH0iLCBob3VycykucmVwbGFjZSgie21pbn0iLCBtaW51dGVzKQogICAgICAgICAgICBtb25leVN0cmluZyA9IGxjcyh2b2NhYi5tb25leSkucmVwbGFjZSgie21vbmV5fSIsIEdhbWVNYW5hZ2VyLm1vbmV5KS5yZXBsYWNlKCJ7Y3VyfSIsIGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2hvcE1lbnUuY3VycmVuY3kpKQogICAgICAgICAgICBsdlN0cmluZyA9IGxjcyh2b2NhYi5sZXZlbCkKICAgICAgICAgICAgZm9yIGkgaW4gWzAuLi5Ac2F2ZUdhbWUucGFydHkubWVtYmVycy5sZW5ndGhdCiAgICAgICAgICAgICAgICBtZW1iZXIgPSBAc2F2ZUdhbWUucGFydHkubWVtYmVyc1tpXQogICAgICAgICAgICAgICAgbHZTdHJpbmcyID0gbHZTdHJpbmcucmVwbGFjZSgie2xldmVsfSIsIG1lbWJlci5sZXZlbCkKICAgICAgICAgICAgICAgIGlmIFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXT8KICAgICAgICAgICAgICAgICAgICBtZW1iZXIuY2hhcmFjdGVyR3JhcGhpYyA9IFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXS5jaGFyYWN0ZXJHcmFwaGljCiAgICAgICAgICAgICAgICAgICAgY2hhcmFjdGVyU2l6ZSA9IEBtZW1iZXJDaGFyYWN0ZXJTaXplKG1lbWJlcikKICAgICAgICAgICAgICAgICAgICBAZHJhd01lbWJlckNoYXJhY3RlcigxMCpzY2FsZSArIGkgKiAoNzAqc2NhbGUpICsgTWF0aC5mbG9vcigoMzYqc2NhbGUgLSBjaGFyYWN0ZXJTaXplLncpIC8gMiksIDIwKnNjYWxlLCBtZW1iZXIpCiAgICAgICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoMTAqc2NhbGUgKyBpICogKDcwKnNjYWxlKSwgMjAqc2NhbGUgKyA0NSpzY2FsZSwgNzAqc2NhbGUsIDEyKnNjYWxlLCBsdlN0cmluZzIsIDEpCiAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCgwLCAwKnNjYWxlLCBAY29udGVudHMud2lkdGgsIHRleHRTaXplLmhlaWdodCwgdGltZVN0cmluZywgMikKICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KDAsIEBjb250ZW50cy5oZWlnaHQgLSB0ZXh0U2l6ZS5oZWlnaHQgLSAyLCBAY29udGVudHMud2lkdGgsIHRleHRTaXplLmhlaWdodCwgbW9uZXlTdHJpbmcsIDIpCiAgICAgICAgZWxzZQogICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoMCwgMCwgQGNvbnRlbnRzLndpZHRoLCBAY29udGVudHMuaGVpZ2h0LCBsY3Modm9jYWIubm9HYW1lRGF0YSksIDEpCndpbmRvdy5XaW5kb3dfU2F2ZUdhbWUgPSBXaW5kb3dfU2F2ZUdhbWU=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfU2F2ZUdhbWUsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfU2F2ZUdhbWUgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X1NhdmVHYW1lLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19TYXZlR2FtZSh4LCB5KSB7CiAgICAgIFdpbmRvd19TYXZlR2FtZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4LCB5LCA0NjYgKiBXaW5kb3dfQmFzZS5zY2FsZSwgMTA4ICogV2luZG93X0Jhc2Uuc2NhbGUpOwogICAgICB0aGlzLnR5cGUgPSAwOwogICAgICB0aGlzLm1lbWJlciA9IG51bGw7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLnNhdmVHYW1lID0gbnVsbDsKICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlOwogICAgICB0aGlzLnNsb3QgPSAwOwogICAgfQoKICAgIFdpbmRvd19TYXZlR2FtZS5wcm90b3R5cGUucmVkcmF3ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBjaGFyYWN0ZXJTaXplLCBmaWxlLCBob3VycywgaSwgbHZTdHJpbmcsIGx2U3RyaW5nMiwgbWVtYmVyLCBtaW51dGVzLCBtb25leVN0cmluZywgc2NhbGUsIHRleHRTaXplLCB0aW1lU3RyaW5nLCB2b2NhYiwgX2ksIF9yZWY7CiAgICAgIHRoaXMuY29udGVudHMuY2xlYXIoKTsKICAgICAgdGhpcy5zYXZlR2FtZSA9IEdhbWVNYW5hZ2VyLmdldFNhdmVHYW1lKHRoaXMuc2xvdCk7CiAgICAgIHZvY2FiID0gbGNzKFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeS5zYXZlR2FtZU1lbnUpOwogICAgICBmaWxlID0gbGNzKHZvY2FiLmZpbGUpOwogICAgICB0ZXh0U2l6ZSA9IHRoaXMuY29udGVudHMudGV4dFNpemUoZmlsZS5yZXBsYWNlKCJ7c2xvdH0iLCAiMSIpKTsKICAgICAgc2NhbGUgPSBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgY2hhcmFjdGVyU2l6ZSA9IG51bGw7CiAgICAgIG1lbWJlciA9IG51bGw7CiAgICAgIHRoaXMuY29udGVudHMuZHJhd1RleHQoNCAqIHNjYWxlLCAwICogc2NhbGUsIHRoaXMuY29udGVudHMud2lkdGgsIHRleHRTaXplLmhlaWdodCwgZmlsZS5yZXBsYWNlKCJ7c2xvdH0iLCB0aGlzLnNsb3QgKyAxKSk7CiAgICAgIGlmICh0aGlzLnNhdmVHYW1lICYmICh0aGlzLnNhdmVHYW1lLnBhcnR5ICE9IG51bGwpKSB7CiAgICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IodGhpcy5zYXZlR2FtZS5mcmFtZUNvdW50IC8gNjAgLyA2MCk7CiAgICAgICAgaG91cnMgPSBNYXRoLmZsb29yKG1pbnV0ZXMgLyA2MCk7CiAgICAgICAgdGltZVN0cmluZyA9IGxjcyh2b2NhYi50aW1lKS5yZXBsYWNlKCJ7aH0iLCBob3VycykucmVwbGFjZSgie21pbn0iLCBtaW51dGVzKTsKICAgICAgICBtb25leVN0cmluZyA9IGxjcyh2b2NhYi5tb25leSkucmVwbGFjZSgie21vbmV5fSIsIEdhbWVNYW5hZ2VyLm1vbmV5KS5yZXBsYWNlKCJ7Y3VyfSIsIGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2hvcE1lbnUuY3VycmVuY3kpKTsKICAgICAgICBsdlN0cmluZyA9IGxjcyh2b2NhYi5sZXZlbCk7CiAgICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5zYXZlR2FtZS5wYXJ0eS5tZW1iZXJzLmxlbmd0aDsgMCA8PSBfcmVmID8gX2kgPCBfcmVmIDogX2kgPiBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICAgIG1lbWJlciA9IHRoaXMuc2F2ZUdhbWUucGFydHkubWVtYmVyc1tpXTsKICAgICAgICAgIGx2U3RyaW5nMiA9IGx2U3RyaW5nLnJlcGxhY2UoIntsZXZlbH0iLCBtZW1iZXIubGV2ZWwpOwogICAgICAgICAgaWYgKFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXSAhPSBudWxsKSB7CiAgICAgICAgICAgIG1lbWJlci5jaGFyYWN0ZXJHcmFwaGljID0gUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyLmFjdG9ySWRdLmNoYXJhY3RlckdyYXBoaWM7CiAgICAgICAgICAgIGNoYXJhY3RlclNpemUgPSB0aGlzLm1lbWJlckNoYXJhY3RlclNpemUobWVtYmVyKTsKICAgICAgICAgICAgdGhpcy5kcmF3TWVtYmVyQ2hhcmFjdGVyKDEwICogc2NhbGUgKyBpICogKDcwICogc2NhbGUpICsgTWF0aC5mbG9vcigoMzYgKiBzY2FsZSAtIGNoYXJhY3RlclNpemUudykgLyAyKSwgMjAgKiBzY2FsZSwgbWVtYmVyKTsKICAgICAgICAgIH0KICAgICAgICAgIHRoaXMuY29udGVudHMuZHJhd1RleHQoMTAgKiBzY2FsZSArIGkgKiAoNzAgKiBzY2FsZSksIDIwICogc2NhbGUgKyA0NSAqIHNjYWxlLCA3MCAqIHNjYWxlLCAxMiAqIHNjYWxlLCBsdlN0cmluZzIsIDEpOwogICAgICAgIH0KICAgICAgICB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KDAsIDAgKiBzY2FsZSwgdGhpcy5jb250ZW50cy53aWR0aCwgdGV4dFNpemUuaGVpZ2h0LCB0aW1lU3RyaW5nLCAyKTsKICAgICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCgwLCB0aGlzLmNvbnRlbnRzLmhlaWdodCAtIHRleHRTaXplLmhlaWdodCAtIDIsIHRoaXMuY29udGVudHMud2lkdGgsIHRleHRTaXplLmhlaWdodCwgbW9uZXlTdHJpbmcsIDIpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KDAsIDAsIHRoaXMuY29udGVudHMud2lkdGgsIHRoaXMuY29udGVudHMuaGVpZ2h0LCBsY3Modm9jYWIubm9HYW1lRGF0YSksIDEpOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dfU2F2ZUdhbWU7CgogIH0pKFdpbmRvd19CYXNlKTsKCiAgd2luZG93LldpbmRvd19TYXZlR2FtZSA9IFdpbmRvd19TYXZlR2FtZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_Money","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X01vbmV5CiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTI4CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19HYW1lVGltZQojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyB0aGUgY3VycmVudCBtb25leQojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93X01vbmV5IGV4dGVuZHMgV2luZG93X0Jhc2UgICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHkpIC0+CiAgICAgICAgc3VwZXIoeCwgeSwgMTc0ICogV2luZG93X0Jhc2Uuc2NhbGUsIDU4ICogV2luZG93X0Jhc2Uuc2NhbGUpCiAgICAgICAgQGNvbnRlbnRzID0gbmV3IEJpdG1hcChAd2lkdGggLSBAcGFkZGluZyoyLCBAaGVpZ2h0IC0gQHBhZGRpbmcqMikKICAgICAgICBAY29udGVudHMuZm9udCA9IEBuYW1lRm9udAogICAgcmVkcmF3OiAtPgogICAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5CiAgICAgICAgbW9uZXlTdHJpbmcgPSBsY3Modm9jYWIubWVudS5tb25leSkKICAgICAgICBtb25leVZhbHVlU3RyaW5nID0gbGNzKHZvY2FiLm1lbnUubW9uZXlWYWx1ZSkucmVwbGFjZSgie21vbmV5fSIsIEdhbWVNYW5hZ2VyLm1vbmV5KQogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5yZXBsYWNlKCJ7Y3VyfSIsIGxjcyh2b2NhYi5zaG9wTWVudS5jdXJyZW5jeSkpCiAgICAgICAgdGV4dFNpemUgPSBAY29udGVudHMudGV4dFNpemUobW9uZXlTdHJpbmcpCiAgICAgICAgQGNvbnRlbnRzLmNsZWFyKCkKICAgICAgICAKICAgICAgICBAY29udGVudHMuZHJhd1RleHQoMCwgMiwgQGNvbnRlbnRzLndpZHRoLCB0ZXh0U2l6ZS5oZWlnaHQsIG1vbmV5U3RyaW5nLCAwKQogICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCgwLCA1LCBAY29udGVudHMud2lkdGgsIEBjb250ZW50cy5oZWlnaHQsIG1vbmV5VmFsdWVTdHJpbmcsIDIpCiAgICAgICAgCndpbmRvdy5XaW5kb3dfTW9uZXkgPSBXaW5kb3dfTW9uZXk=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfTW9uZXksCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfTW9uZXkgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X01vbmV5LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19Nb25leSh4LCB5KSB7CiAgICAgIFdpbmRvd19Nb25leS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4LCB5LCAxNzQgKiBXaW5kb3dfQmFzZS5zY2FsZSwgNTggKiBXaW5kb3dfQmFzZS5zY2FsZSk7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgfQoKICAgIFdpbmRvd19Nb25leS5wcm90b3R5cGUucmVkcmF3ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBtb25leVN0cmluZywgbW9uZXlWYWx1ZVN0cmluZywgdGV4dFNpemUsIHZvY2FiOwogICAgICB2b2NhYiA9IFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeTsKICAgICAgbW9uZXlTdHJpbmcgPSBsY3Modm9jYWIubWVudS5tb25leSk7CiAgICAgIG1vbmV5VmFsdWVTdHJpbmcgPSBsY3Modm9jYWIubWVudS5tb25leVZhbHVlKS5yZXBsYWNlKCJ7bW9uZXl9IiwgR2FtZU1hbmFnZXIubW9uZXkpLnJlcGxhY2UoIntjdXJ9IiwgbGNzKHZvY2FiLnNob3BNZW51LmN1cnJlbmN5KSk7CiAgICAgIHRleHRTaXplID0gdGhpcy5jb250ZW50cy50ZXh0U2l6ZShtb25leVN0cmluZyk7CiAgICAgIHRoaXMuY29udGVudHMuY2xlYXIoKTsKICAgICAgdGhpcy5jb250ZW50cy5kcmF3VGV4dCgwLCAyLCB0aGlzLmNvbnRlbnRzLndpZHRoLCB0ZXh0U2l6ZS5oZWlnaHQsIG1vbmV5U3RyaW5nLCAwKTsKICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoMCwgNSwgdGhpcy5jb250ZW50cy53aWR0aCwgdGhpcy5jb250ZW50cy5oZWlnaHQsIG1vbmV5VmFsdWVTdHJpbmcsIDIpOwogICAgfTsKCiAgICByZXR1cm4gV2luZG93X01vbmV5OwoKICB9KShXaW5kb3dfQmFzZSk7CgogIHdpbmRvdy5XaW5kb3dfTW9uZXkgPSBXaW5kb3dfTW9uZXk7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_GameTime","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0dhbWVUaW1lCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTI4CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19HYW1lVGltZQojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyB0aGUgY3VycmVudCBnYW1lIHRpbWUuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfR2FtZVRpbWUgZXh0ZW5kcyBXaW5kb3dfQmFzZSAgICAKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSkgLT4KICAgICAgICBzdXBlcih4LCB5LCAxNzQgKiBXaW5kb3dfQmFzZS5zY2FsZSwgNjAgKiBXaW5kb3dfQmFzZS5zY2FsZSkKICAgICAgICBAY29udGVudHMgPSBuZXcgQml0bWFwKEB3aWR0aCAtIEBwYWRkaW5nKjIsIEBoZWlnaHQgLSBAcGFkZGluZyoyKQogICAgICAgIEBjb250ZW50cy5mb250ID0gQG5hbWVGb250CiAgICByZWRyYXc6IC0+CiAgICAgICAgdm9jYWIgPSBSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkKICAgICAgICBnYW1lVGltZVN0cmluZyA9IGxjcyh2b2NhYi5tZW51LmdhbWVUaW1lKQogICAgICAgIHRleHRTaXplID0gQGNvbnRlbnRzLnRleHRTaXplKGdhbWVUaW1lU3RyaW5nKQogICAgICAgIGdhbWVUaW1lID0gR2FtZU1hbmFnZXIuZ2FtZVRpbWUKICAgICAgICBtaW51dGVzID0gTWF0aC5mbG9vcihHcmFwaGljcy5mcmFtZUNvdW50IC8gNjAgLyA2MCkKICAgICAgICBob3VycyA9IE1hdGguZmxvb3IobWludXRlcyAvIDYwKQogICAgICAgIHRpbWVTdHJpbmcgPSBsY3Modm9jYWIubWVudS50aW1lKS5yZXBsYWNlKCJ7aH0iLCBob3VycykucmVwbGFjZSgie21pbn0iLCBtaW51dGVzKQogICAgICAgIAogICAgICAgIEBjb250ZW50cy5jbGVhcigpCiAgICAgICAgCiAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KDAsIDIsIEBjb250ZW50cy53aWR0aCwgdGV4dFNpemUuaGVpZ2h0LCBnYW1lVGltZVN0cmluZywgMCkKICAgICAgICBAY29udGVudHMuZHJhd1RleHQoMCwgNSwgQGNvbnRlbnRzLndpZHRoLCBAY29udGVudHMuaGVpZ2h0LCB0aW1lU3RyaW5nLCAyKQogICAgICAgIAp3aW5kb3cuV2luZG93X0dhbWVUaW1lID0gV2luZG93X0dhbWVUaW1l","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfR2FtZVRpbWUsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfR2FtZVRpbWUgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X0dhbWVUaW1lLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19HYW1lVGltZSh4LCB5KSB7CiAgICAgIFdpbmRvd19HYW1lVGltZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4LCB5LCAxNzQgKiBXaW5kb3dfQmFzZS5zY2FsZSwgNjAgKiBXaW5kb3dfQmFzZS5zY2FsZSk7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgfQoKICAgIFdpbmRvd19HYW1lVGltZS5wcm90b3R5cGUucmVkcmF3ID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBnYW1lVGltZSwgZ2FtZVRpbWVTdHJpbmcsIGhvdXJzLCBtaW51dGVzLCB0ZXh0U2l6ZSwgdGltZVN0cmluZywgdm9jYWI7CiAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5OwogICAgICBnYW1lVGltZVN0cmluZyA9IGxjcyh2b2NhYi5tZW51LmdhbWVUaW1lKTsKICAgICAgdGV4dFNpemUgPSB0aGlzLmNvbnRlbnRzLnRleHRTaXplKGdhbWVUaW1lU3RyaW5nKTsKICAgICAgZ2FtZVRpbWUgPSBHYW1lTWFuYWdlci5nYW1lVGltZTsKICAgICAgbWludXRlcyA9IE1hdGguZmxvb3IoR3JhcGhpY3MuZnJhbWVDb3VudCAvIDYwIC8gNjApOwogICAgICBob3VycyA9IE1hdGguZmxvb3IobWludXRlcyAvIDYwKTsKICAgICAgdGltZVN0cmluZyA9IGxjcyh2b2NhYi5tZW51LnRpbWUpLnJlcGxhY2UoIntofSIsIGhvdXJzKS5yZXBsYWNlKCJ7bWlufSIsIG1pbnV0ZXMpOwogICAgICB0aGlzLmNvbnRlbnRzLmNsZWFyKCk7CiAgICAgIHRoaXMuY29udGVudHMuZHJhd1RleHQoMCwgMiwgdGhpcy5jb250ZW50cy53aWR0aCwgdGV4dFNpemUuaGVpZ2h0LCBnYW1lVGltZVN0cmluZywgMCk7CiAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KDAsIDUsIHRoaXMuY29udGVudHMud2lkdGgsIHRoaXMuY29udGVudHMuaGVpZ2h0LCB0aW1lU3RyaW5nLCAyKTsKICAgIH07CgogICAgcmV0dXJuIFdpbmRvd19HYW1lVGltZTsKCiAgfSkoV2luZG93X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93X0dhbWVUaW1lID0gV2luZG93X0dhbWVUaW1lOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Window_TargetSelection","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1RhcmdldFNlbGVjdGlvbgojICAgQ3JlYXRlZCBvbjogMjAxMy0xMC0wMwojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfVGFyZ2V0U2VsZWN0aW9uCiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIGEgdGFyZ2V0IHNlbGVjdGlvbiBpbiBiYXR0bGUuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfVGFyZ2V0U2VsZWN0aW9uIGV4dGVuZHMgV2luZG93X1NlbGVjdGlvbiAgICAgICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIHZpZXdwb3J0KSAtPgogICAgICAgIHN1cGVyKHgsIHksIDMsIFtdLCA5OCpXaW5kb3dfQmFzZS5zY2FsZSwgMjAqV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KQogICAgICAgIEBtZW1iZXIgPSBudWxsCiAgICAgICAgQGNvbnRlbnRzLmZvbnQgPSBAbmFtZUZvbnQKICAgICAgICBAYmFja09wYWNpdHkgPSAyNTUKICAgICAgICBAYmF0dGxlcnMgPSBbXQogICAgICAgIEBjb250ZW50cyA9IG5ldyBCaXRtYXAoQHdpZHRoIC0gQHBhZGRpbmcqMiwgODAqV2luZG93X0Jhc2Uuc2NhbGUpCiAgICAgICAgQGNvbnRlbnRzLmZvbnQgPSBAbmFtZUZvbnQKICAgICAgICBAYWN0aXZlID0gbm8KICAgIHJlZHJhdzogLT4KICAgICAgICBiYXR0bGVyID0gbnVsbAogICAgICAgIGJhdHRsZXJzID0gW10KICAgICAgICByb3cgPSAwCiAgICAgICAgY29sdW1uID0gMAoKICAgICAgICBAcm93cyA9IFtdCiAgICAgICAgQHNlbGVjdGVkUm93ID0gMAogICAgICAgIEBzZWxlY3RlZENvbHVtbiA9IDAKICAgICAgICAKICAgICAgICBmb3IgaSBpbiBbMC4uLkBiYXR0bGVycy5sZW5ndGhdCiAgICAgICAgICAgIGlmIEBiYXR0bGVyc1tpXS5hY3Rvci5pc0FsaXZlIGFuZCBub3QgQGJhdHRsZXJzW2ldLmlzSGlkZGVuIAogICAgICAgICAgICAgICAgYmF0dGxlcnMucHVzaChAYmF0dGxlcnNbaV0pCiAgICAgICAgICAgICAgICAKICAgICAgICBmb3IgaSBpbiBbMC4uLmJhdHRsZXJzLmxlbmd0aF0KICAgICAgICAgICAgYmF0dGxlciA9IGJhdHRsZXJzW2ldCiAgICAgICAgICAgIHJvdyA9IGkgJSA0CiAgICAgICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIDQpCiAgICAgICAgICAgIAogICAgICAgICAgICBpZiBub3QgQHJvd3Nbcm93XT8gdGhlbiBAcm93c1tyb3ddID0gW10KICAgICAgICAgICAgQHJvd3Nbcm93XVtjb2x1bW5dID0gYmF0dGxlcgoKICAgICAgICBzdXBlcgogICAgICAgIAogICAgZHJhd0NlbGw6ICh4LCB5LCBjZWxsKSAtPgogICAgICAgIGNvbnNvbGUubG9nKCJEUkFXOiAje3h9LCAje0Bjb2x1bW5IZWlnaHR9IikKICAgICAgICBAY29udGVudHMuZHJhd1RleHQoeCwgeSwgQGNvbHVtbldpZHRoLCBAY29sdW1uSGVpZ2h0LCAiI3tjZWxsLmFjdG9yLm5hbWV9IiwgMCkgCiAgICAgICAgCiAgICB1cGRhdGU6IC0+CiAgICAgICAgc3VwZXIKICAgICAgICAKICAgICAgICBpZiBAYWN0aXZlCiAgICAgICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuQykgYW5kIEBvblRhcmdldFNlbGVjdGlvbj8KICAgICAgICAgICAgICAgIEBvblRhcmdldFNlbGVjdGlvbigpCiAgICAgICAgICAgICAgICAKICAgICAgICAKd2luZG93LldpbmRvd19UYXJnZXRTZWxlY3Rpb24gPSBXaW5kb3dfVGFyZ2V0U2VsZWN0aW9u","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfVGFyZ2V0U2VsZWN0aW9uLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X1RhcmdldFNlbGVjdGlvbiA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfVGFyZ2V0U2VsZWN0aW9uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19UYXJnZXRTZWxlY3Rpb24oeCwgeSwgdmlld3BvcnQpIHsKICAgICAgV2luZG93X1RhcmdldFNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzLCB4LCB5LCAzLCBbXSwgOTggKiBXaW5kb3dfQmFzZS5zY2FsZSwgMjAgKiBXaW5kb3dfQmFzZS5zY2FsZSwgdmlld3BvcnQpOwogICAgICB0aGlzLm1lbWJlciA9IG51bGw7CiAgICAgIHRoaXMuY29udGVudHMuZm9udCA9IHRoaXMubmFtZUZvbnQ7CiAgICAgIHRoaXMuYmFja09wYWNpdHkgPSAyNTU7CiAgICAgIHRoaXMuYmF0dGxlcnMgPSBbXTsKICAgICAgdGhpcy5jb250ZW50cyA9IG5ldyBCaXRtYXAodGhpcy53aWR0aCAtIHRoaXMucGFkZGluZyAqIDIsIDgwICogV2luZG93X0Jhc2Uuc2NhbGUpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOwogICAgfQoKICAgIFdpbmRvd19UYXJnZXRTZWxlY3Rpb24ucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgYmF0dGxlciwgYmF0dGxlcnMsIGNvbHVtbiwgaSwgcm93LCBfaSwgX2osIF9yZWYsIF9yZWYxOwogICAgICBiYXR0bGVyID0gbnVsbDsKICAgICAgYmF0dGxlcnMgPSBbXTsKICAgICAgcm93ID0gMDsKICAgICAgY29sdW1uID0gMDsKICAgICAgdGhpcy5yb3dzID0gW107CiAgICAgIHRoaXMuc2VsZWN0ZWRSb3cgPSAwOwogICAgICB0aGlzLnNlbGVjdGVkQ29sdW1uID0gMDsKICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5iYXR0bGVycy5sZW5ndGg7IDAgPD0gX3JlZiA/IF9pIDwgX3JlZiA6IF9pID4gX3JlZjsgaSA9IDAgPD0gX3JlZiA/ICsrX2kgOiAtLV9pKSB7CiAgICAgICAgaWYgKHRoaXMuYmF0dGxlcnNbaV0uYWN0b3IuaXNBbGl2ZSAmJiAhdGhpcy5iYXR0bGVyc1tpXS5pc0hpZGRlbikgewogICAgICAgICAgYmF0dGxlcnMucHVzaCh0aGlzLmJhdHRsZXJzW2ldKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgZm9yIChpID0gX2ogPSAwLCBfcmVmMSA9IGJhdHRsZXJzLmxlbmd0aDsgMCA8PSBfcmVmMSA/IF9qIDwgX3JlZjEgOiBfaiA+IF9yZWYxOyBpID0gMCA8PSBfcmVmMSA/ICsrX2ogOiAtLV9qKSB7CiAgICAgICAgYmF0dGxlciA9IGJhdHRsZXJzW2ldOwogICAgICAgIHJvdyA9IGkgJSA0OwogICAgICAgIGNvbHVtbiA9IE1hdGguZmxvb3IoaSAvIDQpOwogICAgICAgIGlmICh0aGlzLnJvd3Nbcm93XSA9PSBudWxsKSB7CiAgICAgICAgICB0aGlzLnJvd3Nbcm93XSA9IFtdOwogICAgICAgIH0KICAgICAgICB0aGlzLnJvd3Nbcm93XVtjb2x1bW5dID0gYmF0dGxlcjsKICAgICAgfQogICAgICByZXR1cm4gV2luZG93X1RhcmdldFNlbGVjdGlvbi5fX3N1cGVyX18ucmVkcmF3LmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIFdpbmRvd19UYXJnZXRTZWxlY3Rpb24ucHJvdG90eXBlLmRyYXdDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCkgewogICAgICBjb25zb2xlLmxvZygiRFJBVzogIiArIHggKyAiLCAiICsgdGhpcy5jb2x1bW5IZWlnaHQpOwogICAgICByZXR1cm4gdGhpcy5jb250ZW50cy5kcmF3VGV4dCh4LCB5LCB0aGlzLmNvbHVtbldpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgIiIgKyBjZWxsLmFjdG9yLm5hbWUsIDApOwogICAgfTsKCiAgICBXaW5kb3dfVGFyZ2V0U2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgV2luZG93X1RhcmdldFNlbGVjdGlvbi5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICh0aGlzLmFjdGl2ZSkgewogICAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LkMpICYmICh0aGlzLm9uVGFyZ2V0U2VsZWN0aW9uICE9IG51bGwpKSB7CiAgICAgICAgICByZXR1cm4gdGhpcy5vblRhcmdldFNlbGVjdGlvbigpOwogICAgICAgIH0KICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gV2luZG93X1RhcmdldFNlbGVjdGlvbjsKCiAgfSkoV2luZG93X1NlbGVjdGlvbik7CgogIHdpbmRvdy5XaW5kb3dfVGFyZ2V0U2VsZWN0aW9uID0gV2luZG93X1RhcmdldFNlbGVjdGlvbjsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_Language","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0xhbmd1YWdlCiMgICBDcmVhdGVkIG9uOiAyMDEzLTExLTA5CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19MYW5ndWFnZQojCiMgICBBIHdpbmRvdyB3aGVyZSB0aGUgdXNlciBjYW4gc2VsZWN0IGEgbGFuZ3VhZ2UKIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19MYW5ndWFnZSBleHRlbmRzIFdpbmRvd19TZWxlY3Rpb24gICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIGxhbmd1YWdlcykgLT4KICAgICAgICByb3dzID0gW10KICAgICAgICBmb3IgbGFuZ3VhZ2UgaW4gbGFuZ3VhZ2VzCiAgICAgICAgICAgIHJvd3MucHVzaChbbGFuZ3VhZ2VdKQogICAgICAgIAogICAgICAgIHN1cGVyKHgsIHksIDEsIHJvd3MsIDMwMCAqIFdpbmRvd19CYXNlLnNjYWxlKQoKICAgIGRyYXdDZWxsOiAoeCwgeSwgY2VsbCkgLT4KICAgICAgICBpZiBjZWxsLmljb24gYW5kIGNlbGwuaWNvbi5uYW1lLmxlbmd0aCA+IDAKICAgICAgICAgICAgYml0bWFwID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvSWNvbnMvI3tjZWxsLmljb24ubmFtZX0iKQogICAgICAgICAgICBAY29udGVudHMuYmx0KHgsIHksIGJpdG1hcCwgbmV3IFJlY3QoMCwgMCwgYml0bWFwLndpZHRoLCBiaXRtYXAuaGVpZ2h0KSkKICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KGJpdG1hcC53aWR0aCArIDUgKyB4LCB5LCBAY29udGVudHMud2lkdGgsIEBjb2x1bW5IZWlnaHQsIGNlbGwubmFtZSwgMCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBjb250ZW50cy5kcmF3VGV4dCg1ICsgeCwgeSwgQGNvbnRlbnRzLndpZHRoLCBAY29sdW1uSGVpZ2h0LCBjZWxsLm5hbWUsIDApCiAgICAgICAgICAgIAp3aW5kb3cuV2luZG93X0xhbmd1YWdlID0gV2luZG93X0xhbmd1YWdl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfTGFuZ3VhZ2UsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfTGFuZ3VhZ2UgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X0xhbmd1YWdlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19MYW5ndWFnZSh4LCB5LCBsYW5ndWFnZXMpIHsKICAgICAgdmFyIGxhbmd1YWdlLCByb3dzLCBfaSwgX2xlbjsKICAgICAgcm93cyA9IFtdOwogICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IGxhbmd1YWdlcy5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIGxhbmd1YWdlID0gbGFuZ3VhZ2VzW19pXTsKICAgICAgICByb3dzLnB1c2goW2xhbmd1YWdlXSk7CiAgICAgIH0KICAgICAgV2luZG93X0xhbmd1YWdlLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIDEsIHJvd3MsIDMwMCAqIFdpbmRvd19CYXNlLnNjYWxlKTsKICAgIH0KCiAgICBXaW5kb3dfTGFuZ3VhZ2UucHJvdG90eXBlLmRyYXdDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCkgewogICAgICB2YXIgYml0bWFwOwogICAgICBpZiAoY2VsbC5pY29uICYmIGNlbGwuaWNvbi5uYW1lLmxlbmd0aCA+IDApIHsKICAgICAgICBiaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9JY29ucy8iICsgY2VsbC5pY29uLm5hbWUpOwogICAgICAgIHRoaXMuY29udGVudHMuYmx0KHgsIHksIGJpdG1hcCwgbmV3IFJlY3QoMCwgMCwgYml0bWFwLndpZHRoLCBiaXRtYXAuaGVpZ2h0KSk7CiAgICAgICAgcmV0dXJuIHRoaXMuY29udGVudHMuZHJhd1RleHQoYml0bWFwLndpZHRoICsgNSArIHgsIHksIHRoaXMuY29udGVudHMud2lkdGgsIHRoaXMuY29sdW1uSGVpZ2h0LCBjZWxsLm5hbWUsIDApOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmRyYXdUZXh0KDUgKyB4LCB5LCB0aGlzLmNvbnRlbnRzLndpZHRoLCB0aGlzLmNvbHVtbkhlaWdodCwgY2VsbC5uYW1lLCAwKTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gV2luZG93X0xhbmd1YWdlOwoKICB9KShXaW5kb3dfU2VsZWN0aW9uKTsKCiAgd2luZG93LldpbmRvd19MYW5ndWFnZSA9IFdpbmRvd19MYW5ndWFnZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_InputNumber","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0lucHV0TnVtYmVyCiMgICBDcmVhdGVkIG9uOiAyMDEzLTEyLTAyCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19JbnB1dE51bWJlcgojCiMgICBBIHdpbmRvdyB3aGVyZSB0aGUgdXNlciBjYW4gaW5wdXQgYSBudW1iZXIuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBXaW5kb3dfSW5wdXROdW1iZXIgZXh0ZW5kcyBXaW5kb3dfQmFzZSAgICAKICAgIGNvbnN0cnVjdG9yOiAoZGlnaXRzKSAtPgogICAgICAgIHMgPSBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgIHN1cGVyKDEsIDEsIDEsIDEpCiAgICAgICAgcCA9IEBwYWRkaW5nKjIKICAgICAgICAKICAgICAgICBAeCA9IE1hdGguZmxvb3IoKEdyYXBoaWNzLndpZHRoIC0gKHAgKyBkaWdpdHMgKiBwKSkgLyAyKQogICAgICAgIEB5ID0gTWF0aC5mbG9vcigoR3JhcGhpY3MuaGVpZ2h0IC0gNDUqcykgLyAyKQogICAgICAgIEB3aWR0aCA9IChwICsgZGlnaXRzICogcCkKICAgICAgICBAaGVpZ2h0ID0gNDQqcwogICAgICAgIEBjb250ZW50cyA9IG5ldyBCaXRtYXAoQHdpZHRoIC0gcCwgQGhlaWdodCAtIHApCiAgICAgICAgQGNvbnRlbnRzLmZvbnQgPSBAbmFtZUZvbnQKICAgICAgICBAZGlnaXRzID0gZGlnaXRzCiAgICAgICAgQG51bWJlciA9ICIiLmxmaWxsKCcwJywgQGRpZ2l0cykKICAgICAgICBAY3Vyc29yUmVjdCA9IG5ldyBSZWN0KDAsIDAsIHAsIDIwICogcykKICAgICAgICBAaXNDYW5jZWxhYmxlID0geWVzCiAgICAgICAgQHogPSAyMDAKICAgIHJlZHJhdzogLT4KICAgICAgICBwID0gQHBhZGRpbmcqMgogICAgICAgIHRleHRTaXplID0gQGNvbnRlbnRzLnRleHRTaXplKCIwIikKICAgICAgICBAY29udGVudHMuY2xlYXIoKQogICAgICAgIAogICAgICAgIGZvciBpIGluIFswLi4uQGRpZ2l0c10KICAgICAgICAgICAgQGNvbnRlbnRzLmRyYXdUZXh0KGkqcCwgMCwgcCwgQGNvbnRlbnRzLmhlaWdodCwgQG51bWJlci5jaGFyQXQoaSksIDEpCiAgICAgICAgCiAgICBvcGVuOiAtPgogICAgICAgIHN1cGVyKCkKICAgICAgICBAcmVkcmF3KCkKICAgIHVwZGF0ZTogLT4KICAgICAgICBwID0gQHBhZGRpbmcqMgogICAgICAgIGlmIG5vdCBAYWN0aXZlIG9yIEBtYXhWYWx1ZSA9PSAwIHRoZW4gcmV0dXJuCiAgICAgICAgaW5kZXggPSBNYXRoLmZsb29yKEBjdXJzb3JSZWN0LngvcCkKICAgICAgICBtYXggPSBNYXRoLm1pbihNYXRoLmZsb29yKEBtYXhWYWx1ZSAvIEB2YWx1ZSksIDk5KQogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuTEVGVCkKICAgICAgICAgICAgQGN1cnNvclJlY3QueCA9IE1hdGgubWF4KEBjdXJzb3JSZWN0LnggLSBwLCAwKQogICAgICAgICAgICBAcmVkcmF3KCkKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LlJJR0hUKQogICAgICAgICAgICBAY3Vyc29yUmVjdC54ID0gTWF0aC5taW4oQGN1cnNvclJlY3QueCArIHAsIEBjb250ZW50cy53aWR0aCAtIHApCiAgICAgICAgICAgIEByZWRyYXcoKQogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuVVApCiAgICAgICAgICAgIEBudW1iZXIgPSBAbnVtYmVyLnJlcGxhY2VBdChpbmRleCwgKChwYXJzZUludChAbnVtYmVyLmNoYXJBdChpbmRleCkpKzEpICUgMTApLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIEByZWRyYXcoKQogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuRE9XTikKICAgICAgICAgICAgdmFsdWUgPSBwYXJzZUludChAbnVtYmVyLmNoYXJBdChpbmRleCkpLTEKICAgICAgICAgICAgQG51bWJlciA9IEBudW1iZXIucmVwbGFjZUF0KGluZGV4LCBpZiB2YWx1ZSA9PSAtMSB0aGVuICI5IiBlbHNlIHZhbHVlLnRvU3RyaW5nKCkpCiAgICAgICAgICAgIEByZWRyYXcoKQogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuQykKICAgICAgICAgICAgQGFjY2VwdCgpCiAgICAgICAgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5CKSBhbmQgQGlzQ2FuY2VsYWJsZQogICAgICAgICAgICBAY2FuY2VsKCkKICAgICAgICAgICAgCiAgICAgICAgc3VwZXIKICAgICAgICAKICAgIGFjY2VwdDogLT4KICAgICAgICBpZiBAb25BY2NlcHQ/IHRoZW4gQG9uQWNjZXB0KHRoaXMsIHBhcnNlSW50KEBudW1iZXIpKQogICAgICAgIEBjbG9zZSgpCiAgICAgICAgCiAgICBjYW5jZWw6IC0+CiAgICAgICAgaWYgQG9uQ2FuY2VsPyB0aGVuIEBvbkNhbmNlbCh0aGlzKQogICAgICAgIEBjbG9zZSgpCiAgICAgICAgCndpbmRvdy5XaW5kb3dfSW5wdXROdW1iZXIgPSBXaW5kb3dfSW5wdXROdW1iZXI=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfSW5wdXROdW1iZXIsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfSW5wdXROdW1iZXIgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X0lucHV0TnVtYmVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19JbnB1dE51bWJlcihkaWdpdHMpIHsKICAgICAgdmFyIHAsIHM7CiAgICAgIHMgPSBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgV2luZG93X0lucHV0TnVtYmVyLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIDEsIDEsIDEsIDEpOwogICAgICBwID0gdGhpcy5wYWRkaW5nICogMjsKICAgICAgdGhpcy54ID0gTWF0aC5mbG9vcigoR3JhcGhpY3Mud2lkdGggLSAocCArIGRpZ2l0cyAqIHApKSAvIDIpOwogICAgICB0aGlzLnkgPSBNYXRoLmZsb29yKChHcmFwaGljcy5oZWlnaHQgLSA0NSAqIHMpIC8gMik7CiAgICAgIHRoaXMud2lkdGggPSBwICsgZGlnaXRzICogcDsKICAgICAgdGhpcy5oZWlnaHQgPSA0NCAqIHM7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSBwLCB0aGlzLmhlaWdodCAtIHApOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLmRpZ2l0cyA9IGRpZ2l0czsKICAgICAgdGhpcy5udW1iZXIgPSAiIi5sZmlsbCgnMCcsIHRoaXMuZGlnaXRzKTsKICAgICAgdGhpcy5jdXJzb3JSZWN0ID0gbmV3IFJlY3QoMCwgMCwgcCwgMjAgKiBzKTsKICAgICAgdGhpcy5pc0NhbmNlbGFibGUgPSB0cnVlOwogICAgICB0aGlzLnogPSAyMDA7CiAgICB9CgogICAgV2luZG93X0lucHV0TnVtYmVyLnByb3RvdHlwZS5yZWRyYXcgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGksIHAsIHRleHRTaXplLCBfaSwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIHAgPSB0aGlzLnBhZGRpbmcgKiAyOwogICAgICB0ZXh0U2l6ZSA9IHRoaXMuY29udGVudHMudGV4dFNpemUoIjAiKTsKICAgICAgdGhpcy5jb250ZW50cy5jbGVhcigpOwogICAgICBfcmVzdWx0cyA9IFtdOwogICAgICBmb3IgKGkgPSBfaSA9IDAsIF9yZWYgPSB0aGlzLmRpZ2l0czsgMCA8PSBfcmVmID8gX2kgPCBfcmVmIDogX2kgPiBfcmVmOyBpID0gMCA8PSBfcmVmID8gKytfaSA6IC0tX2kpIHsKICAgICAgICBfcmVzdWx0cy5wdXNoKHRoaXMuY29udGVudHMuZHJhd1RleHQoaSAqIHAsIDAsIHAsIHRoaXMuY29udGVudHMuaGVpZ2h0LCB0aGlzLm51bWJlci5jaGFyQXQoaSksIDEpKTsKICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIFdpbmRvd19JbnB1dE51bWJlci5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkgewogICAgICBXaW5kb3dfSW5wdXROdW1iZXIuX19zdXBlcl9fLm9wZW4uY2FsbCh0aGlzKTsKICAgICAgcmV0dXJuIHRoaXMucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd19JbnB1dE51bWJlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBpbmRleCwgbWF4LCBwLCB2YWx1ZTsKICAgICAgcCA9IHRoaXMucGFkZGluZyAqIDI7CiAgICAgIGlmICghdGhpcy5hY3RpdmUgfHwgdGhpcy5tYXhWYWx1ZSA9PT0gMCkgewogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpbmRleCA9IE1hdGguZmxvb3IodGhpcy5jdXJzb3JSZWN0LnggLyBwKTsKICAgICAgbWF4ID0gTWF0aC5taW4oTWF0aC5mbG9vcih0aGlzLm1heFZhbHVlIC8gdGhpcy52YWx1ZSksIDk5KTsKICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuTEVGVCkpIHsKICAgICAgICB0aGlzLmN1cnNvclJlY3QueCA9IE1hdGgubWF4KHRoaXMuY3Vyc29yUmVjdC54IC0gcCwgMCk7CiAgICAgICAgdGhpcy5yZWRyYXcoKTsKICAgICAgfQogICAgICBpZiAoSW5wdXQudHJpZ2dlcihJbnB1dC5SSUdIVCkpIHsKICAgICAgICB0aGlzLmN1cnNvclJlY3QueCA9IE1hdGgubWluKHRoaXMuY3Vyc29yUmVjdC54ICsgcCwgdGhpcy5jb250ZW50cy53aWR0aCAtIHApOwogICAgICAgIHRoaXMucmVkcmF3KCk7CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuVVApKSB7CiAgICAgICAgdGhpcy5udW1iZXIgPSB0aGlzLm51bWJlci5yZXBsYWNlQXQoaW5kZXgsICgocGFyc2VJbnQodGhpcy5udW1iZXIuY2hhckF0KGluZGV4KSkgKyAxKSAlIDEwKS50b1N0cmluZygpKTsKICAgICAgICB0aGlzLnJlZHJhdygpOwogICAgICB9CiAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LkRPV04pKSB7CiAgICAgICAgdmFsdWUgPSBwYXJzZUludCh0aGlzLm51bWJlci5jaGFyQXQoaW5kZXgpKSAtIDE7CiAgICAgICAgdGhpcy5udW1iZXIgPSB0aGlzLm51bWJlci5yZXBsYWNlQXQoaW5kZXgsIHZhbHVlID09PSAtMSA/ICI5IiA6IHZhbHVlLnRvU3RyaW5nKCkpOwogICAgICAgIHRoaXMucmVkcmF3KCk7CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuQykpIHsKICAgICAgICB0aGlzLmFjY2VwdCgpOwogICAgICB9CiAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LkIpICYmIHRoaXMuaXNDYW5jZWxhYmxlKSB7CiAgICAgICAgdGhpcy5jYW5jZWwoKTsKICAgICAgfQogICAgICByZXR1cm4gV2luZG93X0lucHV0TnVtYmVyLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgIH07CgogICAgV2luZG93X0lucHV0TnVtYmVyLnByb3RvdHlwZS5hY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMub25BY2NlcHQgIT0gbnVsbCkgewogICAgICAgIHRoaXMub25BY2NlcHQodGhpcywgcGFyc2VJbnQodGhpcy5udW1iZXIpKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5jbG9zZSgpOwogICAgfTsKCiAgICBXaW5kb3dfSW5wdXROdW1iZXIucHJvdG90eXBlLmNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodGhpcy5vbkNhbmNlbCAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5vbkNhbmNlbCh0aGlzKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5jbG9zZSgpOwogICAgfTsKCiAgICByZXR1cm4gV2luZG93X0lucHV0TnVtYmVyOwoKICB9KShXaW5kb3dfQmFzZSk7CgogIHdpbmRvdy5XaW5kb3dfSW5wdXROdW1iZXIgPSBXaW5kb3dfSW5wdXROdW1iZXI7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Window_InputText","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0lucHV0VGV4dAojICAgQ3JlYXRlZCBvbjogMjAxNC0wMS0wMQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIENsYXNzOiBXaW5kb3dfSW5wdXRUZXh0CiMKIyAgIEEgd2luZG93IHdoZXJlIHRoZSB1c2VyIGNhbiBpbnB1dCBhIG51bWJlci4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd19JbnB1dFRleHQgZXh0ZW5kcyBXaW5kb3dfU2VsZWN0aW9uICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIHZpZXdwb3J0KSAtPgogICAgICAgIEBjaGFyTWFwID0gbGNzKFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeS50ZXh0SW5wdXRNYXApCiAgICAgICAgQGNoYXJNYXAgPSBKU09OLnBhcnNlKEBjaGFyTWFwKQoKICAgICAgICBzdXBlcih4LCB5LCBAY2hhck1hcFswXS5sZW5ndGgsIEBjaGFyTWFwLCAzNCAqIFdpbmRvd19CYXNlLnNjYWxlLCAyMCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCkKICAgICAgICAKICAgICAgICBAb25TZWxlY3Rpb25BY2NlcHQgPSAoc2VuZGVyLCBjZWxsKSA9PgogICAgICAgICAgICBsYXN0ID0gQGNoYXJNYXBbQGNoYXJNYXAubGVuZ3RoLTFdW0BjaGFyTWFwWzBdLmxlbmd0aC0xXQogICAgICAgICAgICBpZiBAb25DaGFyYWN0ZXJBY2NlcHQ/IGFuZCBjZWxsICE9IGxhc3QgdGhlbiBAb25DaGFyYWN0ZXJBY2NlcHQoc2VsZiwgY2VsbCkKICAgICAgICAgICAgaWYgQG9uQWNjZXB0IGFuZCBjZWxsID09IGxhc3QgdGhlbiBAb25BY2NlcHQoc2VsZikKICAgICAgICBAeiA9IDIwMAogICAgICAgIAp3aW5kb3cuV2luZG93X0lucHV0VGV4dCA9IFdpbmRvd19JbnB1dFRleHQ=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfSW5wdXRUZXh0LAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93X0lucHV0VGV4dCA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dfSW5wdXRUZXh0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19JbnB1dFRleHQoeCwgeSwgdmlld3BvcnQpIHsKICAgICAgdmFyIF90aGlzID0gdGhpczsKICAgICAgdGhpcy5jaGFyTWFwID0gbGNzKFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeS50ZXh0SW5wdXRNYXApOwogICAgICB0aGlzLmNoYXJNYXAgPSBKU09OLnBhcnNlKHRoaXMuY2hhck1hcCk7CiAgICAgIFdpbmRvd19JbnB1dFRleHQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcywgeCwgeSwgdGhpcy5jaGFyTWFwWzBdLmxlbmd0aCwgdGhpcy5jaGFyTWFwLCAzNCAqIFdpbmRvd19CYXNlLnNjYWxlLCAyMCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMub25TZWxlY3Rpb25BY2NlcHQgPSBmdW5jdGlvbihzZW5kZXIsIGNlbGwpIHsKICAgICAgICB2YXIgbGFzdDsKICAgICAgICBsYXN0ID0gX3RoaXMuY2hhck1hcFtfdGhpcy5jaGFyTWFwLmxlbmd0aCAtIDFdW190aGlzLmNoYXJNYXBbMF0ubGVuZ3RoIC0gMV07CiAgICAgICAgaWYgKChfdGhpcy5vbkNoYXJhY3RlckFjY2VwdCAhPSBudWxsKSAmJiBjZWxsICE9PSBsYXN0KSB7CiAgICAgICAgICBfdGhpcy5vbkNoYXJhY3RlckFjY2VwdChzZWxmLCBjZWxsKTsKICAgICAgICB9CiAgICAgICAgaWYgKF90aGlzLm9uQWNjZXB0ICYmIGNlbGwgPT09IGxhc3QpIHsKICAgICAgICAgIHJldHVybiBfdGhpcy5vbkFjY2VwdChzZWxmKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHRoaXMueiA9IDIwMDsKICAgIH0KCiAgICByZXR1cm4gV2luZG93X0lucHV0VGV4dDsKCiAgfSkoV2luZG93X1NlbGVjdGlvbik7CgogIHdpbmRvdy5XaW5kb3dfSW5wdXRUZXh0ID0gV2luZG93X0lucHV0VGV4dDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Window_TextEdit","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X1RleHRFZGl0CiMgICBDcmVhdGVkIG9uOiAyMDE0LTAxLTAxCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19UZXh0RWRpdAojCiMgICBBIHdpbmRvdyB3aGVyZSB0aGUgdXNlciBjYW4gaW5wdXQgYSB0ZXh0LgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93X1RleHRFZGl0IGV4dGVuZHMgV2luZG93X0Jhc2UgICAgCiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIGxldHRlcnMsIGFjdG9yKSAtPgogICAgICAgIHNjYWxlID0gV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICAKICAgICAgICBiaXRtYXAgPSBudWxsCiAgICAgICAgaWYgYWN0b3I/CiAgICAgICAgICAgIGJpdG1hcCA9IEBjcmVhdGVBY3RvckZhY2VCaXRtYXAoYWN0b3IpCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICBzdXBlcih4LCB5LCAoaWYgYml0bWFwPyB0aGVuIGJpdG1hcC53aWR0aCsxMCpzY2FsZSBlbHNlIDApICsgKDI0KnNjYWxlICsgbGV0dGVycyAqICgyNCpzY2FsZSkpLCBpZiBiaXRtYXA/IHRoZW4gYml0bWFwLmhlaWdodCsyNCpzY2FsZSBlbHNlIDQ0KnNjYWxlKQogICAgICAgIEBiaXRtYXAgPSBiaXRtYXAKICAgICAgICBAY29udGVudHMgPSBuZXcgQml0bWFwKEB3aWR0aCAtIEBwYWRkaW5nKjIsIEBoZWlnaHQgLSBAcGFkZGluZyoyKQogICAgICAgIEBjb250ZW50cy5mb250ID0gQG5hbWVGb250CiAgICAgICAgQGxldHRlcnMgPSBsZXR0ZXJzCiAgICAgICAgQHRleHQgPSAiIgogICAgICAgIEBjdXJzb3JSZWN0ID0gbmV3IFJlY3QoMCwgMCwgMjQgKiBzY2FsZSwgMjAgKiBzY2FsZSkKICAgICAgICBAeiA9IDIwMAogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgcmVkcmF3OiAtPgogICAgICAgIHNjYWxlID0gV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBAY29udGVudHMuY2xlYXIoKQogICAgICAgIHggPSBpZiBAYml0bWFwPyB0aGVuIEBiaXRtYXAud2lkdGggKyAxMCAqIHNjYWxlIGVsc2UgMAogICAgICAgIHkgPSBpZiBAYml0bWFwPyB0aGVuIChAYml0bWFwLmhlaWdodCAtIDI0ICogc2NhbGUpIC8gMiBlbHNlIDAKICAgICAgICBmb3IgaSBpbiBbMC4uLkBsZXR0ZXJzXQogICAgICAgICAgICBAY29udGVudHMuZHJhd1RleHQoeCArIGkqKDI0ICogc2NhbGUpLCAwLCAyNCAqIHNjYWxlLCBAY29udGVudHMuaGVpZ2h0LCAoaWYgQHRleHQubGVuZ3RoID4gaSB0aGVuIEB0ZXh0LmNoYXJBdChpKSBlbHNlICJfIiksIDEpCiAgICAgICAgICAgIAogICAgICAgIGlmIEB0ZXh0Lmxlbmd0aCA8IEBsZXR0ZXJzCiAgICAgICAgICAgIEBjdXJzb3JSZWN0LnNldCh4ICsgQHRleHQubGVuZ3RoICogKDI0ICogc2NhbGUpLCB5LCAyNCAqIHNjYWxlLCAyMCAqIHNjYWxlKQogICAgICAgICAgICAKICAgICAgICBpZiBAYml0bWFwPwogICAgICAgICAgICBAY29udGVudHMuYmx0KDAsIDAsIEBiaXRtYXAsIG5ldyBSZWN0KDAsIDAsIEBiaXRtYXAud2lkdGgsIEBiaXRtYXAuaGVpZ2h0KSkKICAgIG9wZW46IC0+CiAgICAgICAgc3VwZXIoKQogICAgICAgIEByZWRyYXcoKQogICAgdXBkYXRlOiAtPgogICAgICAgIGlmIG5vdCBAYWN0aXZlIHRoZW4gcmV0dXJuCiAgICAgICAgc3VwZXIKICAgICAgICAKd2luZG93LldpbmRvd19UZXh0RWRpdCA9IFdpbmRvd19UZXh0RWRpdA==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dfVGV4dEVkaXQsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dfVGV4dEVkaXQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93X1RleHRFZGl0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd19UZXh0RWRpdCh4LCB5LCBsZXR0ZXJzLCBhY3RvcikgewogICAgICB2YXIgYml0bWFwLCBzY2FsZTsKICAgICAgc2NhbGUgPSBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgYml0bWFwID0gbnVsbDsKICAgICAgaWYgKGFjdG9yICE9IG51bGwpIHsKICAgICAgICBiaXRtYXAgPSB0aGlzLmNyZWF0ZUFjdG9yRmFjZUJpdG1hcChhY3Rvcik7CiAgICAgIH0KICAgICAgV2luZG93X1RleHRFZGl0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMsIHgsIHksIChiaXRtYXAgIT0gbnVsbCA/IGJpdG1hcC53aWR0aCArIDEwICogc2NhbGUgOiAwKSArICgyNCAqIHNjYWxlICsgbGV0dGVycyAqICgyNCAqIHNjYWxlKSksIGJpdG1hcCAhPSBudWxsID8gYml0bWFwLmhlaWdodCArIDI0ICogc2NhbGUgOiA0NCAqIHNjYWxlKTsKICAgICAgdGhpcy5iaXRtYXAgPSBiaXRtYXA7CiAgICAgIHRoaXMuY29udGVudHMgPSBuZXcgQml0bWFwKHRoaXMud2lkdGggLSB0aGlzLnBhZGRpbmcgKiAyLCB0aGlzLmhlaWdodCAtIHRoaXMucGFkZGluZyAqIDIpOwogICAgICB0aGlzLmNvbnRlbnRzLmZvbnQgPSB0aGlzLm5hbWVGb250OwogICAgICB0aGlzLmxldHRlcnMgPSBsZXR0ZXJzOwogICAgICB0aGlzLnRleHQgPSAiIjsKICAgICAgdGhpcy5jdXJzb3JSZWN0ID0gbmV3IFJlY3QoMCwgMCwgMjQgKiBzY2FsZSwgMjAgKiBzY2FsZSk7CiAgICAgIHRoaXMueiA9IDIwMDsKICAgIH0KCiAgICBXaW5kb3dfVGV4dEVkaXQucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaSwgc2NhbGUsIHgsIHksIF9pLCBfcmVmOwogICAgICBzY2FsZSA9IFdpbmRvd19CYXNlLnNjYWxlOwogICAgICB0aGlzLmNvbnRlbnRzLmNsZWFyKCk7CiAgICAgIHggPSB0aGlzLmJpdG1hcCAhPSBudWxsID8gdGhpcy5iaXRtYXAud2lkdGggKyAxMCAqIHNjYWxlIDogMDsKICAgICAgeSA9IHRoaXMuYml0bWFwICE9IG51bGwgPyAodGhpcy5iaXRtYXAuaGVpZ2h0IC0gMjQgKiBzY2FsZSkgLyAyIDogMDsKICAgICAgZm9yIChpID0gX2kgPSAwLCBfcmVmID0gdGhpcy5sZXR0ZXJzOyAwIDw9IF9yZWYgPyBfaSA8IF9yZWYgOiBfaSA+IF9yZWY7IGkgPSAwIDw9IF9yZWYgPyArK19pIDogLS1faSkgewogICAgICAgIHRoaXMuY29udGVudHMuZHJhd1RleHQoeCArIGkgKiAoMjQgKiBzY2FsZSksIDAsIDI0ICogc2NhbGUsIHRoaXMuY29udGVudHMuaGVpZ2h0LCAodGhpcy50ZXh0Lmxlbmd0aCA+IGkgPyB0aGlzLnRleHQuY2hhckF0KGkpIDogIl8iKSwgMSk7CiAgICAgIH0KICAgICAgaWYgKHRoaXMudGV4dC5sZW5ndGggPCB0aGlzLmxldHRlcnMpIHsKICAgICAgICB0aGlzLmN1cnNvclJlY3Quc2V0KHggKyB0aGlzLnRleHQubGVuZ3RoICogKDI0ICogc2NhbGUpLCB5LCAyNCAqIHNjYWxlLCAyMCAqIHNjYWxlKTsKICAgICAgfQogICAgICBpZiAodGhpcy5iaXRtYXAgIT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLmNvbnRlbnRzLmJsdCgwLCAwLCB0aGlzLmJpdG1hcCwgbmV3IFJlY3QoMCwgMCwgdGhpcy5iaXRtYXAud2lkdGgsIHRoaXMuYml0bWFwLmhlaWdodCkpOwogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd19UZXh0RWRpdC5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uKCkgewogICAgICBXaW5kb3dfVGV4dEVkaXQuX19zdXBlcl9fLm9wZW4uY2FsbCh0aGlzKTsKICAgICAgcmV0dXJuIHRoaXMucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd19UZXh0RWRpdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICghdGhpcy5hY3RpdmUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgcmV0dXJuIFdpbmRvd19UZXh0RWRpdC5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dfVGV4dEVkaXQ7CgogIH0pKFdpbmRvd19CYXNlKTsKCiAgd2luZG93LldpbmRvd19UZXh0RWRpdCA9IFdpbmRvd19UZXh0RWRpdDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Windowset_Base","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93c2V0X0Jhc2UKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjIKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICAgQ2xhc3M6IFdpbmRvd3NldF9FcXVpcG1lbnQKIwojICAgIEEgYmFzZSBmb3IgYWxsZSB3aW5kb3dzZXRzLiBBIHdpbmRvd3NldCBkZWZpbmVzIGFuZCBjb250cm9scwojICAgIG11bHRpcGxlIHdpbmRvd3Mgd2hpY2ggYXJlIGRpcmVjdGx5IGNvbm5lY3RlZCB0byBlYWNoIG90aGVyLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93c2V0X0Jhc2UKICAgIEBzY2FsZSA9IDAuNQogICAgY29uc3RydWN0b3I6IC0+CiAgICAgICAgQHdpbmRvd3MgPSBbXQogICAgICAgIEBzY2FsZSA9IEBjb25zdHJ1Y3Rvci5zY2FsZQogICAgZGlzcG9zZTogLT4KICAgICAgICBmb3IgdyBpbiBAd2luZG93cwogICAgICAgICAgICB3LmRpc3Bvc2UoKQogICAgICAgICAgICAKICAgIHNob3c6IChzaG93LCBhY3RpdmUpIC0+CiAgICAgICAgZm9yIHcgaW4gQHdpbmRvd3MKICAgICAgICAgICAgdy52aXNpYmxlID0gc2hvdwogICAgICAgIAogICAgICAgIGlmIGFjdGl2ZT8KICAgICAgICAgICAgQGFjdGl2ZSA9IGFjdGl2ZQogICAgICAgIGVsc2UKICAgICAgICAgICAgQGFjdGl2ZSA9IHNob3cKICAgICAgICAKICAgICAgICBAcmVkcmF3KCkKICAgICAgICAKICAgIHNob3dNb2RhbDogLT4KICAgICAgICBmb3IgdyBpbiBAd2luZG93cwogICAgICAgICAgICB3Lm9wZW5Nb2RhbCgpCiAgICAgICAgICAgIAogICAgY2xvc2U6IC0+CiAgICAgICAgZm9yIHcgaW4gQHdpbmRvd3MKICAgICAgICAgICAgdy5jbG9zZSgpCiAgICAgICAgICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIGZvciB3IGluIEB3aW5kb3dzCiAgICAgICAgICAgIHcudXBkYXRlKCkKICAgICAgICAgICAgCiAgICByZWRyYXc6IC0+CiAgICAgICAgCiAgICByZWRyYXdBbGxXaW5kb3dzOiAtPgogICAgICAgIGZvciB3IGluIEB3aW5kb3dzCiAgICAgICAgICAgIHcucmVkcmF3KCkKICAgICAgICAgICAgCndpbmRvdy5XaW5kb3dzZXRfQmFzZSA9IFdpbmRvd3NldF9CYXNl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dzZXRfQmFzZTsKCiAgV2luZG93c2V0X0Jhc2UgPSAoZnVuY3Rpb24oKSB7CiAgICBXaW5kb3dzZXRfQmFzZS5zY2FsZSA9IDAuNTsKCiAgICBmdW5jdGlvbiBXaW5kb3dzZXRfQmFzZSgpIHsKICAgICAgdGhpcy53aW5kb3dzID0gW107CiAgICAgIHRoaXMuc2NhbGUgPSB0aGlzLmNvbnN0cnVjdG9yLnNjYWxlOwogICAgfQoKICAgIFdpbmRvd3NldF9CYXNlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciB3LCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIF9yZWYgPSB0aGlzLndpbmRvd3M7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIHcgPSBfcmVmW19pXTsKICAgICAgICBfcmVzdWx0cy5wdXNoKHcuZGlzcG9zZSgpKTsKICAgICAgfQogICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICB9OwoKICAgIFdpbmRvd3NldF9CYXNlLnByb3RvdHlwZS5zaG93ID0gZnVuY3Rpb24oc2hvdywgYWN0aXZlKSB7CiAgICAgIHZhciB3LCBfaSwgX2xlbiwgX3JlZjsKICAgICAgX3JlZiA9IHRoaXMud2luZG93czsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgdyA9IF9yZWZbX2ldOwogICAgICAgIHcudmlzaWJsZSA9IHNob3c7CiAgICAgIH0KICAgICAgaWYgKGFjdGl2ZSAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5hY3RpdmUgPSBhY3RpdmU7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5hY3RpdmUgPSBzaG93OwogICAgICB9CiAgICAgIHJldHVybiB0aGlzLnJlZHJhdygpOwogICAgfTsKCiAgICBXaW5kb3dzZXRfQmFzZS5wcm90b3R5cGUuc2hvd01vZGFsID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciB3LCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIF9yZWYgPSB0aGlzLndpbmRvd3M7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIHcgPSBfcmVmW19pXTsKICAgICAgICBfcmVzdWx0cy5wdXNoKHcub3Blbk1vZGFsKCkpOwogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgV2luZG93c2V0X0Jhc2UucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciB3LCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIF9yZWYgPSB0aGlzLndpbmRvd3M7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIHcgPSBfcmVmW19pXTsKICAgICAgICBfcmVzdWx0cy5wdXNoKHcuY2xvc2UoKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICBXaW5kb3dzZXRfQmFzZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciB3LCBfaSwgX2xlbiwgX3JlZiwgX3Jlc3VsdHM7CiAgICAgIF9yZWYgPSB0aGlzLndpbmRvd3M7CiAgICAgIF9yZXN1bHRzID0gW107CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIHcgPSBfcmVmW19pXTsKICAgICAgICBfcmVzdWx0cy5wdXNoKHcudXBkYXRlKCkpOwogICAgICB9CiAgICAgIHJldHVybiBfcmVzdWx0czsKICAgIH07CgogICAgV2luZG93c2V0X0Jhc2UucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkge307CgogICAgV2luZG93c2V0X0Jhc2UucHJvdG90eXBlLnJlZHJhd0FsbFdpbmRvd3MgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHcsIF9pLCBfbGVuLCBfcmVmLCBfcmVzdWx0czsKICAgICAgX3JlZiA9IHRoaXMud2luZG93czsKICAgICAgX3Jlc3VsdHMgPSBbXTsKICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgdyA9IF9yZWZbX2ldOwogICAgICAgIF9yZXN1bHRzLnB1c2gody5yZWRyYXcoKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgfTsKCiAgICByZXR1cm4gV2luZG93c2V0X0Jhc2U7CgogIH0pKCk7CgogIHdpbmRvdy5XaW5kb3dzZXRfQmFzZSA9IFdpbmRvd3NldF9CYXNlOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Windowset_Alert","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93X0FsZXJ0CiMgICBDcmVhdGVkIG9uOiAyMDEzLTEyLTI0CiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgQ2xhc3M6IFdpbmRvd19BbGVydAojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyB0aGUgY3VycmVudCBtb25leQojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93c2V0X0FsZXJ0IGV4dGVuZHMgV2luZG93c2V0X0Jhc2UgICAgCiAgICBjb25zdHJ1Y3RvcjogKGRlc2NyaXB0aW9uLCBvcHRpb25zLCB2aWV3cG9ydCkgLT4KICAgICAgICBzdXBlcgogICAgICAgIHMgPSBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgIEB3aWR0aCA9IDIyNAogICAgICAgIAogICAgICAgIHRleHRTaXplID0gRm9udHMuVEVYVC5tZWFzdXJlVGV4dChkZXNjcmlwdGlvbikKICAgCiAgICAgICAgQGRlc2NyaXB0aW9uV2luZG93ID0gbmV3IFdpbmRvd19UZXh0KChHcmFwaGljcy53aWR0aCAtIEB3aWR0aCkgLyAyLCAoR3JhcGhpY3MuaGVpZ2h0IC0gKHRleHRTaXplLmhlaWdodCsyOCpzKSkgLyAyLCBAd2lkdGgsIHRleHRTaXplLmhlaWdodCArIDI4KnMsIHZpZXdwb3J0KQogICAgICAgIEBkZXNjcmlwdGlvbldpbmRvdy50ZXh0ID0gZGVzY3JpcHRpb24KICAgICAgICBAb3B0aW9uV2luZG93ID0gbmV3IFdpbmRvd19TZWxlY3Rpb24oQGRlc2NyaXB0aW9uV2luZG93LngsIEBkZXNjcmlwdGlvbldpbmRvdy55K0BkZXNjcmlwdGlvbldpbmRvdy5oZWlnaHQsIG9wdGlvbnMubGVuZ3RoLCBbb3B0aW9uc10sIDIwMCAvIG9wdGlvbnMubGVuZ3RoLCAyMCpzLCB2aWV3cG9ydCkKICAgICAgICBAb3B0aW9uV2luZG93LmNvbnRlbnRzLmZvbnQgPSBGb250cy5URVhUCiAgICAgICAgQG9wdGlvbldpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9IChzZW5kZXIpID0+IAogICAgICAgICAgICBAY2xvc2UoKQogICAgICAgICAgICBpZiBAb25BY2NlcHQ/IHRoZW4gQG9uQWNjZXB0KHNlbmRlciwgQG9wdGlvbldpbmRvdy5zZWxlY3RlZENvbHVtbikKICAgICAgICBAb3B0aW9uV2luZG93Lm9uQ2FuY2VsID0gPT4KICAgICAgICAgICAgQGNsb3NlKCkKICAgICAgICAgICAgaWYgQG9uQ2FuY2VsPyB0aGVuIEBvbkNhbmNlbCgpCiAgICAgICAgQGRlc2NyaXB0aW9uV2luZG93LndpZHRoID0gQG9wdGlvbldpbmRvdy53aWR0aAogICAgICAgIEB3aW5kb3dzLnB1c2goQGRlc2NyaXB0aW9uV2luZG93KQogICAgICAgIEB3aW5kb3dzLnB1c2goQG9wdGlvbldpbmRvdykKICAgICAgICAKICAgICAgICBAcmVkcmF3QWxsV2luZG93cygpCgogICAgICAgIAp3aW5kb3cuV2luZG93c2V0X0FsZXJ0ID0gV2luZG93c2V0X0FsZXJ0","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dzZXRfQWxlcnQsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dzZXRfQWxlcnQgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93c2V0X0FsZXJ0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd3NldF9BbGVydChkZXNjcmlwdGlvbiwgb3B0aW9ucywgdmlld3BvcnQpIHsKICAgICAgdmFyIHMsIHRleHRTaXplLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgV2luZG93c2V0X0FsZXJ0Ll9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIHRoaXMud2lkdGggPSAyMjQ7CiAgICAgIHRleHRTaXplID0gRm9udHMuVEVYVC5tZWFzdXJlVGV4dChkZXNjcmlwdGlvbik7CiAgICAgIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cgPSBuZXcgV2luZG93X1RleHQoKEdyYXBoaWNzLndpZHRoIC0gdGhpcy53aWR0aCkgLyAyLCAoR3JhcGhpY3MuaGVpZ2h0IC0gKHRleHRTaXplLmhlaWdodCArIDI4ICogcykpIC8gMiwgdGhpcy53aWR0aCwgdGV4dFNpemUuaGVpZ2h0ICsgMjggKiBzLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cudGV4dCA9IGRlc2NyaXB0aW9uOwogICAgICB0aGlzLm9wdGlvbldpbmRvdyA9IG5ldyBXaW5kb3dfU2VsZWN0aW9uKHRoaXMuZGVzY3JpcHRpb25XaW5kb3cueCwgdGhpcy5kZXNjcmlwdGlvbldpbmRvdy55ICsgdGhpcy5kZXNjcmlwdGlvbldpbmRvdy5oZWlnaHQsIG9wdGlvbnMubGVuZ3RoLCBbb3B0aW9uc10sIDIwMCAvIG9wdGlvbnMubGVuZ3RoLCAyMCAqIHMsIHZpZXdwb3J0KTsKICAgICAgdGhpcy5vcHRpb25XaW5kb3cuY29udGVudHMuZm9udCA9IEZvbnRzLlRFWFQ7CiAgICAgIHRoaXMub3B0aW9uV2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gZnVuY3Rpb24oc2VuZGVyKSB7CiAgICAgICAgX3RoaXMuY2xvc2UoKTsKICAgICAgICBpZiAoX3RoaXMub25BY2NlcHQgIT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIF90aGlzLm9uQWNjZXB0KHNlbmRlciwgX3RoaXMub3B0aW9uV2luZG93LnNlbGVjdGVkQ29sdW1uKTsKICAgICAgICB9CiAgICAgIH07CiAgICAgIHRoaXMub3B0aW9uV2luZG93Lm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgX3RoaXMuY2xvc2UoKTsKICAgICAgICBpZiAoX3RoaXMub25DYW5jZWwgIT0gbnVsbCkgewogICAgICAgICAgcmV0dXJuIF90aGlzLm9uQ2FuY2VsKCk7CiAgICAgICAgfQogICAgICB9OwogICAgICB0aGlzLmRlc2NyaXB0aW9uV2luZG93LndpZHRoID0gdGhpcy5vcHRpb25XaW5kb3cud2lkdGg7CiAgICAgIHRoaXMud2luZG93cy5wdXNoKHRoaXMuZGVzY3JpcHRpb25XaW5kb3cpOwogICAgICB0aGlzLndpbmRvd3MucHVzaCh0aGlzLm9wdGlvbldpbmRvdyk7CiAgICAgIHRoaXMucmVkcmF3QWxsV2luZG93cygpOwogICAgfQoKICAgIHJldHVybiBXaW5kb3dzZXRfQWxlcnQ7CgogIH0pKFdpbmRvd3NldF9CYXNlKTsKCiAgd2luZG93LldpbmRvd3NldF9BbGVydCA9IFdpbmRvd3NldF9BbGVydDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Windowset_Items","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93c2V0X0l0ZW1zCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTIyCiMKIyAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojICAgIENsYXNzOiBXaW5kb3dzZXRfSXRlbXMKIwojICAgQSB3aW5kb3cgd2hpY2ggZGlzcGxheXMgdGhlIHdpbmRvd3MgbmVlZGVkIGZvciBpdGVtIHNlbGVjdGlvbgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93c2V0X0l0ZW1zIGV4dGVuZHMgV2luZG93c2V0X0Jhc2UKICAgIGNvbnN0cnVjdG9yOiAoeCwgeSwgdmlld3BvcnQsIHdpZHRoKSAtPgogICAgICAgIHN1cGVyCiAgICAgICAgd2lkdGggPSB3aWR0aCB8fCAoNDY2ICogV2luZG93X0Jhc2Uuc2NhbGUpCiAgICAgICAgdm9jYWIgPSBSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkKICAgICAgICBAdHlwZVdpbmRvdyA9IG5ldyBXaW5kb3dfU2VsZWN0aW9uKHgsIHksIDMsIFtbbGNzKHZvY2FiLm1lbnUuaXRlbXMpLCBsY3Modm9jYWIubWVudS53ZWFwb25zKSwgbGNzKHZvY2FiLm1lbnUuYXJtb3JzKV1dLCBNYXRoLmZsb29yKHdpZHRoIC8gMykgLSA4ICogV2luZG93X0Jhc2Uuc2NhbGUsIDIwICogV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KQogICAgICAgIEB0eXBlV2luZG93LmNvbnRlbnRzLmZvbnQgPSBAdHlwZVdpbmRvdy5uYW1lRm9udAogICAgICAgIEB0eXBlV2luZG93LmFjdGl2ZSA9IG5vCiAgICAgICAgQHR5cGVXaW5kb3cuY3Vyc29yVmlzaWJsZSA9IG5vCiAgICAgICAgQHR5cGVXaW5kb3cud2lkdGggPSB3aWR0aAogICAgICAgIEB0eXBlV2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gPT4gQG9uVHlwZUNoYW5nZSgpCiAgICAgICAgQHR5cGVXaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSA9PiBAb25UeXBlQWNjZXB0KCkKICAgICAgICBAdHlwZVdpbmRvdy5vbkNhbmNlbCA9ID0+IEBvblR5cGVDYW5jZWwoKQogICAgICAgIEBpdGVtV2luZG93ID0gbmV3IFdpbmRvd19JdGVtcyh4LCB5K0B0eXBlV2luZG93LmhlaWdodCwgMiwgW10sICh3aWR0aCAvIDIpIC0gMTIgKiBXaW5kb3dfQmFzZS5zY2FsZSwgMjYqV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KQogICAgICAgIEBpdGVtV2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gPT4gQG9uSXRlbUNoYW5nZSgpCiAgICAgICAgQGl0ZW1XaW5kb3cuY29udGVudHMuZm9udCA9IEBpdGVtV2luZG93Lm5hbWVGb250CiAgICAgICAgQGl0ZW1XaW5kb3cuaGVpZ2h0ID0gMjY0ICogV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBAaXRlbVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgIEBpdGVtV2luZG93LmN1cnNvclZpc2libGUgPSBubwogICAgICAgIEBpdGVtV2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gPT4gQG9uSXRlbUFjY2VwdCgpCiAgICAgICAgQGl0ZW1XaW5kb3cub25DYW5jZWwgPSA9PiBAb25JdGVtQ2FuY2VsKCkKICAgICAgICBAZGVzY3JpcHRpb25XaW5kb3cgPSBuZXcgV2luZG93X1RleHQoeCwgQGl0ZW1XaW5kb3cueStAaXRlbVdpbmRvdy5oZWlnaHQsIEB0eXBlV2luZG93LndpZHRoLCA1OCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCkKICAgICAgICBAYWN0aXZlID0gbm8KICAgICAgICAKICAgICAgICBAd2luZG93cy5wdXNoKEB0eXBlV2luZG93KQogICAgICAgIEB3aW5kb3dzLnB1c2goQGl0ZW1XaW5kb3cpCiAgICAgICAgQHdpbmRvd3MucHVzaChAZGVzY3JpcHRpb25XaW5kb3cpCiAgICAgICAgCiAgICAgICAgQHdpZHRoID0gQGl0ZW1XaW5kb3cud2lkdGgKICAgIHVwZGF0ZTogLT4KICAgICAgICBzdXBlcgogICAgICAgIEBpdGVtV2luZG93Lm1lbWJlciA9IEBtZW1iZXIKICAgICAgICBpZiBub3QgQGFjdGl2ZQogICAgICAgICAgICBAdHlwZVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgICAgICBAaXRlbVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgICAgICByZXR1cm4KICAgICAgICAKICAgICAgICBpZiBub3QgQHR5cGVXaW5kb3cuYWN0aXZlIGFuZCBub3QgQGl0ZW1XaW5kb3cuYWN0aXZlCiAgICAgICAgICAgIEB0eXBlV2luZG93LmFjdGl2ZSA9IHllcwogICAgICAgICAgICBAaXRlbVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgICAgICBAaXRlbVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gbm8KICAgICAgICAgICAgCiAgICAgICAgQHR5cGVXaW5kb3cuY3Vyc29yVmlzaWJsZSA9IEBhY3RpdmUKICAgICAgICBAdHlwZVdpbmRvdy5hY3RpdmUgPSAhQGl0ZW1XaW5kb3cuYWN0aXZlCiAgICAgICAgCiAgICByZWRyYXc6IC0+CiAgICAgICAgQHR5cGVXaW5kb3cucmVkcmF3KCkKICAgICAgICBAaXRlbVdpbmRvdy5yZWRyYXcoKQogICAgICAgIAogICAgcmVidWlsZDogLT4KICAgICAgICBAaXRlbVdpbmRvdy5yZWJ1aWxkUm93cygpCiAgICAgICAgQHJlZHJhdygpCiAgICAgICAgCiAgICBjbGVhckRlc2NyaXB0aW9uOiAtPgogICAgICAgIEBkZXNjcmlwdGlvbldpbmRvdy50ZXh0ID0gIiIKICAgICAgICBAZGVzY3JpcHRpb25XaW5kb3cucmVkcmF3KCkKICAgICAgICAKICAgICAKICAgIG9uVHlwZUFjY2VwdDogLT4KICAgICAgICBAdHlwZVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgIEBpdGVtV2luZG93LmFjdGl2ZSA9IHllcwogICAgICAgIEBpdGVtV2luZG93LmN1cnNvclZpc2libGUgPSB5ZXMgCiAgICAgICAgCiAgICBvblR5cGVDYW5jZWw6IC0+CiAgICAgICAgQHR5cGVXaW5kb3cuYWN0aXZlID0gbm8KICAgICAgICBAdHlwZVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gbm8KICAgICAgICBAYWN0aXZlID0gbm8KICAgICAgICAKICAgICAgICBpZiBAb25DYW5jZWw/IAogICAgICAgICAgICBAb25DYW5jZWwoKQogICAgb25UeXBlQ2hhbmdlOiAtPgogICAgICAgICMjIwogICAgICAgIGl0ZW1zID0gbnVsbAogICAgICAgIHJvd3MgPSBbXQogICAgICAgIHJvdyA9IDAKICAgICAgICBjb2x1bW4gPSAwCiAgICAgICAgc3dpdGNoIEB0eXBlV2luZG93LnNlbGVjdGVkQ29sdW1uCiAgICAgICAgICAgIHdoZW4gMAogICAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkuaXRlbXMKICAgICAgICAgICAgd2hlbiAxCiAgICAgICAgICAgICAgICBpdGVtcyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS53ZWFwb25zCiAgICAgICAgICAgIHdoZW4gMgogICAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkuYXJtb3JzCiAgICAgICAgICAgIHdoZW4gMwogICAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkua2V5SXRlbXMKICAgICAgICAgICAgICAgIAogICAgICAgIGZvciBpIGluIFswLi4uaXRlbXMubGVuZ3RoXQogICAgICAgICAgICByb3cgPSBNYXRoLmZsb29yKGkgLyAyKQogICAgICAgICAgICBjb2x1bW4gPSBpICUgMgogICAgICAgICAgICBpZiBub3Qgcm93c1tyb3ddPyB0aGVuIHJvd3Nbcm93XSA9IFtdCiAgICAgICAgICAgIHJvd3Nbcm93XVtjb2x1bW5dID0gaXRlbXNbaV0KICAgICAgICAgICAgIyMjCiAgICAgICAgI0BpdGVtV2luZG93LnJvd3MgPSByb3dzCiAgICAgICAgI0BpdGVtV2luZG93LnJlZHJhdygpCiAgICAgICAgQGl0ZW1XaW5kb3cudHlwZSA9IEB0eXBlV2luZG93LnNlbGVjdGVkQ29sdW1uCiAgICAgICAgQHJlYnVpbGQoKQogICAgICAgIAogICAgCiAgICBvbkl0ZW1BY2NlcHQ6IC0+CiAgICAgICAgaWYgQG9uSXRlbVNlbGVjdGlvbj8KICAgICAgICAgICAgQHNlbGVjdGVkSXRlbSA9IEBpdGVtV2luZG93LnNlbGVjdGVkQ2VsbAogICAgICAgICAgICBAb25JdGVtU2VsZWN0aW9uKEBpdGVtV2luZG93LnNlbGVjdGVkQ2VsbCkKICAgICAgICAgICAgCiAgICBvbkl0ZW1DYW5jZWw6IC0+CiAgICAgICAgQHR5cGVXaW5kb3cuYWN0aXZlID0geWVzCiAgICAgICAgQGl0ZW1XaW5kb3cuYWN0aXZlID0gbm8KICAgICAgICBAaXRlbVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gbm8KICAgICAgICBAY2xlYXJEZXNjcmlwdGlvbigpCiAgICAgICAgICAgIAogICAgb25JdGVtQ2hhbmdlOiAtPgogICAgICAgIGNlbGwgPSBAaXRlbVdpbmRvdy5zZWxlY3RlZENlbGwKCiAgICAgICAgaWYgY2VsbD8gYW5kIGNlbGwuaXRlbT8KICAgICAgICAgICAgQGRlc2NyaXB0aW9uV2luZG93LnRleHQgPSBjZWxsLml0ZW0uZGVzY3JpcHRpb24gfHwgIiIKICAgICAgICAgICAgQGRlc2NyaXB0aW9uV2luZG93LnJlZHJhdygpCiAgICAgICAgZWxzZQogICAgICAgICAgICBAY2xlYXJEZXNjcmlwdGlvbigpCiAgICAgICAgCndpbmRvdy5XaW5kb3dzZXRfSXRlbXMgPSBXaW5kb3dzZXRfSXRlbXM=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dzZXRfSXRlbXMsCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBXaW5kb3dzZXRfSXRlbXMgPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoV2luZG93c2V0X0l0ZW1zLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd3NldF9JdGVtcyh4LCB5LCB2aWV3cG9ydCwgd2lkdGgpIHsKICAgICAgdmFyIHZvY2FiLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgV2luZG93c2V0X0l0ZW1zLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB3aWR0aCA9IHdpZHRoIHx8ICg0NjYgKiBXaW5kb3dfQmFzZS5zY2FsZSk7CiAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5OwogICAgICB0aGlzLnR5cGVXaW5kb3cgPSBuZXcgV2luZG93X1NlbGVjdGlvbih4LCB5LCAzLCBbW2xjcyh2b2NhYi5tZW51Lml0ZW1zKSwgbGNzKHZvY2FiLm1lbnUud2VhcG9ucyksIGxjcyh2b2NhYi5tZW51LmFybW9ycyldXSwgTWF0aC5mbG9vcih3aWR0aCAvIDMpIC0gOCAqIFdpbmRvd19CYXNlLnNjYWxlLCAyMCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMudHlwZVdpbmRvdy5jb250ZW50cy5mb250ID0gdGhpcy50eXBlV2luZG93Lm5hbWVGb250OwogICAgICB0aGlzLnR5cGVXaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgIHRoaXMudHlwZVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gZmFsc2U7CiAgICAgIHRoaXMudHlwZVdpbmRvdy53aWR0aCA9IHdpZHRoOwogICAgICB0aGlzLnR5cGVXaW5kb3cub25TZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25UeXBlQ2hhbmdlKCk7CiAgICAgIH07CiAgICAgIHRoaXMudHlwZVdpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vblR5cGVBY2NlcHQoKTsKICAgICAgfTsKICAgICAgdGhpcy50eXBlV2luZG93Lm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uVHlwZUNhbmNlbCgpOwogICAgICB9OwogICAgICB0aGlzLml0ZW1XaW5kb3cgPSBuZXcgV2luZG93X0l0ZW1zKHgsIHkgKyB0aGlzLnR5cGVXaW5kb3cuaGVpZ2h0LCAyLCBbXSwgKHdpZHRoIC8gMikgLSAxMiAqIFdpbmRvd19CYXNlLnNjYWxlLCAyNiAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5vblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vbkl0ZW1DaGFuZ2UoKTsKICAgICAgfTsKICAgICAgdGhpcy5pdGVtV2luZG93LmNvbnRlbnRzLmZvbnQgPSB0aGlzLml0ZW1XaW5kb3cubmFtZUZvbnQ7CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5oZWlnaHQgPSAyNjQgKiBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgdGhpcy5pdGVtV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLml0ZW1XaW5kb3cuY3Vyc29yVmlzaWJsZSA9IGZhbHNlOwogICAgICB0aGlzLml0ZW1XaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25JdGVtQWNjZXB0KCk7CiAgICAgIH07CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5vbkNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vbkl0ZW1DYW5jZWwoKTsKICAgICAgfTsKICAgICAgdGhpcy5kZXNjcmlwdGlvbldpbmRvdyA9IG5ldyBXaW5kb3dfVGV4dCh4LCB0aGlzLml0ZW1XaW5kb3cueSArIHRoaXMuaXRlbVdpbmRvdy5oZWlnaHQsIHRoaXMudHlwZVdpbmRvdy53aWR0aCwgNTggKiBXaW5kb3dfQmFzZS5zY2FsZSwgdmlld3BvcnQpOwogICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLndpbmRvd3MucHVzaCh0aGlzLnR5cGVXaW5kb3cpOwogICAgICB0aGlzLndpbmRvd3MucHVzaCh0aGlzLml0ZW1XaW5kb3cpOwogICAgICB0aGlzLndpbmRvd3MucHVzaCh0aGlzLmRlc2NyaXB0aW9uV2luZG93KTsKICAgICAgdGhpcy53aWR0aCA9IHRoaXMuaXRlbVdpbmRvdy53aWR0aDsKICAgIH0KCiAgICBXaW5kb3dzZXRfSXRlbXMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBXaW5kb3dzZXRfSXRlbXMuX19zdXBlcl9fLnVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgICB0aGlzLml0ZW1XaW5kb3cubWVtYmVyID0gdGhpcy5tZW1iZXI7CiAgICAgIGlmICghdGhpcy5hY3RpdmUpIHsKICAgICAgICB0aGlzLnR5cGVXaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgdGhpcy5pdGVtV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIHJldHVybjsKICAgICAgfQogICAgICBpZiAoIXRoaXMudHlwZVdpbmRvdy5hY3RpdmUgJiYgIXRoaXMuaXRlbVdpbmRvdy5hY3RpdmUpIHsKICAgICAgICB0aGlzLnR5cGVXaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgICB0aGlzLml0ZW1XaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgdGhpcy5pdGVtV2luZG93LmN1cnNvclZpc2libGUgPSBmYWxzZTsKICAgICAgfQogICAgICB0aGlzLnR5cGVXaW5kb3cuY3Vyc29yVmlzaWJsZSA9IHRoaXMuYWN0aXZlOwogICAgICByZXR1cm4gdGhpcy50eXBlV2luZG93LmFjdGl2ZSA9ICF0aGlzLml0ZW1XaW5kb3cuYWN0aXZlOwogICAgfTsKCiAgICBXaW5kb3dzZXRfSXRlbXMucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnR5cGVXaW5kb3cucmVkcmF3KCk7CiAgICAgIHJldHVybiB0aGlzLml0ZW1XaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9JdGVtcy5wcm90b3R5cGUucmVidWlsZCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLml0ZW1XaW5kb3cucmVidWlsZFJvd3MoKTsKICAgICAgcmV0dXJuIHRoaXMucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9JdGVtcy5wcm90b3R5cGUuY2xlYXJEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmRlc2NyaXB0aW9uV2luZG93LnRleHQgPSAiIjsKICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9JdGVtcy5wcm90b3R5cGUub25UeXBlQWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMudHlwZVdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy5pdGVtV2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgIHJldHVybiB0aGlzLml0ZW1XaW5kb3cuY3Vyc29yVmlzaWJsZSA9IHRydWU7CiAgICB9OwoKICAgIFdpbmRvd3NldF9JdGVtcy5wcm90b3R5cGUub25UeXBlQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMudHlwZVdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy50eXBlV2luZG93LmN1cnNvclZpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgICAgaWYgKHRoaXMub25DYW5jZWwgIT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLm9uQ2FuY2VsKCk7CiAgICAgIH0KICAgIH07CgogICAgV2luZG93c2V0X0l0ZW1zLnByb3RvdHlwZS5vblR5cGVDaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgLyoKICAgICAgaXRlbXMgPSBudWxsCiAgICAgIHJvd3MgPSBbXQogICAgICByb3cgPSAwCiAgICAgIGNvbHVtbiA9IDAKICAgICAgc3dpdGNoIEB0eXBlV2luZG93LnNlbGVjdGVkQ29sdW1uCiAgICAgICAgICB3aGVuIDAKICAgICAgICAgICAgICBpdGVtcyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS5pdGVtcwogICAgICAgICAgd2hlbiAxCiAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkud2VhcG9ucwogICAgICAgICAgd2hlbiAyCiAgICAgICAgICAgICAgaXRlbXMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkuYXJtb3JzCiAgICAgICAgICB3aGVuIDMKICAgICAgICAgICAgICBpdGVtcyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS5rZXlJdGVtcwogICAgICAgICAgICAgIAogICAgICBmb3IgaSBpbiBbMC4uLml0ZW1zLmxlbmd0aF0KICAgICAgICAgIHJvdyA9IE1hdGguZmxvb3IoaSAvIDIpCiAgICAgICAgICBjb2x1bW4gPSBpICUgMgogICAgICAgICAgaWYgbm90IHJvd3Nbcm93XT8gdGhlbiByb3dzW3Jvd10gPSBbXQogICAgICAgICAgcm93c1tyb3ddW2NvbHVtbl0gPSBpdGVtc1tpXQogICAgICAqLwoKICAgICAgdGhpcy5pdGVtV2luZG93LnR5cGUgPSB0aGlzLnR5cGVXaW5kb3cuc2VsZWN0ZWRDb2x1bW47CiAgICAgIHJldHVybiB0aGlzLnJlYnVpbGQoKTsKICAgIH07CgogICAgV2luZG93c2V0X0l0ZW1zLnByb3RvdHlwZS5vbkl0ZW1BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMub25JdGVtU2VsZWN0aW9uICE9IG51bGwpIHsKICAgICAgICB0aGlzLnNlbGVjdGVkSXRlbSA9IHRoaXMuaXRlbVdpbmRvdy5zZWxlY3RlZENlbGw7CiAgICAgICAgcmV0dXJuIHRoaXMub25JdGVtU2VsZWN0aW9uKHRoaXMuaXRlbVdpbmRvdy5zZWxlY3RlZENlbGwpOwogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd3NldF9JdGVtcy5wcm90b3R5cGUub25JdGVtQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMudHlwZVdpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICB0aGlzLml0ZW1XaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gZmFsc2U7CiAgICAgIHJldHVybiB0aGlzLmNsZWFyRGVzY3JpcHRpb24oKTsKICAgIH07CgogICAgV2luZG93c2V0X0l0ZW1zLnByb3RvdHlwZS5vbkl0ZW1DaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNlbGw7CiAgICAgIGNlbGwgPSB0aGlzLml0ZW1XaW5kb3cuc2VsZWN0ZWRDZWxsOwogICAgICBpZiAoKGNlbGwgIT0gbnVsbCkgJiYgKGNlbGwuaXRlbSAhPSBudWxsKSkgewogICAgICAgIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cudGV4dCA9IGNlbGwuaXRlbS5kZXNjcmlwdGlvbiB8fCAiIjsKICAgICAgICByZXR1cm4gdGhpcy5kZXNjcmlwdGlvbldpbmRvdy5yZWRyYXcoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICByZXR1cm4gdGhpcy5jbGVhckRlc2NyaXB0aW9uKCk7CiAgICAgIH0KICAgIH07CgogICAgcmV0dXJuIFdpbmRvd3NldF9JdGVtczsKCiAgfSkoV2luZG93c2V0X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93c2V0X0l0ZW1zID0gV2luZG93c2V0X0l0ZW1zOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Windowset_BuyItems","content":"","compiledContent":""},{"name":"Windowset_Skills","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93c2V0X1NraWxscwojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0yNAojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgICBDbGFzczogV2luZG93c2V0X1NraWxscwojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyB0aGUgd2luZG93cyBuZWVkZWQgZm9yIHNraWxsIHNlbGVjdGlvbgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93c2V0X1NraWxscyBleHRlbmRzIFdpbmRvd3NldF9CYXNlCiAgICBjb25zdHJ1Y3RvcjogKHgsIHksIHZpZXdwb3J0LCB3aWR0aCkgLT4KICAgICAgICBzdXBlcgogICAgICAgIHdpZHRoID0gd2lkdGggfHwgKDQ2NiAqIFdpbmRvd19CYXNlLnNjYWxlKQogICAgICAgIEB0eXBlV2luZG93ID0gbmV3IFdpbmRvd19Ta2lsbFR5cGUoeCwgeSwgdmlld3BvcnQsIHdpZHRoKQogICAgICAgIEB0eXBlV2luZG93LmFjdGl2ZSA9IG5vCiAgICAgICAgQHR5cGVXaW5kb3cud2lkdGggPSB3aWR0aAogICAgICAgIEB0eXBlV2luZG93LmN1cnNvclZpc2libGUgPSBubwogICAgICAgIEB0eXBlV2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gPT4gQG9uVHlwZUNoYW5nZSgpCiAgICAgICAgQHR5cGVXaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSA9PiBAb25UeXBlQWNjZXB0KCkKICAgICAgICBAdHlwZVdpbmRvdy5vbkNhbmNlbCA9ID0+IEBvblR5cGVDYW5jZWwoKQogICAgICAgIEBpdGVtV2luZG93ID0gbmV3IFdpbmRvd19Ta2lsbHMoeCwgeStAdHlwZVdpbmRvdy5oZWlnaHQsIDIsIFtdLCAod2lkdGggLyAyKSAtIDEyKldpbmRvd19CYXNlLnNjYWxlLCAyNipXaW5kb3dfQmFzZS5zY2FsZSwgdmlld3BvcnQpCiAgICAgICAgQGl0ZW1XaW5kb3cub25TZWxlY3Rpb25DaGFuZ2UgPSA9PiBAb25JdGVtQ2hhbmdlKCkKICAgICAgICBAaXRlbVdpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9ID0+IEBvbkl0ZW1BY2NlcHQoKQogICAgICAgIEBpdGVtV2luZG93Lm9uQ2FuY2VsID0gPT4gQG9uSXRlbUNhbmNlbCgpCiAgICAgICAgQGl0ZW1XaW5kb3cuY29udGVudHMuZm9udCA9IEBpdGVtV2luZG93Lm5hbWVGb250CiAgICAgICAgQGl0ZW1XaW5kb3cuaGVpZ2h0ID0gMjY0ICogV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBAaXRlbVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgIEBpdGVtV2luZG93LmN1cnNvclZpc2libGUgPSBubwogICAgICAgIEBkZXNjcmlwdGlvbldpbmRvdyA9IG5ldyBXaW5kb3dfVGV4dCh4LCBAaXRlbVdpbmRvdy55K0BpdGVtV2luZG93LmhlaWdodCwgQHR5cGVXaW5kb3cud2lkdGgsIDU4ICogV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KQogICAgICAgIEBhY3RpdmUgPSBubwogICAgICAgIAogICAgICAgIEB3aW5kb3dzLnB1c2goQHR5cGVXaW5kb3cpCiAgICAgICAgQHdpbmRvd3MucHVzaChAaXRlbVdpbmRvdykKICAgICAgICBAd2luZG93cy5wdXNoKEBkZXNjcmlwdGlvbldpbmRvdykKICAgICAgICAgICAgICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIHN1cGVyCiAgICAgICAgCiAgICAgICAgQGl0ZW1XaW5kb3cubWVtYmVyID0gQG1lbWJlcgogICAgICAgIAogICAgICAgIGlmIG5vdCBAYWN0aXZlCiAgICAgICAgICAgIEB0eXBlV2luZG93LmFjdGl2ZSA9IG5vCiAgICAgICAgICAgIEBpdGVtV2luZG93LmFjdGl2ZSA9IG5vCiAgICAgICAgICAgIHJldHVybgogICAgICAgIAogICAgICAgIGlmIG5vdCBAdHlwZVdpbmRvdy5hY3RpdmUgYW5kIG5vdCBAaXRlbVdpbmRvdy5hY3RpdmUKICAgICAgICAgICAgQHR5cGVXaW5kb3cuYWN0aXZlID0geWVzCiAgICAgICAgICAgIEBpdGVtV2luZG93LmFjdGl2ZSA9IG5vCiAgICAgICAgICAgIEBpdGVtV2luZG93LmN1cnNvclZpc2libGUgPSBubwogICAgICAgIAogICAgICAgIEB0eXBlV2luZG93LmN1cnNvclZpc2libGUgPSBAYWN0aXZlCiAgICAgICAgQHR5cGVXaW5kb3cuYWN0aXZlID0gIUBpdGVtV2luZG93LmFjdGl2ZQogICAgY2xlYXJEZXNjcmlwdGlvbjogLT4KICAgICAgICBAZGVzY3JpcHRpb25XaW5kb3cudGV4dCA9ICIiCiAgICAgICAgQGRlc2NyaXB0aW9uV2luZG93LnJlZHJhdygpCiAgICAgICAgCiAgICByZWJ1aWxkOiAtPgogICAgICAgIGlmIEBtZW1iZXI/CiAgICAgICAgICAgIHNraWxsVHlwZXMgPSBbXQogICAgICAgICAgICBmb3IgdHlwZSBpbiBAbWVtYmVyLnNraWxsVHlwZXMKICAgICAgICAgICAgICAgIGlmIHR5cGU/CiAgICAgICAgICAgICAgICAgICAgc2tpbGxUeXBlcy5wdXNoKHR5cGUpCiAgICAgICAgICAgICAgICAgICAgCiAgICAgICAgICAgIEB0eXBlV2luZG93LnJvd3NbMF0gPSBza2lsbFR5cGVzCiAgICAgICAgICAgIAogICAgICAgIEBvblR5cGVDaGFuZ2UoKQogICAgICAgICAgICAKICAgIHJlZHJhdzogLT4KICAgICAgICBAdHlwZVdpbmRvdy5yZWRyYXcoKQogICAgICAgIEBpdGVtV2luZG93LnJlZHJhdygpCiAgICAgICAgCiAgICBvblR5cGVBY2NlcHQ6IC0+CiAgICAgICAgQHR5cGVXaW5kb3cuYWN0aXZlID0gbm8KICAgICAgICBAaXRlbVdpbmRvdy5hY3RpdmUgPSB5ZXMKICAgICAgICBAaXRlbVdpbmRvdy5jdXJzb3JWaXNpYmxlID0geWVzCiAgICAgICAgCiAgICBvblR5cGVDYW5jZWw6IC0+CiAgICAgICAgQHR5cGVXaW5kb3cuYWN0aXZlID0gbm8KICAgICAgICBAdHlwZVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gbm8KICAgICAgICBAYWN0aXZlID0gbm8KICAgICAgICBpZiBAb25DYW5jZWw/IAogICAgICAgICAgICBAb25DYW5jZWwoKQogICAgICAgICAgICAgICAgCiAgICBvblR5cGVDaGFuZ2U6IC0+CiAgICAgICAgaXRlbXMgPSBudWxsCiAgICAgICAgcm93cyA9IFtdCiAgICAgICAgcm93ID0gMAogICAgICAgIGNvbHVtbiA9IDAKICAgICAgICAKICAgICAgICBpZiBub3QgQHR5cGVXaW5kb3cuc2VsZWN0ZWRDZWxsPyB0aGVuIHJldHVybgogICAgICAgIAogICAgICAgIEBpdGVtV2luZG93LnR5cGUgPSBAdHlwZVdpbmRvdy5zZWxlY3RlZENlbGwuaW5kZXgKICAgICAgICBAaXRlbVdpbmRvdy5tZW1iZXIgPSBAbWVtYmVyCiAgICAgICAgQGl0ZW1XaW5kb3cucmVidWlsZFJvd3MoKQogICAgICAgIEBpdGVtV2luZG93LnJlZHJhdygpCiAgICAgICAgCiAgICBvbkl0ZW1BY2NlcHQ6IC0+CiAgICAgICAgaWYgQG9uU2tpbGxTZWxlY3Rpb24/CiAgICAgICAgICAgIEBzZWxlY3RlZFNraWxsID0gQGl0ZW1XaW5kb3cuc2VsZWN0ZWRDZWxsCiAgICAgICAgICAgIEBvblNraWxsU2VsZWN0aW9uKEBpdGVtV2luZG93LnNlbGVjdGVkQ2VsbCkKICAgICAgICAgICAKICAgIG9uSXRlbUNhbmNlbDogLT4KICAgICAgICBAdHlwZVdpbmRvdy5hY3RpdmUgPSB5ZXMKICAgICAgICBAaXRlbVdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgIEBpdGVtV2luZG93LmN1cnNvclZpc2libGUgPSBubwogICAgICAgIEBjbGVhckRlc2NyaXB0aW9uKCkKICAgICAgICAKICAgIG9uSXRlbUNoYW5nZTogLT4KICAgICAgICBjZWxsID0gQGl0ZW1XaW5kb3cuc2VsZWN0ZWRDZWxsCgogICAgICAgIGlmIGNlbGw/CiAgICAgICAgICAgIEBkZXNjcmlwdGlvbldpbmRvdy50ZXh0ID0gY2VsbC5kZXNjcmlwdGlvbgogICAgICAgICAgICBAZGVzY3JpcHRpb25XaW5kb3cucmVkcmF3KCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBjbGVhckRlc2NyaXB0aW9uKCkKICAgICAgICAKd2luZG93LldpbmRvd3NldF9Ta2lsbHMgPSBXaW5kb3dzZXRfU2tpbGxz","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dzZXRfU2tpbGxzLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93c2V0X1NraWxscyA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dzZXRfU2tpbGxzLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd3NldF9Ta2lsbHMoeCwgeSwgdmlld3BvcnQsIHdpZHRoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIFdpbmRvd3NldF9Ta2lsbHMuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIHdpZHRoID0gd2lkdGggfHwgKDQ2NiAqIFdpbmRvd19CYXNlLnNjYWxlKTsKICAgICAgdGhpcy50eXBlV2luZG93ID0gbmV3IFdpbmRvd19Ta2lsbFR5cGUoeCwgeSwgdmlld3BvcnQsIHdpZHRoKTsKICAgICAgdGhpcy50eXBlV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLnR5cGVXaW5kb3cud2lkdGggPSB3aWR0aDsKICAgICAgdGhpcy50eXBlV2luZG93LmN1cnNvclZpc2libGUgPSBmYWxzZTsKICAgICAgdGhpcy50eXBlV2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uVHlwZUNoYW5nZSgpOwogICAgICB9OwogICAgICB0aGlzLnR5cGVXaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25UeXBlQWNjZXB0KCk7CiAgICAgIH07CiAgICAgIHRoaXMudHlwZVdpbmRvdy5vbkNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vblR5cGVDYW5jZWwoKTsKICAgICAgfTsKICAgICAgdGhpcy5pdGVtV2luZG93ID0gbmV3IFdpbmRvd19Ta2lsbHMoeCwgeSArIHRoaXMudHlwZVdpbmRvdy5oZWlnaHQsIDIsIFtdLCAod2lkdGggLyAyKSAtIDEyICogV2luZG93X0Jhc2Uuc2NhbGUsIDI2ICogV2luZG93X0Jhc2Uuc2NhbGUsIHZpZXdwb3J0KTsKICAgICAgdGhpcy5pdGVtV2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uSXRlbUNoYW5nZSgpOwogICAgICB9OwogICAgICB0aGlzLml0ZW1XaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25JdGVtQWNjZXB0KCk7CiAgICAgIH07CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5vbkNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vbkl0ZW1DYW5jZWwoKTsKICAgICAgfTsKICAgICAgdGhpcy5pdGVtV2luZG93LmNvbnRlbnRzLmZvbnQgPSB0aGlzLml0ZW1XaW5kb3cubmFtZUZvbnQ7CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5oZWlnaHQgPSAyNjQgKiBXaW5kb3dfQmFzZS5zY2FsZTsKICAgICAgdGhpcy5pdGVtV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLml0ZW1XaW5kb3cuY3Vyc29yVmlzaWJsZSA9IGZhbHNlOwogICAgICB0aGlzLmRlc2NyaXB0aW9uV2luZG93ID0gbmV3IFdpbmRvd19UZXh0KHgsIHRoaXMuaXRlbVdpbmRvdy55ICsgdGhpcy5pdGVtV2luZG93LmhlaWdodCwgdGhpcy50eXBlV2luZG93LndpZHRoLCA1OCAqIFdpbmRvd19CYXNlLnNjYWxlLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7CiAgICAgIHRoaXMud2luZG93cy5wdXNoKHRoaXMudHlwZVdpbmRvdyk7CiAgICAgIHRoaXMud2luZG93cy5wdXNoKHRoaXMuaXRlbVdpbmRvdyk7CiAgICAgIHRoaXMud2luZG93cy5wdXNoKHRoaXMuZGVzY3JpcHRpb25XaW5kb3cpOwogICAgfQoKICAgIFdpbmRvd3NldF9Ta2lsbHMucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICBXaW5kb3dzZXRfU2tpbGxzLl9fc3VwZXJfXy51cGRhdGUuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgdGhpcy5pdGVtV2luZG93Lm1lbWJlciA9IHRoaXMubWVtYmVyOwogICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7CiAgICAgICAgdGhpcy50eXBlV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIHRoaXMuaXRlbVdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgaWYgKCF0aGlzLnR5cGVXaW5kb3cuYWN0aXZlICYmICF0aGlzLml0ZW1XaW5kb3cuYWN0aXZlKSB7CiAgICAgICAgdGhpcy50eXBlV2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgdGhpcy5pdGVtV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIHRoaXMuaXRlbVdpbmRvdy5jdXJzb3JWaXNpYmxlID0gZmFsc2U7CiAgICAgIH0KICAgICAgdGhpcy50eXBlV2luZG93LmN1cnNvclZpc2libGUgPSB0aGlzLmFjdGl2ZTsKICAgICAgcmV0dXJuIHRoaXMudHlwZVdpbmRvdy5hY3RpdmUgPSAhdGhpcy5pdGVtV2luZG93LmFjdGl2ZTsKICAgIH07CgogICAgV2luZG93c2V0X1NraWxscy5wcm90b3R5cGUuY2xlYXJEZXNjcmlwdGlvbiA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmRlc2NyaXB0aW9uV2luZG93LnRleHQgPSAiIjsKICAgICAgcmV0dXJuIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9Ta2lsbHMucHJvdG90eXBlLnJlYnVpbGQgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNraWxsVHlwZXMsIHR5cGUsIF9pLCBfbGVuLCBfcmVmOwogICAgICBpZiAodGhpcy5tZW1iZXIgIT0gbnVsbCkgewogICAgICAgIHNraWxsVHlwZXMgPSBbXTsKICAgICAgICBfcmVmID0gdGhpcy5tZW1iZXIuc2tpbGxUeXBlczsKICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgIHR5cGUgPSBfcmVmW19pXTsKICAgICAgICAgIGlmICh0eXBlICE9IG51bGwpIHsKICAgICAgICAgICAgc2tpbGxUeXBlcy5wdXNoKHR5cGUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICB0aGlzLnR5cGVXaW5kb3cucm93c1swXSA9IHNraWxsVHlwZXM7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMub25UeXBlQ2hhbmdlKCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9Ta2lsbHMucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnR5cGVXaW5kb3cucmVkcmF3KCk7CiAgICAgIHJldHVybiB0aGlzLml0ZW1XaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9Ta2lsbHMucHJvdG90eXBlLm9uVHlwZUFjY2VwdCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnR5cGVXaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICByZXR1cm4gdGhpcy5pdGVtV2luZG93LmN1cnNvclZpc2libGUgPSB0cnVlOwogICAgfTsKCiAgICBXaW5kb3dzZXRfU2tpbGxzLnByb3RvdHlwZS5vblR5cGVDYW5jZWwgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy50eXBlV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLnR5cGVXaW5kb3cuY3Vyc29yVmlzaWJsZSA9IGZhbHNlOwogICAgICB0aGlzLmFjdGl2ZSA9IGZhbHNlOwogICAgICBpZiAodGhpcy5vbkNhbmNlbCAhPSBudWxsKSB7CiAgICAgICAgcmV0dXJuIHRoaXMub25DYW5jZWwoKTsKICAgICAgfQogICAgfTsKCiAgICBXaW5kb3dzZXRfU2tpbGxzLnByb3RvdHlwZS5vblR5cGVDaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGNvbHVtbiwgaXRlbXMsIHJvdywgcm93czsKICAgICAgaXRlbXMgPSBudWxsOwogICAgICByb3dzID0gW107CiAgICAgIHJvdyA9IDA7CiAgICAgIGNvbHVtbiA9IDA7CiAgICAgIGlmICh0aGlzLnR5cGVXaW5kb3cuc2VsZWN0ZWRDZWxsID09IG51bGwpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgdGhpcy5pdGVtV2luZG93LnR5cGUgPSB0aGlzLnR5cGVXaW5kb3cuc2VsZWN0ZWRDZWxsLmluZGV4OwogICAgICB0aGlzLml0ZW1XaW5kb3cubWVtYmVyID0gdGhpcy5tZW1iZXI7CiAgICAgIHRoaXMuaXRlbVdpbmRvdy5yZWJ1aWxkUm93cygpOwogICAgICByZXR1cm4gdGhpcy5pdGVtV2luZG93LnJlZHJhdygpOwogICAgfTsKCiAgICBXaW5kb3dzZXRfU2tpbGxzLnByb3RvdHlwZS5vbkl0ZW1BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKHRoaXMub25Ta2lsbFNlbGVjdGlvbiAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5zZWxlY3RlZFNraWxsID0gdGhpcy5pdGVtV2luZG93LnNlbGVjdGVkQ2VsbDsKICAgICAgICByZXR1cm4gdGhpcy5vblNraWxsU2VsZWN0aW9uKHRoaXMuaXRlbVdpbmRvdy5zZWxlY3RlZENlbGwpOwogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd3NldF9Ta2lsbHMucHJvdG90eXBlLm9uSXRlbUNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnR5cGVXaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgdGhpcy5pdGVtV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICB0aGlzLml0ZW1XaW5kb3cuY3Vyc29yVmlzaWJsZSA9IGZhbHNlOwogICAgICByZXR1cm4gdGhpcy5jbGVhckRlc2NyaXB0aW9uKCk7CiAgICB9OwoKICAgIFdpbmRvd3NldF9Ta2lsbHMucHJvdG90eXBlLm9uSXRlbUNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgY2VsbDsKICAgICAgY2VsbCA9IHRoaXMuaXRlbVdpbmRvdy5zZWxlY3RlZENlbGw7CiAgICAgIGlmIChjZWxsICE9IG51bGwpIHsKICAgICAgICB0aGlzLmRlc2NyaXB0aW9uV2luZG93LnRleHQgPSBjZWxsLmRlc2NyaXB0aW9uOwogICAgICAgIHJldHVybiB0aGlzLmRlc2NyaXB0aW9uV2luZG93LnJlZHJhdygpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiB0aGlzLmNsZWFyRGVzY3JpcHRpb24oKTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gV2luZG93c2V0X1NraWxsczsKCiAgfSkoV2luZG93c2V0X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93c2V0X1NraWxscyA9IFdpbmRvd3NldF9Ta2lsbHM7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Windowset_Equipment","content":"","compiledContent":""},{"name":"Windowset_Save","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93c2V0X1NhdmUKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjYKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICAgQ2xhc3M6IFdpbmRvd3NldF9TYXZlCiMKIyAgIEEgd2luZG93IHdoaWNoIGRpc3BsYXlzIHRoZSBzYXZlZ2FtZSB3aW5kb3dzLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgV2luZG93c2V0X1NhdmUgZXh0ZW5kcyBXaW5kb3dzZXRfQmFzZQogICAgY29uc3RydWN0b3I6ICh4LCB5KSAtPgogICAgICAgIHN1cGVyCiAgICAgICAgCiAgICAgICAgQGRlc2NyaXB0aW9uV2luZG93ID0gbmV3IFdpbmRvd19UZXh0KHgsIHksIDQ2NiAqIFdpbmRvd19CYXNlLnNjYWxlLCA0MiAqIFdpbmRvd19CYXNlLnNjYWxlKQogICAgICAgIEBkZXNjcmlwdGlvbldpbmRvdy50ZXh0ID0gbGNzKFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeS5zYXZlR2FtZU1lbnUucGxlYXNlU2VsZWN0U2F2ZSkKICAgICAgICBveSA9IEBkZXNjcmlwdGlvbldpbmRvdy55ICsgQGRlc2NyaXB0aW9uV2luZG93LmhlaWdodAogICAgICAgIAogICAgICAgIEBzYXZlR2FtZVdpbmRvdyA9IG5ldyBXaW5kb3dfU2F2ZUdhbWUoeCwgb3kpCiAgICAgICAgQHNhdmVHYW1lV2luZG93LnNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoMCkKICAgICAgICBAc2F2ZUdhbWVXaW5kb3cuc2xvdCA9IDAKICAgICAgICBAd2luZG93cy5wdXNoKEBzYXZlR2FtZVdpbmRvdykKICAgICAgICBAc2F2ZUdhbWVXaW5kb3cgPSBuZXcgV2luZG93X1NhdmVHYW1lKHgsIG95K0BzYXZlR2FtZVdpbmRvdy5oZWlnaHQpCiAgICAgICAgQHNhdmVHYW1lV2luZG93LnNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoMSkKICAgICAgICBAc2F2ZUdhbWVXaW5kb3cuc2xvdCA9IDEKICAgICAgICBAd2luZG93cy5wdXNoKEBzYXZlR2FtZVdpbmRvdykKICAgICAgICBAc2F2ZUdhbWVXaW5kb3cgPSBuZXcgV2luZG93X1NhdmVHYW1lKHgsIG95K0BzYXZlR2FtZVdpbmRvdy5oZWlnaHQqMikKICAgICAgICBAc2F2ZUdhbWVXaW5kb3cuc2F2ZUdhbWUgPSBHYW1lTWFuYWdlci5nZXRTYXZlR2FtZSgyKQogICAgICAgIEBzYXZlR2FtZVdpbmRvdy5zbG90ID0gMgogICAgICAgIEB3aW5kb3dzLnB1c2goQHNhdmVHYW1lV2luZG93KQogICAgICAgIAogICAgICAgIAogICAgICAgIEBhY3RpdmUgPSBubwoKICAgICAgICBAd2luZG93cy5wdXNoKEBkZXNjcmlwdGlvbldpbmRvdykKICAgICAgICBAY3VycmVudFNlbGVjdGlvbiA9IDAgICAgICAgIAogICAgICAgIEBvbkZpbGVTZWxlY3Rpb24gPSBudWxsCiAgICB1cGRhdGU6IC0+CiAgICAgICAgc3VwZXIKCiAgICAgICAgaWYgbm90IEBhY3RpdmUgdGhlbiByZXR1cm4KICAgICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICBjdyA9IEB3aW5kb3dzW0BjdXJyZW50U2VsZWN0aW9uXQogICAgICAgIGlmIGN3LmN1cnNvclJlY3QuaGVpZ2h0ID09IDAKICAgICAgICAgICAgY3cuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMTAwKnMsIDIwKnMpCiAgICAgICAgICAgIAogICAgICAgIGZvciB3IGluIEB3aW5kb3dzCiAgICAgICAgICAgIGlmIHcgIT0gY3cKICAgICAgICAgICAgICAgIHcuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMCwgMCkKICAgICAgICAKICAgICAgICAKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LkMpCiAgICAgICAgICAgIGlmIEBvbkZpbGVTZWxlY3Rpb24/CiAgICAgICAgICAgICAgICBAb25GaWxlU2VsZWN0aW9uKGN3LnNsb3QpCiAgICAgICAgICAgICAgICAjQGN1cnJlbnRTZWxlY3Rpb24gPSAwCiAgICAgICAgICAgICAgICBjdy5jdXJzb3JSZWN0LnNldCgwLCAwLCAwLCAwKQogICAgICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICAgIyAgIGN3LnNhdmVHYW1lID0gR2FtZU1hbmFnZXIuc2F2ZShjdy5zbG90KQogICAgICAgICAjICAgY3cuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMCwgMCkKICAgICAgICAgIyAgIEBhY3RpdmUgPSBubwogICAgICAgICAgIyAgQGN1cnJlbnRTZWxlY3Rpb24gPSAwCiAgICAgICAgIyAgICBAcmVkcmF3KCkKICAgICAgICAgICAgCiAgICAgICAgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5CKQogICAgICAgICAgICBjdy5jdXJzb3JSZWN0LnNldCgwLCAwLCAwLCAwKQogICAgICAgICAgICBAYWN0aXZlID0gbm8KICAgICAgICAgICAgQGN1cnJlbnRTZWxlY3Rpb24gPSAwCiAgICAgICAgICAgIElucHV0LmNsZWFyKCkKICAgICAgICAgICAgaWYgQG9uQ2FuY2VsPyB0aGVuIEBvbkNhbmNlbCh0aGlzKQogICAgICAgICAgICAKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LkRPV04pCiAgICAgICAgICAgIEBjdXJyZW50U2VsZWN0aW9uID0gTWF0aC5taW4oQGN1cnJlbnRTZWxlY3Rpb24rMSwgMikKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LlVQKQogICAgICAgICAgICBAY3VycmVudFNlbGVjdGlvbiA9IE1hdGgubWF4KEBjdXJyZW50U2VsZWN0aW9uLTEsIDApCiAgICAgICAgICAgIAogICAgICAgIAogICAgICAgICAgICAKICAgICAgICAKICAgIHJlZHJhdzogLT4KICAgICAgICBAcmVkcmF3QWxsV2luZG93cygpCiAgICAgICAgCndpbmRvdy5XaW5kb3dzZXRfU2F2ZSA9IFdpbmRvd3NldF9TYXZl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dzZXRfU2F2ZSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFdpbmRvd3NldF9TYXZlID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFdpbmRvd3NldF9TYXZlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd3NldF9TYXZlKHgsIHkpIHsKICAgICAgdmFyIG95OwogICAgICBXaW5kb3dzZXRfU2F2ZS5fX3N1cGVyX18uY29uc3RydWN0b3IuYXBwbHkodGhpcywgYXJndW1lbnRzKTsKICAgICAgdGhpcy5kZXNjcmlwdGlvbldpbmRvdyA9IG5ldyBXaW5kb3dfVGV4dCh4LCB5LCA0NjYgKiBXaW5kb3dfQmFzZS5zY2FsZSwgNDIgKiBXaW5kb3dfQmFzZS5zY2FsZSk7CiAgICAgIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cudGV4dCA9IGxjcyhSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkuc2F2ZUdhbWVNZW51LnBsZWFzZVNlbGVjdFNhdmUpOwogICAgICBveSA9IHRoaXMuZGVzY3JpcHRpb25XaW5kb3cueSArIHRoaXMuZGVzY3JpcHRpb25XaW5kb3cuaGVpZ2h0OwogICAgICB0aGlzLnNhdmVHYW1lV2luZG93ID0gbmV3IFdpbmRvd19TYXZlR2FtZSh4LCBveSk7CiAgICAgIHRoaXMuc2F2ZUdhbWVXaW5kb3cuc2F2ZUdhbWUgPSBHYW1lTWFuYWdlci5nZXRTYXZlR2FtZSgwKTsKICAgICAgdGhpcy5zYXZlR2FtZVdpbmRvdy5zbG90ID0gMDsKICAgICAgdGhpcy53aW5kb3dzLnB1c2godGhpcy5zYXZlR2FtZVdpbmRvdyk7CiAgICAgIHRoaXMuc2F2ZUdhbWVXaW5kb3cgPSBuZXcgV2luZG93X1NhdmVHYW1lKHgsIG95ICsgdGhpcy5zYXZlR2FtZVdpbmRvdy5oZWlnaHQpOwogICAgICB0aGlzLnNhdmVHYW1lV2luZG93LnNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoMSk7CiAgICAgIHRoaXMuc2F2ZUdhbWVXaW5kb3cuc2xvdCA9IDE7CiAgICAgIHRoaXMud2luZG93cy5wdXNoKHRoaXMuc2F2ZUdhbWVXaW5kb3cpOwogICAgICB0aGlzLnNhdmVHYW1lV2luZG93ID0gbmV3IFdpbmRvd19TYXZlR2FtZSh4LCBveSArIHRoaXMuc2F2ZUdhbWVXaW5kb3cuaGVpZ2h0ICogMik7CiAgICAgIHRoaXMuc2F2ZUdhbWVXaW5kb3cuc2F2ZUdhbWUgPSBHYW1lTWFuYWdlci5nZXRTYXZlR2FtZSgyKTsKICAgICAgdGhpcy5zYXZlR2FtZVdpbmRvdy5zbG90ID0gMjsKICAgICAgdGhpcy53aW5kb3dzLnB1c2godGhpcy5zYXZlR2FtZVdpbmRvdyk7CiAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7CiAgICAgIHRoaXMud2luZG93cy5wdXNoKHRoaXMuZGVzY3JpcHRpb25XaW5kb3cpOwogICAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gPSAwOwogICAgICB0aGlzLm9uRmlsZVNlbGVjdGlvbiA9IG51bGw7CiAgICB9CgogICAgV2luZG93c2V0X1NhdmUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgY3csIHMsIHcsIF9pLCBfbGVuLCBfcmVmOwogICAgICBXaW5kb3dzZXRfU2F2ZS5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICghdGhpcy5hY3RpdmUpIHsKICAgICAgICByZXR1cm47CiAgICAgIH0KICAgICAgcyA9IFdpbmRvd19CYXNlLnNjYWxlOwogICAgICBjdyA9IHRoaXMud2luZG93c1t0aGlzLmN1cnJlbnRTZWxlY3Rpb25dOwogICAgICBpZiAoY3cuY3Vyc29yUmVjdC5oZWlnaHQgPT09IDApIHsKICAgICAgICBjdy5jdXJzb3JSZWN0LnNldCgwLCAwLCAxMDAgKiBzLCAyMCAqIHMpOwogICAgICB9CiAgICAgIF9yZWYgPSB0aGlzLndpbmRvd3M7CiAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgIHcgPSBfcmVmW19pXTsKICAgICAgICBpZiAodyAhPT0gY3cpIHsKICAgICAgICAgIHcuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMCwgMCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LkMpKSB7CiAgICAgICAgaWYgKHRoaXMub25GaWxlU2VsZWN0aW9uICE9IG51bGwpIHsKICAgICAgICAgIHRoaXMub25GaWxlU2VsZWN0aW9uKGN3LnNsb3QpOwogICAgICAgICAgY3cuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMCwgMCk7CiAgICAgICAgfQogICAgICB9CiAgICAgIGlmIChJbnB1dC50cmlnZ2VyKElucHV0LkIpKSB7CiAgICAgICAgY3cuY3Vyc29yUmVjdC5zZXQoMCwgMCwgMCwgMCk7CiAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gPSAwOwogICAgICAgIElucHV0LmNsZWFyKCk7CiAgICAgICAgaWYgKHRoaXMub25DYW5jZWwgIT0gbnVsbCkgewogICAgICAgICAgdGhpcy5vbkNhbmNlbCh0aGlzKTsKICAgICAgICB9CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuRE9XTikpIHsKICAgICAgICB0aGlzLmN1cnJlbnRTZWxlY3Rpb24gPSBNYXRoLm1pbih0aGlzLmN1cnJlbnRTZWxlY3Rpb24gKyAxLCAyKTsKICAgICAgfQogICAgICBpZiAoSW5wdXQudHJpZ2dlcihJbnB1dC5VUCkpIHsKICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50U2VsZWN0aW9uID0gTWF0aC5tYXgodGhpcy5jdXJyZW50U2VsZWN0aW9uIC0gMSwgMCk7CiAgICAgIH0KICAgIH07CgogICAgV2luZG93c2V0X1NhdmUucHJvdG90eXBlLnJlZHJhdyA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5yZWRyYXdBbGxXaW5kb3dzKCk7CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dzZXRfU2F2ZTsKCiAgfSkoV2luZG93c2V0X0Jhc2UpOwoKICB3aW5kb3cuV2luZG93c2V0X1NhdmUgPSBXaW5kb3dzZXRfU2F2ZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Windowset_InputText","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogV2luZG93c2V0X0lucHV0VGV4dAojICAgQ3JlYXRlZCBvbjogMjAxNC0wMS0wMQojCiMgICBDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgICBDbGFzczogV2luZG93c2V0X0lucHV0VGV4dAojCiMgICBBIHdpbmRvdyB3aGljaCBkaXNwbGF5cyB0aGUgc2F2ZWdhbWUgd2luZG93cy4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFdpbmRvd3NldF9JbnB1dFRleHQgZXh0ZW5kcyBXaW5kb3dzZXRfQmFzZQogICAgY29uc3RydWN0b3I6ICh4LCB5LCBsZXR0ZXJzLCBhY3Rvciwgdmlld3BvcnQpIC0+CiAgICAgICAgc3VwZXIKICAgICAgICAKICAgICAgICBAdGV4dEVkaXRXaW5kb3cgPSBuZXcgV2luZG93X1RleHRFZGl0KHgsIHksIGxldHRlcnMsIGFjdG9yLCB2aWV3cG9ydCkKICAgICAgICBAaW5wdXRUZXh0V2luZG93ID0gbmV3IFdpbmRvd19JbnB1dFRleHQoeCwgeSArIEB0ZXh0RWRpdFdpbmRvdy5oZWlnaHQsIHZpZXdwb3J0KQogICAgICAgIEB0ZXh0RWRpdFdpbmRvdy53aWR0aCA9IEBpbnB1dFRleHRXaW5kb3cud2lkdGgKICAgICAgICAKICAgICAgICBAd2luZG93cy5wdXNoKEBpbnB1dFRleHRXaW5kb3cpCiAgICAgICAgQHdpbmRvd3MucHVzaChAdGV4dEVkaXRXaW5kb3cpCiAgICAgICAgCiAgICAgICAgQGlucHV0VGV4dFdpbmRvdy5vbkNoYXJhY3RlckFjY2VwdCA9IChzZW5kZXIsIGNoYXJhY3RlcikgPT4gQG9uQ2hhcmFjdGVyQWNjZXB0KGNoYXJhY3RlcikKICAgICAgICBAaW5wdXRUZXh0V2luZG93Lm9uQWNjZXB0ID0gPT4gQG9uVGV4dEFjY2VwdCgpCiAgICAgICAgQGlucHV0VGV4dFdpbmRvdy5vbkNhbmNlbCA9ID0+IEBvbkNoYXJhY3RlckRlbGV0ZSgpCiAgICAgICAgCiAgICAgICAgQGFjdGl2ZSA9IG5vCiAgICB1cGRhdGU6IC0+CiAgICAgICAgc3VwZXIKCiAgICAgICAgaWYgbm90IEBhY3RpdmUgdGhlbiByZXR1cm4KICAgICAgICAgIAogICAgcmVkcmF3OiAtPgogICAgICAgIEByZWRyYXdBbGxXaW5kb3dzKCkKICAgICAgICAKICAgIG9uVGV4dEFjY2VwdDogLT4KICAgICAgICBAc2hvdyhubywgbm8pCiAgICAgICAgQGlucHV0VGV4dFdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgIEB0ZXh0RWRpdFdpbmRvdy5hY3RpdmUgPSBubwogICAgICAgIGlmIEBvbkFjY2VwdD8gdGhlbiBAb25BY2NlcHQoQHRleHRFZGl0V2luZG93LnRleHQpCiAgICAgICAgCiAgICBvbkNoYXJhY3RlckFjY2VwdDogKGNoYXJhY3RlcikgLT4KICAgICAgICBpZiBAdGV4dEVkaXRXaW5kb3cudGV4dC5sZW5ndGggPCBAdGV4dEVkaXRXaW5kb3cubGV0dGVycwogICAgICAgICAgICBAdGV4dEVkaXRXaW5kb3cudGV4dCArPSBjaGFyYWN0ZXIKICAgICAgICAgICAgQHRleHRFZGl0V2luZG93LnJlZHJhdygpCiAgICAgICAgCiAgICBvbkNoYXJhY3RlckRlbGV0ZTogLT4KICAgICAgICBpZiBAdGV4dEVkaXRXaW5kb3cudGV4dC5sZW5ndGggPiAwCiAgICAgICAgICAgIEB0ZXh0RWRpdFdpbmRvdy50ZXh0ID0gQHRleHRFZGl0V2luZG93LnRleHQuc3Vic3RyaW5nKDAsIEB0ZXh0RWRpdFdpbmRvdy50ZXh0Lmxlbmd0aC0xKQogICAgICAgICAgICBAdGV4dEVkaXRXaW5kb3cucmVkcmF3KCkKICAgICAgICAKd2luZG93LldpbmRvd3NldF9JbnB1dFRleHQgPSBXaW5kb3dzZXRfSW5wdXRUZXh0","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBXaW5kb3dzZXRfSW5wdXRUZXh0LAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgV2luZG93c2V0X0lucHV0VGV4dCA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhXaW5kb3dzZXRfSW5wdXRUZXh0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFdpbmRvd3NldF9JbnB1dFRleHQoeCwgeSwgbGV0dGVycywgYWN0b3IsIHZpZXdwb3J0KSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CiAgICAgIFdpbmRvd3NldF9JbnB1dFRleHQuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIHRoaXMudGV4dEVkaXRXaW5kb3cgPSBuZXcgV2luZG93X1RleHRFZGl0KHgsIHksIGxldHRlcnMsIGFjdG9yLCB2aWV3cG9ydCk7CiAgICAgIHRoaXMuaW5wdXRUZXh0V2luZG93ID0gbmV3IFdpbmRvd19JbnB1dFRleHQoeCwgeSArIHRoaXMudGV4dEVkaXRXaW5kb3cuaGVpZ2h0LCB2aWV3cG9ydCk7CiAgICAgIHRoaXMudGV4dEVkaXRXaW5kb3cud2lkdGggPSB0aGlzLmlucHV0VGV4dFdpbmRvdy53aWR0aDsKICAgICAgdGhpcy53aW5kb3dzLnB1c2godGhpcy5pbnB1dFRleHRXaW5kb3cpOwogICAgICB0aGlzLndpbmRvd3MucHVzaCh0aGlzLnRleHRFZGl0V2luZG93KTsKICAgICAgdGhpcy5pbnB1dFRleHRXaW5kb3cub25DaGFyYWN0ZXJBY2NlcHQgPSBmdW5jdGlvbihzZW5kZXIsIGNoYXJhY3RlcikgewogICAgICAgIHJldHVybiBfdGhpcy5vbkNoYXJhY3RlckFjY2VwdChjaGFyYWN0ZXIpOwogICAgICB9OwogICAgICB0aGlzLmlucHV0VGV4dFdpbmRvdy5vbkFjY2VwdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vblRleHRBY2NlcHQoKTsKICAgICAgfTsKICAgICAgdGhpcy5pbnB1dFRleHRXaW5kb3cub25DYW5jZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25DaGFyYWN0ZXJEZWxldGUoKTsKICAgICAgfTsKICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTsKICAgIH0KCiAgICBXaW5kb3dzZXRfSW5wdXRUZXh0LnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgV2luZG93c2V0X0lucHV0VGV4dC5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICAgIGlmICghdGhpcy5hY3RpdmUpIHsKCiAgICAgIH0KICAgIH07CgogICAgV2luZG93c2V0X0lucHV0VGV4dC5wcm90b3R5cGUucmVkcmF3ID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiB0aGlzLnJlZHJhd0FsbFdpbmRvd3MoKTsKICAgIH07CgogICAgV2luZG93c2V0X0lucHV0VGV4dC5wcm90b3R5cGUub25UZXh0QWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuc2hvdyhmYWxzZSwgZmFsc2UpOwogICAgICB0aGlzLmlucHV0VGV4dFdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy50ZXh0RWRpdFdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgaWYgKHRoaXMub25BY2NlcHQgIT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLm9uQWNjZXB0KHRoaXMudGV4dEVkaXRXaW5kb3cudGV4dCk7CiAgICAgIH0KICAgIH07CgogICAgV2luZG93c2V0X0lucHV0VGV4dC5wcm90b3R5cGUub25DaGFyYWN0ZXJBY2NlcHQgPSBmdW5jdGlvbihjaGFyYWN0ZXIpIHsKICAgICAgaWYgKHRoaXMudGV4dEVkaXRXaW5kb3cudGV4dC5sZW5ndGggPCB0aGlzLnRleHRFZGl0V2luZG93LmxldHRlcnMpIHsKICAgICAgICB0aGlzLnRleHRFZGl0V2luZG93LnRleHQgKz0gY2hhcmFjdGVyOwogICAgICAgIHJldHVybiB0aGlzLnRleHRFZGl0V2luZG93LnJlZHJhdygpOwogICAgICB9CiAgICB9OwoKICAgIFdpbmRvd3NldF9JbnB1dFRleHQucHJvdG90eXBlLm9uQ2hhcmFjdGVyRGVsZXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmICh0aGlzLnRleHRFZGl0V2luZG93LnRleHQubGVuZ3RoID4gMCkgewogICAgICAgIHRoaXMudGV4dEVkaXRXaW5kb3cudGV4dCA9IHRoaXMudGV4dEVkaXRXaW5kb3cudGV4dC5zdWJzdHJpbmcoMCwgdGhpcy50ZXh0RWRpdFdpbmRvdy50ZXh0Lmxlbmd0aCAtIDEpOwogICAgICAgIHJldHVybiB0aGlzLnRleHRFZGl0V2luZG93LnJlZHJhdygpOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBXaW5kb3dzZXRfSW5wdXRUZXh0OwoKICB9KShXaW5kb3dzZXRfQmFzZSk7CgogIHdpbmRvdy5XaW5kb3dzZXRfSW5wdXRUZXh0ID0gV2luZG93c2V0X0lucHV0VGV4dDsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"GameStorage","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogR2FtZVN0b3JhZ2UKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjYKIwojICAgQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgICBDbGFzczogR2FtZVN0b3JhZ2UKIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIEdhbWVTdG9yYWdlCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgIAogICAgY2xlYXI6IC0+CiAgICAgICAgbG9jYWxTdG9yYWdlLmNsZWFyKCkKICAgICAgICAKICAgIHNldERhdGE6IChpZCwgZGF0YSkgLT4KICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShpZCwgZGF0YSkKICAgICAgICAKICAgIGdldERhdGE6IChpZCkgLT4gCiAgICAgICAgbG9jYWxTdG9yYWdlLmdldEl0ZW0oaWQpCiAgICAgICAgCiAgICBzZXRPYmplY3Q6KGlkLCBvYmplY3QpIC0+CiAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oaWQsIEpTT04uc3RyaW5naWZ5KG9iamVjdCkpCiAgICAgICAgCiAgICBnZXRPYmplY3Q6KGlkKSAtPgogICAgICAgIGl0ZW0gPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShpZCkKICAgICAgICByZXN1bHQgPSBudWxsCiAgICAgICAgCiAgICAgICAgaWYgaXRlbT8KICAgICAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShpdGVtKQogICAgICAgICAgICAKICAgICAgICByZXR1cm4gcmVzdWx0CiAgICAgICAgCiAgICAgICAgCndpbmRvdy5HYW1lU3RvcmFnZSA9IG5ldyBHYW1lU3RvcmFnZSgp","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBHYW1lU3RvcmFnZTsKCiAgR2FtZVN0b3JhZ2UgPSAoZnVuY3Rpb24oKSB7CiAgICBmdW5jdGlvbiBHYW1lU3RvcmFnZSgpIHt9CgogICAgR2FtZVN0b3JhZ2UucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuY2xlYXIoKTsKICAgIH07CgogICAgR2FtZVN0b3JhZ2UucHJvdG90eXBlLnNldERhdGEgPSBmdW5jdGlvbihpZCwgZGF0YSkgewogICAgICByZXR1cm4gbG9jYWxTdG9yYWdlLnNldEl0ZW0oaWQsIGRhdGEpOwogICAgfTsKCiAgICBHYW1lU3RvcmFnZS5wcm90b3R5cGUuZ2V0RGF0YSA9IGZ1bmN0aW9uKGlkKSB7CiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShpZCk7CiAgICB9OwoKICAgIEdhbWVTdG9yYWdlLnByb3RvdHlwZS5zZXRPYmplY3QgPSBmdW5jdGlvbihpZCwgb2JqZWN0KSB7CiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShpZCwgSlNPTi5zdHJpbmdpZnkob2JqZWN0KSk7CiAgICB9OwoKICAgIEdhbWVTdG9yYWdlLnByb3RvdHlwZS5nZXRPYmplY3QgPSBmdW5jdGlvbihpZCkgewogICAgICB2YXIgaXRlbSwgcmVzdWx0OwogICAgICBpdGVtID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oaWQpOwogICAgICByZXN1bHQgPSBudWxsOwogICAgICBpZiAoaXRlbSAhPSBudWxsKSB7CiAgICAgICAgcmVzdWx0ID0gSlNPTi5wYXJzZShpdGVtKTsKICAgICAgfQogICAgICByZXR1cm4gcmVzdWx0OwogICAgfTsKCiAgICByZXR1cm4gR2FtZVN0b3JhZ2U7CgogIH0pKCk7CgogIHdpbmRvdy5HYW1lU3RvcmFnZSA9IG5ldyBHYW1lU3RvcmFnZSgpOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"GameManager","content":"","compiledContent":""},{"name":"Scene_Battle","content":"","compiledContent":""},{"name":"Scene_BattleTest","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfQmF0dGxlVGVzdAojIAlDcmVhdGVkIG9uOiAyMDEzLTA1LTE5CiMKIyAJQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgCUNsYXNzOiBTY2VuZV9CYXR0bGVUZXN0CiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTY2VuZV9CYXR0bGVUZXN0IGV4dGVuZHMgU2NlbmUKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIHN1cGVyKCkKICAgIAogICAgaW5pdGlhbGl6ZTogLT4KICAgICAgICBMYW5ndWFnZU1hbmFnZXIubG9hZCgpCiAgICAKICAgIGRpc3Bvc2U6IC0+CgogICAgcHJlcGFyZURhdGE6IC0+CiAgICAgICAgQG1lbnVTZWxlY3RTb3VuZCA9IFJlY29yZE1hbmFnZXIuc3lzdGVtLm1lbnVTZWxlY3RTb3VuZAogICAgICAgIEBtZW51Q3Vyc29yU291bmQgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS5tZW51Q3Vyc29yU291bmQKICAgICAgICAKICAgICAgICBBdWRpb01hbmFnZXIubG9hZFNvdW5kKEBtZW51U2VsZWN0U291bmQpCiAgICAgICAgQXVkaW9NYW5hZ2VyLmxvYWRTb3VuZChAbWVudUN1cnNvclNvdW5kKQogICAgICAgIAogICAgICAgIGlmIG5vdCBMYW5ndWFnZU1hbmFnZXIucHJvZmlsZS5idW5kbGVzPwogICAgICAgICAgICBHYW1lTWFuYWdlci5pbml0aWFsaXplKCkKICAgICAgICAgICAgTGFuZ3VhZ2VNYW5hZ2VyLmxvYWRCdW5kbGVzKCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIExhbmd1YWdlTWFuYWdlci5wcmVwYXJlKCkKICAgIHByZXBhcmVWaXN1YWw6IC0+CiAgICAgICAgbWVtYmVycyA9ICRQQVJBTVMuYmF0dGxlVGVzdC5tZW1iZXJzCiAgICAgICAgR2FtZU1hbmFnZXIudHJvb3AgPSAkUEFSQU1TCiAgICAgICAgZmlyc3RBY3RvciA9ICRQQVJBTVMuYmF0dGxlVGVzdC5tZW1iZXJzWzBdLmFjdG9yCiAgICAgICAgR2FtZU1hbmFnZXIucGFydHkubWVtYmVycyA9IAogICAgICAgIFsKICAgICAgICBdCiAgICAgICAgCiAgICAgICAgaWYgbWVtYmVyc1swXS5hY3Rvcj8gYW5kIFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlcnNbMF0uYWN0b3JdPwogICAgICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1swXS5hY3Rvcl0pCiAgICAgICAgaWYgbWVtYmVyc1sxXS5hY3Rvcj8gYW5kIFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlcnNbMV0uYWN0b3JdPwogICAgICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1sxXS5hY3Rvcl0pCiAgICAgICAgaWYgbWVtYmVyc1syXS5hY3Rvcj8gYW5kIFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlcnNbMl0uYWN0b3JdPwogICAgICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1syXS5hY3Rvcl0pCiAgICAgICAgaWYgbWVtYmVyc1szXS5hY3Rvcj8gYW5kIFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlcnNbM10uYWN0b3JdPwogICAgICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1szXS5hY3Rvcl0pCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgICAgc2NlbmUgPSBpZiBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzLmxlbmd0aCA9PSAwIHRoZW4gbmV3IFNjZW5lX0dhbWVPdmVyKCkgZWxzZSBuZXcgU2NlbmVfQmF0dGxlKCkKICAgICAgICBzY2VuZS5ub0VzY2FwZSA9IHllcwogICAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhzY2VuZSkKCiAgICAgICAgCiAgICB1cGRhdGU6IC0+ICAgICAgICAgICAgCiAgICAgICAgc3VwZXIoKQogICAgICAgIAogCiAgICAgICAgCiAgICAgICAgCiAgICAKICAKCndpbmRvdy5TY2VuZV9CYXR0bGVUZXN0ID0gU2NlbmVfQmF0dGxlVGVzdA==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9CYXR0bGVUZXN0LAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU2NlbmVfQmF0dGxlVGVzdCA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTY2VuZV9CYXR0bGVUZXN0LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX0JhdHRsZVRlc3QoKSB7CiAgICAgIFNjZW5lX0JhdHRsZVRlc3QuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7CiAgICB9CgogICAgU2NlbmVfQmF0dGxlVGVzdC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gTGFuZ3VhZ2VNYW5hZ2VyLmxvYWQoKTsKICAgIH07CgogICAgU2NlbmVfQmF0dGxlVGVzdC5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkge307CgogICAgU2NlbmVfQmF0dGxlVGVzdC5wcm90b3R5cGUucHJlcGFyZURhdGEgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5tZW51U2VsZWN0U291bmQgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS5tZW51U2VsZWN0U291bmQ7CiAgICAgIHRoaXMubWVudUN1cnNvclNvdW5kID0gUmVjb3JkTWFuYWdlci5zeXN0ZW0ubWVudUN1cnNvclNvdW5kOwogICAgICBBdWRpb01hbmFnZXIubG9hZFNvdW5kKHRoaXMubWVudVNlbGVjdFNvdW5kKTsKICAgICAgQXVkaW9NYW5hZ2VyLmxvYWRTb3VuZCh0aGlzLm1lbnVDdXJzb3JTb3VuZCk7CiAgICAgIGlmIChMYW5ndWFnZU1hbmFnZXIucHJvZmlsZS5idW5kbGVzID09IG51bGwpIHsKICAgICAgICBHYW1lTWFuYWdlci5pbml0aWFsaXplKCk7CiAgICAgICAgcmV0dXJuIExhbmd1YWdlTWFuYWdlci5sb2FkQnVuZGxlcygpOwogICAgICB9IGVsc2UgewogICAgICAgIHJldHVybiBMYW5ndWFnZU1hbmFnZXIucHJlcGFyZSgpOwogICAgICB9CiAgICB9OwoKICAgIFNjZW5lX0JhdHRsZVRlc3QucHJvdG90eXBlLnByZXBhcmVWaXN1YWwgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIGZpcnN0QWN0b3IsIG1lbWJlcnMsIHNjZW5lOwogICAgICBtZW1iZXJzID0gJFBBUkFNUy5iYXR0bGVUZXN0Lm1lbWJlcnM7CiAgICAgIEdhbWVNYW5hZ2VyLnRyb29wID0gJFBBUkFNUzsKICAgICAgZmlyc3RBY3RvciA9ICRQQVJBTVMuYmF0dGxlVGVzdC5tZW1iZXJzWzBdLmFjdG9yOwogICAgICBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzID0gW107CiAgICAgIGlmICgobWVtYmVyc1swXS5hY3RvciAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1swXS5hY3Rvcl0gIT0gbnVsbCkpIHsKICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1swXS5hY3Rvcl0pOwogICAgICB9CiAgICAgIGlmICgobWVtYmVyc1sxXS5hY3RvciAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1sxXS5hY3Rvcl0gIT0gbnVsbCkpIHsKICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1sxXS5hY3Rvcl0pOwogICAgICB9CiAgICAgIGlmICgobWVtYmVyc1syXS5hY3RvciAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1syXS5hY3Rvcl0gIT0gbnVsbCkpIHsKICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1syXS5hY3Rvcl0pOwogICAgICB9CiAgICAgIGlmICgobWVtYmVyc1szXS5hY3RvciAhPSBudWxsKSAmJiAoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1szXS5hY3Rvcl0gIT0gbnVsbCkpIHsKICAgICAgICBHYW1lTWFuYWdlci5wYXJ0eS5hZGQoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyc1szXS5hY3Rvcl0pOwogICAgICB9CiAgICAgIHNjZW5lID0gR2FtZU1hbmFnZXIucGFydHkubWVtYmVycy5sZW5ndGggPT09IDAgPyBuZXcgU2NlbmVfR2FtZU92ZXIoKSA6IG5ldyBTY2VuZV9CYXR0bGUoKTsKICAgICAgc2NlbmUubm9Fc2NhcGUgPSB0cnVlOwogICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKHNjZW5lKTsKICAgIH07CgogICAgU2NlbmVfQmF0dGxlVGVzdC5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBTY2VuZV9CYXR0bGVUZXN0Ll9fc3VwZXJfXy51cGRhdGUuY2FsbCh0aGlzKTsKICAgIH07CgogICAgcmV0dXJuIFNjZW5lX0JhdHRsZVRlc3Q7CgogIH0pKFNjZW5lKTsKCiAgd2luZG93LlNjZW5lX0JhdHRsZVRlc3QgPSBTY2VuZV9CYXR0bGVUZXN0OwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Scene_BattleWon","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfQmF0dGxlV29uCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA5LTI5CiMKIyAJQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgCUNsYXNzOiBTY2VuZV9CYXR0bGVXb24KIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNjZW5lX0JhdHRsZVdvbiBleHRlbmRzIFNjZW5lCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBzdXBlcigpCiAgICAKICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgCiAgICBkaXNwb3NlOiAtPgoKICAgIHByZXBhcmVEYXRhOiAtPgogCiAgICAgICAgCiAgICBwcmVwYXJlVmlzdWFsOiAtPgoKICAgIHVwZGF0ZTogLT4KICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX01hcCgpKQogICAgICAgIAogICAgICAgIHN1cGVyKCkKICAgICAgICAKICAgIAogIAoKd2luZG93LlNjZW5lX0JhdHRsZVdvbiA9IFNjZW5lX0JhdHRsZVdvbg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9CYXR0bGVXb24sCiAgICBfX2hhc1Byb3AgPSB7fS5oYXNPd25Qcm9wZXJ0eSwKICAgIF9fZXh0ZW5kcyA9IGZ1bmN0aW9uKGNoaWxkLCBwYXJlbnQpIHsgZm9yICh2YXIga2V5IGluIHBhcmVudCkgeyBpZiAoX19oYXNQcm9wLmNhbGwocGFyZW50LCBrZXkpKSBjaGlsZFtrZXldID0gcGFyZW50W2tleV07IH0gZnVuY3Rpb24gY3RvcigpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGNoaWxkOyB9IGN0b3IucHJvdG90eXBlID0gcGFyZW50LnByb3RvdHlwZTsgY2hpbGQucHJvdG90eXBlID0gbmV3IGN0b3IoKTsgY2hpbGQuX19zdXBlcl9fID0gcGFyZW50LnByb3RvdHlwZTsgcmV0dXJuIGNoaWxkOyB9OwoKICBTY2VuZV9CYXR0bGVXb24gPSAoZnVuY3Rpb24oX3N1cGVyKSB7CiAgICBfX2V4dGVuZHMoU2NlbmVfQmF0dGxlV29uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX0JhdHRsZVdvbigpIHsKICAgICAgU2NlbmVfQmF0dGxlV29uLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpOwogICAgfQoKICAgIFNjZW5lX0JhdHRsZVdvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkge307CgogICAgU2NlbmVfQmF0dGxlV29uLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKSB7fTsKCiAgICBTY2VuZV9CYXR0bGVXb24ucHJvdG90eXBlLnByZXBhcmVEYXRhID0gZnVuY3Rpb24oKSB7fTsKCiAgICBTY2VuZV9CYXR0bGVXb24ucHJvdG90eXBlLnByZXBhcmVWaXN1YWwgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNjZW5lX0JhdHRsZVdvbi5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfTWFwKCkpOwogICAgICByZXR1cm4gU2NlbmVfQmF0dGxlV29uLl9fc3VwZXJfXy51cGRhdGUuY2FsbCh0aGlzKTsKICAgIH07CgogICAgcmV0dXJuIFNjZW5lX0JhdHRsZVdvbjsKCiAgfSkoU2NlbmUpOwoKICB3aW5kb3cuU2NlbmVfQmF0dGxlV29uID0gU2NlbmVfQmF0dGxlV29uOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Scene_GameOver","content":"# ===================================================================\n#\n#   Script: Scene_EndGame\n#   \n#   Copyright (C) 2014 AndrÃ© Radomski. All rights reserved.\n#\n# ===================================================================\n#\n# \tClass: Scene_GameOver\n#\n#   Description...\n#\n# ===================================================================\n\nclass Scene_GameOver extends Scene\n    constructor: () ->\n        super()\n\n    initialize: ->\n        @bitmap = ResourceManager.getBitmap(\"Graphics/Pictures/#{RecordManager.system.gameOverGraphic.name}\")\n        @music = RecordManager.system.gameOverMusic\n        \n        AudioManager.loadMusic(@music)\n    dispose: ->\n        @sprite.dispose()\n\n    prepareData: ->\n\n    prepareVisual: ->\n        @sprite = new Sprite()\n        @sprite.bitmap = @bitmap\n        @sprite.srcRect = new Rect(0, 0, Graphics.width, Graphics.height)\n        \n        AudioManager.playMusic(@music)\n    update: ->      \n        if Input.trigger(Input.C) and not $PARAMS.battleTest?\n            SceneManager.switchTo(new Scene_Title())\n        \n        super()\n        \n        \n    \n  \n\nwindow.Scene_GameOver = Scene_GameOver","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9HYW1lT3ZlciwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNjZW5lX0dhbWVPdmVyID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNjZW5lX0dhbWVPdmVyLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX0dhbWVPdmVyKCkgewogICAgICBTY2VuZV9HYW1lT3Zlci5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTsKICAgIH0KCiAgICBTY2VuZV9HYW1lT3Zlci5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL1BpY3R1cmVzLyIgKyBSZWNvcmRNYW5hZ2VyLnN5c3RlbS5nYW1lT3ZlckdyYXBoaWMubmFtZSk7CiAgICAgIHRoaXMubXVzaWMgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS5nYW1lT3Zlck11c2ljOwogICAgICByZXR1cm4gQXVkaW9NYW5hZ2VyLmxvYWRNdXNpYyh0aGlzLm11c2ljKTsKICAgIH07CgogICAgU2NlbmVfR2FtZU92ZXIucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlLmRpc3Bvc2UoKTsKICAgIH07CgogICAgU2NlbmVfR2FtZU92ZXIucHJvdG90eXBlLnByZXBhcmVEYXRhID0gZnVuY3Rpb24oKSB7fTsKCiAgICBTY2VuZV9HYW1lT3Zlci5wcm90b3R5cGUucHJlcGFyZVZpc3VhbCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnNwcml0ZSA9IG5ldyBTcHJpdGUoKTsKICAgICAgdGhpcy5zcHJpdGUuYml0bWFwID0gdGhpcy5iaXRtYXA7CiAgICAgIHRoaXMuc3ByaXRlLnNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0KTsKICAgICAgcmV0dXJuIEF1ZGlvTWFuYWdlci5wbGF5TXVzaWModGhpcy5tdXNpYyk7CiAgICB9OwoKICAgIFNjZW5lX0dhbWVPdmVyLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuQykgJiYgKCRQQVJBTVMuYmF0dGxlVGVzdCA9PSBudWxsKSkgewogICAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfVGl0bGUoKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIFNjZW5lX0dhbWVPdmVyLl9fc3VwZXJfXy51cGRhdGUuY2FsbCh0aGlzKTsKICAgIH07CgogICAgcmV0dXJuIFNjZW5lX0dhbWVPdmVyOwoKICB9KShTY2VuZSk7CgogIHdpbmRvdy5TY2VuZV9HYW1lT3ZlciA9IFNjZW5lX0dhbWVPdmVyOwoKfSkuY2FsbCh0aGlzKTsK","decoded":true},{"name":"Scene_Map","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfTWFwCiMgICBDcmVhdGVkIG9uOiAyMDEzLTA1LTE5CiMKIyAJQ29weXJpZ2h0IChDKSAyMDEzIEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgCUNsYXNzOiBTY2VuZV9NYXAKIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNjZW5lX01hcCBleHRlbmRzIFNjZW5lCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBzdXBlcigpCiAgICAgICAgQG5lZWRNYXBQcmVwYXJlID0gbm8KICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgR2FtZU1hbmFnZXIuaW50ZXJwcmV0ZXIuc3RvcCgpCiAgICAgICAgaWYgbm90IEdhbWVNYW5hZ2VyLm1hcD8gb3IgR2FtZU1hbmFnZXIubWFwLmlkICE9IEdhbWVNYW5hZ2VyLmN1cnJlbnRNYXBJZAogICAgICAgICAgICBAbWFwTG9naWMgPSBuZXcgTG9naWNfTWFwKEdhbWVNYW5hZ2VyLmN1cnJlbnRNYXBJZCkKICAgICAgICAgICAgR2FtZU1hbmFnZXIubWFwID0gQG1hcExvZ2ljCiAgICAgICAgICAgIEBuZWVkTWFwUHJlcGFyZSA9IHllcwogICAgICAgICAgICAKICAgICAgICAgICAgY29uc29sZS5sb2coIklEOiAiICsgR2FtZU1hbmFnZXIuY3VycmVudE1hcElkKQogICAgICAgIGVsc2UKICAgICAgICAgICAgQG1hcExvZ2ljID0gR2FtZU1hbmFnZXIubWFwCiAgICAgICAgICAgIAogICAgICAgIExhbmd1YWdlTWFuYWdlci5sb2FkTWFwQnVuZGxlKEdhbWVNYW5hZ2VyLmN1cnJlbnRNYXBJZCkKICAgICAgICAKICAgICAgICBmb3IgcGljdHVyZSBpbiBHYW1lTWFuYWdlci5waWN0dXJlcwogICAgICAgICAgICBpZiBwaWN0dXJlPwogICAgICAgICAgICAgICAgcGljdHVyZS52aXNpYmxlID0geWVzCiAgICAgICAgICAgICAgICAKICAgICAgICBmb3IgdGV4dCBpbiBHYW1lTWFuYWdlci50ZXh0cwogICAgICAgICAgICBpZiB0ZXh0PwogICAgICAgICAgICAgICAgdGV4dC52aXNpYmxlID0geWVzCiAgICAgICAgR2FtZU1hbmFnZXIud2VhdGhlci52aXNpYmxlKHllcykKICAgICAgICBHcmFwaGljcy5mcmVlemUoKQogIAogICAgZGlzcG9zZTogLT4KICAgICAgICBHYW1lTWFuYWdlci53ZWF0aGVyLnZpc2libGUobm8pCiAgICAgICAgQG1hcC5kaXNwb3NlKCkKICAgICAgICBAdGltZXIuZGlzcG9zZSgpCiAgICAgICAgCiAgICAgICAgZm9yIHBpY3R1cmUgaW4gR2FtZU1hbmFnZXIucGljdHVyZXMKICAgICAgICAgICAgaWYgcGljdHVyZT8gYW5kIHBpY3R1cmUudmlzaWJsZQogICAgICAgICAgICAgICAgcGljdHVyZS52aXNpYmxlID0gbm8KICAgICAgICAgICAgICAgIAogICAgICAgIGZvciB0ZXh0IGluIEdhbWVNYW5hZ2VyLnRleHRzCiAgICAgICAgICAgIGlmIHRleHQ/IGFuZCB0ZXh0LnZpc2libGUKICAgICAgICAgICAgICAgIHRleHQudmlzaWJsZSA9IG5vCiAgICAgICAgCiAgICBwcmVwYXJlRGF0YTogLT4KICAgICAgICAKICAgICAgICBpZiBAbmVlZE1hcFByZXBhcmUKICAgICAgICAgICAgR2FtZU1hbmFnZXIudmFyaWFibGVTdG9yZS5zZXR1cChAbWFwTG9naWMpCiAgICAgICAgICAgIEBtYXBMb2dpYy5wcmVwYXJlKCkKICAgICAgICAgICAgCiAgICAKICAgICAgICBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9TaGFkb3ciKQogICAgICAgIEBtYXAgPSBuZXcgU3ByaXRlc2V0X01hcChAbWFwTG9naWMpCiAgICAgICAgQHRpbWVyID0gbmV3IFNwcml0ZV9UaW1lcihHYW1lTWFuYWdlci50aW1lcikKICAgICAgICBAdGltZXIudXBkYXRlKCkKICAgICAgICBAdGltZXIucmVmcmVzaCgpCiAKICAgIHByZXBhcmVWaXN1YWw6IC0+ICAgICAgCiAgICAgICAgQG1hcC5wcmVwYXJlKCkKICAgICAgICBHYW1lTWFuYWdlci5zY3JlZW4uY2VudGVyT25QbGF5ZXIoKQogICAgICAgIEB1cGRhdGUoKQogCiAgICAgICAgR2FtZU1hbmFnZXIuc2NyZWVuVmlld3BvcnQgPSBAbWFwLm1hcFZpZXdwb3J0CiAgICAgICAgR3JhcGhpY3MudHJhbnNpdGlvbigyMCkKICAgICAgICAKICAgICAgICBpZiBAbmVlZE1hcFByZXBhcmUKICAgICAgICAgICAgaWYgQG1hcExvZ2ljLmF1dG9QbGF5TXVzaWMKICAgICAgICAgICAgICAgIEF1ZGlvTWFuYWdlci5jaGFuZ2VNdXNpYyhAbWFwTG9naWMubXVzaWMpCiAgICAgICAgICAgIGlmIEBtYXBMb2dpYy5hdXRvUGxheUJhY2tncm91bmRTb3VuZAogICAgICAgICAgICAgICAgQXVkaW9NYW5hZ2VyLmNoYW5nZUJhY2tncm91bmRTb3VuZChAbWFwTG9naWMuYmFja2dyb3VuZFNvdW5kKQogICAgICAgICAgICAgICAgCiAgICAgICAgCiAgICAgICAgCiAgICAgCiAgICBjaGVja01lbnVBY2Nlc3M6IC0+CiAgICAgICAgd2luID0gR2FtZU1hbmFnZXIubWVzc2FnZVdpbmRvdwogICAgICAgIHJldHVybiBHYW1lTWFuYWdlci5tZW51QWNjZXNzID09IDAgYW5kIChub3Qgd2luLnZpc2libGUgb3Igd2luLm9wZW5uZXNzID09IDApIGFuZCBub3QgR2FtZU1hbmFnZXIuaW50ZXJwcmV0ZXIuaXNSdW5uaW5nCiAgICB1cGRhdGU6IC0+CiAgICAgICAgCiAgICAgICAgaWYgR2FtZU1hbmFnZXIubWVzc2FnZVdpbmRvdz8KICAgICAgICAgICAgR2FtZU1hbmFnZXIubWVzc2FnZVdpbmRvdy51cGRhdGUoKQogICAgICAgIGlmIEdhbWVNYW5hZ2VyLmlucHV0TnVtYmVyV2luZG93CiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLmlucHV0TnVtYmVyV2luZG93LnVwZGF0ZSgpCiAgICAgICAgaWYgR2FtZU1hbmFnZXIuaW5wdXRUZXh0V2luZG93c2V0PwogICAgICAgICAgICBHYW1lTWFuYWdlci5pbnB1dFRleHRXaW5kb3dzZXQudXBkYXRlKCkKICAgICAgICBpZiBHYW1lTWFuYWdlci5jaG9pY2VXaW5kb3cKICAgICAgICAgICAgR2FtZU1hbmFnZXIuY2hvaWNlV2luZG93LnVwZGF0ZSgpCiAgICAgICAgR2FtZU1hbmFnZXIudGltZXIudXBkYXRlKCkKICAgICAgICBHYW1lTWFuYWdlci5zY3JlZW4udXBkYXRlKCkKICAgICAgICBAbWFwTG9naWMudXBkYXRlKCkKICAgICAgICBmb3IgZXZlbnQgaW4gR2FtZU1hbmFnZXIuY29tbW9uRXZlbnRzCiAgICAgICAgICAgIGlmIGV2ZW50PwogICAgICAgICAgICAgICAgR2FtZU1hbmFnZXIubWFwLmN1cnJlbnRFdmVudCA9IGV2ZW50CiAgICAgICAgICAgICAgICBldmVudC51cGRhdGUoKQogICAgICAgIAogICAgICAgIAogICAgICAgIEBtYXAudXBkYXRlKCkKICAgICAgICBHYW1lTWFuYWdlci53ZWF0aGVyLnVwZGF0ZSgpCiAgICAgICAgCiAgICAgICMgIEdhbWVNYW5hZ2VyLmludGVycHJldGVyLnVwZGF0ZSgpCiAgICAgIAogICAgICAgIEdhbWVNYW5hZ2VyLnBsYXllckV2ZW50LmdyYXBoaWMgPSBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzWzBdLmNoYXJhY3RlckdyYXBoaWMKICAgICAgICBHYW1lTWFuYWdlci5wbGF5ZXJFdmVudC5wYXR0ZXJuID0gR2FtZU1hbmFnZXIucGFydHkubWVtYmVyc1swXS5jaGFyYWN0ZXJQYXR0ZXJuCiAgICAgICAgCiAgICAgICAgZm9yIHBpY3R1cmUgaW4gR2FtZU1hbmFnZXIucGljdHVyZXMKICAgICAgICAgICAgaWYgcGljdHVyZT8gYW5kIHBpY3R1cmUudmlzaWJsZQogICAgICAgICAgICAgICAgcGljdHVyZS51cGRhdGUoKQogICAgICAgIGZvciB0ZXh0IGluIEdhbWVNYW5hZ2VyLnRleHRzCiAgICAgICAgICAgIGlmIHRleHQ/IGFuZCB0ZXh0LnZpc2libGUgdGhlbiB0ZXh0LnVwZGF0ZSgpCiAgICAgICAgZm9yIGkgaW4gWzAuLi5HYW1lTWFuYWdlci5hbmltYXRpb25zLmxlbmd0aF0KICAgICAgICAgICAgYW5pbWF0aW9uID0gR2FtZU1hbmFnZXIuYW5pbWF0aW9uc1tpXQogICAgICAgICAgICBpZiBhbmltYXRpb24/CiAgICAgICAgICAgICAgICBpZiBhbmltYXRpb24ubG9naWMuaXNSdW5uaW5nCiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmxvZ2ljLnVwZGF0ZSgpCiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLnVwZGF0ZSgpCiAgICAgICAgICAgICAgICBlbHNlCiAgICAgICAgICAgICAgICAgICAgYW5pbWF0aW9uLmRpc3Bvc2UoKQogICAgICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLmFuaW1hdGlvbnMucmVtb3ZlKGFuaW1hdGlvbikKICAgICAgICAgICAgICAgICAgICBpLS0KICAgICAgICAgICAgICAgICAgICAKICAgICAgICAgICAgCiAgICAgICAgQHRpbWVyLnVwZGF0ZSgpCiAgICAgCiAgICAgICAgCiAgICAgICAgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5CKSBhbmQgQGNoZWNrTWVudUFjY2VzcygpCiAgICAgICAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfTWFpbk1lbnUoKSkKICAgICAgICMgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5DKQogICAgICAgICMgICAgU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9TaG9wKCkpCiAgICAgICAgaWYgSW5wdXQudHJpZ2dlcihJbnB1dC5YKQogICAgICAgICAgICBHYW1lTWFuYWdlci50cm9vcCA9IFJlY29yZE1hbmFnZXIudHJvb3BzWzRdCiAgICAgICAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfQmF0dGxlKCkpCiAgICAgICAgICAgIAogICAgICAgIHN1cGVyKCkKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKICAgICAgICAKCndpbmRvdy5TY2VuZV9NYXAgPSBTY2VuZV9NYXA=","compiledContent":""},{"name":"Scene_MainMenu","content":"","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9NYWluTWVudSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNjZW5lX01haW5NZW51ID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNjZW5lX01haW5NZW51LCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX01haW5NZW51KCkgewogICAgICBTY2VuZV9NYWluTWVudS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTsKICAgIH0KCiAgICBTY2VuZV9NYWluTWVudS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmJhY2tncm91bmQgPSBHcmFwaGljcy5zbmFwc2hvdCgpOwogICAgICB0aGlzLmJhY2tncm91bmQuZmlsbFJlY3QoMCwgMCwgdGhpcy5iYWNrZ3JvdW5kLndpZHRoLCB0aGlzLmJhY2tncm91bmQuaGVpZ2h0LCBuZXcgQ29sb3IoMCwgMCwgMCwgMC41KSk7CiAgICAgIHRoaXMudm9jYWIgPSBSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnk7CiAgICAgIHJldHVybiBHcmFwaGljcy5mcmVlemUoKTsKICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5zcHJpdGUuZGlzcG9zZSgpOwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0LmRpc3Bvc2UoKTsKICAgICAgdGhpcy5lcXVpcG1lbnRXaW5kb3dzZXQuZGlzcG9zZSgpOwogICAgICB0aGlzLnNraWxsc1dpbmRvd3NldC5kaXNwb3NlKCk7CiAgICAgIHRoaXMuc2F2ZVdpbmRvd3NldC5kaXNwb3NlKCk7CiAgICAgIHRoaXMucGFydHlXaW5kb3cuZGlzcG9zZSgpOwogICAgICB0aGlzLnN0YXR1c1dpbmRvdy5kaXNwb3NlKCk7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LmRpc3Bvc2UoKTsKICAgICAgdGhpcy5nYW1lVGltZVdpbmRvdy5kaXNwb3NlKCk7CiAgICAgIHJldHVybiB0aGlzLm1vbmV5V2luZG93LmRpc3Bvc2UoKTsKICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLnNob3cgPSBmdW5jdGlvbih2aXNpYmxlKSB7CiAgICAgIHRoaXMuc3ByaXRlLnZpc2libGUgPSB2aXNpYmxlOwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnZpc2libGUgPSB2aXNpYmxlOwogICAgICB0aGlzLmVxdWlwbWVudFdpbmRvd3NldC52aXNpYmxlID0gdmlzaWJsZTsKICAgICAgdGhpcy5za2lsbHNXaW5kb3dzZXQudmlzaWJsZSA9IHZpc2libGU7CiAgICAgIHRoaXMuc2F2ZVdpbmRvd3NldC52aXNpYmxlID0gdmlzaWJsZTsKICAgICAgdGhpcy5wYXJ0eVdpbmRvdy52aXNpYmxlID0gdmlzaWJsZTsKICAgICAgdGhpcy5zdGF0dXNXaW5kb3cudmlzaWJsZSA9IHZpc2libGU7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LnZpc2libGUgPSB2aXNpYmxlOwogICAgICB0aGlzLmdhbWVUaW1lV2luZG93LnZpc2libGUgPSB2aXNpYmxlOwogICAgICByZXR1cm4gdGhpcy5tb25leVdpbmRvdy52aXNpYmxlID0gdmlzaWJsZTsKICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLnByZXBhcmVEYXRhID0gZnVuY3Rpb24oKSB7CiAgICAgIHZhciBzY2FsZSwKICAgICAgICBfdGhpcyA9IHRoaXM7CiAgICAgIHNjYWxlID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIHRoaXMuc3ByaXRlID0gbmV3IFNwcml0ZTsKICAgICAgdGhpcy5zcHJpdGUuYml0bWFwID0gdGhpcy5iYWNrZ3JvdW5kOwogICAgICB0aGlzLnNwcml0ZS5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodCk7CiAgICAgIHRoaXMuc3ByaXRlLnogPSAtMTsKICAgICAgdGhpcy5wYXJ0eVdpbmRvdyA9IG5ldyBXaW5kb3dfUGFydHkoKTsKICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5vblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vblBhcnR5TWVtYmVyQ2hhbmdlKCk7CiAgICAgIH07CiAgICAgIHRoaXMucGFydHlXaW5kb3cueiA9IDA7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93ID0gbmV3IFdpbmRvd19TZWxlY3Rpb24oMCwgdGhpcy5wYXJ0eVdpbmRvdy5oZWlnaHQsIDEsIFtbbGNzKHRoaXMudm9jYWIubWVudS5zdGF0dXMpXSwgW2xjcyh0aGlzLnZvY2FiLm1lbnUuaXRlbXMpXSwgW2xjcyh0aGlzLnZvY2FiLm1lbnUuc2tpbGxzKV0sIFtsY3ModGhpcy52b2NhYi5tZW51LmVxdWlwbWVudCldLCBbbGNzKHRoaXMudm9jYWIubWVudS5zYXZlKV0sIFtsY3ModGhpcy52b2NhYi5tZW51LmVuZEdhbWUpXV0sIDE1MCAqIHNjYWxlLCAzMiAqIHNjYWxlKTsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cudmFsaWRhdGVDZWxsID0gZnVuY3Rpb24oeCwgeSwgY2VsbCkgewogICAgICAgIGlmICh5ID09PSA0KSB7CiAgICAgICAgICByZXR1cm4gR2FtZU1hbmFnZXIuc2F2ZU1lbnVBY2Nlc3M7CiAgICAgICAgfSBlbHNlIHsKICAgICAgICAgIHJldHVybiB0cnVlOwogICAgICAgIH0KICAgICAgfTsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cub25TZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25BY3Rpb25DaGFuZ2UoKTsKICAgICAgfTsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25BY3Rpb24oKTsKICAgICAgfTsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cub25DYW5jZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25BY3Rpb25DYW5jZWwoKTsKICAgICAgfTsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cudGV4dEFsaWdubWVudCA9IDA7CiAgICAgIHRoaXMuaXRlbXNXaW5kb3dzZXQgPSBuZXcgV2luZG93c2V0X0l0ZW1zKHRoaXMuYWN0aW9uV2luZG93LnggKyB0aGlzLmFjdGlvbldpbmRvdy53aWR0aCwgMTE0ICogc2NhbGUsIG51bGwsIEdyYXBoaWNzLndpZHRoIC0gdGhpcy5hY3Rpb25XaW5kb3cud2lkdGgpOwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnNob3coZmFsc2UpOwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm9uSXRlbVNlbGVjdGlvbiA9IGZ1bmN0aW9uKGl0ZW0pIHsKICAgICAgICByZXR1cm4gX3RoaXMub25JdGVtU2VsZWN0aW9uKGl0ZW0pOwogICAgICB9OwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uU3ViTWVudUNhbmNlbCgpOwogICAgICB9OwogICAgICB0aGlzLmVxdWlwbWVudFdpbmRvd3NldCA9IG5ldyBXaW5kb3dzZXRfRXF1aXBtZW50KHRoaXMuYWN0aW9uV2luZG93LnggKyB0aGlzLmFjdGlvbldpbmRvdy53aWR0aCwgMTE0ICogc2NhbGUpOwogICAgICB0aGlzLmVxdWlwbWVudFdpbmRvd3NldC5zaG93KGZhbHNlKTsKICAgICAgdGhpcy5lcXVpcG1lbnRXaW5kb3dzZXQub25DYW5jZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25TdWJNZW51Q2FuY2VsKCk7CiAgICAgIH07CiAgICAgIHRoaXMuZXF1aXBtZW50V2luZG93c2V0Lm9uRXF1aXBtZW50Q2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLnBhcnR5V2luZG93LnJlZHJhdygpOwogICAgICB9OwogICAgICB0aGlzLnNraWxsc1dpbmRvd3NldCA9IG5ldyBXaW5kb3dzZXRfU2tpbGxzKHRoaXMuYWN0aW9uV2luZG93LnggKyB0aGlzLmFjdGlvbldpbmRvdy53aWR0aCwgMTE0ICogc2NhbGUsIG51bGwsIEdyYXBoaWNzLndpZHRoIC0gdGhpcy5hY3Rpb25XaW5kb3cud2lkdGgpOwogICAgICB0aGlzLnNraWxsc1dpbmRvd3NldC5zaG93KGZhbHNlKTsKICAgICAgdGhpcy5za2lsbHNXaW5kb3dzZXQub25Ta2lsbFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNraWxsKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uU2tpbGxTZWxlY3Rpb24oc2tpbGwpOwogICAgICB9OwogICAgICB0aGlzLnNraWxsc1dpbmRvd3NldC5vbkNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5vblN1Yk1lbnVDYW5jZWwoKTsKICAgICAgfTsKICAgICAgdGhpcy51c2VEcm9wQWxlcnRXaW5kb3dzZXQgPSBuZXcgV2luZG93c2V0X0FsZXJ0KCJXaGF0IGRvIHlvdSB3YW50IHRvIGRvPyIsIFsiVXNlIiwgIkRyb3AiXSk7CiAgICAgIHRoaXMudXNlRHJvcEFsZXJ0V2luZG93c2V0LnNob3coZmFsc2UpOwogICAgICB0aGlzLnVzZURyb3BBbGVydFdpbmRvd3NldC5vbkFjY2VwdCA9IGZ1bmN0aW9uKHNlbmRlciwgY29kZSkgewogICAgICAgIHJldHVybiBfdGhpcy5vblVzZURyb3BBbGVydEFjY2VwdChjb2RlKTsKICAgICAgfTsKICAgICAgdGhpcy51c2VEcm9wQWxlcnRXaW5kb3dzZXQub25DYW5jZWwgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25Vc2VEcm9wQWxlcnRDYW5jZWwoKTsKICAgICAgfTsKICAgICAgdGhpcy5hbW91bnRTZWxlY3Rpb25XaW5kb3cgPSBuZXcgV2luZG93X0Ftb3VudFNlbGVjdGlvbigpOwogICAgICB0aGlzLmFtb3VudFNlbGVjdGlvbldpbmRvdy52aXNpYmxlID0gZmFsc2U7CiAgICAgIHRoaXMuc2F2ZVdpbmRvd3NldCA9IG5ldyBXaW5kb3dzZXRfU2F2ZSgxNzQgKiBzY2FsZSwgdGhpcy5wYXJ0eVdpbmRvdy5oZWlnaHQpOwogICAgICB0aGlzLnNhdmVXaW5kb3dzZXQub25GaWxlU2VsZWN0aW9uID0gZnVuY3Rpb24oc2xvdCkgewogICAgICAgIHJldHVybiBfdGhpcy5vbkZpbGVTZWxlY3Rpb24oc2xvdCk7CiAgICAgIH07CiAgICAgIHRoaXMuc2F2ZVdpbmRvd3NldC5vbkNhbmNlbCA9IGZ1bmN0aW9uKHNsb3QpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25GaWxlQ2FuY2VsKHNsb3QpOwogICAgICB9OwogICAgICB0aGlzLnNhdmVXaW5kb3dzZXQuc2hvdyhmYWxzZSk7CiAgICAgIHRoaXMuc3RhdHVzV2luZG93ID0gbmV3IFdpbmRvd19TdGF0dXMoKTsKICAgICAgdGhpcy5nYW1lVGltZVdpbmRvdyA9IG5ldyBXaW5kb3dfR2FtZVRpbWUoMCwgMCk7CiAgICAgIHRoaXMuZ2FtZVRpbWVXaW5kb3cueSA9IEdyYXBoaWNzLmhlaWdodCAtIHRoaXMuZ2FtZVRpbWVXaW5kb3cuaGVpZ2h0OwogICAgICB0aGlzLmdhbWVUaW1lV2luZG93LnJlZHJhdygpOwogICAgICB0aGlzLm1vbmV5V2luZG93ID0gbmV3IFdpbmRvd19Nb25leSgwLCAwKTsKICAgICAgdGhpcy5tb25leVdpbmRvdy55ID0gdGhpcy5nYW1lVGltZVdpbmRvdy55IC0gdGhpcy5tb25leVdpbmRvdy5oZWlnaHQ7CiAgICAgIHRoaXMubW9uZXlXaW5kb3cucmVkcmF3KCk7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LnJlZHJhdygpOwogICAgICB0aGlzLnBhcnR5V2luZG93LnByZXBhcmUoKTsKICAgICAgcmV0dXJuIHRoaXMucGFydHlXaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFNjZW5lX01haW5NZW51LnByb3RvdHlwZS5wcmVwYXJlVmlzdWFsID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMudXBkYXRlKCk7CiAgICAgIHJldHVybiBHcmFwaGljcy50cmFuc2l0aW9uKDIwKTsKICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnVwZGF0ZSgpOwogICAgICB0aGlzLmVxdWlwbWVudFdpbmRvd3NldC51cGRhdGUoKTsKICAgICAgdGhpcy5za2lsbHNXaW5kb3dzZXQudXBkYXRlKCk7CiAgICAgIHRoaXMuc2F2ZVdpbmRvd3NldC51cGRhdGUoKTsKICAgICAgdGhpcy5zdGF0dXNXaW5kb3cudXBkYXRlKCk7CiAgICAgIHRoaXMucGFydHlXaW5kb3cudXBkYXRlKCk7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LnVwZGF0ZSgpOwogICAgICB0aGlzLnVzZURyb3BBbGVydFdpbmRvd3NldC51cGRhdGUoKTsKICAgICAgdGhpcy5hbW91bnRTZWxlY3Rpb25XaW5kb3cudXBkYXRlKCk7CiAgICAgIHJldHVybiBTY2VuZV9NYWluTWVudS5fX3N1cGVyX18udXBkYXRlLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7CiAgICB9OwoKICAgIFNjZW5lX01haW5NZW51LnByb3RvdHlwZS5vblBhcnR5TWVtYmVyQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgIHN3aXRjaCAodGhpcy5hY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3cpIHsKICAgICAgICBjYXNlIDA6CiAgICAgICAgICB0aGlzLnN0YXR1c1dpbmRvdy5tZW1iZXIgPSBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzW3RoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDb2x1bW5dOwogICAgICAgICAgcmV0dXJuIHRoaXMuc3RhdHVzV2luZG93LnJlZHJhdygpOwogICAgICAgIGNhc2UgMToKICAgICAgICAgIHRoaXMuaXRlbXNXaW5kb3dzZXQubWVtYmVyID0gdGhpcy5wYXJ0eVdpbmRvdy5zZWxlY3RlZENlbGw7CiAgICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1dpbmRvd3NldC5yZWRyYXcoKTsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICB0aGlzLnNraWxsc1dpbmRvd3NldC5tZW1iZXIgPSBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzW3RoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDb2x1bW5dOwogICAgICAgICAgdGhpcy5za2lsbHNXaW5kb3dzZXQucmVidWlsZCgpOwogICAgICAgICAgcmV0dXJuIHRoaXMuc2tpbGxzV2luZG93c2V0LnJlZHJhdygpOwogICAgICAgIGNhc2UgMzoKICAgICAgICAgIHRoaXMuZXF1aXBtZW50V2luZG93c2V0Lm1lbWJlciA9IEdhbWVNYW5hZ2VyLnBhcnR5Lm1lbWJlcnNbdGhpcy5wYXJ0eVdpbmRvdy5zZWxlY3RlZENvbHVtbl07CiAgICAgICAgICByZXR1cm4gdGhpcy5lcXVpcG1lbnRXaW5kb3dzZXQucmVkcmF3KCk7CiAgICAgIH0KICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLm9uU3ViTWVudUNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICBzd2l0Y2ggKHRoaXMuYWN0aW9uV2luZG93LnNlbGVjdGVkUm93KSB7CiAgICAgICAgY2FzZSAxOgogICAgICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgIHRoaXMucGFydHlXaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zV2luZG93c2V0LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHRoaXMuYWN0aW9uV2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgICB0aGlzLnBhcnR5V2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgICByZXR1cm4gdGhpcy5za2lsbHNXaW5kb3dzZXQuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgY2FzZSAzOgogICAgICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgIHRoaXMucGFydHlXaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgICAgIHJldHVybiB0aGlzLmVxdWlwbWVudFdpbmRvd3NldC5hY3RpdmUgPSBmYWxzZTsKICAgICAgICBjYXNlIDQ6CiAgICAgICAgICB0aGlzLmFjdGlvbldpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZVdpbmRvd3NldC5hY3RpdmUgPSBmYWxzZTsKICAgICAgfQogICAgfTsKCiAgICBTY2VuZV9NYWluTWVudS5wcm90b3R5cGUub25BY3Rpb24gPSBmdW5jdGlvbigpIHsKICAgICAgc3dpdGNoICh0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdykgewogICAgICAgIGNhc2UgMToKICAgICAgICAgIHRoaXMuYWN0aW9uV2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgICAgIHJldHVybiB0aGlzLml0ZW1zV2luZG93c2V0LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgY2FzZSAyOgogICAgICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnBhcnR5V2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIHRoaXMuc2tpbGxzV2luZG93c2V0LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgY2FzZSAzOgogICAgICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnBhcnR5V2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIHRoaXMuZXF1aXBtZW50V2luZG93c2V0LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgY2FzZSA0OgogICAgICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgICB0aGlzLnBhcnR5V2luZG93LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgICAgcmV0dXJuIHRoaXMuc2F2ZVdpbmRvd3NldC5hY3RpdmUgPSB0cnVlOwogICAgICAgIGNhc2UgNToKICAgICAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX0VuZEdhbWUodGhpcy5iYWNrZ3JvdW5kKSwgdHJ1ZSk7CiAgICAgIH0KICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLm9uQWN0aW9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX01hcCgpKTsKICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLm9uQWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuc3RhdHVzV2luZG93LnZpc2libGUgPSB0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyA9PT0gMDsKICAgICAgaWYgKHRoaXMuc3RhdHVzV2luZG93LnZpc2libGUpIHsKICAgICAgICB0aGlzLnN0YXR1c1dpbmRvdy5yZWRyYXcoKTsKICAgICAgfQogICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnNob3codGhpcy5hY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3cgPT09IDEsIGZhbHNlKTsKICAgICAgdGhpcy5lcXVpcG1lbnRXaW5kb3dzZXQubWVtYmVyID0gR2FtZU1hbmFnZXIucGFydHkubWVtYmVyc1t0aGlzLnBhcnR5V2luZG93LnNlbGVjdGVkQ29sdW1uXTsKICAgICAgdGhpcy5lcXVpcG1lbnRXaW5kb3dzZXQuc2hvdyh0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyA9PT0gMywgZmFsc2UpOwogICAgICB0aGlzLnNhdmVXaW5kb3dzZXQuc2hvdyh0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyA9PT0gNCAmJiBHYW1lTWFuYWdlci5zYXZlTWVudUFjY2VzcywgZmFsc2UpOwogICAgICB0aGlzLnNraWxsc1dpbmRvd3NldC5tZW1iZXIgPSBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzW3RoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDb2x1bW5dOwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm1lbWJlciA9IHRoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDZWxsOwogICAgICBpZiAodGhpcy5hY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3cgPT09IDEpIHsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnJlZHJhdygpOwogICAgICB9CiAgICAgIGlmICh0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyA9PT0gMikgewogICAgICAgIHRoaXMuc2tpbGxzV2luZG93c2V0LnJlYnVpbGQoKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5za2lsbHNXaW5kb3dzZXQuc2hvdyh0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyA9PT0gMiwgZmFsc2UpOwogICAgfTsKCiAgICBTY2VuZV9NYWluTWVudS5wcm90b3R5cGUub25GaWxlU2VsZWN0aW9uID0gZnVuY3Rpb24oc2xvdCkgewogICAgICBHYW1lTWFuYWdlci5zYXZlKHNsb3QpOwogICAgICB0aGlzLnNhdmVXaW5kb3dzZXQucmVkcmF3KCk7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgIHRoaXMucGFydHlXaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgdGhpcy5zYXZlV2luZG93c2V0LmFjdGl2ZSA9IGZhbHNlOwogICAgICByZXR1cm4gSW5wdXQuY2xlYXIoKTsKICAgIH07CgogICAgU2NlbmVfTWFpbk1lbnUucHJvdG90eXBlLm9uRmlsZUNhbmNlbCA9IGZ1bmN0aW9uKHNsb3QpIHsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICByZXR1cm4gdGhpcy5zYXZlV2luZG93c2V0LmFjdGl2ZSA9IGZhbHNlOwogICAgfTsKCiAgICBTY2VuZV9NYWluTWVudS5wcm90b3R5cGUub25JdGVtU2VsZWN0aW9uID0gZnVuY3Rpb24oaXRlbSkgewogICAgICBpZiAoKGl0ZW0gIT0gbnVsbCkgJiYgIWl0ZW0uZW1wdHkpIHsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LmFjdGl2ZSA9IGZhbHNlOwogICAgICAgIHJldHVybiB0aGlzLnVzZURyb3BBbGVydFdpbmRvd3NldC5zaG93TW9kYWwoKTsKICAgICAgfQogICAgfTsKCiAgICBTY2VuZV9NYWluTWVudS5wcm90b3R5cGUub25Ta2lsbFNlbGVjdGlvbiA9IGZ1bmN0aW9uKHNraWxsKSB7CiAgICAgIHZhciB1c2VyLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgdXNlciA9IHRoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDZWxsOwogICAgICB0aGlzLnNraWxsc1dpbmRvd3NldC5hY3RpdmUgPSBmYWxzZTsKICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICB0aGlzLnBhcnR5V2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgdmFyIGl0ZW07CiAgICAgICAgX3RoaXMucGFydHlXaW5kb3cucmVkcmF3KCk7CiAgICAgICAgX3RoaXMuc2tpbGxzV2luZG93c2V0LnJlZHJhdygpOwogICAgICAgIGl0ZW0gPSBfdGhpcy5za2lsbHNXaW5kb3dzZXQuc2VsZWN0ZWRTa2lsbDsKICAgICAgICBfdGhpcy51c2VJdGVtKGl0ZW0sIHVzZXIpOwogICAgICAgIF90aGlzLnBhcnR5V2luZG93LnJlZHJhdygpOwogICAgICAgIHJldHVybiBfdGhpcy5za2lsbHNXaW5kb3dzZXQucmVkcmF3KCk7CiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLnBhcnR5V2luZG93Lm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgX3RoaXMucGFydHlXaW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSBudWxsOwogICAgICAgIF90aGlzLnBhcnR5V2luZG93Lm9uQ2FuY2VsID0gbnVsbDsKICAgICAgICBfdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgICByZXR1cm4gX3RoaXMuc2tpbGxzV2luZG93c2V0LmFjdGl2ZSA9IHRydWU7CiAgICAgIH07CiAgICB9OwoKICAgIFNjZW5lX01haW5NZW51LnByb3RvdHlwZS51c2VJdGVtID0gZnVuY3Rpb24oaXRlbSwgdXNlcikgewogICAgICB2YXIgbWVtYmVyLCBfaSwgX2osIF9sZW4sIF9sZW4xLCBfcmVmLCBfcmVmMSwgX3Jlc3VsdHMsIF9yZXN1bHRzMTsKICAgICAgc3dpdGNoIChpdGVtLnNjb3BlKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgcmV0dXJuIHVzZXIudXNlSXRlbShpdGVtLCB0aGlzLnBhcnR5V2luZG93LnNlbGVjdGVkQ2VsbCk7CiAgICAgICAgY2FzZSA3OgogICAgICAgICAgcmV0dXJuIHVzZXIudXNlSXRlbShpdGVtLCB0aGlzLnBhcnR5V2luZG93LnNlbGVjdGVkQ2VsbCk7CiAgICAgICAgY2FzZSA4OgogICAgICAgICAgX3JlZiA9IHRoaXMucGFydHlXaW5kb3cubWVtYmVyczsKICAgICAgICAgIF9yZXN1bHRzID0gW107CiAgICAgICAgICBmb3IgKF9pID0gMCwgX2xlbiA9IF9yZWYubGVuZ3RoOyBfaSA8IF9sZW47IF9pKyspIHsKICAgICAgICAgICAgbWVtYmVyID0gX3JlZltfaV07CiAgICAgICAgICAgIGlmIChtZW1iZXIuaXNBbGl2ZSkgewogICAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godXNlci51c2VJdGVtKGl0ZW0sIG1lbWJlcikpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF9yZXN1bHRzLnB1c2godm9pZCAwKTsKICAgICAgICAgICAgfQogICAgICAgICAgfQogICAgICAgICAgcmV0dXJuIF9yZXN1bHRzOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSA5OgogICAgICAgICAgaWYgKCF0aGlzLnBhcnR5V2luZG93LnNlbGVjdGVkQ2VsbC5pc0FsaXZlKSB7CiAgICAgICAgICAgIHJldHVybiB1c2VyLnVzZUl0ZW0oaXRlbSwgdGhpcy5wYXJ0eVdpbmRvdy5zZWxlY3RlZENlbGwpOwogICAgICAgICAgfQogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAxMDoKICAgICAgICAgIF9yZWYxID0gdGhpcy5wYXJ0eVdpbmRvdy5tZW1iZXJzOwogICAgICAgICAgX3Jlc3VsdHMxID0gW107CiAgICAgICAgICBmb3IgKF9qID0gMCwgX2xlbjEgPSBfcmVmMS5sZW5ndGg7IF9qIDwgX2xlbjE7IF9qKyspIHsKICAgICAgICAgICAgbWVtYmVyID0gX3JlZjFbX2pdOwogICAgICAgICAgICBpZiAoIW1lbWJlci5pc0FsaXZlKSB7CiAgICAgICAgICAgICAgX3Jlc3VsdHMxLnB1c2godXNlci51c2VJdGVtKGl0ZW0sIG1lbWJlcikpOwogICAgICAgICAgICB9IGVsc2UgewogICAgICAgICAgICAgIF9yZXN1bHRzMS5wdXNoKHZvaWQgMCk7CiAgICAgICAgICAgIH0KICAgICAgICAgIH0KICAgICAgICAgIHJldHVybiBfcmVzdWx0czE7CiAgICAgICAgICBicmVhazsKICAgICAgICBjYXNlIDExOgogICAgICAgICAgcmV0dXJuIHVzZXIudXNlSXRlbShpdGVtLCB1c2VyKTsKICAgICAgfQogICAgfTsKCiAgICBTY2VuZV9NYWluTWVudS5wcm90b3R5cGUub25Vc2VEcm9wQWxlcnRBY2NlcHQgPSBmdW5jdGlvbihjb2RlKSB7CiAgICAgIHZhciB1c2VyLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgc3dpdGNoIChjb2RlKSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgdXNlciA9IHRoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDZWxsOwogICAgICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICB2YXIgaXRlbTsKICAgICAgICAgICAgaXRlbSA9IF90aGlzLml0ZW1zV2luZG93c2V0LnNlbGVjdGVkSXRlbS5pdGVtOwogICAgICAgICAgICBfdGhpcy51c2VJdGVtKGl0ZW0sIHVzZXIpOwogICAgICAgICAgICBfdGhpcy5wYXJ0eVdpbmRvdy5yZWRyYXcoKTsKICAgICAgICAgICAgX3RoaXMuaXRlbXNXaW5kb3dzZXQuc2VsZWN0ZWRJdGVtLmNvdW50LS07CiAgICAgICAgICAgIF90aGlzLml0ZW1zV2luZG93c2V0LnJlZHJhdygpOwogICAgICAgICAgICBpZiAoX3RoaXMuaXRlbXNXaW5kb3dzZXQuc2VsZWN0ZWRJdGVtLmNvdW50ID09PSAwKSB7CiAgICAgICAgICAgICAgX3RoaXMuaXRlbXNXaW5kb3dzZXQucmVidWlsZCgpOwogICAgICAgICAgICAgIHJldHVybiBfdGhpcy5wYXJ0eVdpbmRvdy5vbkNhbmNlbCgpOwogICAgICAgICAgICB9CiAgICAgICAgICB9OwogICAgICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5vbkNhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICAgICAgICBfdGhpcy5wYXJ0eVdpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9IG51bGw7CiAgICAgICAgICAgIF90aGlzLnBhcnR5V2luZG93Lm9uQ2FuY2VsID0gbnVsbDsKICAgICAgICAgICAgX3RoaXMucGFydHlXaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgICAgIHJldHVybiBfdGhpcy5pdGVtc1dpbmRvd3NldC5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgfTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMToKICAgICAgICAgIHRoaXMuYW1vdW50U2VsZWN0aW9uV2luZG93Lm1heFZhbHVlID0gdGhpcy5pdGVtc1dpbmRvd3NldC5zZWxlY3RlZEl0ZW0uY291bnQ7CiAgICAgICAgICB0aGlzLmFtb3VudFNlbGVjdGlvbldpbmRvdy52YWx1ZSA9IDE7CiAgICAgICAgICB0aGlzLmFtb3VudFNlbGVjdGlvbldpbmRvdy5ub01vbmV5ID0gdHJ1ZTsKICAgICAgICAgIHRoaXMuYW1vdW50U2VsZWN0aW9uV2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgICAgICB0aGlzLmFtb3VudFNlbGVjdGlvbldpbmRvdy5yZWRyYXcoKTsKICAgICAgICAgIHRoaXMuYW1vdW50U2VsZWN0aW9uV2luZG93Lm9uQWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIF90aGlzLml0ZW1zV2luZG93c2V0LnNlbGVjdGVkSXRlbS5jb3VudCAtPSBfdGhpcy5hbW91bnRTZWxlY3Rpb25XaW5kb3cuYW1vdW50OwogICAgICAgICAgICBfdGhpcy5pdGVtc1dpbmRvd3NldC5yZWJ1aWxkKCk7CiAgICAgICAgICAgIHJldHVybiBfdGhpcy5pdGVtc1dpbmRvd3NldC5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMuYW1vdW50U2VsZWN0aW9uV2luZG93Lm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgICAgIHJldHVybiBfdGhpcy5pdGVtc1dpbmRvd3NldC5hY3RpdmUgPSB0cnVlOwogICAgICAgICAgfTsKICAgICAgICAgIHRoaXMuYW1vdW50U2VsZWN0aW9uV2luZG93Lm9wZW4oKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5pdGVtc1dpbmRvd3NldC5jbGVhckRlc2NyaXB0aW9uKCk7CiAgICB9OwoKICAgIFNjZW5lX01haW5NZW51LnByb3RvdHlwZS5vblVzZURyb3BBbGVydENhbmNlbCA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5pdGVtc1dpbmRvd3NldC5hY3RpdmUgPSB0cnVlOwogICAgfTsKCiAgICByZXR1cm4gU2NlbmVfTWFpbk1lbnU7CgogIH0pKFNjZW5lKTsKCiAgd2luZG93LlNjZW5lX01haW5NZW51ID0gU2NlbmVfTWFpbk1lbnU7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Scene_Shop","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfU2hvcAojICAgQ3JlYXRlZCBvbjogMjAxMy0wOS0xNQojCiMgICAgIENvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogU2NlbmVfU2hvcAojCiMgICBEZXNjcmlwdGlvbi4uLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQoKY2xhc3MgU2NlbmVfU2hvcCBleHRlbmRzIFNjZW5lCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBzdXBlcigpCiAgICAKICAgICAgICBAaXRlbXMgPSBbXQogICAgICAgIEB3ZWFwb25zID0gW10KICAgICAgICBAYXJtb3JzID0gW10KICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgQGJhY2tncm91bmQgPSBHcmFwaGljcy5zbmFwc2hvdCgpCiAgICAgICAgQGJhY2tncm91bmQuZmlsbFJlY3QoMCwgMCwgQGJhY2tncm91bmQud2lkdGgsIEBiYWNrZ3JvdW5kLmhlaWdodCwgbmV3IENvbG9yKDAsIDAsIDAsIDAuNSkpCiAgICBkaXNwb3NlOiAtPgogICAgICAgIEBzcHJpdGUuZGlzcG9zZSgpCiAgICAgICAgQGl0ZW1zV2luZG93c2V0LmRpc3Bvc2UoKQogICAgICAgIEBwYXJ0eVdpbmRvdy5kaXNwb3NlKCkKICAgICAgICBAYWN0aW9uV2luZG93LmRpc3Bvc2UoKQogICAgICAgIEBtb25leVdpbmRvdy5kaXNwb3NlKCkKICAgIAogICAgcHJlcGFyZURhdGE6IC0+ICAgCiAgICAgICAgdm9jYWIgPSBSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnkKICAgICAgICBAc3ByaXRlID0gbmV3IFNwcml0ZQogICAgICAgIEBzcHJpdGUuYml0bWFwID0gQGJhY2tncm91bmQKICAgICAgICBAc3ByaXRlLnNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0KQogICAgICAgIEBzcHJpdGUueiA9IC0xCiAgICAgICAgCiAgICAgICAgQGl0ZW1zV2luZG93c2V0ID0gbmV3IFdpbmRvd3NldF9CdXlJdGVtcygxNzQgKiBXaW5kb3dfQmFzZS5zY2FsZSwgMTE0ICogV2luZG93X0Jhc2Uuc2NhbGUpCiAgICAgICAgQGl0ZW1zV2luZG93c2V0Lml0ZW1zID0gQGl0ZW1zICNbeyBpdGVtOiBSZWNvcmRNYW5hZ2VyLml0ZW1zWzBdIH1dCiAgICAgICAgQGl0ZW1zV2luZG93c2V0LndlYXBvbnMgPSBAd2VhcG9ucyAjW3sgaXRlbTogUmVjb3JkTWFuYWdlci53ZWFwb25zWzBdIH0sIHsgaXRlbTogUmVjb3JkTWFuYWdlci53ZWFwb25zWzJdLCBwcmljZTogNTAgfSBdCiAgICAgICAgQGl0ZW1zV2luZG93c2V0LmFybW9ycyA9IEBhcm1vcnMKICAgICAgICBAaXRlbXNXaW5kb3dzZXQuc2hvdyhubykKICAgICAgICBAaXRlbXNXaW5kb3dzZXQub25CdXkgPSAoc2VuZGVyLCBpdGVtLCBhbW91bnQsIHZhbHVlKSA9PiBAb25CdXkoc2VuZGVyLCBpdGVtLCBhbW91bnQsIHZhbHVlKQogICAgICAgIEBpdGVtc1dpbmRvd3NldC5vblNlbGwgPSAoc2VuZGVyLCBpdGVtLCBhbW91bnQsIHZhbHVlKSA9PiBAb25TZWxsKHNlbmRlciwgaXRlbSwgYW1vdW50LCB2YWx1ZSkKICAgICAgICBAaXRlbXNXaW5kb3dzZXQub25DYW5jZWwgPSAoc2VuZGVyKSA9PiBAb25DYW5jZWwoc2VuZGVyKQogICAgICAgIAogICAgICAgIEBwYXJ0eVdpbmRvdyA9IG5ldyBXaW5kb3dfUGFydHkoKQogICAgICAgIEBwYXJ0eVdpbmRvdy5vblNlbGVjdGlvbkNoYW5nZSA9ID0+IEBvblBhcnR5TWVtYmVyQ2hhbmdlKCkKICAgICAgICBAcGFydHlXaW5kb3cueiA9IDAKCiAgICAgICAgQGFjdGlvbldpbmRvdyA9IG5ldyBXaW5kb3dfU2VsZWN0aW9uKDAsIEBwYXJ0eVdpbmRvdy5oZWlnaHQsIDEsIFtbbGNzKHZvY2FiLnNob3BNZW51LmJ1eSldICwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtsY3Modm9jYWIuc2hvcE1lbnUuc2VsbCldICwKICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtsY3Modm9jYWIuc2hvcE1lbnUubGVhdmUpXV0sIDE1MCpXaW5kb3dfQmFzZS5zY2FsZSwgMzIqV2luZG93X0Jhc2Uuc2NhbGUpCiAgICAgICAgQGFjdGlvbldpbmRvdy5vblNlbGVjdGlvbkNoYW5nZSA9ID0+IEBvbkFjdGlvbkNoYW5nZSgpCiAgICAgICAgQGFjdGlvbldpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9ID0+IEBvbkFjdGlvbkFjY2VwdCgpCiAgICAgICAgQGFjdGlvbldpbmRvdy50ZXh0QWxpZ25tZW50ID0gMAoKICAgICAgICBAbW9uZXlXaW5kb3cgPSBuZXcgV2luZG93X01vbmV5KDAsIDApCiAgICAgICAgQG1vbmV5V2luZG93LnkgPSBHcmFwaGljcy5oZWlnaHQgLSBAbW9uZXlXaW5kb3cuaGVpZ2h0CiAgICAgICAgQG1vbmV5V2luZG93LnJlZHJhdygpCiAgICAgICAgQHBhcnR5V2luZG93LnByZXBhcmUoKQogICAgCiAgICBwcmVwYXJlVmlzdWFsOiAtPgogICAgICAgIEBwYXJ0eVdpbmRvdy5yZWRyYXcoKQogICAgICAgIEBhY3Rpb25XaW5kb3cucmVkcmF3KCkKICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICBAaXRlbXNXaW5kb3dzZXQudXBkYXRlKCkKICAgICAgICBAcGFydHlXaW5kb3cudXBkYXRlKCkKICAgICAgICBAYWN0aW9uV2luZG93LnVwZGF0ZSgpCiAgICAgICAgCiAgICAgICAgQGl0ZW1zV2luZG93c2V0Lm1lbWJlciA9IEdhbWVNYW5hZ2VyLnBhcnR5Lm1lbWJlcnNbQHBhcnR5V2luZG93LnNlbGVjdGVkQ29sdW1uXQogICAgICAgIHN1YndpbmRvd0FjdGl2ZSA9IEBpdGVtc1dpbmRvd3NldC5hY3RpdmUKICAgICAgICAgICAgICAgICAgICAgICAgICAKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LkIpIGFuZCBAYWN0aW9uV2luZG93LmFjdGl2ZQogICAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX01hcCgpKQogICAgICAgICAgICAKICAgICAgICBzdXBlcgogICAgCiAgICBvblBhcnR5TWVtYmVyQ2hhbmdlOiAtPgogICAgICAgICAgICAgICAgCiAgICBvbkFjdGlvbkNoYW5nZTogLT4KICAgICAgICAKICAgICAgICBpZiBAYWN0aW9uV2luZG93LnNlbGVjdGVkUm93ID09IDAKICAgICAgICAgICAgQGl0ZW1zV2luZG93c2V0Lml0ZW1zID0gQGl0ZW1zICNbeyBpdGVtOiBSZWNvcmRNYW5hZ2VyLml0ZW1zWzBdIH1dCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC53ZWFwb25zID0gQHdlYXBvbnMgI1t7IGl0ZW06IFJlY29yZE1hbmFnZXIud2VhcG9uc1swXSB9LCB7IGl0ZW06IFJlY29yZE1hbmFnZXIud2VhcG9uc1sxXSwgcHJpY2U6IDUwIH0sIHsgaXRlbTogUmVjb3JkTWFuYWdlci53ZWFwb25zWzJdLCBwcmljZTogNTAgfV0KICAgICAgICAgICAgQGl0ZW1zV2luZG93c2V0LmFybW9ycyA9IEBhcm1vcnMKICAgICAgICAgICAgQGl0ZW1zV2luZG93c2V0Lm1vZGUgPSBAYWN0aW9uV2luZG93LnNlbGVjdGVkUm93ICAgICAgICAKICAgICAgICAgICAgQGl0ZW1zV2luZG93c2V0LnNob3coeWVzLCBubykKICAgICAgICAgICAgCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5yZWRyYXcoKQogICAgICAgIGVsc2UgaWYgQGFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyA9PSAxCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5pdGVtcyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS5pdGVtcwogICAgICAgICAgICBAaXRlbXNXaW5kb3dzZXQud2VhcG9ucyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS53ZWFwb25zCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5hcm1vcnMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkuYXJtb3JzCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5tb2RlID0gQGFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyAgICAgICAgCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5zaG93KHllcywgbm8pCiAgICAgICAgICAgIAogICAgICAgICAgICBAaXRlbXNXaW5kb3dzZXQucmVkcmF3KCkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5tb2RlID0gQGFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdyAgCiAgICAgICAgICAgIEBpdGVtc1dpbmRvd3NldC5zaG93KG5vLCBubykKICAgICAgICAgICAgQGl0ZW1zV2luZG93c2V0Lml0ZW1XaW5kb3cudmlzaWJsZSA9IG5vCiAgICAgICAgCiAgICBvbkFjdGlvbkFjY2VwdDogLT4KICAgICAgICBpZiBAYWN0aW9uV2luZG93LnNlbGVjdGVkUm93ID09IDIKICAgICAgICAgICAgU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9NYXAoKSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEBhY3Rpb25XaW5kb3cuYWN0aXZlID0gbm8KICAgICAgICAgICAgQHBhcnR5V2luZG93LmFjdGl2ZSA9IG5vCiAgICAgICAgICAgIAogICAgICAgICAgICAKICAgICAgICAgICAgICAgIAogICAgICAgICAgICBAaXRlbXNXaW5kb3dzZXQubW9kZSA9IEBhY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3cKICAgICAgICAgICAgQGl0ZW1zV2luZG93c2V0LmFjdGl2YXRlKCkKICAgICAgICAgICAgICAgCiAgICBvbkNhbmNlbDogLT4KICAgICAgICBAYWN0aW9uV2luZG93LmFjdGl2ZSA9IHllcwogICAgICAgIEBwYXJ0eVdpbmRvdy5hY3RpdmUgPSB5ZXMKICAgICAgICBJbnB1dC5jbGVhcigpCiAgICAgICAgCiAgICBvbkJ1eTogKHNlbmRlciwgaXRlbSwgYW1vdW50LCB2YWx1ZSkgLT4KICAgICAgICBHYW1lTWFuYWdlci5tb25leSAtPSB2YWx1ZSAqIGFtb3VudAogICAgICAgIEdhbWVNYW5hZ2VyLmludmVudG9yeS5hZGRJdGVtKGl0ZW0sIGFtb3VudCkKICAgICAgICBAbW9uZXlXaW5kb3cucmVkcmF3KCkKICAgICAgICAKICAgIG9uU2VsbDogKHNlbmRlciwgaXRlbSwgYW1vdW50LCB2YWx1ZSkgLT4KICAgICAgICBHYW1lTWFuYWdlci5tb25leSArPSB2YWx1ZSAqIGFtb3VudAogICAgICAgIEdhbWVNYW5hZ2VyLmludmVudG9yeS5yZW1vdmVJdGVtKGl0ZW0sIGFtb3VudCkKICAgICAgICBAbW9uZXlXaW5kb3cucmVkcmF3KCkKCgp3aW5kb3cuU2NlbmVfU2hvcCA9IFNjZW5lX1Nob3A=","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9TaG9wLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU2NlbmVfU2hvcCA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTY2VuZV9TaG9wLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX1Nob3AoKSB7CiAgICAgIFNjZW5lX1Nob3AuX19zdXBlcl9fLmNvbnN0cnVjdG9yLmNhbGwodGhpcyk7CiAgICAgIHRoaXMuaXRlbXMgPSBbXTsKICAgICAgdGhpcy53ZWFwb25zID0gW107CiAgICAgIHRoaXMuYXJtb3JzID0gW107CiAgICB9CgogICAgU2NlbmVfU2hvcC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmJhY2tncm91bmQgPSBHcmFwaGljcy5zbmFwc2hvdCgpOwogICAgICByZXR1cm4gdGhpcy5iYWNrZ3JvdW5kLmZpbGxSZWN0KDAsIDAsIHRoaXMuYmFja2dyb3VuZC53aWR0aCwgdGhpcy5iYWNrZ3JvdW5kLmhlaWdodCwgbmV3IENvbG9yKDAsIDAsIDAsIDAuNSkpOwogICAgfTsKCiAgICBTY2VuZV9TaG9wLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuc3ByaXRlLmRpc3Bvc2UoKTsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5kaXNwb3NlKCk7CiAgICAgIHRoaXMucGFydHlXaW5kb3cuZGlzcG9zZSgpOwogICAgICB0aGlzLmFjdGlvbldpbmRvdy5kaXNwb3NlKCk7CiAgICAgIHJldHVybiB0aGlzLm1vbmV5V2luZG93LmRpc3Bvc2UoKTsKICAgIH07CgogICAgU2NlbmVfU2hvcC5wcm90b3R5cGUucHJlcGFyZURhdGEgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHZvY2FiLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgdm9jYWIgPSBSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnk7CiAgICAgIHRoaXMuc3ByaXRlID0gbmV3IFNwcml0ZTsKICAgICAgdGhpcy5zcHJpdGUuYml0bWFwID0gdGhpcy5iYWNrZ3JvdW5kOwogICAgICB0aGlzLnNwcml0ZS5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodCk7CiAgICAgIHRoaXMuc3ByaXRlLnogPSAtMTsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldCA9IG5ldyBXaW5kb3dzZXRfQnV5SXRlbXMoMTc0ICogV2luZG93X0Jhc2Uuc2NhbGUsIDExNCAqIFdpbmRvd19CYXNlLnNjYWxlKTsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5pdGVtcyA9IHRoaXMuaXRlbXM7CiAgICAgIHRoaXMuaXRlbXNXaW5kb3dzZXQud2VhcG9ucyA9IHRoaXMud2VhcG9uczsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5hcm1vcnMgPSB0aGlzLmFybW9yczsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5zaG93KGZhbHNlKTsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5vbkJ1eSA9IGZ1bmN0aW9uKHNlbmRlciwgaXRlbSwgYW1vdW50LCB2YWx1ZSkgewogICAgICAgIHJldHVybiBfdGhpcy5vbkJ1eShzZW5kZXIsIGl0ZW0sIGFtb3VudCwgdmFsdWUpOwogICAgICB9OwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm9uU2VsbCA9IGZ1bmN0aW9uKHNlbmRlciwgaXRlbSwgYW1vdW50LCB2YWx1ZSkgewogICAgICAgIHJldHVybiBfdGhpcy5vblNlbGwoc2VuZGVyLCBpdGVtLCBhbW91bnQsIHZhbHVlKTsKICAgICAgfTsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5vbkNhbmNlbCA9IGZ1bmN0aW9uKHNlbmRlcikgewogICAgICAgIHJldHVybiBfdGhpcy5vbkNhbmNlbChzZW5kZXIpOwogICAgICB9OwogICAgICB0aGlzLnBhcnR5V2luZG93ID0gbmV3IFdpbmRvd19QYXJ0eSgpOwogICAgICB0aGlzLnBhcnR5V2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uUGFydHlNZW1iZXJDaGFuZ2UoKTsKICAgICAgfTsKICAgICAgdGhpcy5wYXJ0eVdpbmRvdy56ID0gMDsKICAgICAgdGhpcy5hY3Rpb25XaW5kb3cgPSBuZXcgV2luZG93X1NlbGVjdGlvbigwLCB0aGlzLnBhcnR5V2luZG93LmhlaWdodCwgMSwgW1tsY3Modm9jYWIuc2hvcE1lbnUuYnV5KV0sIFtsY3Modm9jYWIuc2hvcE1lbnUuc2VsbCldLCBbbGNzKHZvY2FiLnNob3BNZW51LmxlYXZlKV1dLCAxNTAgKiBXaW5kb3dfQmFzZS5zY2FsZSwgMzIgKiBXaW5kb3dfQmFzZS5zY2FsZSk7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uQWN0aW9uQ2hhbmdlKCk7CiAgICAgIH07CiAgICAgIHRoaXMuYWN0aW9uV2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uQWN0aW9uQWNjZXB0KCk7CiAgICAgIH07CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LnRleHRBbGlnbm1lbnQgPSAwOwogICAgICB0aGlzLm1vbmV5V2luZG93ID0gbmV3IFdpbmRvd19Nb25leSgwLCAwKTsKICAgICAgdGhpcy5tb25leVdpbmRvdy55ID0gR3JhcGhpY3MuaGVpZ2h0IC0gdGhpcy5tb25leVdpbmRvdy5oZWlnaHQ7CiAgICAgIHRoaXMubW9uZXlXaW5kb3cucmVkcmF3KCk7CiAgICAgIHJldHVybiB0aGlzLnBhcnR5V2luZG93LnByZXBhcmUoKTsKICAgIH07CgogICAgU2NlbmVfU2hvcC5wcm90b3R5cGUucHJlcGFyZVZpc3VhbCA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnBhcnR5V2luZG93LnJlZHJhdygpOwogICAgICByZXR1cm4gdGhpcy5hY3Rpb25XaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFNjZW5lX1Nob3AucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgc3Vid2luZG93QWN0aXZlOwogICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnVwZGF0ZSgpOwogICAgICB0aGlzLnBhcnR5V2luZG93LnVwZGF0ZSgpOwogICAgICB0aGlzLmFjdGlvbldpbmRvdy51cGRhdGUoKTsKICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5tZW1iZXIgPSBHYW1lTWFuYWdlci5wYXJ0eS5tZW1iZXJzW3RoaXMucGFydHlXaW5kb3cuc2VsZWN0ZWRDb2x1bW5dOwogICAgICBzdWJ3aW5kb3dBY3RpdmUgPSB0aGlzLml0ZW1zV2luZG93c2V0LmFjdGl2ZTsKICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuQikgJiYgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlKSB7CiAgICAgICAgU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9NYXAoKSk7CiAgICAgIH0KICAgICAgcmV0dXJuIFNjZW5lX1Nob3AuX19zdXBlcl9fLnVwZGF0ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpOwogICAgfTsKCiAgICBTY2VuZV9TaG9wLnByb3RvdHlwZS5vblBhcnR5TWVtYmVyQ2hhbmdlID0gZnVuY3Rpb24oKSB7fTsKCiAgICBTY2VuZV9TaG9wLnByb3RvdHlwZS5vbkFjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodGhpcy5hY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3cgPT09IDApIHsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lml0ZW1zID0gdGhpcy5pdGVtczsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LndlYXBvbnMgPSB0aGlzLndlYXBvbnM7CiAgICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5hcm1vcnMgPSB0aGlzLmFybW9yczsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm1vZGUgPSB0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdzsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnNob3codHJ1ZSwgZmFsc2UpOwogICAgICAgIHJldHVybiB0aGlzLml0ZW1zV2luZG93c2V0LnJlZHJhdygpOwogICAgICB9IGVsc2UgaWYgKHRoaXMuYWN0aW9uV2luZG93LnNlbGVjdGVkUm93ID09PSAxKSB7CiAgICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5pdGVtcyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS5pdGVtczsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LndlYXBvbnMgPSBHYW1lTWFuYWdlci5pbnZlbnRvcnkud2VhcG9uczsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LmFybW9ycyA9IEdhbWVNYW5hZ2VyLmludmVudG9yeS5hcm1vcnM7CiAgICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5tb2RlID0gdGhpcy5hY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3c7CiAgICAgICAgdGhpcy5pdGVtc1dpbmRvd3NldC5zaG93KHRydWUsIGZhbHNlKTsKICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1dpbmRvd3NldC5yZWRyYXcoKTsKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm1vZGUgPSB0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdzsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0LnNob3coZmFsc2UsIGZhbHNlKTsKICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1dpbmRvd3NldC5pdGVtV2luZG93LnZpc2libGUgPSBmYWxzZTsKICAgICAgfQogICAgfTsKCiAgICBTY2VuZV9TaG9wLnByb3RvdHlwZS5vbkFjdGlvbkFjY2VwdCA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAodGhpcy5hY3Rpb25XaW5kb3cuc2VsZWN0ZWRSb3cgPT09IDIpIHsKICAgICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9NYXAoKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy5hY3Rpb25XaW5kb3cuYWN0aXZlID0gZmFsc2U7CiAgICAgICAgdGhpcy5wYXJ0eVdpbmRvdy5hY3RpdmUgPSBmYWxzZTsKICAgICAgICB0aGlzLml0ZW1zV2luZG93c2V0Lm1vZGUgPSB0aGlzLmFjdGlvbldpbmRvdy5zZWxlY3RlZFJvdzsKICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1dpbmRvd3NldC5hY3RpdmF0ZSgpOwogICAgICB9CiAgICB9OwoKICAgIFNjZW5lX1Nob3AucHJvdG90eXBlLm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuYWN0aW9uV2luZG93LmFjdGl2ZSA9IHRydWU7CiAgICAgIHRoaXMucGFydHlXaW5kb3cuYWN0aXZlID0gdHJ1ZTsKICAgICAgcmV0dXJuIElucHV0LmNsZWFyKCk7CiAgICB9OwoKICAgIFNjZW5lX1Nob3AucHJvdG90eXBlLm9uQnV5ID0gZnVuY3Rpb24oc2VuZGVyLCBpdGVtLCBhbW91bnQsIHZhbHVlKSB7CiAgICAgIEdhbWVNYW5hZ2VyLm1vbmV5IC09IHZhbHVlICogYW1vdW50OwogICAgICBHYW1lTWFuYWdlci5pbnZlbnRvcnkuYWRkSXRlbShpdGVtLCBhbW91bnQpOwogICAgICByZXR1cm4gdGhpcy5tb25leVdpbmRvdy5yZWRyYXcoKTsKICAgIH07CgogICAgU2NlbmVfU2hvcC5wcm90b3R5cGUub25TZWxsID0gZnVuY3Rpb24oc2VuZGVyLCBpdGVtLCBhbW91bnQsIHZhbHVlKSB7CiAgICAgIEdhbWVNYW5hZ2VyLm1vbmV5ICs9IHZhbHVlICogYW1vdW50OwogICAgICBHYW1lTWFuYWdlci5pbnZlbnRvcnkucmVtb3ZlSXRlbShpdGVtLCBhbW91bnQpOwogICAgICByZXR1cm4gdGhpcy5tb25leVdpbmRvdy5yZWRyYXcoKTsKICAgIH07CgogICAgcmV0dXJuIFNjZW5lX1Nob3A7CgogIH0pKFNjZW5lKTsKCiAgd2luZG93LlNjZW5lX1Nob3AgPSBTY2VuZV9TaG9wOwoKfSkuY2FsbCh0aGlzKTsK"},{"name":"Scene_Settings","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfU2V0dGluZ3MKIyAgIAojCiMgCUNvcHlyaWdodCAoQykgMjAxNCBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogU2NlbmVfU2V0dGluZ3MKIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNjZW5lX1NldHRpbmdzIGV4dGVuZHMgU2NlbmUKICAgIGNvbnN0cnVjdG9yOiAoKSAtPgogICAgICAgIHN1cGVyKCkKICAKICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgQGJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL1BpY3R1cmVzLyN7UmVjb3JkTWFuYWdlci5zeXN0ZW0udGl0bGVHcmFwaGljLm5hbWV9IikKICAgIGRpc3Bvc2U6IC0+CiAgICAgICAgQHdpbmRvdy5kaXNwb3NlKCkKICAgICAgICBAdmFsdWVXaW5kb3cuZGlzcG9zZSgpCiAgICAgICAgQGluZm9XaW5kb3cuZGlzcG9zZSgpCiAgICAgICAgCiAgICAgICAgaWYgQHNwcml0ZT8KICAgICAgICAgICAgQHNwcml0ZS5kaXNwb3NlKCkKICAgIHByZXBhcmVEYXRhOiAtPgoKICAgIHByZXBhcmVWaXN1YWw6IC0+CiAgICAgICAgaWYgQGJpdG1hcD8KICAgICAgICAgICAgQHNwcml0ZSA9IG5ldyBTcHJpdGUoKQogICAgICAgICAgICBAc3ByaXRlLmJpdG1hcCA9IEBiaXRtYXAKICAgICAgICAgICAgQHNwcml0ZS5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodCkKICAgICAgICAgICAgQHNwcml0ZS56ID0gLTEwMDAKICAgICAgICBzID0gV2luZG93X0Jhc2Uuc2NhbGUKICAgICAgICB2b2NhYiA9IFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeQogICAgICAgIEB3aW5kb3cgPSBuZXcgV2luZG93X1NlbGVjdGlvbigyMCpzLCAyMCpzLCAxLCBbWyJHcmFwaGljcyBSZW5kZXJlciJdICxbIlNjcmVlbiBGaWx0ZXIiXSwgWyJCYWNrIl1dLCAzMDAqcykKICAgICAgICBAd2luZG93LnggPSAyMCpzCiAgICAgICAgQHdpbmRvdy55ID0gODAqcwogICAgICAgIEB3aW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSA9PiBAZXhlY3V0ZVNlbGVjdGVkQ29tbWFuZCgpCiAgICAgICAgQHdpbmRvdy5vblNlbGVjdGlvbkNoYW5nZSA9ID0+IEBvblNlbGVjdGlvbkNoYW5nZSgpCiAgICAgICAgQHdpbmRvdy5yZWRyYXcoKQogICAgICAgIAogICAgICAgIEB2YWx1ZVdpbmRvdyA9IG5ldyBXaW5kb3dfVGV4dChAd2luZG93LnggKyBAd2luZG93LndpZHRoLCBAd2luZG93LnksIDI3MipzLCBAd2luZG93LmhlaWdodCkKCiAgICAgICAgQGluZm9XaW5kb3cgPSBuZXcgV2luZG93X1RleHQoQHdpbmRvdy54LCBAd2luZG93LnkgLSA1MCpzLCBAd2luZG93LndpZHRoICsgQHZhbHVlV2luZG93LndpZHRoLCA1MCpzKQogICAgICAgIEBpbmZvV2luZG93LnRleHQgPSAiQ2hhbmdlIGEgc2V0dGluZyB1c2luZyBsZWZ0IG9yIHJpZ2h0IGJ1dHRvbi4iCiAgICAgICAgQGluZm9XaW5kb3cucmVkcmF3KCkKICAgICAgICAKICAgICAgICBAc2V0dGluZ3MgPSBHYW1lU3RvcmFnZS5nZXRPYmplY3QoInNldHRpbmdzIikgfHwgWzAsIDBdCiAgICAgICAgQHJlbmRlcmVyU2V0dGluZ3MgPSBbIk9wZW5HTCBSZW5kZXJlciIsICJDYW52YXMgUmVuZGVyZXIiXQogICAgICAgIEBmaWx0ZXJTZXR0aW5ncyA9IFsiTm8gRmlsdGVyIiwgIlNtb290aCBGaWx0ZXIiXQogICAgdXBkYXRlOiAtPiAgICAgICAgICAgIAogICAgICAgIEB3aW5kb3cudXBkYXRlKCkKICAgICAgICAKICAgICAgICBpZiBJbnB1dC50cmlnZ2VyKElucHV0LkxFRlQpCiAgICAgICAgICAgIEBzZXR0aW5nc1tAd2luZG93LnNlbGVjdGVkUm93XSA9IEBzZXR0aW5nc1tAd2luZG93LnNlbGVjdGVkUm93XSAtIDEKICAgICAgICAgICAgQHNldHRpbmdzW0B3aW5kb3cuc2VsZWN0ZWRSb3ddID0gTWF0aC5tYXgoTWF0aC5taW4oQHNldHRpbmdzW0B3aW5kb3cuc2VsZWN0ZWRSb3ddLCBAc2V0dGluZ3MubGVuZ3RoLTEpLCAwKQogICAgICAgICAgICBAb25TZWxlY3Rpb25DaGFuZ2UoKQogICAgICAgIGlmIElucHV0LnRyaWdnZXIoSW5wdXQuUklHSFQpCiAgICAgICAgICAgIEBzZXR0aW5nc1tAd2luZG93LnNlbGVjdGVkUm93XSA9IEBzZXR0aW5nc1tAd2luZG93LnNlbGVjdGVkUm93XSArIDEKICAgICAgICAgICAgQHNldHRpbmdzW0B3aW5kb3cuc2VsZWN0ZWRSb3ddID0gTWF0aC5tYXgoTWF0aC5taW4oQHNldHRpbmdzW0B3aW5kb3cuc2VsZWN0ZWRSb3ddLCBAc2V0dGluZ3MubGVuZ3RoLTEpLCAwKQogICAgICAgICAgICBAb25TZWxlY3Rpb25DaGFuZ2UoKQogICAgICAgIAogICAgICAgIAogICAgICAgIHN1cGVyKCkKICAgICAgICAKICAgICAgICAKICAgIG9uU2VsZWN0aW9uQ2hhbmdlOiAtPgogICAgICAgIHN3aXRjaCBAd2luZG93LnNlbGVjdGVkUm93CiAgICAgICAgICAgIHdoZW4gMAogICAgICAgICAgICAgICAgQHZhbHVlV2luZG93LnRleHQgPSBAcmVuZGVyZXJTZXR0aW5nc1tAc2V0dGluZ3NbQHdpbmRvdy5zZWxlY3RlZFJvd11dCiAgICAgICAgICAgIHdoZW4gMQogICAgICAgICAgICAgICAgQHZhbHVlV2luZG93LnRleHQgPSBAZmlsdGVyU2V0dGluZ3NbQHNldHRpbmdzW0B3aW5kb3cuc2VsZWN0ZWRSb3ddXQogICAgICAgICAgICB3aGVuIDIKICAgICAgICAgICAgICAgIEB2YWx1ZVdpbmRvdy50ZXh0ID0gIiIKICAgICAgICAgICAgCiAgICAgICAgICAgICAgICAKICAgICAgICBAdmFsdWVXaW5kb3cucmVkcmF3KCkKICAgICAgICAKICAgIGV4ZWN1dGVTZWxlY3RlZENvbW1hbmQ6IC0+CiAgICAgICAgc3dpdGNoIEB3aW5kb3cuc2VsZWN0ZWRSb3cKICAgICAgICAgICAgd2hlbiAyCiAgICAgICAgICAgICAgICBHYW1lU3RvcmFnZS5zZXRPYmplY3QoInNldHRpbmdzIiwgQHNldHRpbmdzKQogICAgICAgICAgICAgICAgU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9UaXRsZSgpKQogICAgICAgIAogICAgICAgIAogICAgCndpbmRvdy5TY2VuZV9TZXR0aW5ncyA9IFNjZW5lX1NldHRpbmdz","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9TZXR0aW5ncywKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNjZW5lX1NldHRpbmdzID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNjZW5lX1NldHRpbmdzLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX1NldHRpbmdzKCkgewogICAgICBTY2VuZV9TZXR0aW5ncy5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTsKICAgIH0KCiAgICBTY2VuZV9TZXR0aW5ncy5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5iaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9QaWN0dXJlcy8iICsgUmVjb3JkTWFuYWdlci5zeXN0ZW0udGl0bGVHcmFwaGljLm5hbWUpOwogICAgfTsKCiAgICBTY2VuZV9TZXR0aW5ncy5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLndpbmRvdy5kaXNwb3NlKCk7CiAgICAgIHRoaXMudmFsdWVXaW5kb3cuZGlzcG9zZSgpOwogICAgICB0aGlzLmluZm9XaW5kb3cuZGlzcG9zZSgpOwogICAgICBpZiAodGhpcy5zcHJpdGUgIT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLnNwcml0ZS5kaXNwb3NlKCk7CiAgICAgIH0KICAgIH07CgogICAgU2NlbmVfU2V0dGluZ3MucHJvdG90eXBlLnByZXBhcmVEYXRhID0gZnVuY3Rpb24oKSB7fTsKCiAgICBTY2VuZV9TZXR0aW5ncy5wcm90b3R5cGUucHJlcGFyZVZpc3VhbCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgcywgdm9jYWIsCiAgICAgICAgX3RoaXMgPSB0aGlzOwogICAgICBpZiAodGhpcy5iaXRtYXAgIT0gbnVsbCkgewogICAgICAgIHRoaXMuc3ByaXRlID0gbmV3IFNwcml0ZSgpOwogICAgICAgIHRoaXMuc3ByaXRlLmJpdG1hcCA9IHRoaXMuYml0bWFwOwogICAgICAgIHRoaXMuc3ByaXRlLnNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0KTsKICAgICAgICB0aGlzLnNwcml0ZS56ID0gLTEwMDA7CiAgICAgIH0KICAgICAgcyA9IFdpbmRvd19CYXNlLnNjYWxlOwogICAgICB2b2NhYiA9IFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeTsKICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93X1NlbGVjdGlvbigyMCAqIHMsIDIwICogcywgMSwgW1siR3JhcGhpY3MgUmVuZGVyZXIiXSwgWyJTY3JlZW4gRmlsdGVyIl0sIFsiQmFjayJdXSwgMzAwICogcyk7CiAgICAgIHRoaXMud2luZG93LnggPSAyMCAqIHM7CiAgICAgIHRoaXMud2luZG93LnkgPSA4MCAqIHM7CiAgICAgIHRoaXMud2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLmV4ZWN1dGVTZWxlY3RlZENvbW1hbmQoKTsKICAgICAgfTsKICAgICAgdGhpcy53aW5kb3cub25TZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMub25TZWxlY3Rpb25DaGFuZ2UoKTsKICAgICAgfTsKICAgICAgdGhpcy53aW5kb3cucmVkcmF3KCk7CiAgICAgIHRoaXMudmFsdWVXaW5kb3cgPSBuZXcgV2luZG93X1RleHQodGhpcy53aW5kb3cueCArIHRoaXMud2luZG93LndpZHRoLCB0aGlzLndpbmRvdy55LCAyNzIgKiBzLCB0aGlzLndpbmRvdy5oZWlnaHQpOwogICAgICB0aGlzLmluZm9XaW5kb3cgPSBuZXcgV2luZG93X1RleHQodGhpcy53aW5kb3cueCwgdGhpcy53aW5kb3cueSAtIDUwICogcywgdGhpcy53aW5kb3cud2lkdGggKyB0aGlzLnZhbHVlV2luZG93LndpZHRoLCA1MCAqIHMpOwogICAgICB0aGlzLmluZm9XaW5kb3cudGV4dCA9ICJDaGFuZ2UgYSBzZXR0aW5nIHVzaW5nIGxlZnQgb3IgcmlnaHQgYnV0dG9uLiI7CiAgICAgIHRoaXMuaW5mb1dpbmRvdy5yZWRyYXcoKTsKICAgICAgdGhpcy5zZXR0aW5ncyA9IEdhbWVTdG9yYWdlLmdldE9iamVjdCgic2V0dGluZ3MiKSB8fCBbMCwgMF07CiAgICAgIHRoaXMucmVuZGVyZXJTZXR0aW5ncyA9IFsiT3BlbkdMIFJlbmRlcmVyIiwgIkNhbnZhcyBSZW5kZXJlciJdOwogICAgICByZXR1cm4gdGhpcy5maWx0ZXJTZXR0aW5ncyA9IFsiTm8gRmlsdGVyIiwgIlNtb290aCBGaWx0ZXIiXTsKICAgIH07CgogICAgU2NlbmVfU2V0dGluZ3MucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLndpbmRvdy51cGRhdGUoKTsKICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuTEVGVCkpIHsKICAgICAgICB0aGlzLnNldHRpbmdzW3RoaXMud2luZG93LnNlbGVjdGVkUm93XSA9IHRoaXMuc2V0dGluZ3NbdGhpcy53aW5kb3cuc2VsZWN0ZWRSb3ddIC0gMTsKICAgICAgICB0aGlzLnNldHRpbmdzW3RoaXMud2luZG93LnNlbGVjdGVkUm93XSA9IE1hdGgubWF4KE1hdGgubWluKHRoaXMuc2V0dGluZ3NbdGhpcy53aW5kb3cuc2VsZWN0ZWRSb3ddLCB0aGlzLnNldHRpbmdzLmxlbmd0aCAtIDEpLCAwKTsKICAgICAgICB0aGlzLm9uU2VsZWN0aW9uQ2hhbmdlKCk7CiAgICAgIH0KICAgICAgaWYgKElucHV0LnRyaWdnZXIoSW5wdXQuUklHSFQpKSB7CiAgICAgICAgdGhpcy5zZXR0aW5nc1t0aGlzLndpbmRvdy5zZWxlY3RlZFJvd10gPSB0aGlzLnNldHRpbmdzW3RoaXMud2luZG93LnNlbGVjdGVkUm93XSArIDE7CiAgICAgICAgdGhpcy5zZXR0aW5nc1t0aGlzLndpbmRvdy5zZWxlY3RlZFJvd10gPSBNYXRoLm1heChNYXRoLm1pbih0aGlzLnNldHRpbmdzW3RoaXMud2luZG93LnNlbGVjdGVkUm93XSwgdGhpcy5zZXR0aW5ncy5sZW5ndGggLSAxKSwgMCk7CiAgICAgICAgdGhpcy5vblNlbGVjdGlvbkNoYW5nZSgpOwogICAgICB9CiAgICAgIHJldHVybiBTY2VuZV9TZXR0aW5ncy5fX3N1cGVyX18udXBkYXRlLmNhbGwodGhpcyk7CiAgICB9OwoKICAgIFNjZW5lX1NldHRpbmdzLnByb3RvdHlwZS5vblNlbGVjdGlvbkNoYW5nZSA9IGZ1bmN0aW9uKCkgewogICAgICBzd2l0Y2ggKHRoaXMud2luZG93LnNlbGVjdGVkUm93KSB7CiAgICAgICAgY2FzZSAwOgogICAgICAgICAgdGhpcy52YWx1ZVdpbmRvdy50ZXh0ID0gdGhpcy5yZW5kZXJlclNldHRpbmdzW3RoaXMuc2V0dGluZ3NbdGhpcy53aW5kb3cuc2VsZWN0ZWRSb3ddXTsKICAgICAgICAgIGJyZWFrOwogICAgICAgIGNhc2UgMToKICAgICAgICAgIHRoaXMudmFsdWVXaW5kb3cudGV4dCA9IHRoaXMuZmlsdGVyU2V0dGluZ3NbdGhpcy5zZXR0aW5nc1t0aGlzLndpbmRvdy5zZWxlY3RlZFJvd11dOwogICAgICAgICAgYnJlYWs7CiAgICAgICAgY2FzZSAyOgogICAgICAgICAgdGhpcy52YWx1ZVdpbmRvdy50ZXh0ID0gIiI7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMudmFsdWVXaW5kb3cucmVkcmF3KCk7CiAgICB9OwoKICAgIFNjZW5lX1NldHRpbmdzLnByb3RvdHlwZS5leGVjdXRlU2VsZWN0ZWRDb21tYW5kID0gZnVuY3Rpb24oKSB7CiAgICAgIHN3aXRjaCAodGhpcy53aW5kb3cuc2VsZWN0ZWRSb3cpIHsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICBHYW1lU3RvcmFnZS5zZXRPYmplY3QoInNldHRpbmdzIiwgdGhpcy5zZXR0aW5ncyk7CiAgICAgICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9UaXRsZSgpKTsKICAgICAgfQogICAgfTsKCiAgICByZXR1cm4gU2NlbmVfU2V0dGluZ3M7CgogIH0pKFNjZW5lKTsKCiAgd2luZG93LlNjZW5lX1NldHRpbmdzID0gU2NlbmVfU2V0dGluZ3M7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Scene_LoadGame","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfTG9hZEdhbWUKIyAgIENyZWF0ZWQgb246IDIwMTMtMDktMjcKIwojIAlDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAJQ2xhc3M6IFNjZW5lX1RpdGxlCiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTY2VuZV9Mb2FkR2FtZSBleHRlbmRzIFNjZW5lCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBzdXBlcigpCiAgICAKICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgQGJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL1BpY3R1cmVzLyN7UmVjb3JkTWFuYWdlci5zeXN0ZW0udGl0bGVHcmFwaGljLm5hbWV9IikKICAgICAgICAKICAgIGRpc3Bvc2U6IC0+CiAgICAgICAgQHNwcml0ZS5kaXNwb3NlKCkKICAgICAgICBAc2F2ZUdhbWVzV2luZG93c2V0LmRpc3Bvc2UoKQogICAgICAgIAogICAgcHJlcGFyZURhdGE6IC0+CiAgICAgICAgc2F2ZUdhbWUgPSBHYW1lTWFuYWdlci5nZXRTYXZlR2FtZSgwKQogICAgICAgIGlmIHNhdmVHYW1lPwogICAgICAgICAgICBmb3IgbWVtYmVyIGluIHNhdmVHYW1lLnBhcnR5Lm1lbWJlcnMKICAgICAgICAgICAgICAgIGlmIFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXT8KICAgICAgICAgICAgICAgICAgICBtZW1iZXIuY2hhcmFjdGVyR3JhcGhpYyA9IFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXS5jaGFyYWN0ZXJHcmFwaGljCiAgICAgICAgICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvQ2hhcmFjdGVycy8je21lbWJlci5jaGFyYWN0ZXJHcmFwaGljLm5hbWV9IikKICAgICAgICAgICAgICAgIAogICAgICAgIHNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoMSkKICAgICAgICBpZiBzYXZlR2FtZT8KICAgICAgICAgICAgZm9yIG1lbWJlciBpbiBzYXZlR2FtZS5wYXJ0eS5tZW1iZXJzCiAgICAgICAgICAgICAgICBpZiBSZWNvcmRNYW5hZ2VyLmFjdG9yc1ttZW1iZXIuYWN0b3JJZF0/CiAgICAgICAgICAgICAgICAgICAgbWVtYmVyLmNoYXJhY3RlckdyYXBoaWMgPSBSZWNvcmRNYW5hZ2VyLmFjdG9yc1ttZW1iZXIuYWN0b3JJZF0uY2hhcmFjdGVyR3JhcGhpYwogICAgICAgICAgICAgICAgICAgIFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0NoYXJhY3RlcnMvI3ttZW1iZXIuY2hhcmFjdGVyR3JhcGhpYy5uYW1lfSIpCiAgICAgICAgICAgICAgICAKICAgICAgICBzYXZlR2FtZSA9IEdhbWVNYW5hZ2VyLmdldFNhdmVHYW1lKDIpCiAgICAgICAgaWYgc2F2ZUdhbWU/CiAgICAgICAgICAgIGZvciBtZW1iZXIgaW4gc2F2ZUdhbWUucGFydHkubWVtYmVycwogICAgICAgICAgICAgICAgaWYgUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyLmFjdG9ySWRdPwogICAgICAgICAgICAgICAgICAgIG1lbWJlci5jaGFyYWN0ZXJHcmFwaGljID0gUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyLmFjdG9ySWRdLmNoYXJhY3RlckdyYXBoaWMKICAgICAgICAgICAgICAgICAgICBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9DaGFyYWN0ZXJzLyN7bWVtYmVyLmNoYXJhY3RlckdyYXBoaWMubmFtZX0iKQogICAgcHJlcGFyZVZpc3VhbDogLT4KICAgICAgICBzY2FsZSA9IGlmIEdyYXBoaWNzLndpZHRoID09IDMyMCB0aGVuIDAuNSBlbHNlIDEuMAogICAgICAgIEBzcHJpdGUgPSBuZXcgU3ByaXRlCiAgICAgICAgQHNwcml0ZS5iaXRtYXAgPSBAYml0bWFwCiAgICAgICAgQHNwcml0ZS5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodCkKICAgICAgICAKICAgICAgICBAc2F2ZUdhbWVzV2luZG93c2V0ID0gbmV3IFdpbmRvd3NldF9TYXZlKE1hdGguZmxvb3IoKEdyYXBoaWNzLndpZHRoIC0gNDE2ICogc2NhbGUpIC8gMiksCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBNYXRoLmZsb29yKChHcmFwaGljcy5oZWlnaHQgLSAzNjAgKiBzY2FsZSkgLyAyKSkKICAgICAgICBAc2F2ZUdhbWVzV2luZG93c2V0Lm9uRmlsZVNlbGVjdGlvbiA9IChzbG90KSA9PiBAb25GaWxlU2VsZWN0aW9uKHNsb3QpCiAgICAgICAgQHNhdmVHYW1lc1dpbmRvd3NldC5vbkNhbmNlbCA9ID0+IEBvbkNhbmNlbCgpCiAgICAgICAgQHNhdmVHYW1lc1dpbmRvd3NldC5hY3RpdmUgPSB5ZXMKICAgICAgICBAc2F2ZUdhbWVzV2luZG93c2V0LmRlc2NyaXB0aW9uV2luZG93LnRleHQgPSBsY3MoUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5LnNhdmVHYW1lTWVudS5wbGVhc2VTZWxlY3RMb2FkKQogICAgICAgIEBzYXZlR2FtZXNXaW5kb3dzZXQucmVkcmF3KCkKICAgIAogICAgdXBkYXRlOiAtPgogICAgICAgIEBzYXZlR2FtZXNXaW5kb3dzZXQudXBkYXRlKCkKICAgICAgICAKICAgICAgICBzdXBlcigpCiAgICAgICAgCiAgICBvbkZpbGVTZWxlY3Rpb246IChzbG90KSAtPgogICAgICAgIHNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoc2xvdCkKICAgICAgICAKICAgICAgICBpZiBzYXZlR2FtZT8KICAgICAgICAgICAgR2FtZU1hbmFnZXIubG9hZChzbG90KQogICAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX01hcCgpKQogICAgICAgIAogICAgb25DYW5jZWw6IC0+CiAgICAgICAgU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9UaXRsZSgpKQogICAgICAgIAogICAgICAgIAogICAgCiAgCgp3aW5kb3cuU2NlbmVfTG9hZEdhbWUgPSBTY2VuZV9Mb2FkR2FtZQ==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9Mb2FkR2FtZSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNjZW5lX0xvYWRHYW1lID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNjZW5lX0xvYWRHYW1lLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX0xvYWRHYW1lKCkgewogICAgICBTY2VuZV9Mb2FkR2FtZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTsKICAgIH0KCiAgICBTY2VuZV9Mb2FkR2FtZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICByZXR1cm4gdGhpcy5iaXRtYXAgPSBSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9QaWN0dXJlcy8iICsgUmVjb3JkTWFuYWdlci5zeXN0ZW0udGl0bGVHcmFwaGljLm5hbWUpOwogICAgfTsKCiAgICBTY2VuZV9Mb2FkR2FtZS5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLnNwcml0ZS5kaXNwb3NlKCk7CiAgICAgIHJldHVybiB0aGlzLnNhdmVHYW1lc1dpbmRvd3NldC5kaXNwb3NlKCk7CiAgICB9OwoKICAgIFNjZW5lX0xvYWRHYW1lLnByb3RvdHlwZS5wcmVwYXJlRGF0YSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgbWVtYmVyLCBzYXZlR2FtZSwgX2ksIF9qLCBfaywgX2xlbiwgX2xlbjEsIF9sZW4yLCBfcmVmLCBfcmVmMSwgX3JlZjIsIF9yZXN1bHRzOwogICAgICBzYXZlR2FtZSA9IEdhbWVNYW5hZ2VyLmdldFNhdmVHYW1lKDApOwogICAgICBpZiAoc2F2ZUdhbWUgIT0gbnVsbCkgewogICAgICAgIF9yZWYgPSBzYXZlR2FtZS5wYXJ0eS5tZW1iZXJzOwogICAgICAgIGZvciAoX2kgPSAwLCBfbGVuID0gX3JlZi5sZW5ndGg7IF9pIDwgX2xlbjsgX2krKykgewogICAgICAgICAgbWVtYmVyID0gX3JlZltfaV07CiAgICAgICAgICBpZiAoUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyLmFjdG9ySWRdICE9IG51bGwpIHsKICAgICAgICAgICAgbWVtYmVyLmNoYXJhY3RlckdyYXBoaWMgPSBSZWNvcmRNYW5hZ2VyLmFjdG9yc1ttZW1iZXIuYWN0b3JJZF0uY2hhcmFjdGVyR3JhcGhpYzsKICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvQ2hhcmFjdGVycy8iICsgbWVtYmVyLmNoYXJhY3RlckdyYXBoaWMubmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICB9CiAgICAgIHNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoMSk7CiAgICAgIGlmIChzYXZlR2FtZSAhPSBudWxsKSB7CiAgICAgICAgX3JlZjEgPSBzYXZlR2FtZS5wYXJ0eS5tZW1iZXJzOwogICAgICAgIGZvciAoX2ogPSAwLCBfbGVuMSA9IF9yZWYxLmxlbmd0aDsgX2ogPCBfbGVuMTsgX2orKykgewogICAgICAgICAgbWVtYmVyID0gX3JlZjFbX2pdOwogICAgICAgICAgaWYgKFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXSAhPSBudWxsKSB7CiAgICAgICAgICAgIG1lbWJlci5jaGFyYWN0ZXJHcmFwaGljID0gUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyLmFjdG9ySWRdLmNoYXJhY3RlckdyYXBoaWM7CiAgICAgICAgICAgIFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0NoYXJhY3RlcnMvIiArIG1lbWJlci5jaGFyYWN0ZXJHcmFwaGljLm5hbWUpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgICBzYXZlR2FtZSA9IEdhbWVNYW5hZ2VyLmdldFNhdmVHYW1lKDIpOwogICAgICBpZiAoc2F2ZUdhbWUgIT0gbnVsbCkgewogICAgICAgIF9yZWYyID0gc2F2ZUdhbWUucGFydHkubWVtYmVyczsKICAgICAgICBfcmVzdWx0cyA9IFtdOwogICAgICAgIGZvciAoX2sgPSAwLCBfbGVuMiA9IF9yZWYyLmxlbmd0aDsgX2sgPCBfbGVuMjsgX2srKykgewogICAgICAgICAgbWVtYmVyID0gX3JlZjJbX2tdOwogICAgICAgICAgaWYgKFJlY29yZE1hbmFnZXIuYWN0b3JzW21lbWJlci5hY3RvcklkXSAhPSBudWxsKSB7CiAgICAgICAgICAgIG1lbWJlci5jaGFyYWN0ZXJHcmFwaGljID0gUmVjb3JkTWFuYWdlci5hY3RvcnNbbWVtYmVyLmFjdG9ySWRdLmNoYXJhY3RlckdyYXBoaWM7CiAgICAgICAgICAgIF9yZXN1bHRzLnB1c2goUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvQ2hhcmFjdGVycy8iICsgbWVtYmVyLmNoYXJhY3RlckdyYXBoaWMubmFtZSkpOwogICAgICAgICAgfSBlbHNlIHsKICAgICAgICAgICAgX3Jlc3VsdHMucHVzaCh2b2lkIDApOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gX3Jlc3VsdHM7CiAgICAgIH0KICAgIH07CgogICAgU2NlbmVfTG9hZEdhbWUucHJvdG90eXBlLnByZXBhcmVWaXN1YWwgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNjYWxlLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgc2NhbGUgPSBHcmFwaGljcy53aWR0aCA9PT0gMzIwID8gMC41IDogMS4wOwogICAgICB0aGlzLnNwcml0ZSA9IG5ldyBTcHJpdGU7CiAgICAgIHRoaXMuc3ByaXRlLmJpdG1hcCA9IHRoaXMuYml0bWFwOwogICAgICB0aGlzLnNwcml0ZS5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodCk7CiAgICAgIHRoaXMuc2F2ZUdhbWVzV2luZG93c2V0ID0gbmV3IFdpbmRvd3NldF9TYXZlKE1hdGguZmxvb3IoKEdyYXBoaWNzLndpZHRoIC0gNDE2ICogc2NhbGUpIC8gMiksIE1hdGguZmxvb3IoKEdyYXBoaWNzLmhlaWdodCAtIDM2MCAqIHNjYWxlKSAvIDIpKTsKICAgICAgdGhpcy5zYXZlR2FtZXNXaW5kb3dzZXQub25GaWxlU2VsZWN0aW9uID0gZnVuY3Rpb24oc2xvdCkgewogICAgICAgIHJldHVybiBfdGhpcy5vbkZpbGVTZWxlY3Rpb24oc2xvdCk7CiAgICAgIH07CiAgICAgIHRoaXMuc2F2ZUdhbWVzV2luZG93c2V0Lm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgICAgcmV0dXJuIF90aGlzLm9uQ2FuY2VsKCk7CiAgICAgIH07CiAgICAgIHRoaXMuc2F2ZUdhbWVzV2luZG93c2V0LmFjdGl2ZSA9IHRydWU7CiAgICAgIHRoaXMuc2F2ZUdhbWVzV2luZG93c2V0LmRlc2NyaXB0aW9uV2luZG93LnRleHQgPSBsY3MoUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5LnNhdmVHYW1lTWVudS5wbGVhc2VTZWxlY3RMb2FkKTsKICAgICAgcmV0dXJuIHRoaXMuc2F2ZUdhbWVzV2luZG93c2V0LnJlZHJhdygpOwogICAgfTsKCiAgICBTY2VuZV9Mb2FkR2FtZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMuc2F2ZUdhbWVzV2luZG93c2V0LnVwZGF0ZSgpOwogICAgICByZXR1cm4gU2NlbmVfTG9hZEdhbWUuX19zdXBlcl9fLnVwZGF0ZS5jYWxsKHRoaXMpOwogICAgfTsKCiAgICBTY2VuZV9Mb2FkR2FtZS5wcm90b3R5cGUub25GaWxlU2VsZWN0aW9uID0gZnVuY3Rpb24oc2xvdCkgewogICAgICB2YXIgc2F2ZUdhbWU7CiAgICAgIHNhdmVHYW1lID0gR2FtZU1hbmFnZXIuZ2V0U2F2ZUdhbWUoc2xvdCk7CiAgICAgIGlmIChzYXZlR2FtZSAhPSBudWxsKSB7CiAgICAgICAgR2FtZU1hbmFnZXIubG9hZChzbG90KTsKICAgICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9NYXAoKSk7CiAgICAgIH0KICAgIH07CgogICAgU2NlbmVfTG9hZEdhbWUucHJvdG90eXBlLm9uQ2FuY2VsID0gZnVuY3Rpb24oKSB7CiAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX1RpdGxlKCkpOwogICAgfTsKCiAgICByZXR1cm4gU2NlbmVfTG9hZEdhbWU7CgogIH0pKFNjZW5lKTsKCiAgd2luZG93LlNjZW5lX0xvYWRHYW1lID0gU2NlbmVfTG9hZEdhbWU7Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"Scene_EndGame","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfRW5kR2FtZQojICAgCiMKIyAJQ29weXJpZ2h0IChDKSAyMDE0IEFuZHLpIFJhZG9tc2tpLiBBbGwgcmlnaHRzIHJlc2VydmVkLgojCiMgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PQojCiMgCUNsYXNzOiBTY2VuZV9FbmRHYW1lCiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTY2VuZV9FbmRHYW1lIGV4dGVuZHMgU2NlbmUKICAgIGNvbnN0cnVjdG9yOiAoYmFja2dyb3VuZCkgLT4KICAgICAgICBzdXBlcigpCiAgICAgICAgQGJhY2tncm91bmQgPSBiYWNrZ3JvdW5kCiAgICAKICAgIGluaXRpYWxpemU6IC0+CgogICAgZGlzcG9zZTogLT4KICAgICAgICBAd2luZG93LmRpc3Bvc2UoKQogICAgICAgIGlmIEBzcHJpdGU/CiAgICAgICAgICAgIEBzcHJpdGUuZGlzcG9zZSgpCiAgICBwcmVwYXJlRGF0YTogLT4KCiAgICBwcmVwYXJlVmlzdWFsOiAtPgogICAgICAgIGlmIEBiYWNrZ3JvdW5kPwogICAgICAgICAgICBAc3ByaXRlID0gbmV3IFNwcml0ZSgpCiAgICAgICAgICAgIEBzcHJpdGUuYml0bWFwID0gQGJhY2tncm91bmQKICAgICAgICAgICAgQHNwcml0ZS5zcmNSZWN0ID0gbmV3IFJlY3QoMCwgMCwgR3JhcGhpY3Mud2lkdGgsIEdyYXBoaWNzLmhlaWdodCkKICAgICAgICAgICAgQHNwcml0ZS56ID0gLTEwMDAKICAgICAgICAKICAgICAgICB2b2NhYiA9IFJlY29yZE1hbmFnZXIudm9jYWJ1bGFyeQogICAgICAgIEB3aW5kb3cgPSBuZXcgV2luZG93X1NlbGVjdGlvbigxMCwgMTAsIDEsIFtbbGNzKHZvY2FiLmVuZFNjcmVlbi5yZXR1cm5Ub1RpdGxlKV0gLFtsY3Modm9jYWIuZW5kU2NyZWVuLnF1aXQpXSAsW2xjcyh2b2NhYi5lbmRTY3JlZW4uY2FuY2VsKV1dKQogICAgICAgIEB3aW5kb3cueCA9IChHcmFwaGljcy53aWR0aCAtIEB3aW5kb3cud2lkdGgpIC8gMgogICAgICAgIEB3aW5kb3cueSA9IChHcmFwaGljcy5oZWlnaHQgLSBAd2luZG93LmhlaWdodCkgLyAyCiAgICAgICAgQHdpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9ID0+IEBleGVjdXRlU2VsZWN0ZWRDb21tYW5kKCkKICAgICAgICBAd2luZG93LnJlZHJhdygpCiAgICAgICAgCiAgICB1cGRhdGU6IC0+ICAgICAgICAgICAgCiAgICAgICAgQHdpbmRvdy51cGRhdGUoKQogICAgICAgIHN1cGVyKCkKICAgICAgICAKICAgICAgICAKICAgIGV4ZWN1dGVTZWxlY3RlZENvbW1hbmQ6IC0+CiAgICAgICAgc3dpdGNoIEB3aW5kb3cuc2VsZWN0ZWRSb3cKICAgICAgICAgICAgd2hlbiAwCiAgICAgICAgICAgICAgICBBdWRpb01hbmFnZXIuc3RvcE11c2ljKCkKICAgICAgICAgICAgICAgIEF1ZGlvTWFuYWdlci5zdG9wQmFja2dyb3VuZFNvdW5kKCkKICAgICAgICAgICAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfVGl0bGUoKSkKICAgICAgICAgICAgd2hlbiAxCiAgICAgICAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obnVsbCkKICAgICAgICAgICAgICAgIEdhbWVNYW5hZ2VyLmV4aXQoKQogICAgICAgICAgICB3aGVuIDIKICAgICAgICAgICAgICAgIFNjZW5lTWFuYWdlci5yZXR1cm5Ub1ByZXZpb3VzKCkKICAgICAgICAKICAgICAgICAKICAgIAogIAoKd2luZG93LlNjZW5lX0VuZEdhbWUgPSBTY2VuZV9FbmRHYW1l","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9FbmRHYW1lLAogICAgX19oYXNQcm9wID0ge30uaGFzT3duUHJvcGVydHksCiAgICBfX2V4dGVuZHMgPSBmdW5jdGlvbihjaGlsZCwgcGFyZW50KSB7IGZvciAodmFyIGtleSBpbiBwYXJlbnQpIHsgaWYgKF9faGFzUHJvcC5jYWxsKHBhcmVudCwga2V5KSkgY2hpbGRba2V5XSA9IHBhcmVudFtrZXldOyB9IGZ1bmN0aW9uIGN0b3IoKSB7IHRoaXMuY29uc3RydWN0b3IgPSBjaGlsZDsgfSBjdG9yLnByb3RvdHlwZSA9IHBhcmVudC5wcm90b3R5cGU7IGNoaWxkLnByb3RvdHlwZSA9IG5ldyBjdG9yKCk7IGNoaWxkLl9fc3VwZXJfXyA9IHBhcmVudC5wcm90b3R5cGU7IHJldHVybiBjaGlsZDsgfTsKCiAgU2NlbmVfRW5kR2FtZSA9IChmdW5jdGlvbihfc3VwZXIpIHsKICAgIF9fZXh0ZW5kcyhTY2VuZV9FbmRHYW1lLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX0VuZEdhbWUoYmFja2dyb3VuZCkgewogICAgICBTY2VuZV9FbmRHYW1lLl9fc3VwZXJfXy5jb25zdHJ1Y3Rvci5jYWxsKHRoaXMpOwogICAgICB0aGlzLmJhY2tncm91bmQgPSBiYWNrZ3JvdW5kOwogICAgfQoKICAgIFNjZW5lX0VuZEdhbWUucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNjZW5lX0VuZEdhbWUucHJvdG90eXBlLmRpc3Bvc2UgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy53aW5kb3cuZGlzcG9zZSgpOwogICAgICBpZiAodGhpcy5zcHJpdGUgIT0gbnVsbCkgewogICAgICAgIHJldHVybiB0aGlzLnNwcml0ZS5kaXNwb3NlKCk7CiAgICAgIH0KICAgIH07CgogICAgU2NlbmVfRW5kR2FtZS5wcm90b3R5cGUucHJlcGFyZURhdGEgPSBmdW5jdGlvbigpIHt9OwoKICAgIFNjZW5lX0VuZEdhbWUucHJvdG90eXBlLnByZXBhcmVWaXN1YWwgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHZvY2FiLAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgaWYgKHRoaXMuYmFja2dyb3VuZCAhPSBudWxsKSB7CiAgICAgICAgdGhpcy5zcHJpdGUgPSBuZXcgU3ByaXRlKCk7CiAgICAgICAgdGhpcy5zcHJpdGUuYml0bWFwID0gdGhpcy5iYWNrZ3JvdW5kOwogICAgICAgIHRoaXMuc3ByaXRlLnNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCBHcmFwaGljcy53aWR0aCwgR3JhcGhpY3MuaGVpZ2h0KTsKICAgICAgICB0aGlzLnNwcml0ZS56ID0gLTEwMDA7CiAgICAgIH0KICAgICAgdm9jYWIgPSBSZWNvcmRNYW5hZ2VyLnZvY2FidWxhcnk7CiAgICAgIHRoaXMud2luZG93ID0gbmV3IFdpbmRvd19TZWxlY3Rpb24oMTAsIDEwLCAxLCBbW2xjcyh2b2NhYi5lbmRTY3JlZW4ucmV0dXJuVG9UaXRsZSldLCBbbGNzKHZvY2FiLmVuZFNjcmVlbi5xdWl0KV0sIFtsY3Modm9jYWIuZW5kU2NyZWVuLmNhbmNlbCldXSk7CiAgICAgIHRoaXMud2luZG93LnggPSAoR3JhcGhpY3Mud2lkdGggLSB0aGlzLndpbmRvdy53aWR0aCkgLyAyOwogICAgICB0aGlzLndpbmRvdy55ID0gKEdyYXBoaWNzLmhlaWdodCAtIHRoaXMud2luZG93LmhlaWdodCkgLyAyOwogICAgICB0aGlzLndpbmRvdy5vblNlbGVjdGlvbkFjY2VwdCA9IGZ1bmN0aW9uKCkgewogICAgICAgIHJldHVybiBfdGhpcy5leGVjdXRlU2VsZWN0ZWRDb21tYW5kKCk7CiAgICAgIH07CiAgICAgIHJldHVybiB0aGlzLndpbmRvdy5yZWRyYXcoKTsKICAgIH07CgogICAgU2NlbmVfRW5kR2FtZS5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMud2luZG93LnVwZGF0ZSgpOwogICAgICByZXR1cm4gU2NlbmVfRW5kR2FtZS5fX3N1cGVyX18udXBkYXRlLmNhbGwodGhpcyk7CiAgICB9OwoKICAgIFNjZW5lX0VuZEdhbWUucHJvdG90eXBlLmV4ZWN1dGVTZWxlY3RlZENvbW1hbmQgPSBmdW5jdGlvbigpIHsKICAgICAgc3dpdGNoICh0aGlzLndpbmRvdy5zZWxlY3RlZFJvdykgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIEF1ZGlvTWFuYWdlci5zdG9wTXVzaWMoKTsKICAgICAgICAgIEF1ZGlvTWFuYWdlci5zdG9wQmFja2dyb3VuZFNvdW5kKCk7CiAgICAgICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9UaXRsZSgpKTsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obnVsbCk7CiAgICAgICAgICByZXR1cm4gR2FtZU1hbmFnZXIuZXhpdCgpOwogICAgICAgIGNhc2UgMjoKICAgICAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIucmV0dXJuVG9QcmV2aW91cygpOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBTY2VuZV9FbmRHYW1lOwoKICB9KShTY2VuZSk7CgogIHdpbmRvdy5TY2VuZV9FbmRHYW1lID0gU2NlbmVfRW5kR2FtZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Scene_Title","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfVGl0bGUKIyAJQ3JlYXRlZCBvbjogMjAxMy0wNS0xOQojCiMgCUNvcHlyaWdodCAoQykgMjAxMyBBbmRy6SBSYWRvbXNraS4gQWxsIHJpZ2h0cyByZXNlcnZlZC4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KIwojIAlDbGFzczogU2NlbmVfVGl0bGUKIwojICAgRGVzY3JpcHRpb24uLi4KIwojID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0KCmNsYXNzIFNjZW5lX1RpdGxlIGV4dGVuZHMgU2NlbmUKICAgIGNvbnN0cnVjdG9yOiAtPgogICAgICAgIHN1cGVyKCkKICAgIAogICAgaW5pdGlhbGl6ZTogLT4KICAgICAgICBEYXRhTWFuYWdlci5nZXREb2N1bWVudHNCeVR5cGUoImdsb2JhbF9tYXBfZXZlbnQiKQogICAgICAgIExhbmd1YWdlTWFuYWdlci5sb2FkKCkKICAgIAogICAgZGlzcG9zZTogLT4KICAgICAgICBAd2luZG93LmRpc3Bvc2UoKQogICAgICAgIEBzcHJpdGUuZGlzcG9zZSgpCiAgICAgICAgCiAgICBwcmVwYXJlRGF0YTogLT4KICAgICAgICBpZiBHYW1lTWFuYWdlci5tYXA/CiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLnJlc2V0KCkKICAgICAgICAgICAgCiAgICAgICAgQHRpdGxlTXVzaWMgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS50aXRsZU11c2ljCiAgICAgICAgQG1lbnVTZWxlY3RTb3VuZCA9IFJlY29yZE1hbmFnZXIuc3lzdGVtLm1lbnVTZWxlY3RTb3VuZAogICAgICAgIEBtZW51Q3Vyc29yU291bmQgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS5tZW51Q3Vyc29yU291bmQKICAgICAgICAKICAgICAgICBBdWRpb01hbmFnZXIubG9hZE11c2ljKEB0aXRsZU11c2ljKQogICAgICAgIEF1ZGlvTWFuYWdlci5sb2FkU291bmQoQG1lbnVTZWxlY3RTb3VuZCkKICAgICAgICBBdWRpb01hbmFnZXIubG9hZFNvdW5kKEBtZW51Q3Vyc29yU291bmQpCiAgICAgICAgCiAgICAgICAgaWYgbm90IExhbmd1YWdlTWFuYWdlci5wcm9maWxlLmJ1bmRsZXM/CiAgICAgICAgICAgIEdhbWVNYW5hZ2VyLmluaXRpYWxpemUoKQogICAgICAgICAgICBHYW1lTWFuYWdlci50cm9vcCA9IFJlY29yZE1hbmFnZXIudHJvb3BzWzJdCiAgICAgICAgICAgIExhbmd1YWdlTWFuYWdlci5sb2FkQnVuZGxlcygpCiAgICAgICAgZWxzZQogICAgICAgICAgICBMYW5ndWFnZU1hbmFnZXIucHJlcGFyZSgpCiAgICAgICAgQGJpdG1hcCA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL1BpY3R1cmVzLyN7UmVjb3JkTWFuYWdlci5zeXN0ZW0udGl0bGVHcmFwaGljLm5hbWV9IikKICAgIHByZXBhcmVWaXN1YWw6IC0+CiAgICAgICAgc2NhbGUgPSBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5CiAgICAgICAgQHdpbmRvdyA9IG5ldyBXaW5kb3dfU2VsZWN0aW9uKDEwLCAxMCwgMSwgW1tsY3Modm9jYWIudGl0bGVTY3JlZW4ubmV3R2FtZSldICxbbGNzKHZvY2FiLnRpdGxlU2NyZWVuLmNvbnRpbnVlKV0gLCBbIlNldHRpbmdzIl0sIFtsY3Modm9jYWIudGl0bGVTY3JlZW4uZW5kR2FtZSldXSwgMjAwKnNjYWxlLCAzMipzY2FsZSkKICAgICAgICBAd2luZG93LnggPSAoR3JhcGhpY3Mud2lkdGggLSBAd2luZG93LndpZHRoKSAvIDIKICAgICAgICBAd2luZG93LnkgPSBHcmFwaGljcy5oZWlnaHQgLSBAd2luZG93LmhlaWdodCAtIEdyYXBoaWNzLmhlaWdodCAvIDgKICAgICAgICBAd2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gPT4gQGV4ZWN1dGVTZWxlY3RlZENvbW1hbmQoKQogICAgICAgIEB3aW5kb3cudmFsaWRhdGVDZWxsID0gKHgsIHkpID0+IGlmIHkgPT0gMSB0aGVuIEdhbWVNYW5hZ2VyLmhhc1NhdmVHYW1lcygpIGVsc2UgeWVzCiAgICAgICAgICAgIAogICAgICAgIEB3aW5kb3cucmVkcmF3KCkKICAgICAgICAKICAgICAgICAKICAgICAgICBAc3ByaXRlID0gbmV3IFNwcml0ZQogICAgICAgIEBzcHJpdGUuYml0bWFwID0gQGJpdG1hcAogICAgICAgIEBzcHJpdGUuc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHQpCiAgICAgICAgQHNwcml0ZS56ID0gLTEwMDAKICAgICAgICAKICAgICAgICBBdWRpb01hbmFnZXIuY2hhbmdlTXVzaWMoQHRpdGxlTXVzaWMsIDMwKQogICAgICAgIAogICAgdXBkYXRlOiAtPiAgICAgICAgICAgIAogICAgICAgIEBzcHJpdGUudXBkYXRlKCkKICAgICAgICBAd2luZG93LnVwZGF0ZSgpCiAgICAgICAgR3JhcGhpY3Mudmlld3BvcnQudXBkYXRlKCkKICAgIAogICAgICAgIAogICAgICAgIHN1cGVyKCkKICAgICAgICAKICAgICAgICAKICAgIGV4ZWN1dGVTZWxlY3RlZENvbW1hbmQ6IC0+CiAgICAgICAgc3dpdGNoIEB3aW5kb3cuc2VsZWN0ZWRSb3cKICAgICAgICAgICAgd2hlbiAwCiAgICAgICAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX01hcCgpKQogICAgICAgICAgICB3aGVuIDEKICAgICAgICAgICAgICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfTG9hZEdhbWUoKSkKICAgICAgICAgICAgd2hlbiAyCiAgICAgICAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX1NldHRpbmdzKCkpCiAgICAgICAgICAgIHdoZW4gMwogICAgICAgICAgICAgICAgR2FtZU1hbmFnZXIuZXhpdCgpCiAgICAgICAgCiAgICAgICAgCiAgICAKICAKCndpbmRvdy5TY2VuZV9UaXRsZSA9IFNjZW5lX1RpdGxl","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9UaXRsZSwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNjZW5lX1RpdGxlID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNjZW5lX1RpdGxlLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX1RpdGxlKCkgewogICAgICBTY2VuZV9UaXRsZS5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTsKICAgIH0KCiAgICBTY2VuZV9UaXRsZS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICBEYXRhTWFuYWdlci5nZXREb2N1bWVudHNCeVR5cGUoImdsb2JhbF9tYXBfZXZlbnQiKTsKICAgICAgcmV0dXJuIExhbmd1YWdlTWFuYWdlci5sb2FkKCk7CiAgICB9OwoKICAgIFNjZW5lX1RpdGxlLnByb3RvdHlwZS5kaXNwb3NlID0gZnVuY3Rpb24oKSB7CiAgICAgIHRoaXMud2luZG93LmRpc3Bvc2UoKTsKICAgICAgcmV0dXJuIHRoaXMuc3ByaXRlLmRpc3Bvc2UoKTsKICAgIH07CgogICAgU2NlbmVfVGl0bGUucHJvdG90eXBlLnByZXBhcmVEYXRhID0gZnVuY3Rpb24oKSB7CiAgICAgIGlmIChHYW1lTWFuYWdlci5tYXAgIT0gbnVsbCkgewogICAgICAgIEdhbWVNYW5hZ2VyLnJlc2V0KCk7CiAgICAgIH0KICAgICAgdGhpcy50aXRsZU11c2ljID0gUmVjb3JkTWFuYWdlci5zeXN0ZW0udGl0bGVNdXNpYzsKICAgICAgdGhpcy5tZW51U2VsZWN0U291bmQgPSBSZWNvcmRNYW5hZ2VyLnN5c3RlbS5tZW51U2VsZWN0U291bmQ7CiAgICAgIHRoaXMubWVudUN1cnNvclNvdW5kID0gUmVjb3JkTWFuYWdlci5zeXN0ZW0ubWVudUN1cnNvclNvdW5kOwogICAgICBBdWRpb01hbmFnZXIubG9hZE11c2ljKHRoaXMudGl0bGVNdXNpYyk7CiAgICAgIEF1ZGlvTWFuYWdlci5sb2FkU291bmQodGhpcy5tZW51U2VsZWN0U291bmQpOwogICAgICBBdWRpb01hbmFnZXIubG9hZFNvdW5kKHRoaXMubWVudUN1cnNvclNvdW5kKTsKICAgICAgaWYgKExhbmd1YWdlTWFuYWdlci5wcm9maWxlLmJ1bmRsZXMgPT0gbnVsbCkgewogICAgICAgIEdhbWVNYW5hZ2VyLmluaXRpYWxpemUoKTsKICAgICAgICBHYW1lTWFuYWdlci50cm9vcCA9IFJlY29yZE1hbmFnZXIudHJvb3BzWzJdOwogICAgICAgIExhbmd1YWdlTWFuYWdlci5sb2FkQnVuZGxlcygpOwogICAgICB9IGVsc2UgewogICAgICAgIExhbmd1YWdlTWFuYWdlci5wcmVwYXJlKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIHRoaXMuYml0bWFwID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvUGljdHVyZXMvIiArIFJlY29yZE1hbmFnZXIuc3lzdGVtLnRpdGxlR3JhcGhpYy5uYW1lKTsKICAgIH07CgogICAgU2NlbmVfVGl0bGUucHJvdG90eXBlLnByZXBhcmVWaXN1YWwgPSBmdW5jdGlvbigpIHsKICAgICAgdmFyIHNjYWxlLCB2b2NhYiwKICAgICAgICBfdGhpcyA9IHRoaXM7CiAgICAgIHNjYWxlID0gV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgIHZvY2FiID0gUmVjb3JkTWFuYWdlci52b2NhYnVsYXJ5OwogICAgICB0aGlzLndpbmRvdyA9IG5ldyBXaW5kb3dfU2VsZWN0aW9uKDEwLCAxMCwgMSwgW1tsY3Modm9jYWIudGl0bGVTY3JlZW4ubmV3R2FtZSldLCBbbGNzKHZvY2FiLnRpdGxlU2NyZWVuWyJjb250aW51ZSJdKV0sIFsiU2V0dGluZ3MiXSwgW2xjcyh2b2NhYi50aXRsZVNjcmVlbi5lbmRHYW1lKV1dLCAyMDAgKiBzY2FsZSwgMzIgKiBzY2FsZSk7CiAgICAgIHRoaXMud2luZG93LnggPSAoR3JhcGhpY3Mud2lkdGggLSB0aGlzLndpbmRvdy53aWR0aCkgLyAyOwogICAgICB0aGlzLndpbmRvdy55ID0gR3JhcGhpY3MuaGVpZ2h0IC0gdGhpcy53aW5kb3cuaGVpZ2h0IC0gR3JhcGhpY3MuaGVpZ2h0IC8gODsKICAgICAgdGhpcy53aW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSBmdW5jdGlvbigpIHsKICAgICAgICByZXR1cm4gX3RoaXMuZXhlY3V0ZVNlbGVjdGVkQ29tbWFuZCgpOwogICAgICB9OwogICAgICB0aGlzLndpbmRvdy52YWxpZGF0ZUNlbGwgPSBmdW5jdGlvbih4LCB5KSB7CiAgICAgICAgaWYgKHkgPT09IDEpIHsKICAgICAgICAgIHJldHVybiBHYW1lTWFuYWdlci5oYXNTYXZlR2FtZXMoKTsKICAgICAgICB9IGVsc2UgewogICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfQogICAgICB9OwogICAgICB0aGlzLndpbmRvdy5yZWRyYXcoKTsKICAgICAgdGhpcy5zcHJpdGUgPSBuZXcgU3ByaXRlOwogICAgICB0aGlzLnNwcml0ZS5iaXRtYXAgPSB0aGlzLmJpdG1hcDsKICAgICAgdGhpcy5zcHJpdGUuc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIEdyYXBoaWNzLndpZHRoLCBHcmFwaGljcy5oZWlnaHQpOwogICAgICB0aGlzLnNwcml0ZS56ID0gLTEwMDA7CiAgICAgIHJldHVybiBBdWRpb01hbmFnZXIuY2hhbmdlTXVzaWModGhpcy50aXRsZU11c2ljLCAzMCk7CiAgICB9OwoKICAgIFNjZW5lX1RpdGxlLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgdGhpcy5zcHJpdGUudXBkYXRlKCk7CiAgICAgIHRoaXMud2luZG93LnVwZGF0ZSgpOwogICAgICBHcmFwaGljcy52aWV3cG9ydC51cGRhdGUoKTsKICAgICAgcmV0dXJuIFNjZW5lX1RpdGxlLl9fc3VwZXJfXy51cGRhdGUuY2FsbCh0aGlzKTsKICAgIH07CgogICAgU2NlbmVfVGl0bGUucHJvdG90eXBlLmV4ZWN1dGVTZWxlY3RlZENvbW1hbmQgPSBmdW5jdGlvbigpIHsKICAgICAgc3dpdGNoICh0aGlzLndpbmRvdy5zZWxlY3RlZFJvdykgewogICAgICAgIGNhc2UgMDoKICAgICAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX01hcCgpKTsKICAgICAgICBjYXNlIDE6CiAgICAgICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9Mb2FkR2FtZSgpKTsKICAgICAgICBjYXNlIDI6CiAgICAgICAgICByZXR1cm4gU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9TZXR0aW5ncygpKTsKICAgICAgICBjYXNlIDM6CiAgICAgICAgICByZXR1cm4gR2FtZU1hbmFnZXIuZXhpdCgpOwogICAgICB9CiAgICB9OwoKICAgIHJldHVybiBTY2VuZV9UaXRsZTsKCiAgfSkoU2NlbmUpOwoKICB3aW5kb3cuU2NlbmVfVGl0bGUgPSBTY2VuZV9UaXRsZTsKCn0pLmNhbGwodGhpcyk7Cg=="},{"name":"Scene_LanguageSelection","content":"IyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAgIFNjcmlwdDogU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb24KIyAgIENyZWF0ZWQgb246IDIwMTMtMTEtMDkKIwojIAlDb3B5cmlnaHQgKEMpIDIwMTMgQW5kcukgUmFkb21za2kuIEFsbCByaWdodHMgcmVzZXJ2ZWQuCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CiMKIyAJQ2xhc3M6IFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uCiMKIyAgIERlc2NyaXB0aW9uLi4uCiMKIyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09CgpjbGFzcyBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbiBleHRlbmRzIFNjZW5lCiAgICBjb25zdHJ1Y3RvcjogLT4KICAgICAgICBzdXBlcigpCiAgICAKICAgIGluaXRpYWxpemU6IC0+CiAgICAgICAgQGxhbmd1YWdlc0xvYWRlZCA9IG5vCiAgICAgICAgCiAgICAgICAgaWYgbm90ICRQQVJBTVMudGVzdD8KICAgICAgICAgICAgRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnQoIlJFU09VUkNFUyIpCiAgICAgICAgICAgIAogICAgICAgIERhdGFNYW5hZ2VyLmdldERvY3VtZW50KCJTVU1NQVJJRVMiKQogICAgICAgICAgICAKICAgICAgICBpZiBub3QgJFBBUkFNUy5iYXR0bGVUZXN0CiAgICAgICAgICAgIEdyYXBoaWNzLmZyZWV6ZSgpCiAgICBkaXNwb3NlOiAtPgogICAgICAgIGlmIG5vdCAkUEFSQU1TLmJhdHRsZVRlc3Q/CiAgICAgICAgICAgIEBpbmZvV2luZG93LmRpc3Bvc2UoKQogICAgICAgICAgICBAd2luZG93LmRpc3Bvc2UoKQogICAgICAgICAgICBAc3ByaXRlLmRpc3Bvc2UoKQogICAgICAgIAogICAgcHJlcGFyZURhdGE6IC0+CiAgICAgICAgUmVjb3JkTWFuYWdlci5sb2FkKCkKICAgICAgICBAYml0bWFwID0gbnVsbCNSZXNvdXJjZU1hbmFnZXIuZ2V0Qml0bWFwKCJHcmFwaGljcy9Lb3J0ZVhfVGl0bGUiKQogICAgICAgIAogICAgICAgIGlmIEBsYW5ndWFnZXNMb2FkZWQKICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmxvYWRGb250cygpCiAgICAgICAgICAgIFJlY29yZE1hbmFnZXIucHJlcGFyZSgpCiAgICAgICAgICAgIExhbmd1YWdlTWFuYWdlci5pbml0aWFsaXplKCkKICAgICAgICAgICAgR2FtZU1hbmFnZXIud2luZG93U2tpbiA9IFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzLyN7UmVjb3JkTWFuYWdlci5zeXN0ZW0ud2luZG93U2tpbkdyYXBoaWMubmFtZX0iKQogICAgICAgICAgICBHYW1lTWFuYWdlci53aW5kb3dTa2luVG9uZSA9IG5ldyBUb25lKDAsIDUwLCAxMDAsIDApCiAgICAgICAgZWxzZQogICAgICAgICAgICBEYXRhTWFuYWdlci5nZXREb2N1bWVudHNCeVR5cGUoImxhbmd1YWdlX3Byb2ZpbGUiKQogICAgICAgICAgICBEYXRhTWFuYWdlci5nZXREb2N1bWVudHNCeVR5cGUoImdsb2JhbF9tYXBfZXZlbnQiKQogICAgICAgIAogICAgICAgIAogICAgICAgIAogICAgICAgIGlmIEBsYW5ndWFnZXNMb2FkZWQKICAgICAgICAgICAgZm9yIGxhbmd1YWdlIGluIExhbmd1YWdlTWFuYWdlci5sYW5ndWFnZXMKICAgICAgICAgICAgICAgIGlmIGxhbmd1YWdlLmljb24/IGFuZCBsYW5ndWFnZS5pY29uLm5hbWU/IGFuZCBsYW5ndWFnZS5pY29uLm5hbWUubGVuZ3RoID4gMAogICAgICAgICAgICAgICAgICAgIFJlc291cmNlTWFuYWdlci5nZXRCaXRtYXAoIkdyYXBoaWNzL0ljb25zLyN7bGFuZ3VhZ2UuaWNvbi5uYW1lfSIpCiAgICAgICAgICAgIEZvbnRzLmluaXRpYWxpemUoKQogICAgICAgIEBsYW5ndWFnZXNMb2FkZWQgPSB5ZXMKICAgICAgICAKICAgIHByZXBhcmVWaXN1YWw6IC0+CiAgICAgIyAgIEBzcHJpdGUuYml0bWFwID0gQGJpdG1hcAogICAgICMgICBAc3ByaXRlLnNyY1JlY3QgPSBuZXcgUmVjdCgwLCAwLCBAYml0bWFwLndpZHRoLCBAYml0bWFwLmhlaWdodCkKICAgICAgICAKICAgICAgICAKICAgICAgICBpZiAkUEFSQU1TLmJhdHRsZVRlc3Q/CiAgICAgICAgICAgIExhbmd1YWdlTWFuYWdlci5zZWxlY3RMYW5ndWFnZShMYW5ndWFnZU1hbmFnZXIubGFuZ3VhZ2VzWzBdKQogICAgICAgICAgICBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX0JhdHRsZVRlc3QoKSkKICAgICAgICBlbHNlCiAgICAgICAgICAgIEB3aW5kb3cgPSBuZXcgV2luZG93X0xhbmd1YWdlKDAsIDAsIExhbmd1YWdlTWFuYWdlci5sYW5ndWFnZXMpCiAgICAgICAgICAgIGhlaWdodCA9IEB3aW5kb3cuaGVpZ2h0ICsgNDQgKiBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgICAgICBAd2luZG93LnggPSAoR3JhcGhpY3Mud2lkdGggLSBAd2luZG93LndpZHRoKSAvIDIKICAgICAgICAgICAgQHdpbmRvdy55ID0gKEdyYXBoaWNzLmhlaWdodCAtIGhlaWdodCkgLyAyICsgNDQgKiBXaW5kb3dfQmFzZS5zY2FsZQogICAgICAgICAgICBAd2luZG93Lm9uU2VsZWN0aW9uQ2hhbmdlID0gKHNlbmRlciwgY2VsbCkgPT4gQG9uU2VsZWN0aW9uQ2hhbmdlKGNlbGwpCiAgICAgICAgICAgIEB3aW5kb3cub25TZWxlY3Rpb25BY2NlcHQgPSAoc2VuZGVyLCBjZWxsKSA9PiBAb25TZWxlY3Rpb25BY2NlcHQoY2VsbCkKICAgICAgICAgICAgCiAgICAgICAgICAgIEBpbmZvV2luZG93ID0gbmV3IFdpbmRvd19UZXh0KEB3aW5kb3cueCwgQHdpbmRvdy55IC0gNDQgKiBXaW5kb3dfQmFzZS5zY2FsZSwgQHdpbmRvdy53aWR0aCwgNDQgKiBXaW5kb3dfQmFzZS5zY2FsZSkKICAgICAgICAgICAgQGluZm9XaW5kb3cudGV4dCA9ICJQbGVhc2Ugc2VsZWN0IHlvdXIgbGFuZ3VhZ2UiCiAgICAgICAgICAgIEBpbmZvV2luZG93LnJlZHJhdygpCiAgICAgICAgICAgIEB3aW5kb3cucmVkcmF3KCkKICAgICAgICAgICAgQHNwcml0ZSA9IG5ldyBTcHJpdGUKICAgICAgICAgICAgQHNwcml0ZS5iaXRtYXAgPSBAYml0bWFwCiAgICAgICAgICAgIEBzcHJpdGUuc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIDY0MCwgNDgwKQogICAgICAgICAgICBAc3ByaXRlLnogPSAtMTAwMAogICAgICAgICAgICBHcmFwaGljcy50cmFuc2l0aW9uKDIwKQogICAgICAgICAgICAKICAgIHVwZGF0ZTogLT4KICAgICAgICAKICAgICAgICBpZiBub3QgJFBBUkFNUy5iYXR0bGVUZXN0PwogICAgICAgICAgICBAc3ByaXRlLnVwZGF0ZSgpCiAgICAgICAgICAgIEB3aW5kb3cudXBkYXRlKCkKICAgICAgICAgICAgR3JhcGhpY3Mudmlld3BvcnQudXBkYXRlKCkKICAgICAgICAKICAgICAgICAKICAgICAgICBzdXBlcigpCiAgICAgICAgCiAgICBvblNlbGVjdGlvbkNoYW5nZTogKGNlbGwpIC0+CiAgICBvblNlbGVjdGlvbkFjY2VwdDogKGNlbGwpIC0+CiAgICAgICAgTGFuZ3VhZ2VNYW5hZ2VyLnNlbGVjdExhbmd1YWdlKGNlbGwpCiAgICAgICAgU2NlbmVNYW5hZ2VyLnN3aXRjaFRvKG5ldyBTY2VuZV9UaXRsZSgpKQogICAgICAgIAogICAgCiAgCgp3aW5kb3cuU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb24gPSBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbg==","compiledContent":"KGZ1bmN0aW9uKCkgewogIHZhciBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbiwKICAgIF9faGFzUHJvcCA9IHt9Lmhhc093blByb3BlcnR5LAogICAgX19leHRlbmRzID0gZnVuY3Rpb24oY2hpbGQsIHBhcmVudCkgeyBmb3IgKHZhciBrZXkgaW4gcGFyZW50KSB7IGlmIChfX2hhc1Byb3AuY2FsbChwYXJlbnQsIGtleSkpIGNoaWxkW2tleV0gPSBwYXJlbnRba2V5XTsgfSBmdW5jdGlvbiBjdG9yKCkgeyB0aGlzLmNvbnN0cnVjdG9yID0gY2hpbGQ7IH0gY3Rvci5wcm90b3R5cGUgPSBwYXJlbnQucHJvdG90eXBlOyBjaGlsZC5wcm90b3R5cGUgPSBuZXcgY3RvcigpOyBjaGlsZC5fX3N1cGVyX18gPSBwYXJlbnQucHJvdG90eXBlOyByZXR1cm4gY2hpbGQ7IH07CgogIFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uID0gKGZ1bmN0aW9uKF9zdXBlcikgewogICAgX19leHRlbmRzKFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uLCBfc3VwZXIpOwoKICAgIGZ1bmN0aW9uIFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uKCkgewogICAgICBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbi5fX3N1cGVyX18uY29uc3RydWN0b3IuY2FsbCh0aGlzKTsKICAgIH0KCiAgICBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbi5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uKCkgewogICAgICB0aGlzLmxhbmd1YWdlc0xvYWRlZCA9IGZhbHNlOwogICAgICBpZiAoJFBBUkFNUy50ZXN0ID09IG51bGwpIHsKICAgICAgICBEYXRhTWFuYWdlci5nZXREb2N1bWVudCgiUkVTT1VSQ0VTIik7CiAgICAgIH0KICAgICAgRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnQoIlNVTU1BUklFUyIpOwogICAgICBpZiAoISRQQVJBTVMuYmF0dGxlVGVzdCkgewogICAgICAgIHJldHVybiBHcmFwaGljcy5mcmVlemUoKTsKICAgICAgfQogICAgfTsKCiAgICBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbi5wcm90b3R5cGUuZGlzcG9zZSA9IGZ1bmN0aW9uKCkgewogICAgICBpZiAoJFBBUkFNUy5iYXR0bGVUZXN0ID09IG51bGwpIHsKICAgICAgICB0aGlzLmluZm9XaW5kb3cuZGlzcG9zZSgpOwogICAgICAgIHRoaXMud2luZG93LmRpc3Bvc2UoKTsKICAgICAgICByZXR1cm4gdGhpcy5zcHJpdGUuZGlzcG9zZSgpOwogICAgICB9CiAgICB9OwoKICAgIFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uLnByb3RvdHlwZS5wcmVwYXJlRGF0YSA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgbGFuZ3VhZ2UsIF9pLCBfbGVuLCBfcmVmOwogICAgICBSZWNvcmRNYW5hZ2VyLmxvYWQoKTsKICAgICAgdGhpcy5iaXRtYXAgPSBudWxsOwogICAgICBpZiAodGhpcy5sYW5ndWFnZXNMb2FkZWQpIHsKICAgICAgICBSZXNvdXJjZU1hbmFnZXIubG9hZEZvbnRzKCk7CiAgICAgICAgUmVjb3JkTWFuYWdlci5wcmVwYXJlKCk7CiAgICAgICAgTGFuZ3VhZ2VNYW5hZ2VyLmluaXRpYWxpemUoKTsKICAgICAgICBHYW1lTWFuYWdlci53aW5kb3dTa2luID0gUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvIiArIFJlY29yZE1hbmFnZXIuc3lzdGVtLndpbmRvd1NraW5HcmFwaGljLm5hbWUpOwogICAgICAgIEdhbWVNYW5hZ2VyLndpbmRvd1NraW5Ub25lID0gbmV3IFRvbmUoMCwgNTAsIDEwMCwgMCk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnRzQnlUeXBlKCJsYW5ndWFnZV9wcm9maWxlIik7CiAgICAgICAgRGF0YU1hbmFnZXIuZ2V0RG9jdW1lbnRzQnlUeXBlKCJnbG9iYWxfbWFwX2V2ZW50Iik7CiAgICAgIH0KICAgICAgaWYgKHRoaXMubGFuZ3VhZ2VzTG9hZGVkKSB7CiAgICAgICAgX3JlZiA9IExhbmd1YWdlTWFuYWdlci5sYW5ndWFnZXM7CiAgICAgICAgZm9yIChfaSA9IDAsIF9sZW4gPSBfcmVmLmxlbmd0aDsgX2kgPCBfbGVuOyBfaSsrKSB7CiAgICAgICAgICBsYW5ndWFnZSA9IF9yZWZbX2ldOwogICAgICAgICAgaWYgKChsYW5ndWFnZS5pY29uICE9IG51bGwpICYmIChsYW5ndWFnZS5pY29uLm5hbWUgIT0gbnVsbCkgJiYgbGFuZ3VhZ2UuaWNvbi5uYW1lLmxlbmd0aCA+IDApIHsKICAgICAgICAgICAgUmVzb3VyY2VNYW5hZ2VyLmdldEJpdG1hcCgiR3JhcGhpY3MvSWNvbnMvIiArIGxhbmd1YWdlLmljb24ubmFtZSk7CiAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIEZvbnRzLmluaXRpYWxpemUoKTsKICAgICAgfQogICAgICByZXR1cm4gdGhpcy5sYW5ndWFnZXNMb2FkZWQgPSB0cnVlOwogICAgfTsKCiAgICBTY2VuZV9MYW5ndWFnZVNlbGVjdGlvbi5wcm90b3R5cGUucHJlcGFyZVZpc3VhbCA9IGZ1bmN0aW9uKCkgewogICAgICB2YXIgaGVpZ2h0LAogICAgICAgIF90aGlzID0gdGhpczsKICAgICAgaWYgKCRQQVJBTVMuYmF0dGxlVGVzdCAhPSBudWxsKSB7CiAgICAgICAgTGFuZ3VhZ2VNYW5hZ2VyLnNlbGVjdExhbmd1YWdlKExhbmd1YWdlTWFuYWdlci5sYW5ndWFnZXNbMF0pOwogICAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX0JhdHRsZVRlc3QoKSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgdGhpcy53aW5kb3cgPSBuZXcgV2luZG93X0xhbmd1YWdlKDAsIDAsIExhbmd1YWdlTWFuYWdlci5sYW5ndWFnZXMpOwogICAgICAgIGhlaWdodCA9IHRoaXMud2luZG93LmhlaWdodCArIDQ0ICogV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgICAgdGhpcy53aW5kb3cueCA9IChHcmFwaGljcy53aWR0aCAtIHRoaXMud2luZG93LndpZHRoKSAvIDI7CiAgICAgICAgdGhpcy53aW5kb3cueSA9IChHcmFwaGljcy5oZWlnaHQgLSBoZWlnaHQpIC8gMiArIDQ0ICogV2luZG93X0Jhc2Uuc2NhbGU7CiAgICAgICAgdGhpcy53aW5kb3cub25TZWxlY3Rpb25DaGFuZ2UgPSBmdW5jdGlvbihzZW5kZXIsIGNlbGwpIHsKICAgICAgICAgIHJldHVybiBfdGhpcy5vblNlbGVjdGlvbkNoYW5nZShjZWxsKTsKICAgICAgICB9OwogICAgICAgIHRoaXMud2luZG93Lm9uU2VsZWN0aW9uQWNjZXB0ID0gZnVuY3Rpb24oc2VuZGVyLCBjZWxsKSB7CiAgICAgICAgICByZXR1cm4gX3RoaXMub25TZWxlY3Rpb25BY2NlcHQoY2VsbCk7CiAgICAgICAgfTsKICAgICAgICB0aGlzLmluZm9XaW5kb3cgPSBuZXcgV2luZG93X1RleHQodGhpcy53aW5kb3cueCwgdGhpcy53aW5kb3cueSAtIDQ0ICogV2luZG93X0Jhc2Uuc2NhbGUsIHRoaXMud2luZG93LndpZHRoLCA0NCAqIFdpbmRvd19CYXNlLnNjYWxlKTsKICAgICAgICB0aGlzLmluZm9XaW5kb3cudGV4dCA9ICJQbGVhc2Ugc2VsZWN0IHlvdXIgbGFuZ3VhZ2UiOwogICAgICAgIHRoaXMuaW5mb1dpbmRvdy5yZWRyYXcoKTsKICAgICAgICB0aGlzLndpbmRvdy5yZWRyYXcoKTsKICAgICAgICB0aGlzLnNwcml0ZSA9IG5ldyBTcHJpdGU7CiAgICAgICAgdGhpcy5zcHJpdGUuYml0bWFwID0gdGhpcy5iaXRtYXA7CiAgICAgICAgdGhpcy5zcHJpdGUuc3JjUmVjdCA9IG5ldyBSZWN0KDAsIDAsIDY0MCwgNDgwKTsKICAgICAgICB0aGlzLnNwcml0ZS56ID0gLTEwMDA7CiAgICAgICAgcmV0dXJuIEdyYXBoaWNzLnRyYW5zaXRpb24oMjApOwogICAgICB9CiAgICB9OwoKICAgIFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uLnByb3RvdHlwZS51cGRhdGUgPSBmdW5jdGlvbigpIHsKICAgICAgaWYgKCRQQVJBTVMuYmF0dGxlVGVzdCA9PSBudWxsKSB7CiAgICAgICAgdGhpcy5zcHJpdGUudXBkYXRlKCk7CiAgICAgICAgdGhpcy53aW5kb3cudXBkYXRlKCk7CiAgICAgICAgR3JhcGhpY3Mudmlld3BvcnQudXBkYXRlKCk7CiAgICAgIH0KICAgICAgcmV0dXJuIFNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uLl9fc3VwZXJfXy51cGRhdGUuY2FsbCh0aGlzKTsKICAgIH07CgogICAgU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb24ucHJvdG90eXBlLm9uU2VsZWN0aW9uQ2hhbmdlID0gZnVuY3Rpb24oY2VsbCkge307CgogICAgU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb24ucHJvdG90eXBlLm9uU2VsZWN0aW9uQWNjZXB0ID0gZnVuY3Rpb24oY2VsbCkgewogICAgICBMYW5ndWFnZU1hbmFnZXIuc2VsZWN0TGFuZ3VhZ2UoY2VsbCk7CiAgICAgIHJldHVybiBTY2VuZU1hbmFnZXIuc3dpdGNoVG8obmV3IFNjZW5lX1RpdGxlKCkpOwogICAgfTsKCiAgICByZXR1cm4gU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb247CgogIH0pKFNjZW5lKTsKCiAgd2luZG93LlNjZW5lX0xhbmd1YWdlU2VsZWN0aW9uID0gU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb247Cgp9KS5jYWxsKHRoaXMpOwo="},{"name":"CommandInterpreter","content":"","compiledContent":""},{"name":"Main","content":"# ===================================================================\n#\n#   Script: Main\n#   Created on: 2013-05-12                       1\n#\n# ===================================================================\n#\n#   Entry point of your game.\n#\n# ===================================================================\nif not window.$PARAMS? then window.$PARAMS = { resolution: { width: 640, height: 480 }}\n\n$(document).ready ->   \n    settings = GameStorage.getObject(\"settings\") || [0,0]\n    \n    if settings[0] == 1\n        window.Graphics = new Graphics_Canvas()\n        window.Renderer = window.Renderer_Canvas\n    else\n        window.Graphics = new Graphics_OpenGL()\n        window.Renderer = window.Renderer_OpenGL\n        \n    Texture2D.filter = settings[1]\n    \n    try\n        Graphics.initialize($PARAMS.resolution.width, $PARAMS.resolution.height, document.body)\n    catch # Canvas Fallback\n        window.Graphics = new Graphics_Canvas()\n        window.Renderer = window.Renderer_Canvas\n        Graphics.initialize($PARAMS.resolution.width, $PARAMS.resolution.height, document.body)\n        settings[0] = 1\n        GameStorage.setObject(\"settings\", settings)\n        \n    Input.initialize()\n    \n    Font.defaultSize = if Graphics.width == 320 then 9 else 18\n    Window_Base.scale = if Graphics.width == 320 then 0.5 else 1.0\n    Window.padding = if Graphics.width == 320 then 6 else 12\n    Windowset_Base.scale = if Graphics.width == 320 then 0.5 else 1.0\n  \n    #GameStorage.clear()\n\n    SceneManager.switchTo(new Scene_LanguageSelection())\n    window.startTime = new Date()\n    Graphics.onEachFrame => \n        SceneManager.update()\n        Graphics.frameCount++\n \n","compiledContent":"KGZ1bmN0aW9uKCkgewogIGlmICh3aW5kb3cuJFBBUkFNUyA9PSBudWxsKSB7CiAgICB3aW5kb3cuJFBBUkFNUyA9IHsKICAgICAgcmVzb2x1dGlvbjogewogICAgICAgIHdpZHRoOiA2NDAsCiAgICAgICAgaGVpZ2h0OiA0ODAKICAgICAgfQogICAgfTsKICB9CgogICQoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uKCkgewogICAgdmFyIHNldHRpbmdzLAogICAgICBfdGhpcyA9IHRoaXM7CiAgICBzZXR0aW5ncyA9IEdhbWVTdG9yYWdlLmdldE9iamVjdCgic2V0dGluZ3MiKSB8fCBbMCwgMF07CiAgICBpZiAoc2V0dGluZ3NbMF0gPT09IDEpIHsKICAgICAgd2luZG93LkdyYXBoaWNzID0gbmV3IEdyYXBoaWNzX0NhbnZhcygpOwogICAgICB3aW5kb3cuUmVuZGVyZXIgPSB3aW5kb3cuUmVuZGVyZXJfQ2FudmFzOwogICAgfSBlbHNlIHsKICAgICAgd2luZG93LkdyYXBoaWNzID0gbmV3IEdyYXBoaWNzX09wZW5HTCgpOwogICAgICB3aW5kb3cuUmVuZGVyZXIgPSB3aW5kb3cuUmVuZGVyZXJfT3BlbkdMOwogICAgfQogICAgVGV4dHVyZTJELmZpbHRlciA9IHNldHRpbmdzWzFdOwogICAgdHJ5IHsKICAgICAgR3JhcGhpY3MuaW5pdGlhbGl6ZSgkUEFSQU1TLnJlc29sdXRpb24ud2lkdGgsICRQQVJBTVMucmVzb2x1dGlvbi5oZWlnaHQsIGRvY3VtZW50LmJvZHkpOwogICAgfSBjYXRjaCAoX2Vycm9yKSB7CiAgICAgIHdpbmRvdy5HcmFwaGljcyA9IG5ldyBHcmFwaGljc19DYW52YXMoKTsKICAgICAgd2luZG93LlJlbmRlcmVyID0gd2luZG93LlJlbmRlcmVyX0NhbnZhczsKICAgICAgR3JhcGhpY3MuaW5pdGlhbGl6ZSgkUEFSQU1TLnJlc29sdXRpb24ud2lkdGgsICRQQVJBTVMucmVzb2x1dGlvbi5oZWlnaHQsIGRvY3VtZW50LmJvZHkpOwogICAgICBzZXR0aW5nc1swXSA9IDE7CiAgICAgIEdhbWVTdG9yYWdlLnNldE9iamVjdCgic2V0dGluZ3MiLCBzZXR0aW5ncyk7CiAgICB9CiAgICBJbnB1dC5pbml0aWFsaXplKCk7CiAgICBGb250LmRlZmF1bHRTaXplID0gR3JhcGhpY3Mud2lkdGggPT09IDMyMCA/IDkgOiAxODsKICAgIFdpbmRvd19CYXNlLnNjYWxlID0gR3JhcGhpY3Mud2lkdGggPT09IDMyMCA/IDAuNSA6IDEuMDsKICAgIFdpbmRvdy5wYWRkaW5nID0gR3JhcGhpY3Mud2lkdGggPT09IDMyMCA/IDYgOiAxMjsKICAgIFdpbmRvd3NldF9CYXNlLnNjYWxlID0gR3JhcGhpY3Mud2lkdGggPT09IDMyMCA/IDAuNSA6IDEuMDsKICAgIFNjZW5lTWFuYWdlci5zd2l0Y2hUbyhuZXcgU2NlbmVfTGFuZ3VhZ2VTZWxlY3Rpb24oKSk7CiAgICB3aW5kb3cuc3RhcnRUaW1lID0gbmV3IERhdGUoKTsKICAgIHJldHVybiBHcmFwaGljcy5vbkVhY2hGcmFtZShmdW5jdGlvbigpIHsKICAgICAgU2NlbmVNYW5hZ2VyLnVwZGF0ZSgpOwogICAgICByZXR1cm4gR3JhcGhpY3MuZnJhbWVDb3VudCsrOwogICAgfSk7CiAgfSk7Cgp9KS5jYWxsKHRoaXMpOwo=","decoded":true}]},"summary":["name","type"]}