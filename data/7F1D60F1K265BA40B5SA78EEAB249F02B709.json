{"uid":"7F1D60F1K265BA40B5SA78EEAB249F02B709","isLoaded":true,"lastModificationTime":1421095528911,"items":{"name":"DataManager","type":"game_script","order":6,"content":"# ===================================================================\n#\n#   Script: DataManager\n#\n#   $$COPYRIGHT$$\n#\n# ===================================================================\nclass DataManager\n    ###*\n    * Manages the game's data like loading documents. Documents are stored\n    * in the data folder of the game in JSON format. The UID is used as the file-name.\n    * A document has the following structure:<br>\n    * <br>\n    * UID - Unique Identifier<br>\n    * Items -> An object containing all the items/fields of the document.<br>\n    * Items.Type -> The type of the document<br>\n    * Items.Name -> The name of the document<br>\n    * <br>\n    * @module gs\n    * @class DataManager\n    * @memberof gs\n    * @constructor\n    ###\n    constructor: ->\n        ###*\n        * Stores all documents by UID.\n        * @property documentsByUid\n        * @type gs.Document[]\n        ### \n        @documentsByUid = {}\n        \n        ###*\n        * Stores all documents.\n        * @property documents\n        * @type gs.Document[]\n        ###\n        @documents = []\n        \n        ###*\n        * Indiciates if all requested documents are loaded.\n        * @property documentsLoaded\n        * @type boolean\n        ###\n        @documentsLoaded = true\n        \n        ###*\n        * @property events\n        * @type gs.EventEmitter\n        ###\n        @events = new gs.EventEmitter()\n        \n\n    ###*\n    * Unloads all documents with a specified type.\n    *\n    * @method disposeDocumentsByType\n    * @param {String} type - The document type.\n    ###  \n    disposeDocumentsByType: (type) ->\n        i = 0\n        \n        while i < @documents.length\n            d = @documents[i]\n            if d && d.items && d.items.type == type\n            \t@documents.remove(d)\n            \t@documentsByUid[d.uid] = null\n            \tGS.dataCache[d.uid] = null\n            \tdelete @documentsByUid[d.uid]\n            \tdelete GS.dataCache[d.uid]\n            \ti--;\n            i++\n            \n        return null\n    \t\t\n\t\n    ###*\n    * Gets all documents with a specified type.\n    *\n    * @method getDocumentsByType\n    * @param {String} type - The document type.\n    * @return {gs.Document[]} The documents.\n    ###  \n    getDocumentsByType: (type) ->\n        result = []\n        \n        for uid of @summaries.items\n            summary = @summaries.items[uid]\n            if summary.items? and summary.items.type == type\n                result.push(@getDocument(uid))\n\n        return result\n        \n    ###*\n    * Gets the first document with the specified type.\n    *\n    * @method getDocumentByType\n    * @param {String} type - The document type.\n    * @return {gs.Document} The document or <b>null</b> if a document with the specified type doesn't exist.\n    ###  \n    getDocumentByType: (type) ->\n        result = null\n        \n        for uid of @summaries.items\n            summary = @summaries.items[uid]\n            if summary.items? and summary.items.type == type\n                result = @getDocument(uid)\n                break\n\n        return result\n        \n    ###*\n    * Gets a document by its UID.\n    *\n    * @method getDocument\n    * @param {String} uid - The UID of the document to get.\n    * @return {gs.Document} The document or <b>null</b> if a document with the specified UID doesn't exist.\n    ###  \n    getDocument: (uid) ->\n        result = @documentsByUid[uid]\n    \n        if not result?\n            gs.Data.load(uid, (dataObject, error) =>\n                if !error\n                    r = @documentsByUid[dataObject.uid]\n                    r.items = dataObject.items;\n                    r.loaded = true;\n            )\n            \n            if @summaries and @summaries.items\n                summary = @summaries.items[uid]\n                if summary\n                    result = { uid: uid, items: summary.items, loaded: false }\n            else\n                result = { uid: uid, loaded: false }\n            \n            if result\n                @documentsByUid[uid] = result\n                @documents.push(result)\n                @documentsLoaded = false\n            \n            if uid == \"SUMMARIES\" then @summaries = result\n    \n        return result\n        \n    \n    ###*\n    * Gets a document by its UID. If the document isn't already loaded this method\n    * only returned document only contains summary data.\n    *\n    * @method getDocumentSummary\n    * @param {String} uid - The UID of the document to get.\n    * @return {gs.Document} The document or <b>null</b> if a document with the specified UID doesn't exist.\n    ### \n    getDocumentSummary: (uid) -> @summaries.items[uid]\n    \n    ###*\n    * Updates the loading process of documents.\n    *\n    * @method update\n    ### \n    update: ->\n        if not @documentsLoaded\n            @documentsLoaded = true\n    \n            for i in [0...@documents.length]\n                if not @documents[i].loaded\n                    @documentsLoaded = false\n                    break\n                    \n            if @documentsLoaded\n                @events.emit(\"loaded\", this)\n        \n        return null\n\nwindow.DataManager = DataManager\ngs.DataManager = DataManager","compiledContent":"var DataManager;\n\nDataManager = (function() {\n\n  /**\n  * Manages the game's data like loading documents. Documents are stored\n  * in the data folder of the game in JSON format. The UID is used as the file-name.\n  * A document has the following structure:<br>\n  * <br>\n  * UID - Unique Identifier<br>\n  * Items -> An object containing all the items/fields of the document.<br>\n  * Items.Type -> The type of the document<br>\n  * Items.Name -> The name of the document<br>\n  * <br>\n  * @module gs\n  * @class DataManager\n  * @memberof gs\n  * @constructor\n   */\n  function DataManager() {\n\n    /**\n    * Stores all documents by UID.\n    * @property documentsByUid\n    * @type gs.Document[]\n     */\n    this.documentsByUid = {};\n\n    /**\n    * Stores all documents.\n    * @property documents\n    * @type gs.Document[]\n     */\n    this.documents = [];\n\n    /**\n    * Indiciates if all requested documents are loaded.\n    * @property documentsLoaded\n    * @type boolean\n     */\n    this.documentsLoaded = true;\n\n    /**\n    * @property events\n    * @type gs.EventEmitter\n     */\n    this.events = new gs.EventEmitter();\n  }\n\n\n  /**\n  * Unloads all documents with a specified type.\n  *\n  * @method disposeDocumentsByType\n  * @param {String} type - The document type.\n   */\n\n  DataManager.prototype.disposeDocumentsByType = function(type) {\n    var d, i;\n    i = 0;\n    while (i < this.documents.length) {\n      d = this.documents[i];\n      if (d && d.items && d.items.type === type) {\n        this.documents.remove(d);\n        this.documentsByUid[d.uid] = null;\n        GS.dataCache[d.uid] = null;\n        delete this.documentsByUid[d.uid];\n        delete GS.dataCache[d.uid];\n        i--;\n      }\n      i++;\n    }\n    return null;\n  };\n\n\n  /**\n  * Gets all documents with a specified type.\n  *\n  * @method getDocumentsByType\n  * @param {String} type - The document type.\n  * @return {gs.Document[]} The documents.\n   */\n\n  DataManager.prototype.getDocumentsByType = function(type) {\n    var result, summary, uid;\n    result = [];\n    for (uid in this.summaries.items) {\n      summary = this.summaries.items[uid];\n      if ((summary.items != null) && summary.items.type === type) {\n        result.push(this.getDocument(uid));\n      }\n    }\n    return result;\n  };\n\n\n  /**\n  * Gets the first document with the specified type.\n  *\n  * @method getDocumentByType\n  * @param {String} type - The document type.\n  * @return {gs.Document} The document or <b>null</b> if a document with the specified type doesn't exist.\n   */\n\n  DataManager.prototype.getDocumentByType = function(type) {\n    var result, summary, uid;\n    result = null;\n    for (uid in this.summaries.items) {\n      summary = this.summaries.items[uid];\n      if ((summary.items != null) && summary.items.type === type) {\n        result = this.getDocument(uid);\n        break;\n      }\n    }\n    return result;\n  };\n\n\n  /**\n  * Gets a document by its UID.\n  *\n  * @method getDocument\n  * @param {String} uid - The UID of the document to get.\n  * @return {gs.Document} The document or <b>null</b> if a document with the specified UID doesn't exist.\n   */\n\n  DataManager.prototype.getDocument = function(uid) {\n    var result, summary;\n    result = this.documentsByUid[uid];\n    if (result == null) {\n      gs.Data.load(uid, (function(_this) {\n        return function(dataObject, error) {\n          var r;\n          if (!error) {\n            r = _this.documentsByUid[dataObject.uid];\n            r.items = dataObject.items;\n            return r.loaded = true;\n          }\n        };\n      })(this));\n      if (this.summaries && this.summaries.items) {\n        summary = this.summaries.items[uid];\n        if (summary) {\n          result = {\n            uid: uid,\n            items: summary.items,\n            loaded: false\n          };\n        }\n      } else {\n        result = {\n          uid: uid,\n          loaded: false\n        };\n      }\n      if (result) {\n        this.documentsByUid[uid] = result;\n        this.documents.push(result);\n        this.documentsLoaded = false;\n      }\n      if (uid === \"SUMMARIES\") {\n        this.summaries = result;\n      }\n    }\n    return result;\n  };\n\n\n  /**\n  * Gets a document by its UID. If the document isn't already loaded this method\n  * only returned document only contains summary data.\n  *\n  * @method getDocumentSummary\n  * @param {String} uid - The UID of the document to get.\n  * @return {gs.Document} The document or <b>null</b> if a document with the specified UID doesn't exist.\n   */\n\n  DataManager.prototype.getDocumentSummary = function(uid) {\n    return this.summaries.items[uid];\n  };\n\n\n  /**\n  * Updates the loading process of documents.\n  *\n  * @method update\n   */\n\n  DataManager.prototype.update = function() {\n    var i, j, ref;\n    if (!this.documentsLoaded) {\n      this.documentsLoaded = true;\n      for (i = j = 0, ref = this.documents.length; 0 <= ref ? j < ref : j > ref; i = 0 <= ref ? ++j : --j) {\n        if (!this.documents[i].loaded) {\n          this.documentsLoaded = false;\n          break;\n        }\n      }\n      if (this.documentsLoaded) {\n        this.events.emit(\"loaded\", this);\n      }\n    }\n    return null;\n  };\n\n  return DataManager;\n\n})();\n\nwindow.DataManager = DataManager;\n\ngs.DataManager = DataManager;\n\n//# sourceMappingURL=data:application/json;base64,\n//# sourceURL=DataManager_85.js","parentId":"C0268943K60B3A42B7SA6F1EDDCF2F642FD7"},"summary":["name","type","order"]}